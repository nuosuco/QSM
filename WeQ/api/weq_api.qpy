#!/usr/bin/env qpy
# -*- coding: utf-8 -*-

"""
量子基因网络引擎(WeQ) - API服务
为量子社交服务提供API接口
"""

# 量子基因编码
QG-API-WEQ-SOCIAL-A1B3

# 量子纠缠信道
@quantum_entangle {
  channel_id: "QE-API-WEQ-20240406",
  state: "ACTIVE",
  strength: 0.95,
  objects: [
    "QSM/api/qsm_api.qpy",
    "WeQ/models/weq_model.qpy",
    "SOM/api/som_api.qpy"
  ]
}

@imports
  standard: [os, sys, json, logging, time, datetime]
  quantum_web: [flask, request, jsonify, Blueprint]
  quantum_typing: [Dict, List, Any, Optional, Union, Tuple]
  quantum_models: [
    "WeQ/models/weq_model.qpy" as weq_model
  ]

@constants
  # 目录设置
  ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
  LOG_DIR = os.path.join(ROOT_DIR, '.logs')
  
  # API版本
  API_VERSION = "1.0.0"
  
  # 服务配置
  DEFAULT_PORT = 5001
  
  # 情绪评分阈值
  EMOTION_THRESHOLD = 0.7

@initialization
  # 创建日志目录
  os.makedirs(LOG_DIR, exist_ok=True)
  
  # 配置日志
  logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
      logging.FileHandler(os.path.join(LOG_DIR, 'weq_api.log')),
      logging.StreamHandler()
    ]
  )
  logger = logging.getLogger('WeQ-API')
  
  # 创建Blueprint
  weq_bp = Blueprint('weq_api', __name__)
  
  # 默认WeQ模型
  default_model = weq_model.WeQuantumModel()

@function get_blueprint():
  """获取WeQ API Blueprint
  
  Returns:
      Blueprint: WeQ API Blueprint
  """
  return weq_bp

@function get_status():
  """获取WeQ状态
  
  Returns:
      Dict: WeQ状态信息
  """
  return {
    'status': 'online',
    'version': API_VERSION,
    'timestamp': datetime.datetime.now().isoformat(),
    'model': {
      'is_initialized': default_model.is_initialized(),
      'users_count': len(getattr(default_model, 'users', {})),
      'emotion_dimensions': getattr(default_model, 'emotion_dimensions', 0)
    }
  }

@route weq_bp GET "/"
def weq_index():
  """WeQ API根端点"""
  return jsonify({
    'name': 'WeQ API',
    'version': API_VERSION,
    'description': '量子基因网络引擎API服务',
    'timestamp': datetime.datetime.now().isoformat(),
    'endpoints': {
      'status': '/api/weq/status',
      'users': '/api/weq/users',
      'emotions': '/api/weq/emotions',
      'messages': '/api/weq/messages',
      'match': '/api/weq/match'
    }
  })

@route weq_bp GET "/status"
def weq_status():
  """获取WeQ状态"""
  return jsonify(get_status())

@route weq_bp GET "/users"
def list_users():
  """列出所有用户"""
  try:
    users = getattr(default_model, 'users', {})
    return jsonify({
      'users': [
        {
          'id': user_id,
          'name': user.get('name', ''),
          'emotion_vector': user.get('emotion_vector', []).tolist() if hasattr(user.get('emotion_vector', []), 'tolist') else user.get('emotion_vector', []),
          'created_at': user.get('created_at', '')
        }
        for user_id, user in users.items()
      ],
      'count': len(users),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"列出用户时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp POST "/users"
def create_user():
  """创建新用户"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取用户数据
    user_name = data.get('name')
    emotion_data = data.get('emotion_data')
    
    if not user_name:
      return jsonify({
        'error': '缺少用户名'
      }), 400
    
    # 创建用户
    user_id = default_model.add_user(user_name, emotion_data)
    
    return jsonify({
      'status': 'success',
      'message': '用户创建成功',
      'user_id': user_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建用户时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp GET "/users/<user_id>"
def get_user(user_id):
  """获取特定用户"""
  try:
    users = getattr(default_model, 'users', {})
    
    if user_id not in users:
      return jsonify({
        'error': '用户不存在'
      }), 404
    
    user = users[user_id]
    
    return jsonify({
      'id': user_id,
      'name': user.get('name', ''),
      'emotion_vector': user.get('emotion_vector', []).tolist() if hasattr(user.get('emotion_vector', []), 'tolist') else user.get('emotion_vector', []),
      'created_at': user.get('created_at', ''),
      'last_active': user.get('last_active', ''),
      'message_count': len(user.get('messages', [])),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"获取用户时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp PUT "/users/<user_id>/emotions"
def update_user_emotions(user_id):
  """更新用户情绪"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取情绪数据
    emotion_data = data.get('emotion_data')
    
    if not emotion_data:
      return jsonify({
        'error': '缺少情绪数据'
      }), 400
    
    # 检查用户是否存在
    users = getattr(default_model, 'users', {})
    if user_id not in users:
      return jsonify({
        'error': '用户不存在'
      }), 404
    
    # 更新用户情绪
    default_model.update_emotion_vector(user_id, emotion_data)
    
    return jsonify({
      'status': 'success',
      'message': '用户情绪更新成功',
      'user_id': user_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"更新用户情绪时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp POST "/messages"
def create_message():
  """创建新消息"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取消息数据
    sender_id = data.get('sender_id')
    content = data.get('content')
    recipient_id = data.get('recipient_id')
    
    if not sender_id or not content:
      return jsonify({
        'error': '缺少发送者ID或消息内容'
      }), 400
    
    # 检查用户是否存在
    users = getattr(default_model, 'users', {})
    if sender_id not in users:
      return jsonify({
        'error': '发送者不存在'
      }), 404
    
    if recipient_id and recipient_id not in users:
      return jsonify({
        'error': '接收者不存在'
      }), 404
    
    # 创建消息
    message_id = default_model.add_message(sender_id, content, recipient_id)
    
    return jsonify({
      'status': 'success',
      'message': '消息发送成功',
      'message_id': message_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建消息时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp GET "/messages"
def list_messages():
  """列出所有消息"""
  try:
    # 获取查询参数
    user_id = request.args.get('user_id')
    limit = int(request.args.get('limit', 100))
    
    # 获取消息
    messages = []
    
    if user_id:
      # 获取指定用户的消息
      user_messages = default_model.get_user_messages(user_id, limit)
      messages = user_messages
    else:
      # 获取所有消息
      all_messages = default_model.get_all_messages(limit)
      messages = all_messages
    
    return jsonify({
      'messages': messages,
      'count': len(messages),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"获取消息时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp GET "/match"
def match_users():
  """匹配情绪相似的用户"""
  try:
    # 获取查询参数
    user_id = request.args.get('user_id')
    limit = int(request.args.get('limit', 5))
    
    if not user_id:
      return jsonify({
        'error': '缺少用户ID'
      }), 400
    
    # 检查用户是否存在
    users = getattr(default_model, 'users', {})
    if user_id not in users:
      return jsonify({
        'error': '用户不存在'
      }), 404
    
    # 匹配用户
    matching_users = default_model.find_emotional_matches(user_id, limit)
    
    return jsonify({
      'matches': matching_users,
      'count': len(matching_users),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"匹配用户时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp GET "/complement"
def find_complement():
  """寻找情绪互补的用户"""
  try:
    # 获取查询参数
    user_id = request.args.get('user_id')
    limit = int(request.args.get('limit', 5))
    
    if not user_id:
      return jsonify({
        'error': '缺少用户ID'
      }), 400
    
    # 检查用户是否存在
    users = getattr(default_model, 'users', {})
    if user_id not in users:
      return jsonify({
        'error': '用户不存在'
      }), 404
    
    # 寻找互补用户
    complement_users = default_model.find_emotional_complement(user_id, limit)
    
    return jsonify({
      'complements': complement_users,
      'count': len(complement_users),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"寻找互补用户时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp GET "/emotions"
def get_emotions():
  """获取情绪信息"""
  try:
    # 获取情绪维度
    dimensions = getattr(default_model, 'emotion_dimensions', 0)
    
    return jsonify({
      'dimensions': dimensions,
      'threshold': EMOTION_THRESHOLD,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"获取情绪信息时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route weq_bp POST "/analyze"
def analyze_emotions():
  """分析文本情绪"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取文本数据
    text = data.get('text')
    
    if not text:
      return jsonify({
        'error': '缺少文本内容'
      }), 400
    
    # 分析情绪
    emotion_vector = default_model.analyze_text_emotion(text)
    
    return jsonify({
      'emotion_vector': emotion_vector.tolist() if hasattr(emotion_vector, 'tolist') else emotion_vector,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"分析情绪时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@function run_api_server(host='127.0.0.1', port=DEFAULT_PORT, debug=False):
  """运行API服务器
  
  Args:
      host: 主机地址
      port: 端口号
      debug: 是否启用调试模式
  """
  from flask import Flask
  
  app = Flask(__name__)
  app.register_blueprint(weq_bp, url_prefix='/api/weq')
  
  logger.info(f"启动WeQ API服务: http://{host}:{port}")
  app.run(host=host, port=port, debug=debug)

# 主函数
if __name__ == "__main__":
  run_api_server(debug=True) 