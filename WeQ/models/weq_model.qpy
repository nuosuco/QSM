#!/usr/bin/env qpy
# -*- coding: utf-8 -*-

"""
WeQ模型模块
提供量子社交模型的核心功能
"""

# 量子基因编码
QG-MODEL-WEQ-SOCIAL-A1B2

# 量子纠缠信道
@quantum_entangle
  channel_id: QE-MODEL-WEQ-20240405
  state: ACTIVE
  strength: 0.95
  objects: [
    "WeQ/api/weq_api.qpy",
    "WeQ/utils/weq_utils.qpy",
    "WeQ/services/weq_service.qpy"
  ]

@imports
  standard: [os, json, logging, time, datetime, random, uuid]
  quantum: [Dict, List, Any, Optional, Union, Path]
  quantum_math: [math]
  
@constants
  ROOT_DIR = Path(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
  LOG_DIR = ROOT_DIR / '.logs'
  MODEL_DIR = ROOT_DIR / 'WeQ' / 'models' / 'data'
  
  # 社交关系类型
  RELATION_TYPES = [
    'FRIEND',      # 朋友
    'COLLEAGUE',   # 同事
    'FAMILY',      # 家人
    'ACQUAINTANCE' # 熟人
  ]
  
  # 消息类型
  MESSAGE_TYPES = [
    'TEXT',        # 文本
    'IMAGE',       # 图片
    'VIDEO',       # 视频
    'AUDIO',       # 音频
    'FILE',        # 文件
    'QUANTUM'      # 量子消息
  ]
  
  # 情感分析类型
  EMOTION_TYPES = {
    'HAPPY': '高兴',
    'SAD': '悲伤',
    'ANGRY': '愤怒',
    'FEAR': '恐惧',
    'SURPRISE': '惊讶',
    'DISGUST': '厌恶',
    'NEUTRAL': '中性'
  }
  
@initialization
  # 创建日志目录
  LOG_DIR.mkdir(exist_ok=True)
  MODEL_DIR.mkdir(exist_ok=True, parents=True)
  
  # 配置日志
  logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - [%(levelname)s] - %(message)s',
    handlers=[
      logging.FileHandler(LOG_DIR / 'weq_model.log', mode='a', encoding='utf-8'),
      logging.StreamHandler()
    ]
  )
  logger = logging.getLogger("WeQ-MODEL")

@class QuantumUser
  @constructor(user_id: str = None, name: str = "", avatar: str = "")
    """初始化量子用户
    
    Args:
        user_id: 用户ID
        name: 用户名
        avatar: 头像
    """
    self.user_id = user_id or f"QU-{str(uuid.uuid4())[:8]}"
    self.name = name
    self.avatar = avatar
    self.created_at = datetime.now().isoformat()
    self.entangle_factor = random.uniform(0.6, 1.0)
    self.relations = {}  # 用户关系
    self.messages = []   # 消息历史
    
  @method add_relation(other_user: 'QuantumUser', relation_type: str = 'FRIEND', strength: float = 0.5) -> bool
    """添加用户关系
    
    Args:
        other_user: 另一个用户
        relation_type: 关系类型
        strength: 关系强度
        
    Returns:
        是否成功添加关系
    """
    if relation_type not in RELATION_TYPES:
      logger.warning(f"无效的关系类型: {relation_type}")
      return False
    
    # 添加关系
    self.relations[other_user.user_id] = {
      'user': other_user,
      'type': relation_type,
      'strength': max(0.0, min(1.0, strength)),
      'created_at': datetime.now().isoformat(),
      'entangled': True
    }
    
    # 互相添加关系
    if self.user_id not in other_user.relations:
      other_user.add_relation(self, relation_type, strength)
    
    return True
  
  @method send_message(to_user: 'QuantumUser', content: str, message_type: str = 'TEXT') -> Dict[str, Any]:
    """发送消息
    
    Args:
        to_user: 接收用户
        content: 消息内容
        message_type: 消息类型
        
    Returns:
        消息对象
    """
    if message_type not in MESSAGE_TYPES:
      logger.warning(f"无效的消息类型: {message_type}")
      return None
    
    # 创建消息
    message = {
      'id': f"QM-{int(time.time())}-{random.randint(1000, 9999)}",
      'from_user': self.user_id,
      'to_user': to_user.user_id,
      'content': content,
      'type': message_type,
      'timestamp': datetime.now().isoformat(),
      'entangled': True,
      'entangle_strength': self.entangle_factor * to_user.entangle_factor,
      'quantum_signature': os.urandom(16).hex()
    }
    
    # 添加到消息历史
    self.messages.append(message)
    to_user.messages.append(message)
    
    return message
  
  @method get_relations(relation_type: Optional[str] = None) -> List[Dict[str, Any]]:
    """获取用户关系
    
    Args:
        relation_type: 关系类型筛选
        
    Returns:
        关系列表
    """
    if relation_type is not None and relation_type not in RELATION_TYPES:
      logger.warning(f"无效的关系类型: {relation_type}")
      return []
    
    relations = []
    for user_id, relation in self.relations.items():
      if relation_type is None or relation['type'] == relation_type:
        relations.append(relation)
    
    return relations
  
  @method get_messages(with_user: Optional['QuantumUser'] = None) -> List[Dict[str, Any]]:
    """获取消息历史
    
    Args:
        with_user: 与特定用户的消息
        
    Returns:
        消息列表
    """
    if with_user is None:
      return self.messages
    
    messages = []
    for message in self.messages:
      if (message['from_user'] == self.user_id and message['to_user'] == with_user.user_id) or \
         (message['from_user'] == with_user.user_id and message['to_user'] == self.user_id):
        messages.append(message)
    
    return messages
  
  @method to_dict() -> Dict[str, Any]:
    """转换为字典
    
    Returns:
        用户字典表示
    """
    return {
      'user_id': self.user_id,
      'name': self.name,
      'avatar': self.avatar,
      'created_at': self.created_at,
      'entangle_factor': self.entangle_factor,
      'relations_count': len(self.relations),
      'messages_count': len(self.messages)
    }

@class WeQModel
  @constructor(name: str)
    """初始化WeQ模型
    
    Args:
        name: 模型名称
    """
    self.name = name
    self.version = '1.0.0'
    self.quantum_gene = 'QG-MODEL-WEQ-SOCIAL-A1B2'
    self.created_at = datetime.now().isoformat()
    self.users = {}  # 用户字典
    self.messages = []  # 全局消息
    self.emotion_model_loaded = False
    
    logger.info(f"创建WeQ模型: {name}")
  
  @method create_user(name: str, avatar: str = "") -> QuantumUser:
    """创建量子用户
    
    Args:
        name: 用户名
        avatar: 头像
        
    Returns:
        创建的用户
    """
    user = QuantumUser(name=name, avatar=avatar)
    self.users[user.user_id] = user
    logger.info(f"创建用户: {name} (ID: {user.user_id})")
    return user
  
  @method get_user(user_id: str) -> Optional[QuantumUser]:
    """获取用户
    
    Args:
        user_id: 用户ID
        
    Returns:
        用户对象
    """
    return self.users.get(user_id)
  
  @method analyze_emotion(text: str) -> Dict[str, Any]:
    """分析文本情感
    
    Args:
        text: 文本内容
        
    Returns:
        情感分析结果
    """
    # 模拟情感分析
    if not self.emotion_model_loaded:
      logger.info("加载情感分析模型")
      time.sleep(0.5)  # 模拟加载过程
      self.emotion_model_loaded = True
    
    # 简单情感分析
    emotions = {}
    for emotion in EMOTION_TYPES:
      emotions[emotion] = random.random()
    
    # 归一化
    total = sum(emotions.values())
    for emotion in emotions:
      emotions[emotion] /= total
    
    # 确定主要情感
    primary_emotion = max(emotions.items(), key=lambda x: x[1])
    
    return {
      'text': text,
      'emotions': emotions,
      'primary_emotion': primary_emotion[0],
      'primary_emotion_name': EMOTION_TYPES[primary_emotion[0]],
      'score': primary_emotion[1],
      'analyzed_at': datetime.now().isoformat(),
      'quantum_gene': self.quantum_gene
    }
  
  @method recommend_relations(user: QuantumUser, max_count: int = 3) -> List[Dict[str, Any]]:
    """推荐用户关系
    
    Args:
        user: 用户
        max_count: 最大推荐数量
        
    Returns:
        推荐用户列表
    """
    if not self.users or len(self.users) <= 1:
      return []
    
    # 用户已有的关系
    existing_relations = set(user.relations.keys())
    
    # 计算二度关系
    second_degree = {}
    for relation_id in existing_relations:
      relation_user = self.users[relation_id]
      for second_id in relation_user.relations:
        if second_id not in existing_relations and second_id != user.user_id:
          if second_id not in second_degree:
            second_degree[second_id] = 0
          second_degree[second_id] += 1
    
    # 按照共同关系数排序
    sorted_users = sorted(second_degree.items(), key=lambda x: x[1], reverse=True)
    
    # 构建推荐列表
    recommendations = []
    for user_id, common_count in sorted_users[:max_count]:
      recommended_user = self.users[user_id]
      recommendations.append({
        'user': recommended_user.to_dict(),
        'common_relations': common_count,
        'recommend_strength': min(1.0, 0.3 + common_count * 0.2),
        'relation_type': random.choice(RELATION_TYPES),
        'quantum_gene': self.quantum_gene
      })
    
    return recommendations
  
  @method create_quantum_message(from_user: QuantumUser, to_user: QuantumUser, content: str) -> Dict[str, Any]:
    """创建量子纠缠消息
    
    Args:
        from_user: 发送用户
        to_user: 接收用户
        content: 消息内容
        
    Returns:
        量子消息对象
    """
    # 创建量子消息
    message = from_user.send_message(to_user, content, 'QUANTUM')
    
    # 添加量子特性
    message['quantum_properties'] = {
      'entangle_strength': from_user.entangle_factor * to_user.entangle_factor,
      'emotion': self.analyze_emotion(content)['primary_emotion'],
      'quantum_state': 'ENTANGLED',
      'quantum_id': f"QID-{os.urandom(8).hex()}"
    }
    
    # 添加到全局消息
    self.messages.append(message)
    
    logger.info(f"创建量子消息: {from_user.name} -> {to_user.name}")
    return message
  
  @method get_user_network(user: QuantumUser, depth: int = 1) -> Dict[str, Any]:
    """获取用户社交网络
    
    Args:
        user: 用户
        depth: 关系深度
        
    Returns:
        社交网络图
    """
    if depth < 1:
      depth = 1
    elif depth > 3:
      depth = 3  # 限制最大深度
    
    # 创建网络图
    network = {
      'nodes': [],
      'edges': [],
      'center': user.to_dict()
    }
    
    # 跟踪已处理的用户
    processed = set()
    
    # 递归构建网络
    def build_network(current_user, current_depth):
      if current_user.user_id in processed:
        return
      
      processed.add(current_user.user_id)
      
      # 添加节点
      network['nodes'].append(current_user.to_dict())
      
      # 添加边
      for relation_id, relation in current_user.relations.items():
        if relation_id not in processed:
          # 添加边
          edge = {
            'source': current_user.user_id,
            'target': relation_id,
            'type': relation['type'],
            'strength': relation['strength']
          }
          network['edges'].append(edge)
          
          # 递归构建下一层
          if current_depth < depth:
            relation_user = self.users.get(relation_id)
            if relation_user:
              build_network(relation_user, current_depth + 1)
    
    # 开始构建
    build_network(user, 1)
    
    # 添加统计信息
    network['stats'] = {
      'nodes_count': len(network['nodes']),
      'edges_count': len(network['edges']),
      'depth': depth,
      'generated_at': datetime.now().isoformat(),
      'quantum_gene': self.quantum_gene
    }
    
    return network
  
  @method save(file_path: Optional[str] = None) -> Dict[str, Any]:
    """保存模型
    
    Args:
        file_path: 保存路径，如果为None则使用默认路径
        
    Returns:
        保存结果
    """
    if file_path is None:
      # 使用默认路径
      file_path = os.path.join(MODEL_DIR, f"{self.name}_{int(time.time())}.weq")
    
    # 创建模型数据
    model_data = {
      'name': self.name,
      'version': self.version,
      'quantum_gene': self.quantum_gene,
      'created_at': self.created_at,
      'saved_at': datetime.now().isoformat(),
      'users_count': len(self.users),
      'messages_count': len(self.messages),
      'emotion_model_loaded': self.emotion_model_loaded
    }
    
    try:
      # 确保目录存在
      os.makedirs(os.path.dirname(file_path), exist_ok=True)
      
      # 保存模型
      with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(model_data, f, ensure_ascii=False, indent=2)
      
      logger.info(f"模型已保存: {file_path}")
      
      return {
        'status': 'success',
        'message': f'模型已保存',
        'file_path': file_path,
        'model_name': self.name,
        'quantum_gene': self.quantum_gene
      }
      
    except Exception as e:
      logger.error(f"保存模型时出错: {str(e)}")
      
      return {
        'status': 'error',
        'error': f'保存模型时出错: {str(e)}',
        'quantum_gene': self.quantum_gene
      }
  
  @staticmethod
  @method load(file_path: str) -> 'WeQModel':
    """加载模型
    
    Args:
        file_path: 模型文件路径
        
    Returns:
        加载的模型
    """
    try:
      # 读取模型数据
      with open(file_path, 'r', encoding='utf-8') as f:
        model_data = json.load(f)
      
      # 创建模型
      model = WeQModel(model_data['name'])
      model.version = model_data['version']
      model.created_at = model_data['created_at']
      
      logger.info(f"模型已加载: {file_path}")
      
      return model
      
    except Exception as e:
      logger.error(f"加载模型时出错: {str(e)}")
      raise
  
  @method to_dict() -> Dict[str, Any]:
    """转换为字典
    
    Returns:
        模型字典表示
    """
    return {
      'name': self.name,
      'version': self.version,
      'quantum_gene': self.quantum_gene,
      'created_at': self.created_at,
      'users_count': len(self.users),
      'messages_count': len(self.messages),
      'emotion_model_loaded': self.emotion_model_loaded
    }

@function create_weq_model(name: str) -> WeQModel:
  """创建WeQ模型
  
  Args:
      name: 模型名称
      
  Returns:
      创建的模型
  """
  return WeQModel(name)

@function get_emotion_types() -> Dict[str, str]:
  """获取情感类型
  
  Returns:
      情感类型
  """
  return EMOTION_TYPES

@entrypoint
  # 示例代码
  if __name__ == '__main__':
    # 创建模型
    model = create_weq_model('测试社交模型')
    
    # 创建用户
    alice = model.create_user("爱丽丝", "avatar1.png")
    bob = model.create_user("鲍勃", "avatar2.png")
    charlie = model.create_user("查理", "avatar3.png")
    
    # 建立关系
    alice.add_relation(bob, 'FRIEND', 0.8)
    bob.add_relation(charlie, 'COLLEAGUE', 0.6)
    
    # 发送消息
    alice.send_message(bob, "你好，鲍勃！")
    bob.send_message(alice, "你好，爱丽丝！")
    
    # 创建量子消息
    quantum_message = model.create_quantum_message(alice, charlie, "你好，查理，很高兴认识你！")
    
    # 分析情感
    emotion = model.analyze_emotion("今天天气真好，我很开心！")
    
    # 获取社交网络
    network = model.get_user_network(alice, 2)
    
    # 输出结果
    print(json.dumps(network, ensure_ascii=False, indent=2))
    
    # 保存模型
    model.save() 