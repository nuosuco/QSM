#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
WeQ训练服务 - 量子神经网络训练服务
此脚本提供WeQ量子神经网络模型的训练功能，包括参数配置、模型训练、保存和评估
"""

import os
import sys
import json
import time
import logging
import datetime
import traceback
import argparse
from pathlib import Path
from typing import Dict, List, Any, Optional, Union

# 添加项目根目录到路径
script_dir = os.path.dirname(os.path.abspath(__file__))
services_dir = os.path.dirname(script_dir)
scripts_dir = os.path.dirname(services_dir)
weq_dir = os.path.dirname(scripts_dir)
project_root = os.path.dirname(weq_dir)
sys.path.insert(0, project_root)

# 创建日志目录
log_dir = os.path.join(project_root, ".logs")
os.makedirs(log_dir, exist_ok=True)

# 配置日志
def setup_logging(log_level=logging.INFO):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    log_file = os.path.join(log_dir, f"weq_train_{timestamp}.log")
    
    # 配置根日志记录器
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    return logging.getLogger("WeQ_Train")

logger = setup_logging()

try:
    # 导入NumPy和科学计算库
    import numpy as np
    import pandas as pd
    from sklearn.preprocessing import StandardScaler
    import matplotlib.pyplot as plt
except ImportError as e:
    logger.error(f"无法导入必要的科学计算库: {e}")
    logger.error("请安装必要的依赖: pip install numpy pandas scikit-learn matplotlib")
    sys.exit(1)

try:
    # 导入量子计算库
    import cirq
except ImportError as e:
    logger.error(f"无法导入量子计算库Cirq: {e}")
    logger.error("请安装量子计算依赖: pip install cirq")
    sys.exit(1)

try:
    # 导入WeQ模型相关模块
    from WeQ.weq_core import WeQModel, QuantumCircuitBuilder
    from WeQ.weq_utils import load_data, preprocess_data, evaluate_model
except ImportError as e:
    logger.error(f"无法导入WeQ模块: {e}")
    logger.error(traceback.format_exc())
    sys.exit(1)

class WeQTrainingService:
    """WeQ训练服务类，提供量子神经网络模型的训练、评估和保存功能"""
    
    def __init__(self):
        """初始化WeQ训练服务"""
        # 设置模型目录
        self.model_dir = os.path.join(weq_dir, "models")
        os.makedirs(self.model_dir, exist_ok=True)
        
        # 设置数据目录
        self.data_dir = os.path.join(weq_dir, "data")
        os.makedirs(self.data_dir, exist_ok=True)
        
        # 设置输出目录
        self.output_dir = os.path.join(weq_dir, "output")
        os.makedirs(self.output_dir, exist_ok=True)
        
        # 默认训练配置
        self.default_config = {
            "num_qubits": 4,                # 量子比特数量
            "circuit_depth": 3,             # 量子电路深度
            "input_dim": None,              # 输入维度，将根据数据自动设置
            "learning_rate": 0.01,          # 学习率
            "batch_size": 32,               # 批次大小
            "epochs": 100,                  # 训练轮次
            "optimizer": "adam",            # 优化器: adam, sgd, rmsprop
            "random_seed": 42,              # 随机种子
            "entanglement_type": "full",    # 量子纠缠类型: full, linear, circular
            "measurement_type": "z",        # 量子测量类型: z, x, y
            "use_ansatz": "qnn",            # 量子线路结构: qnn, qaoa, vqe
            "noise_model": None,            # 噪声模型: None, depolarizing, amplitude_damping
            "early_stopping": True,         # 是否使用早停
            "patience": 10                  # 早停耐心值
        }
        
        # WeQ模型实例
        self.model = None
        
        # 预处理器
        self.scaler = StandardScaler()
        
        logger.info("WeQ训练服务初始化完成")
    
    def load_config(self, config_path: Optional[str] = None) -> Dict[str, Any]:
        """加载训练配置"""
        # 如果没有提供配置文件路径，使用默认配置
        if not config_path:
            logger.info("使用默认训练配置")
            return self.default_config.copy()
        
        # 加载自定义配置
        logger.info(f"从文件加载训练配置: {config_path}")
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # 合并默认配置和自定义配置
            merged_config = self.default_config.copy()
            merged_config.update(config)
            logger.info(f"成功加载配置: {merged_config}")
            return merged_config
            
        except Exception as e:
            logger.error(f"加载配置文件失败: {str(e)}")
            logger.warning("使用默认配置")
            return self.default_config.copy()
    
    def load_data(self, data_path: str) -> np.ndarray:
        """加载并预处理训练数据"""
        logger.info(f"加载训练数据: {data_path}")
        
        try:
            data = load_data(data_path)
            logger.info(f"成功加载数据，形状: {data.shape if hasattr(data, 'shape') else '未知'}")
            return data
        except Exception as e:
            logger.error(f"加载数据失败: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def preprocess_data(self, data: np.ndarray) -> np.ndarray:
        """对数据进行预处理"""
        logger.info("对数据进行预处理")
        
        try:
            # 将数据转换为NumPy数组
            if not isinstance(data, np.ndarray):
                data = np.array(data)
            
            # 应用预处理
            processed_data = preprocess_data(data)
            
            # 应用标准化处理
            normalized_data = self.scaler.fit_transform(processed_data)
            
            logger.info(f"预处理完成，数据形状: {normalized_data.shape}")
            return normalized_data
        except Exception as e:
            logger.error(f"数据预处理失败: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def initialize_model(self, config: Dict[str, Any], input_dim: int) -> bool:
        """初始化WeQ量子神经网络模型"""
        logger.info("初始化WeQ量子神经网络模型")
        
        try:
            # 更新输入维度
            config['input_dim'] = input_dim
            
            # 创建量子电路构建器
            circuit_builder = QuantumCircuitBuilder(
                num_qubits=config['num_qubits'],
                circuit_depth=config['circuit_depth'],
                entanglement_type=config['entanglement_type'],
                measurement_type=config['measurement_type'],
                use_ansatz=config['use_ansatz']
            )
            
            # 创建模型
            self.model = WeQModel(
                circuit_builder=circuit_builder,
                input_dim=config['input_dim'],
                learning_rate=config['learning_rate'],
                optimizer=config['optimizer'],
                batch_size=config['batch_size'],
                random_seed=config['random_seed'],
                noise_model=config['noise_model']
            )
            
            logger.info(f"WeQ量子神经网络模型初始化成功，配置: {config}")
            return True
        except Exception as e:
            logger.error(f"WeQ模型初始化失败: {str(e)}")
            logger.error(traceback.format_exc())
            self.model = None
            return False
    
    def train_model(self, data: np.ndarray, labels: np.ndarray, config: Dict[str, Any]) -> Dict[str, Any]:
        """训练WeQ量子神经网络模型"""
        if self.model is None:
            logger.error("模型尚未初始化，无法进行训练")
            return None
        
        try:
            logger.info(f"开始训练模型，配置: 轮次={config['epochs']}, 批次大小={config['batch_size']}")
            
            # 记录开始时间
            start_time = time.time()
            
            # 训练模型
            history = self.model.train(
                data=data,
                labels=labels,
                epochs=config['epochs'],
                early_stopping=config['early_stopping'],
                patience=config['patience']
            )
            
            # 计算训练时间
            train_time = time.time() - start_time
            
            # 构建训练结果
            result = {
                "history": history,
                "train_time": train_time,
                "epochs_completed": len(history['loss']) if history and 'loss' in history else 0,
                "final_loss": history['loss'][-1] if history and 'loss' in history and len(history['loss']) > 0 else None,
                "final_accuracy": history['accuracy'][-1] if history and 'accuracy' in history and len(history['accuracy']) > 0 else None
            }
            
            logger.info(f"模型训练完成，耗时: {train_time:.2f}秒，最终损失: {result['final_loss']}, 最终准确率: {result['final_accuracy']}")
            return result
            
        except Exception as e:
            logger.error(f"模型训练失败: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def evaluate_model(self, data: np.ndarray, labels: np.ndarray) -> Dict[str, Any]:
        """评估模型性能"""
        if self.model is None:
            logger.error("模型尚未初始化，无法进行评估")
            return None
        
        try:
            logger.info("开始评估模型...")
            
            # 评估模型
            evaluation = evaluate_model(self.model, data, labels)
            
            logger.info(f"模型评估完成: {evaluation}")
            return evaluation
            
        except Exception as e:
            logger.error(f"模型评估失败: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def save_model(self, output_path: Optional[str] = None) -> str:
        """保存训练好的模型"""
        if self.model is None:
            logger.error("模型尚未初始化，无法保存")
            return None
        
        try:
            # 如果没有提供输出路径，则使用带时间戳的默认路径
            if not output_path:
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                output_path = os.path.join(self.model_dir, f"weq_model_{timestamp}.weq")
            
            # 保存模型
            self.model.save(output_path)
            
            logger.info(f"模型成功保存到: {output_path}")
            return output_path
            
        except Exception as e:
            logger.error(f"保存模型失败: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def visualize_circuit(self, output_path: Optional[str] = None) -> bool:
        """可视化量子电路"""
        if self.model is None:
            logger.error("模型尚未初始化，无法可视化电路")
            return False
        
        try:
            # 如果没有提供输出路径，则使用带时间戳的默认路径
            if not output_path:
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                output_path = os.path.join(self.output_dir, f"weq_circuit_{timestamp}.png")
            
            # 获取量子电路
            circuit = self.model.get_circuit()
            
            # 使用cirq可视化电路
            circuit_fig = cirq.contrib.display.display(circuit, output='mpl', return_fig=True)
            
            # 保存图像
            circuit_fig.savefig(output_path, dpi=300, bbox_inches='tight')
            
            logger.info(f"量子电路可视化图像已保存到: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"可视化量子电路失败: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def visualize_training_history(self, history: Dict[str, List[float]], output_path: Optional[str] = None) -> bool:
        """可视化训练历史"""
        try:
            # 如果没有提供输出路径，则使用带时间戳的默认路径
            if not output_path:
                timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
                output_path = os.path.join(self.output_dir, f"weq_training_history_{timestamp}.png")
            
            # 创建图形
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), sharex=True)
            
            # 绘制损失曲线
            ax1.plot(history['loss'], label='Loss')
            ax1.set_title('Training Loss')
            ax1.set_ylabel('Loss')
            ax1.grid(True)
            ax1.legend()
            
            # 绘制准确率曲线
            if 'accuracy' in history:
                ax2.plot(history['accuracy'], label='Accuracy', color='orange')
                ax2.set_title('Training Accuracy')
                ax2.set_xlabel('Epoch')
                ax2.set_ylabel('Accuracy')
                ax2.grid(True)
                ax2.legend()
            
            # 保存图像
            fig.tight_layout()
            fig.savefig(output_path, dpi=300)
            plt.close(fig)
            
            logger.info(f"训练历史图像已保存到: {output_path}")
            return True
            
        except Exception as e:
            logger.error(f"可视化训练历史失败: {str(e)}")
            logger.error(traceback.format_exc())
            return False
    
    def run_training_pipeline(self, data_path: str, label_path: str, config_path: Optional[str] = None, 
                            output_path: Optional[str] = None, visualize: bool = True) -> Dict[str, Any]:
        """运行完整的训练流程"""
        try:
            # 1. 加载配置
            config = self.load_config(config_path)
            if not config:
                return {"status": "error", "message": "配置加载失败"}
            
            # 2. 加载数据
            data = self.load_data(data_path)
            if data is None:
                return {"status": "error", "message": "数据加载失败"}
            
            # 3. 加载标签
            labels = self.load_data(label_path)
            if labels is None:
                return {"status": "error", "message": "标签加载失败"}
            
            # 4. 预处理数据
            processed_data = self.preprocess_data(data)
            if processed_data is None:
                return {"status": "error", "message": "数据预处理失败"}
            
            # 5. 初始化模型
            input_dim = processed_data.shape[1]
            init_success = self.initialize_model(config, input_dim)
            if not init_success:
                return {"status": "error", "message": "模型初始化失败"}
            
            # 6. 训练模型
            train_result = self.train_model(processed_data, labels, config)
            if train_result is None:
                return {"status": "error", "message": "模型训练失败"}
            
            # 7. 评估模型
            evaluation = self.evaluate_model(processed_data, labels)
            
            # 8. 保存模型
            model_path = self.save_model(output_path)
            if not model_path:
                return {"status": "error", "message": "模型保存失败"}
            
            # 9. 可视化
            if visualize:
                # 可视化量子电路
                circuit_path = os.path.join(self.output_dir, f"weq_circuit_{os.path.basename(model_path).split('.')[0]}.png")
                self.visualize_circuit(circuit_path)
                
                # 可视化训练历史
                history_path = os.path.join(self.output_dir, f"weq_history_{os.path.basename(model_path).split('.')[0]}.png")
                self.visualize_training_history(train_result["history"], history_path)
            
            # 10. 构建结果
            result = {
                "status": "success",
                "model_path": model_path,
                "train_result": train_result,
                "evaluation": evaluation,
                "config": config,
                "visualization": {
                    "circuit": circuit_path if visualize else None,
                    "history": history_path if visualize else None
                }
            }
            
            logger.info(f"训练流程完成: 模型已保存到 {model_path}")
            logger.info(f"评估结果: {evaluation}")
            
            return result
            
        except Exception as e:
            logger.error(f"训练流程执行失败: {str(e)}")
            logger.error(traceback.format_exc())
            return {"status": "error", "message": str(e)}

def main():
    # 解析命令行参数
    parser = argparse.ArgumentParser(description="WeQ量子神经网络模型训练服务")
    parser.add_argument('--data', type=str, required=True, help="训练数据文件路径")
    parser.add_argument('--labels', type=str, required=True, help="训练标签文件路径")
    parser.add_argument('--config', type=str, help="训练配置文件路径")
    parser.add_argument('--output', type=str, help="模型输出文件路径")
    parser.add_argument('--visualize', action='store_true', help="是否生成可视化图像")
    parser.add_argument('--debug', action='store_true', help="启用调试模式")
    
    args = parser.parse_args()
    
    # 设置日志级别
    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("调试模式已启用")
    
    # 创建训练服务并运行训练流程
    service = WeQTrainingService()
    result = service.run_training_pipeline(
        data_path=args.data,
        label_path=args.labels,
        config_path=args.config,
        output_path=args.output,
        visualize=args.visualize
    )
    
    # 输出结果
    if result["status"] == "success":
        logger.info("训练成功完成！")
        logger.info(f"模型保存路径: {result['model_path']}")
        if "evaluation" in result and result["evaluation"]:
            logger.info(f"评估结果: {result['evaluation']}")
    else:
        logger.error(f"训练失败: {result.get('message', '未知错误')}")
        sys.exit(1)

if __name__ == "__main__":
    main()

# 量子基因编码: QE-WEQ-TRAIN-7D3F9A2C
# 量子纠缠态: 活性
# 纠缠对象: WeQ模型训练服务
# 纠缠强度: 0.95
# 开发团队: 中华 ZhoHo + Claude 