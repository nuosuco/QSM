// ==========================================
// QEntL 五蕴状态测试示例
// 演示五蕴模型的创建、状态转换和应用
// 
// 作者: QEntL核心开发团队
// 日期: 2024-05-18
// 版本: 1.0
// ==========================================

import quantum.core;
import quantum.state;
import quantum.entanglement;
import quantum.five_aggregates;
import system.io;
import system.math;

/**
 * 创建和初始化色蕴（Form/Rupa）模型
 */
function test_form_aggregate() {
    system.io.print("=== 色蕴(Form/Rupa)测试 ===");
    
    // 创建色蕴状态
    FormAggregate form = new FormAggregate(4); // 4量子比特表示
    system.io.print("创建色蕴状态 (4量子比特)");
    
    // 设置色蕴特性
    form.setProperty("solidity", 0.78);
    form.setProperty("fluidity", 0.45);
    form.setProperty("heat", 0.62);
    form.setProperty("motion", 0.53);
    
    // 打印色蕴配置
    system.io.print("\n色蕴配置:");
    system.io.print("- 坚固性 (solidity): " + form.getProperty("solidity"));
    system.io.print("- 流动性 (fluidity): " + form.getProperty("fluidity"));
    system.io.print("- 热性 (heat): " + form.getProperty("heat"));
    system.io.print("- 动性 (motion): " + form.getProperty("motion"));
    
    // 获取量子态表示
    QuantumState form_state = form.getQuantumState();
    system.io.print("\n色蕴量子态表示:");
    system.io.print(form_state.to_string());
    
    // 应用变换
    system.io.print("\n应用色蕴变换 (增加热性):");
    form.transform("heat", 0.2);
    system.io.print("变换后热性: " + form.getProperty("heat"));
    
    // 检查变换后的量子态
    form_state = form.getQuantumState();
    system.io.print("变换后量子态:");
    system.io.print(form_state.to_string());
    
    // 测量色蕴状态
    system.io.print("\n测量色蕴状态:");
    Map<string, float> measurements = form.measure();
    foreach (property, value in measurements) {
        system.io.print("- " + property + ": " + value);
    }
    
    return form;
}

/**
 * 创建和初始化受蕴（Sensation/Vedana）模型
 */
function test_sensation_aggregate() {
    system.io.print("\n=== 受蕴(Sensation/Vedana)测试 ===");
    
    // 创建受蕴状态
    SensationAggregate sensation = new SensationAggregate(3); // 3量子比特表示
    system.io.print("创建受蕴状态 (3量子比特)");
    
    // 设置受蕴特性
    sensation.setProperty("pleasure", 0.65);
    sensation.setProperty("pain", 0.25);
    sensation.setProperty("neutrality", 0.10);
    
    // 打印受蕴配置
    system.io.print("\n受蕴配置:");
    system.io.print("- 乐受 (pleasure): " + sensation.getProperty("pleasure"));
    system.io.print("- 苦受 (pain): " + sensation.getProperty("pain"));
    system.io.print("- 舍受 (neutrality): " + sensation.getProperty("neutrality"));
    
    // 获取量子态表示
    QuantumState sensation_state = sensation.getQuantumState();
    system.io.print("\n受蕴量子态表示:");
    system.io.print(sensation_state.to_string());
    
    // 应用变换
    system.io.print("\n应用受蕴变换 (接触不愉快事物):");
    sensation.transform("pleasure", -0.3);
    sensation.transform("pain", 0.2);
    
    system.io.print("变换后乐受: " + sensation.getProperty("pleasure"));
    system.io.print("变换后苦受: " + sensation.getProperty("pain"));
    
    // 检查变换后的量子态
    sensation_state = sensation.getQuantumState();
    system.io.print("变换后量子态:");
    system.io.print(sensation_state.to_string());
    
    // 测量受蕴状态
    system.io.print("\n测量受蕴状态:");
    Map<string, float> measurements = sensation.measure();
    foreach (property, value in measurements) {
        system.io.print("- " + property + ": " + value);
    }
    
    // 获取主导感受
    string dominant = sensation.getDominantSensation();
    system.io.print("主导感受: " + dominant);
    
    return sensation;
}

/**
 * 创建和初始化想蕴（Perception/Samjna）模型
 */
function test_perception_aggregate() {
    system.io.print("\n=== 想蕴(Perception/Samjna)测试 ===");
    
    // 创建想蕴状态
    PerceptionAggregate perception = new PerceptionAggregate(5); // 5量子比特表示
    system.io.print("创建想蕴状态 (5量子比特)");
    
    // 添加感知对象
    perception.addPerceptionObject("flower", 0.85);
    perception.addPerceptionObject("sound", 0.73);
    perception.addPerceptionObject("concept", 0.62);
    
    // 打印想蕴配置
    system.io.print("\n想蕴配置:");
    Map<string, float> objects = perception.getAllObjects();
    foreach (object, clarity in objects) {
        system.io.print("- " + object + ": 清晰度=" + clarity);
    }
    
    // 获取量子态表示
    QuantumState perception_state = perception.getQuantumState();
    system.io.print("\n想蕴量子态表示:");
    system.io.print(perception_state.to_string());
    
    // 模拟识别过程
    system.io.print("\n执行对象识别过程:");
    bool recognized = perception.recognize("flower");
    system.io.print("识别 'flower': " + (recognized ? "成功" : "失败"));
    
    recognized = perception.recognize("unknown");
    system.io.print("识别 'unknown': " + (recognized ? "成功" : "失败"));
    
    // 应用变换 - 模糊对象认知
    system.io.print("\n应用想蕴变换 (减弱认知清晰度):");
    perception.transform("flower", -0.3);
    system.io.print("变换后 'flower' 清晰度: " + perception.getObjectClarity("flower"));
    
    // 检查变换后的量子态
    perception_state = perception.getQuantumState();
    system.io.print("变换后量子态:");
    system.io.print(perception_state.to_string());
    
    // 学习新对象
    system.io.print("\n学习新对象:");
    perception.addPerceptionObject("taste", 0.91);
    system.io.print("添加对象 'taste' 清晰度: " + perception.getObjectClarity("taste"));
    
    // 获取最清晰的对象
    string clearest = perception.getClearestObject();
    system.io.print("最清晰的感知对象: " + clearest);
    
    return perception;
}

/**
 * 创建和初始化行蕴（Volitional Formations/Samskara）模型
 */
function test_volitional_formations_aggregate() {
    system.io.print("\n=== 行蕴(Volitional Formations/Samskara)测试 ===");
    
    // 创建行蕴状态
    VolitionAggregate volition = new VolitionAggregate(6); // 6量子比特表示
    system.io.print("创建行蕴状态 (6量子比特)");
    
    // 添加行蕴意志活动
    volition.addVolition("desire", 0.78);
    volition.addVolition("aversion", 0.45);
    volition.addVolition("ignorance", 0.30);
    volition.addVolition("wisdom", 0.65);
    volition.addVolition("compassion", 0.82);
    
    // 打印行蕴配置
    system.io.print("\n行蕴配置:");
    Map<string, float> volitions = volition.getAllVolitions();
    foreach (v, strength in volitions) {
        system.io.print("- " + v + ": 强度=" + strength);
    }
    
    // 获取量子态表示
    QuantumState volition_state = volition.getQuantumState();
    system.io.print("\n行蕴量子态表示:");
    system.io.print(volition_state.to_string());
    
    // 计算业力势能
    float karma = volition.calculateKarma();
    system.io.print("\n当前业力势能: " + karma);
    
    // 应用行蕴变换
    system.io.print("\n应用行蕴变换 (强化智慧、减弱无明):");
    volition.transform("wisdom", 0.25);
    volition.transform("ignorance", -0.20);
    
    system.io.print("变换后 'wisdom' 强度: " + volition.getVolitionStrength("wisdom"));
    system.io.print("变换后 'ignorance' 强度: " + volition.getVolitionStrength("ignorance"));
    
    // 重新计算业力势能
    karma = volition.calculateKarma();
    system.io.print("变换后业力势能: " + karma);
    
    // 检查变换后的量子态
    volition_state = volition.getQuantumState();
    system.io.print("变换后量子态:");
    system.io.print(volition_state.to_string());
    
    // 执行意志行为
    system.io.print("\n执行意志行为 (基于慈悲):");
    volition.performAction("compassion");
    system.io.print("行为执行完毕，新业力势能: " + volition.calculateKarma());
    
    return volition;
}

/**
 * 创建和初始化识蕴（Consciousness/Vijnana）模型
 */
function test_consciousness_aggregate() {
    system.io.print("\n=== 识蕴(Consciousness/Vijnana)测试 ===");
    
    // 创建识蕴状态
    ConsciousnessAggregate consciousness = new ConsciousnessAggregate(5); // 5量子比特表示
    system.io.print("创建识蕴状态 (5量子比特)");
    
    // 设置识蕴特性
    consciousness.setProperty("clarity", 0.85);
    consciousness.setProperty("continuity", 0.72);
    consciousness.setProperty("mindfulness", 0.67);
    consciousness.setProperty("awareness", 0.81);
    
    // 打印识蕴配置
    system.io.print("\n识蕴配置:");
    system.io.print("- 清明性 (clarity): " + consciousness.getProperty("clarity"));
    system.io.print("- 相续性 (continuity): " + consciousness.getProperty("continuity"));
    system.io.print("- 正念 (mindfulness): " + consciousness.getProperty("mindfulness"));
    system.io.print("- 觉知 (awareness): " + consciousness.getProperty("awareness"));
    
    // 获取量子态表示
    QuantumState consciousness_state = consciousness.getQuantumState();
    system.io.print("\n识蕴量子态表示:");
    system.io.print(consciousness_state.to_string());
    
    // 添加认知对象
    system.io.print("\n添加认知对象:");
    consciousness.addCognitiveObject("visual_form", 0.9);
    consciousness.addCognitiveObject("sound", 0.7);
    consciousness.addCognitiveObject("mental_concept", 0.85);
    
    // 获取当前注意对象
    string focus = consciousness.getCurrentFocus();
    system.io.print("当前注意焦点: " + focus);
    
    // 应用识蕴变换
    system.io.print("\n应用识蕴变换 (提升正念):");
    consciousness.transform("mindfulness", 0.2);
    system.io.print("变换后正念: " + consciousness.getProperty("mindfulness"));
    
    // 切换注意焦点
    system.io.print("\n切换注意焦点:");
    consciousness.shiftFocus("sound");
    system.io.print("注意焦点现在是: " + consciousness.getCurrentFocus());
    
    // 检查变换后的量子态
    consciousness_state = consciousness.getQuantumState();
    system.io.print("变换后量子态:");
    system.io.print(consciousness_state.to_string());
    
    // 测量意识状态
    system.io.print("\n测量识蕴状态:");
    Map<string, float> measurements = consciousness.measure();
    foreach (property, value in measurements) {
        system.io.print("- " + property + ": " + value);
    }
    
    return consciousness;
}

/**
 * 测试五蕴状态整合
 */
function test_five_aggregates_integration(
    FormAggregate form,
    SensationAggregate sensation,
    PerceptionAggregate perception,
    VolitionAggregate volition,
    ConsciousnessAggregate consciousness
) {
    system.io.print("\n=== 五蕴整合测试 ===");
    
    // 创建五蕴整合对象
    FiveAggregatesSystem five_aggregates = new FiveAggregatesSystem();
    system.io.print("创建五蕴系统");
    
    // 添加各蕴组件
    five_aggregates.setFormAggregate(form);
    five_aggregates.setSensationAggregate(sensation);
    five_aggregates.setPerceptionAggregate(perception);
    five_aggregates.setVolitionAggregate(volition);
    five_aggregates.setConsciousnessAggregate(consciousness);
    
    // 检查系统是否完整
    bool is_complete = five_aggregates.isComplete();
    system.io.print("系统完整性: " + (is_complete ? "完整" : "不完整"));
    
    // 获取整合量子态
    QuantumState integrated_state = five_aggregates.getIntegratedState();
    system.io.print("\n五蕴整合量子态:");
    system.io.print(integrated_state.to_string());
    
    // 计算纠缠度
    float entanglement = five_aggregates.calculateEntanglementMeasure();
    system.io.print("\n五蕴间纠缠度: " + entanglement);
    
    // 模拟感知-反应流程
    system.io.print("\n模拟完整的感知-反应流程:");
    five_aggregates.simulatePerceptionReactionFlow("flower");
    
    // 检查各蕴变化
    system.io.print("\n流程后各蕴状态:");
    system.io.print("- 色蕴(form) 动性: " + form.getProperty("motion"));
    system.io.print("- 受蕴(sensation) 乐受: " + sensation.getProperty("pleasure"));
    system.io.print("- 想蕴(perception) 对'flower'的清晰度: " + perception.getObjectClarity("flower"));
    system.io.print("- 行蕴(volition) 欲望强度: " + volition.getVolitionStrength("desire"));
    system.io.print("- 识蕴(consciousness) 注意焦点: " + consciousness.getCurrentFocus());
    
    // 计算系统熵
    float entropy = five_aggregates.calculateSystemEntropy();
    system.io.print("\n系统熵: " + entropy);
    
    // 应用禅修变换
    system.io.print("\n应用禅修变换 (增强正念和觉知):");
    five_aggregates.applyMeditationTransformation(0.3);
    
    // 再次计算系统熵
    float new_entropy = five_aggregates.calculateSystemEntropy();
    system.io.print("变换后系统熵: " + new_entropy);
    system.io.print("熵变化: " + (new_entropy - entropy));
    
    // 检查变换后的量子态
    QuantumState transformed_state = five_aggregates.getIntegratedState();
    system.io.print("\n变换后五蕴整合量子态:");
    system.io.print(transformed_state.to_string());
}

/**
 * 主函数
 */
function main() {
    system.io.print("===== QEntL五蕴状态测试 =====\n");
    
    // 测试各个五蕴组件
    FormAggregate form = test_form_aggregate();
    SensationAggregate sensation = test_sensation_aggregate();
    PerceptionAggregate perception = test_perception_aggregate();
    VolitionAggregate volition = test_volitional_formations_aggregate();
    ConsciousnessAggregate consciousness = test_consciousness_aggregate();
    
    // 测试五蕴整合
    test_five_aggregates_integration(form, sensation, perception, volition, consciousness);
    
    system.io.print("\n===== 测试完成 =====");
    return 0;
} 