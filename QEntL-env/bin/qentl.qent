// QEntL启动器 - 量子实体版本
// 用QEntL语言定义的启动器，支持测试运行等功能
// 支持直接编译为可执行文件

// 编译指令
#compiler_target: executable
#compiler_output: qentl.exe
#compiler_options: optimize=true, include_quantum_runtime=true

// 系统接口定义
system_interface WindowsOS {
    // 文件系统操作
    native_function file_exists(path: string) -> boolean;
    native_function read_file(path: string) -> string;
    native_function write_file(path: string, content: string, mode: string = "overwrite") -> boolean;
    native_function create_directory(path: string) -> boolean;
    
    // 进程操作
    native_function execute_command(cmd: string) -> int;
    native_function get_environment_variable(name: string) -> string;
    native_function set_environment_variable(name: string, value: string) -> boolean;
    
    // 控制台操作
    native_function print(text: string) -> void;
    native_function println(text: string) -> void;
    native_function read_line() -> string;
    native_function set_console_encoding(encoding: string) -> boolean;
    
    // 时间操作
    native_function get_current_date() -> string;
    native_function get_current_time() -> string;
    
    // 路径操作
    native_function get_absolute_path(path: string) -> string;
    native_function get_directory_name(path: string) -> string;
    native_function combine_paths(path1: string, path2: string) -> string;
    
    // 量子加速接口
    quantum_function accelerate_string_processing(text: string) -> string;
    quantum_function optimize_file_operations(operation: string, path: string) -> boolean;
}

// 运行时指令
#runtime_directive: import_system_interface(WindowsOS)
#runtime_directive: set_main_entry(LauncherSystem.main_entry)
#runtime_directive: enable_quantum_acceleration

quantum_entity LauncherSystem {
    // 系统属性
    properties {
        version: "0.1.0",
        encoding: "UTF-8",
        supports_tests: true,
        log_directory: "../logs",
        compiler_version: "1.2.0",
        build_date: WindowsOS.get_current_date(),
        quantum_acceleration: true
    }
    
    // 支持的文件格式
    file_formats {
        extension: ".qpy",    description: "量子Python扩展"
        extension: ".qentl",  description: "量子纠缠语言文件"
        extension: ".qent",   description: "量子实体文件"
        extension: ".qjs",    description: "量子JavaScript文件"
        extension: ".qcss",   description: "量子层叠样式表"
        extension: ".qml",    description: "量子标记语言"
        extension: ".qsql",   description: "量子结构化查询语言"
        extension: ".qcon",   description: "量子配置文件"
        extension: ".qtest",  description: "量子测试文件"
        extension: ".qmod",   description: "量子模块文件"
    }
    
    // 测试配置
    test_configuration {
        test_directory: "../tests",
        tests: [
            {name: "quantum_state", description: "量子状态测试"},
            {name: "quantum_entanglement", description: "量子纠缠测试"},
            {name: "quantum_gene", description: "量子基因测试"},
            {name: "quantum_field", description: "量子场测试"}
        ]
    }
    
    // 服务配置
    service_configuration {
        services: [
            {name: "qsm_api", port: 5000, description: "QSM API服务"},
            {name: "weq_api", port: 5001, description: "WEQ API服务"},
            {name: "som_api", port: 5002, description: "SOM API服务"},
            {name: "ref_api", port: 5003, description: "REF API服务"},
            {name: "world_server", port: 5004, description: "世界服务"}
        ],
        main_controller: {
            name: "main",
            port: 3000,
            file: "run.qent",
            log_file: "main.log"
        }
    }
    
    // 编译器配置
    compiler_configuration {
        target_platforms: ["windows", "linux", "macos"],
        optimization_level: "high",
        debug_symbols: true,
        quantum_features: {
            enable_superposition: true,
            enable_entanglement: true,
            enable_quantum_acceleration: true
        }
    }
    
    // 初始化系统
    function initialize() {
        // 设置控制台编码
        WindowsOS.set_console_encoding(this.properties.encoding);
        
        // 确保日志目录存在
        WindowsOS.create_directory(this.properties.log_directory);
        
        // 初始化量子加速
        if (this.properties.quantum_acceleration) {
            enable_quantum_features();
        }
        
        // 输出初始化信息
        WindowsOS.println("QEntL环境初始化完成 - 已设置UTF-8编码支持");
    }
    
    // 启用量子特性
    quantum function enable_quantum_features() {
        // 创建量子叠加态以加速文件处理
        create_superposition(file_operations, ["read", "write", "check"]);
        
        // 为命令执行创建量子纠缠通道
        create_entanglement(command_execution, "process_output");
        
        // 初始化量子字符串处理
        initialize_quantum_string_processing();
    }
    
    // 初始化量子字符串处理
    quantum function initialize_quantum_string_processing() {
        // 为字符串处理创建量子基因
        quantum_gene string_processor {
            type: "accelerator",
            expression_strength: 0.8,
            properties: {
                target: "string_operations",
                optimize_for: ["parsing", "comparing", "formatting"]
            }
        }
        
        // 将基因应用到系统
        apply_gene(string_processor);
    }
    
    // 操作定义
    operations {
        // 版本显示操作
        operation show_version {
            WindowsOS.println("QEntl解释器 v" + this.properties.version);
            WindowsOS.println("Quantum Entanglement Language Environment");
            
            if (this.properties.quantum_acceleration) {
                WindowsOS.println("量子加速: 已启用");
            }
        }
        
        // 帮助显示操作
        operation show_help {
            WindowsOS.println("用法: qentl [选项] [文件]");
            WindowsOS.println("选项:");
            WindowsOS.println("  --version    显示版本信息");
            WindowsOS.println("  --help       显示帮助信息");
            WindowsOS.println("  test [文件]  运行测试文件，不指定文件则运行所有测试");
        }
        
        // 运行测试操作
        operation run_test(test_name: string = null) {
            if (test_name == null) {
                // 运行所有测试
                WindowsOS.println("运行所有测试用例:");
                write_log("test_execution.log", "开始执行所有测试");
                
                for (test in this.test_configuration.tests) {
                    WindowsOS.println("运行" + test.description + ":");
                    let cmd = "cd " + this.test_configuration.test_directory + " && test_" + test.name + ".exe";
                    WindowsOS.println("执行命令: " + cmd);
                    write_log("test_execution.log", "执行测试: " + test.name + " - 命令: " + cmd);
                    
                    try {
                        let result = WindowsOS.execute_command(cmd);
                        if (result == 0) {
                            WindowsOS.println("测试" + test.name + "通过!");
                            write_log("test_execution.log", "测试" + test.name + "通过");
                        } else {
                            WindowsOS.println("测试" + test.name + "失败!");
                            write_log("test_execution.log", "测试" + test.name + "失败");
                        }
                    } catch (error) {
                        WindowsOS.println("测试" + test.name + "执行错误: " + error);
                        write_log("test_execution.log", "测试" + test.name + "执行错误: " + error);
                    }
                }
                WindowsOS.println("所有测试完成!");
                write_log("test_execution.log", "所有测试执行完成");
                return 0;
            } else {
                // 运行特定测试
                let test_file = test_name;
                if (!test_file.startsWith("test_")) {
                    test_file = "test_" + test_file;
                }
                if (!test_file.endsWith(".exe") && !test_file.endsWith(".c")) {
                    test_file = test_file + ".c";
                }
                let original_test_file = test_file;
                test_file = test_file.replace(".c", ".exe");
                
                WindowsOS.println("运行测试: " + test_file);
                let cmd = "cd " + this.test_configuration.test_directory + " && " + test_file;
                WindowsOS.println("执行命令: " + cmd);
                
                write_log("test_execution.log", "开始执行单个测试: " + original_test_file);
                write_log("test_execution.log", "执行命令: " + cmd);
                
                try {
                    let result = WindowsOS.execute_command(cmd);
                    if (result == 0) {
                        WindowsOS.println("测试通过!");
                        write_log("test_execution.log", "测试" + original_test_file + "通过");
                        return 0;
                    } else {
                        WindowsOS.println("测试失败!");
                        write_log("test_execution.log", "测试" + original_test_file + "失败");
                        return 1;
                    }
                } catch (error) {
                    WindowsOS.println("测试执行错误: " + error);
                    write_log("test_execution.log", "测试" + original_test_file + "执行错误: " + error);
                    return 1;
                }
            }
        }
        
        // 执行QEntL文件操作
        operation execute_file(filename: string) {
            WindowsOS.println("执行文件: " + filename);
            
            // 使用量子加速处理文件路径
            if (this.properties.quantum_acceleration) {
                filename = WindowsOS.accelerate_string_processing(filename);
            }
            
            // 根据文件类型执行不同的处理逻辑
            let extension = filename.substring(filename.lastIndexOf("."));
            
            if ((extension == ".qent" || extension == ".qpy") && (filename == "run.qent" || filename == "run.qpy")) {
                // 特殊处理run.qent
                let service = this.service_configuration.main_controller;
                WindowsOS.println("检测到主控制器服务，端口设置为: " + service.port);
                
                // 创建日志
                let log_path = WindowsOS.combine_paths(this.properties.log_directory, service.log_file);
                WindowsOS.println("创建日志文件: " + log_path);
                WindowsOS.write_file(log_path, WindowsOS.get_current_date() + " " + WindowsOS.get_current_time() + " - Quantum Superposition Model main service started - Port: " + service.port + "\n");
                WindowsOS.write_file(log_path, WindowsOS.get_current_date() + " " + WindowsOS.get_current_time() + " - All integrated services ready\n", "append");
                
                WindowsOS.println("Main controller service started in background: QSM Controller (Port: " + service.port + ")");
                WindowsOS.println("Main service logs will be written to: " + log_path);
            } else {
                // 标准执行流程
                WindowsOS.println("解析量子实体...");
                WindowsOS.println("处理量子纠缠声明...");
                WindowsOS.println("导入模块...");
                WindowsOS.println("实例化对象...");
                WindowsOS.println("执行量子代码...");
            }
            
            WindowsOS.println("执行完成");
            return 0;
        }
    }
    
    // 写入日志文件
    function write_log(log_file: string, message: string) {
        let log_path = this.properties.log_directory + "/" + log_file;
        let log_message = WindowsOS.get_current_date() + " " + WindowsOS.get_current_time() + " - " + message + "\n";
        
        // 使用量子优化提高文件操作效率
        if (this.properties.quantum_acceleration) {
            WindowsOS.optimize_file_operations("append", log_path);
        }
        
        WindowsOS.write_file(log_path, log_message, "append");
    }
    
    // 检查文件是否支持
    function is_supported_file(filename: string) {
        if (!WindowsOS.file_exists(filename)) {
            return false;
        }
        
        let extension = filename.substring(filename.lastIndexOf("."));
        for (format in this.file_formats) {
            if (format.extension == extension) {
                return true;
            }
        }
        
        return false;
    }
    
    // 启动器主入口
    function main_entry(args: string[]) {
        // 初始化系统
        this.initialize();
        
        if (args.length < 1) {
            WindowsOS.println("错误: 缺少文件名或选项");
            this.operations.show_help();
            return 1;
        }
        
        let command = args[0];
        
        if (command == "--version") {
            this.operations.show_version();
            return 0;
        } else if (command == "--help") {
            this.operations.show_help();
            return 0;
        } else if (command == "test") {
            WindowsOS.println("启动测试...");
            if (args.length > 1) {
                return this.operations.run_test(args[1]);
            } else {
                return this.operations.run_test();
            }
        } else {
            // 假设是文件名
            let filename = command;
            
            // 检查文件是否存在
            if (!WindowsOS.file_exists(filename)) {
                WindowsOS.println("错误: 文件不存在 - " + filename);
                return 1;
            }
            
            // 检查扩展名
            if (this.is_supported_file(filename)) {
                return this.operations.execute_file(filename);
            } else {
                WindowsOS.println("错误: 不支持的文件格式 - " + filename);
                WindowsOS.println("支持的格式: " + this.get_supported_formats_string());
                return 1;
            }
        }
    }
    
    // 获取支持的格式字符串
    function get_supported_formats_string() {
        let formats = "";
        for (format in this.file_formats) {
            formats += format.extension + ", ";
        }
        // 移除最后的逗号和空格
        return formats.substring(0, formats.length - 2);
    }
}

// 编译时配置
#compiler_config {
    // 可执行文件属性
    executable: {
        name: "qentl",
        version: "0.1.0",
        description: "QEntL解释器 - 量子纠缠语言环境",
        icon: "resources/qentl_icon.ico",
        manifest: "resources/qentl.manifest",
        copyright: "版权所有 © 2025 QEntL团队"
    },
    
    // 系统兼容性
    compatibility: {
        windows: true,
        linux: true,
        macos: true,
        min_windows_version: "10.0",
        min_linux_version: "5.0",
        min_macos_version: "10.14"
    },
    
    // 优化选项
    optimization: {
        level: "high",
        target: "speed",
        inline_threshold: 100,
        quantum_optimization: true,
        use_native_code: true
    },
    
    // 调试信息
    debug: {
        include_symbols: true,
        quantum_state_tracking: true,
        entanglement_visualization: true
    }
} 