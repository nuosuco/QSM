#!/usr/bin/env qpy
# -*- coding: utf-8 -*-

"""
量子自组织市场(SOM) - API服务
为量子经济系统提供API接口
"""

# 量子基因编码
QG-API-SOM-ECON-A1B3

# 量子纠缠信道
@quantum_entangle {
  channel_id: "QE-API-SOM-20240406",
  state: "ACTIVE",
  strength: 0.96,
  objects: [
    "QSM/api/qsm_api.qpy",
    "SOM/models/som_model.qpy",
    "WeQ/api/weq_api.qpy"
  ]
}

@imports
  standard: [os, sys, json, logging, time, datetime]
  quantum_web: [flask, request, jsonify, Blueprint]
  quantum_typing: [Dict, List, Any, Optional, Union, Tuple]
  quantum_models: [
    "SOM/models/som_model.qpy" as som_model
  ]

@constants
  # 目录设置
  ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
  LOG_DIR = os.path.join(ROOT_DIR, '.logs')
  
  # API版本
  API_VERSION = "1.0.0"
  
  # 服务配置
  DEFAULT_PORT = 5002
  
  # 交易费率
  TRANSACTION_FEE = 0.001

@initialization
  # 创建日志目录
  os.makedirs(LOG_DIR, exist_ok=True)
  
  # 配置日志
  logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
      logging.FileHandler(os.path.join(LOG_DIR, 'som_api.log')),
      logging.StreamHandler()
    ]
  )
  logger = logging.getLogger('SOM-API')
  
  # 创建Blueprint
  som_bp = Blueprint('som_api', __name__)
  
  # 默认SOM模型
  default_model = som_model.SelfOrganizingMarket()

@function get_blueprint():
  """获取SOM API Blueprint
  
  Returns:
      Blueprint: SOM API Blueprint
  """
  return som_bp

@function get_status():
  """获取SOM状态
  
  Returns:
      Dict: SOM状态信息
  """
  return {
    'status': 'online',
    'version': API_VERSION,
    'timestamp': datetime.datetime.now().isoformat(),
    'model': {
      'is_initialized': default_model.is_initialized(),
      'coins_count': len(getattr(default_model, 'coins', {})),
      'markets_count': len(getattr(default_model, 'markets', {})),
      'contracts_count': len(getattr(default_model, 'contracts', []))
    }
  }

@route som_bp GET "/"
def som_index():
  """SOM API根端点"""
  return jsonify({
    'name': 'SOM API',
    'version': API_VERSION,
    'description': '量子自组织市场API服务',
    'timestamp': datetime.datetime.now().isoformat(),
    'endpoints': {
      'status': '/api/som/status',
      'coins': '/api/som/coins',
      'markets': '/api/som/markets',
      'wallets': '/api/som/wallets',
      'contracts': '/api/som/contracts',
      'transactions': '/api/som/transactions'
    }
  })

@route som_bp GET "/status"
def som_status():
  """获取SOM状态"""
  return jsonify(get_status())

@route som_bp GET "/coins"
def list_coins():
  """列出所有货币"""
  try:
    coins = getattr(default_model, 'coins', {})
    return jsonify({
      'coins': [
        {
          'id': coin_id,
          'name': coin.get('name', ''),
          'symbol': coin.get('symbol', ''),
          'total_supply': coin.get('total_supply', 0),
          'created_at': coin.get('created_at', '')
        }
        for coin_id, coin in coins.items()
      ],
      'count': len(coins),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"列出货币时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp POST "/coins"
def create_coin():
  """创建新货币"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取货币数据
    name = data.get('name')
    symbol = data.get('symbol')
    total_supply = data.get('total_supply')
    
    if not name or not symbol or not total_supply:
      return jsonify({
        'error': '缺少必要参数(name, symbol, total_supply)'
      }), 400
    
    # 创建货币
    coin_id = default_model.create_coin(name, symbol, total_supply)
    
    return jsonify({
      'status': 'success',
      'message': '货币创建成功',
      'coin_id': coin_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建货币时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp GET "/coins/<coin_id>"
def get_coin(coin_id):
  """获取特定货币"""
  try:
    coins = getattr(default_model, 'coins', {})
    
    if coin_id not in coins:
      return jsonify({
        'error': '货币不存在'
      }), 404
    
    coin = coins[coin_id]
    
    return jsonify({
      'id': coin_id,
      'name': coin.get('name', ''),
      'symbol': coin.get('symbol', ''),
      'total_supply': coin.get('total_supply', 0),
      'circulating_supply': coin.get('circulating_supply', 0),
      'created_at': coin.get('created_at', ''),
      'markets': coin.get('markets', []),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"获取货币时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp GET "/wallets"
def list_wallets():
  """列出所有钱包"""
  try:
    wallets = getattr(default_model, 'wallets', {})
    return jsonify({
      'wallets': [
        {
          'id': wallet_id,
          'owner': wallet.get('owner', ''),
          'balances': wallet.get('balances', {}),
          'created_at': wallet.get('created_at', '')
        }
        for wallet_id, wallet in wallets.items()
      ],
      'count': len(wallets),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"列出钱包时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp POST "/wallets"
def create_wallet():
  """创建新钱包"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取钱包数据
    owner = data.get('owner')
    
    if not owner:
      return jsonify({
        'error': '缺少所有者信息'
      }), 400
    
    # 创建钱包
    wallet_id = default_model.create_wallet(owner)
    
    return jsonify({
      'status': 'success',
      'message': '钱包创建成功',
      'wallet_id': wallet_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建钱包时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp GET "/wallets/<wallet_id>"
def get_wallet(wallet_id):
  """获取特定钱包"""
  try:
    wallets = getattr(default_model, 'wallets', {})
    
    if wallet_id not in wallets:
      return jsonify({
        'error': '钱包不存在'
      }), 404
    
    wallet = wallets[wallet_id]
    
    return jsonify({
      'id': wallet_id,
      'owner': wallet.get('owner', ''),
      'balances': wallet.get('balances', {}),
      'created_at': wallet.get('created_at', ''),
      'transaction_count': len(wallet.get('transactions', [])),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"获取钱包时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp POST "/transactions"
def create_transaction():
  """创建交易"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取交易数据
    from_wallet = data.get('from_wallet')
    to_wallet = data.get('to_wallet')
    coin_id = data.get('coin_id')
    amount = data.get('amount')
    
    if not from_wallet or not to_wallet or not coin_id or not amount:
      return jsonify({
        'error': '缺少必要参数(from_wallet, to_wallet, coin_id, amount)'
      }), 400
    
    # 创建交易
    transaction_id = default_model.transfer(from_wallet, to_wallet, coin_id, amount)
    
    return jsonify({
      'status': 'success',
      'message': '交易创建成功',
      'transaction_id': transaction_id,
      'fee': amount * TRANSACTION_FEE,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建交易时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp GET "/transactions"
def list_transactions():
  """列出所有交易"""
  try:
    # 获取查询参数
    wallet_id = request.args.get('wallet_id')
    coin_id = request.args.get('coin_id')
    limit = int(request.args.get('limit', 100))
    
    # 获取交易
    transactions = []
    
    if wallet_id:
      # 获取指定钱包的交易
      transactions = default_model.get_wallet_transactions(wallet_id, limit)
    elif coin_id:
      # 获取指定货币的交易
      transactions = default_model.get_coin_transactions(coin_id, limit)
    else:
      # 获取所有交易
      transactions = default_model.get_all_transactions(limit)
    
    return jsonify({
      'transactions': transactions,
      'count': len(transactions),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"获取交易时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp GET "/markets"
def list_markets():
  """列出所有市场"""
  try:
    markets = getattr(default_model, 'markets', {})
    return jsonify({
      'markets': [
        {
          'id': market_id,
          'base_coin': market.get('base_coin', ''),
          'quote_coin': market.get('quote_coin', ''),
          'last_price': market.get('last_price', 0),
          'volume_24h': market.get('volume_24h', 0),
          'created_at': market.get('created_at', '')
        }
        for market_id, market in markets.items()
      ],
      'count': len(markets),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"列出市场时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp POST "/markets"
def create_market():
  """创建新市场"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取市场数据
    base_coin = data.get('base_coin')
    quote_coin = data.get('quote_coin')
    initial_price = data.get('initial_price')
    
    if not base_coin or not quote_coin:
      return jsonify({
        'error': '缺少必要参数(base_coin, quote_coin)'
      }), 400
    
    # 检查货币是否存在
    coins = getattr(default_model, 'coins', {})
    if base_coin not in coins:
      return jsonify({
        'error': '基础货币不存在'
      }), 404
    
    if quote_coin not in coins:
      return jsonify({
        'error': '报价货币不存在'
      }), 404
    
    # 创建市场
    market_id = default_model.create_market(base_coin, quote_coin, initial_price)
    
    return jsonify({
      'status': 'success',
      'message': '市场创建成功',
      'market_id': market_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建市场时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp GET "/markets/<market_id>"
def get_market(market_id):
  """获取特定市场"""
  try:
    markets = getattr(default_model, 'markets', {})
    
    if market_id not in markets:
      return jsonify({
        'error': '市场不存在'
      }), 404
    
    market = markets[market_id]
    
    return jsonify({
      'id': market_id,
      'base_coin': market.get('base_coin', ''),
      'quote_coin': market.get('quote_coin', ''),
      'last_price': market.get('last_price', 0),
      'high_24h': market.get('high_24h', 0),
      'low_24h': market.get('low_24h', 0),
      'volume_24h': market.get('volume_24h', 0),
      'created_at': market.get('created_at', ''),
      'order_count': len(market.get('orders', [])),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"获取市场时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp POST "/markets/<market_id>/orders"
def create_order():
  """创建订单"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取订单数据
    market_id = market_id  # 从URL获取
    wallet_id = data.get('wallet_id')
    side = data.get('side')  # buy/sell
    price = data.get('price')
    amount = data.get('amount')
    
    if not wallet_id or not side or not amount:
      return jsonify({
        'error': '缺少必要参数(wallet_id, side, amount)'
      }), 400
    
    # 检查市场是否存在
    markets = getattr(default_model, 'markets', {})
    if market_id not in markets:
      return jsonify({
        'error': '市场不存在'
      }), 404
    
    # 创建订单
    order_id = default_model.create_order(market_id, wallet_id, side, price, amount)
    
    return jsonify({
      'status': 'success',
      'message': '订单创建成功',
      'order_id': order_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建订单时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp GET "/contracts"
def list_contracts():
  """列出所有合约"""
  try:
    contracts = getattr(default_model, 'contracts', [])
    return jsonify({
      'contracts': contracts,
      'count': len(contracts),
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"列出合约时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@route som_bp POST "/contracts"
def create_contract():
  """创建新合约"""
  try:
    data = request.get_json()
    
    if not data:
      return jsonify({
        'error': '无效的请求数据'
      }), 400
    
    # 获取合约数据
    parties = data.get('parties')
    terms = data.get('terms')
    
    if not parties or not terms:
      return jsonify({
        'error': '缺少必要参数(parties, terms)'
      }), 400
    
    # 创建合约
    contract_id = default_model.create_contract(parties, terms)
    
    return jsonify({
      'status': 'success',
      'message': '合约创建成功',
      'contract_id': contract_id,
      'timestamp': datetime.datetime.now().isoformat()
    })
  except Exception as e:
    logger.error(f"创建合约时出错: {str(e)}")
    return jsonify({
      'error': str(e)
    }), 500

@function run_api_server(host='127.0.0.1', port=DEFAULT_PORT, debug=False):
  """运行API服务器
  
  Args:
      host: 主机地址
      port: 端口号
      debug: 是否启用调试模式
  """
  from flask import Flask
  
  app = Flask(__name__)
  app.register_blueprint(som_bp, url_prefix='/api/som')
  
  logger.info(f"启动SOM API服务: http://{host}:{port}")
  app.run(host=host, port=port, debug=debug)

# 主函数
if __name__ == "__main__":
  run_api_server(debug=True) 