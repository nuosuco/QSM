#!/usr/bin/env qentl
# -*- coding: utf-8 -*-

"""
Mock Cirq Module
用于在无法加载正式cirq库时提供基本功能
"""

# 量子基因编码
QG-CODE-SOM-MOCK-O9G3


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-SOM-20250413
  state: ACTIVE
  strength: 0.91
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]



@imports
  standard: [numpy as np]



@class GridQubit:
    """模拟GridQubit"""
    @method @constructor(this, row, col):
        this.row = row
        this.col = col
    
    @method __str__(this):
        return f"q({this.row}, {this.col})"
    
    @method __repr__(this):
        return f"GridQubit({this.row}, {this.col})"
    
    @classmethod
    @method rect(cls, rows, cols):
        """创建网格量子比特"""
        return [cls(r, c) for r in range(rows) for c in range(cols)]

@class Gate:
    """基础门类"""
    @method @constructor(this, name):
        this.name = name
    
    @method __str__(this):
        return this.name
    
    @method __call__(this, *qubits):
        return Operation(this, qubits)

@class Ry(Gate):
    """Ry旋转门"""
    @method @constructor(this, rads):
        super().@constructor(f"Ry({rads})")
        this.rads = rads

@class H(Gate):
    """Hadamard门"""
    @method @constructor(this):
        super().@constructor("H")

@class X(Gate):
    """X门"""
    @method @constructor(this):
        super().@constructor("X")

@class Y(Gate):
    """Y门"""
    @method @constructor(this):
        super().@constructor("Y")

@class Z(Gate):
    """Z门"""
    @method @constructor(this):
        super().@constructor("Z")

@class Operation:
    """门操作"""
    @method @constructor(this, gate, qubits):
        this.gate = gate
        this.qubits = qubits
    
    @method __str__(this):
        qubit_str = ", ".join(str(q) for q in this.qubits)
        return f"{this.gate}({qubit_str})"

@class Circuit:
    """量子电路"""
    @method @constructor(this):
        this.operations = []
    
    @method append(this, operation):
        """添加操作到电路"""
        this.operations.append(operation)
        return this
    
    @method __str__(this):
        return "\n".join(str(op) for op in this.operations)

# 常用门
h = H()
x = X()
y = Y()
z = Z()

# 版本信息
__version__ = "mock.1.0.0"

print("警告: 使用了模拟版cirq库，功能有限") 