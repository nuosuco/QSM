#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
量子转换器
将常规编程语言文件转换为量子格式 (QEntl, QPy, QJS)
量子基因编码: QG-CONV-UTIL-2024-A1B2
量子纠缠通道: QE-CONV-TOOL-20240406-0.98
"""

import os
import sys
import re
import json
import time
import shutil
import logging
import argparse
from datetime import datetime
from pathlib import Path

# 量子纠缠强度
ENTANGLEMENT_STRENGTH = 0.98

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(f"quantum_conversion_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log")
    ]
)
logger = logging.getLogger(__name__)

# 文件扩展名映射
EXTENSION_MAPPING = {
    '.py': '.qpy',
    '.js': '.qjs',
    '.html': '.qentl',
    '.css': '.qcss',
    '.md': '.qmd',
    '.txt': '.qtxt',
    '.json': '.qson',
    '.xml': '.qxml',
    '.yaml': '.qyaml',
    '.yml': '.qyaml',
    '.sql': '.qsql',
    '.cpp': '.qpp',
    '.c': '.qc',
    '.h': '.qh',
    '.hpp': '.qhpp',
    '.java': '.qjava',
    '.go': '.qgo',
    '.rs': '.qrs',
    '.php': '.qphp',
    '.rb': '.qrb',
    '.ts': '.qts',
    '.jsx': '.qjsx',
    '.tsx': '.qtsx',
}

# 忽略的目录和文件
IGNORE_DIRS = [
    'venv', 'env', '__pycache__', '.git', '.github', 'node_modules',
    'dist', 'build', 'reference', 'backup'
]
IGNORE_FILES = [
    '.gitignore', '.env', '.dockerignore', 'Dockerfile', 'README.md',
    'LICENSE', 'requirements.txt', 'package.json', 'package-lock.json',
    'Cargo.toml', 'Cargo.lock'
]

# 已支持的语言转换器
LANGUAGE_CONVERTERS = {
    'python': {
        'extensions': ['.py'],
        'quantum_extension': '.qpy',
        'patterns': [
            (r'import\s+([a-zA-Z0-9_.]+)', r'quantum_import \1'),
            (r'from\s+([a-zA-Z0-9_.]+)\s+import', r'from_quantum \1 import'),
            (r'def\s+([a-zA-Z0-9_]+)\(', r'quantum_function \1('),
            (r'class\s+([a-zA-Z0-9_]+)(\(.*\))?:', r'quantum_class \1\2:'),
        ]
    },
    'javascript': {
        'extensions': ['.js'],
        'quantum_extension': '.qjs',
        'patterns': [
            (r'function\s+([a-zA-Z0-9_]+)\(', r'quantum_function \1('),
            (r'class\s+([a-zA-Z0-9_]+)(\s+extends\s+[a-zA-Z0-9_]+)?', r'quantum_class \1\2'),
            (r'import\s+(.+)\s+from\s+[\'"](.+)[\'"]', r'quantum_import \1 from "\2"'),
            (r'const\s+([a-zA-Z0-9_]+)\s+=', r'quantum_const \1 ='),
            (r'let\s+([a-zA-Z0-9_]+)\s+=', r'quantum_let \1 ='),
        ]
    },
    'html': {
        'extensions': ['.html'],
        'quantum_extension': '.qentl',
        'patterns': [
            (r'<html', r'<quantum_html'),
            (r'</html>', r'</quantum_html>'),
            (r'<head', r'<quantum_head'),
            (r'</head>', r'</quantum_head>'),
            (r'<body', r'<quantum_body'),
            (r'</body>', r'</quantum_body>'),
            (r'<script', r'<quantum_script'),
            (r'</script>', r'</quantum_script>'),
            (r'<style', r'<quantum_style'),
            (r'</style>', r'</quantum_style>'),
        ]
    }
}

def setup_parser():
    """设置命令行参数解析器"""
    parser = argparse.ArgumentParser(description="量子转换器 - 将常规编程语言文件转换为量子格式")
    parser.add_argument('--file', type=str, help='要转换的单个文件路径')
    parser.add_argument('--module', type=str, help='要转换的模块名称')
    parser.add_argument('--directory', type=str, help='要转换的目录路径')
    parser.add_argument('--dry-run', action='store_true', help='仅显示将要进行的操作，不实际执行')
    parser.add_argument('--force', action='store_true', help='强制转换，即使文件已经是量子格式')
    parser.add_argument('--verbose', action='store_true', help='显示详细日志')
    parser.add_argument('--recursive', action='store_true', help='递归处理子目录')
    parser.add_argument('--reference-dir', type=str, default='reference', help='原始文件的引用目录')
    return parser

def should_ignore(path):
    """判断是否应该忽略给定路径"""
    for ignore_dir in IGNORE_DIRS:
        if f"/{ignore_dir}/" in str(path) or str(path).endswith(f"/{ignore_dir}"):
            return True
    
    filename = os.path.basename(path)
    return filename in IGNORE_FILES or filename.startswith('.') or is_already_quantum(path)

def is_already_quantum(path):
    """判断文件是否已经是量子格式"""
    ext = os.path.splitext(path)[1].lower()
    return ext in ['.qpy', '.qjs', '.qentl', '.qcss', '.qmd', '.qtxt', '.qson', '.qxml', '.qyaml', '.qsql',
                  '.qpp', '.qc', '.qh', '.qhpp', '.qjava', '.qgo', '.qrs', '.qphp', '.qrb', '.qts', '.qjsx', '.qtsx']

def get_quantum_extension(file_path):
    """获取文件对应的量子扩展名"""
    ext = os.path.splitext(file_path)[1].lower()
    return EXTENSION_MAPPING.get(ext, f".q{ext[1:]}" if ext else ".qtxt")

def get_converter_for_file(file_path):
    """获取适用于给定文件的转换器"""
    ext = os.path.splitext(file_path)[1].lower()
    
    for lang, config in LANGUAGE_CONVERTERS.items():
        if ext in config['extensions']:
            return config
    
    return None

def create_reference_path(file_path, reference_dir):
    """创建原始文件的引用路径"""
    abs_path = os.path.abspath(file_path)
    rel_path = os.path.relpath(abs_path, os.path.abspath(os.getcwd()))
    ref_path = os.path.join(reference_dir, rel_path)
    return ref_path

def ensure_reference_dir(reference_path):
    """确保引用目录存在"""
    ref_dir = os.path.dirname(reference_path)
    os.makedirs(ref_dir, exist_ok=True)
    return ref_dir

def convert_file_content(content, converter):
    """转换文件内容"""
    if not converter:
    return content

    # 添加量子头部注释
    timestamp = datetime.now().strftime('%Y%m%d-%H%M%S')
    quantum_header = f"""
# 量子转换时间: {timestamp}
# 量子纠缠强度: {ENTANGLEMENT_STRENGTH}
# 量子编码ID: QCONV-{timestamp[:8]}-{hash(content) % 10000:04d}
"""
    
    result = content
    for pattern, replacement in converter['patterns']:
        result = re.sub(pattern, replacement, result)
    
    return quantum_header + result

def process_file(file_path, dry_run=False, force=False, reference_dir='reference', verbose=False):
    """处理单个文件"""
    if should_ignore(file_path) and not force:
        if verbose:
            logger.info(f"忽略文件: {file_path}")
        return False, f"已忽略: {file_path}"
    
    # 获取转换器
    converter = get_converter_for_file(file_path)
    if not converter and not force:
        if verbose:
            logger.info(f"没有可用的转换器: {file_path}")
        return False, f"无转换器: {file_path}"
    
    # 确定输出文件名
    quantum_ext = get_quantum_extension(file_path)
    base_name = os.path.splitext(file_path)[0]
    quantum_file = f"{base_name}{quantum_ext}"
    
    # 创建引用路径
    ref_path = create_reference_path(file_path, reference_dir)
    
    try:
        # 读取原始内容
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        # 转换内容
        quantum_content = convert_file_content(content, converter)
        
        if not dry_run:
            # 确保引用目录存在
            ensure_reference_dir(ref_path)
            
            # 将原始文件移动到引用目录
            shutil.copy2(file_path, ref_path)
        
        # 写入转换后的内容
            with open(quantum_file, 'w', encoding='utf-8') as f:
                f.write(quantum_content)
            
            # 如果输出文件与原始文件不同，删除原始文件
            if quantum_file != file_path:
                os.remove(file_path)
            
            logger.info(f"已转换: {file_path} -> {quantum_file}")
        else:
            logger.info(f"[干运行] 将转换: {file_path} -> {quantum_file}")
            logger.info(f"[干运行] 原始文件将移至: {ref_path}")
        
        return True, quantum_file
    except Exception as e:
        logger.error(f"转换失败 {file_path}: {str(e)}")
        return False, str(e)

def process_directory(directory, dry_run=False, force=False, recursive=True, reference_dir='reference', verbose=False):
    """处理目录中的所有文件"""
    if not os.path.exists(directory):
        logger.error(f"目录不存在: {directory}")
        return False, "目录不存在"
    
    success_count = 0
    fail_count = 0
    
    for root, dirs, files in os.walk(directory):
        # 过滤忽略的目录
        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS and not d.startswith('.')]
        
        for file in files:
            file_path = os.path.join(root, file)
            
            success, _ = process_file(file_path, dry_run, force, reference_dir, verbose)
        if success:
                success_count += 1
            else:
                fail_count += 1
        
        if not recursive:
            break
    
    total = success_count + fail_count
    if total > 0:
        success_rate = (success_count / total) * 100
        logger.info(f"目录 {directory} 处理完成: 成功 {success_count}, 失败 {fail_count}, 总计 {total}, 成功率 {success_rate:.1f}%")
        
        return True, f"成功率: {success_rate:.1f}%"
        else:
        logger.info(f"目录 {directory} 中没有发现可转换的文件")
        return True, "没有文件转换"

def process_module(module_name, dry_run=False, force=False, recursive=True, reference_dir='reference', verbose=False):
    """处理模块中的所有文件"""
    if not os.path.exists(module_name):
        logger.error(f"模块不存在: {module_name}")
        return False, "模块不存在"
    
    logger.info(f"开始处理模块: {module_name}")
    return process_directory(module_name, dry_run, force, recursive, reference_dir, verbose)

def main():
    """主函数"""
    parser = setup_parser()
    args = parser.parse_args()
    
    # 设置日志级别
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    logger.info("="*50)
    logger.info("量子转换器")
    logger.info(f"量子纠缠强度: {ENTANGLEMENT_STRENGTH}")
    logger.info(f"开始时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("="*50)
    
    success = False
    message = ""
    
    # 处理单个文件
    if args.file:
        logger.info(f"处理文件: {args.file}")
        success, message = process_file(
            args.file, args.dry_run, args.force, args.reference_dir, args.verbose
        )
    
    # 处理整个模块
    elif args.module:
        logger.info(f"处理模块: {args.module}")
        success, message = process_module(
            args.module, args.dry_run, args.force, args.recursive, args.reference_dir, args.verbose
        )
    
    # 处理目录
    elif args.directory:
        logger.info(f"处理目录: {args.directory}")
        success, message = process_directory(
            args.directory, args.dry_run, args.force, args.recursive, args.reference_dir, args.verbose
        )
    
    # 没有提供参数
    else:
        logger.error("请提供要处理的文件、模块或目录")
        parser.print_help()
            return 1
        
    # 输出结果
    logger.info("="*50)
    logger.info("转换完成")
    logger.info(f"状态: {'成功' if success else '失败'}")
    logger.info(f"消息: {message}")
    logger.info(f"完成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("="*50)
        
        return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main()) 