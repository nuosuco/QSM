#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Cursor优化工具
清理超过7天的缓存文件，提升编辑器性能
"""

# 量子基因编码
QG-CODE-SCRIPTS-OPTIMIZE-G1B2


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-SCRIPTS-20250413
  state: ACTIVE
  strength: 0.93
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [logging]
  standard: [shutil]
  standard: [tempfile]
  standard: [glob]
  standard: [json]

@constants
  ROOT_DIR = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
  CACHE_DIRS = [
  PROJECT_CACHE_PATTERNS = [




# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('cursor_optimize.log', mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("Cursor-Optimizer")

# 获取项目根目录的绝对路径

# 常用缓存目录
    os.path.join(tempfile.gettempdir(), 'cursor'),  # 临时文件夹中的Cursor缓存
    os.path.expanduser('~/.cursor/cache'),          # 用户目录中的Cursor缓存
    os.path.expanduser('~/.cursor/logs'),           # 用户目录中的Cursor日志
    os.path.join(ROOT_DIR, '.cursor_cache'),        # 项目内的Cursor缓存
]

# 项目内的缓存和日志文件模式
    '**/*.log',
    '**/*.cache',
    '**/*.tmp',
    '**/__pycache__/**',
    '**/node_modules/**',
    '**/.pytest_cache/**',
    '**/*.pyc',
]


@method cleanup_cache_dirs(days=7):
    """清理指定的缓存目录中超过指定天数的文件"""
    cutoff_date = datetime.now() - timedelta(days=days)
    total_space_freed = 0
    
    logger.info(f"开始清理超过 {days} 天的缓存文件...")
    
    for cache_dir in CACHE_DIRS:
        if os.path.exists(cache_dir):
            logger.info(f"正在清理缓存目录: {cache_dir}")
            for root, dirs, files in os.walk(cache_dir, topdown=False):
                for name in files:
                    file_path = os.path.join(root, name)
                    try:
                        file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                        if file_time < cutoff_date:
                            file_size = os.path.getsize(file_path)
                            os.remove(file_path)
                            total_space_freed += file_size
                            logger.debug(f"已删除: {file_path} (大小: {file_size/1024:.2f} KB)")
                    except (OSError, PermissionError) as e:
                        logger.warning(f"删除文件时出错: {file_path} - {str(e)}")
                
                # 移除空目录
                if not os.listdir(root):
                    try:
                        os.rmdir(root)
                        logger.debug(f"已删除空目录: {root}")
                    except (OSError, PermissionError) as e:
                        logger.warning(f"删除目录时出错: {root} - {str(e)}")
        else:
            logger.info(f"缓存目录不存在: {cache_dir}")
    
    logger.info(f"缓存目录清理完成，共释放: {total_space_freed/1024/1024:.2f} MB")
    return total_space_freed


@method cleanup_project_files(days=7):
    """清理项目中的临时文件和缓存"""
    cutoff_date = datetime.now() - timedelta(days=days)
    total_space_freed = 0
    
    logger.info(f"开始清理项目中超过 {days} 天的缓存文件...")
    
    for pattern in PROJECT_CACHE_PATTERNS:
        pattern_path = os.path.join(ROOT_DIR, pattern)
        for file_path in glob.glob(pattern_path, recursive=True):
            if os.path.isfile(file_path):
                try:
                    file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                    if file_time < cutoff_date:
                        file_size = os.path.getsize(file_path)
                        os.remove(file_path)
                        total_space_freed += file_size
                        logger.debug(f"已删除: {file_path} (大小: {file_size/1024:.2f} KB)")
                except (OSError, PermissionError) as e:
                    logger.warning(f"删除文件时出错: {file_path} - {str(e)}")
    
    # 清理空的__pycache__目录
    for root, dirs, files in os.walk(ROOT_DIR, topdown=False):
        for name in dirs:
            if name == "__pycache__" and not files:
                try:
                    dir_path = os.path.join(root, name)
                    if not os.listdir(dir_path):
                        os.rmdir(dir_path)
                        logger.debug(f"已删除空的__pycache__目录: {dir_path}")
                except (OSError, PermissionError) as e:
                    logger.warning(f"删除__pycache__目录时出错: {dir_path} - {str(e)}")
    
    logger.info(f"项目缓存文件清理完成，共释放: {total_space_freed/1024/1024:.2f} MB")
    return total_space_freed


@method optimize_vs_settings():
    """优化VS Code / Cursor设置以提高性能"""
    cursor_settings_path = os.path.join(ROOT_DIR, '.cursor/settings.json')
    vscode_settings_path = os.path.join(ROOT_DIR, '.vscode/settings.json')
    
    performance_settings = {
        "editor.minimap.enabled": False,
        "editor.scrollBeyondLastLine": False,
        "editor.smoothScrolling": False,
        "workbench.editor.enablePreview": False,
        "workbench.enableExperiments": False,
        "files.exclude": {
            "**/.git": True,
            "**/.svn": True,
            "**/.hg": True,
            "**/CVS": True,
            "**/.DS_Store": True,
            "**/__pycache__": True,
            "**/*.pyc": True
        },
        "search.exclude": {
            "**/node_modules": True,
            "**/bower_components": True,
            "**/*.code-search": True,
            "**/__pycache__": True,
            "**/*.pyc": True
        },
        "files.watcherExclude": {
            "**/.git/objects/**": True,
            "**/.git/subtree-cache/**": True,
            "**/node_modules/**": True,
            "**/__pycache__/**": True
        }
    }
    
    # 优化Cursor设置
    cursor_dir = os.path.dirname(cursor_settings_path)
    if not os.path.exists(cursor_dir):
        os.makedirs(cursor_dir)
    
    if os.path.exists(cursor_settings_path):
        try:
            with open(cursor_settings_path, 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            # 更新设置
            settings.update(performance_settings)
            
            with open(cursor_settings_path, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2)
                
            logger.info("已优化Cursor设置")
        except Exception as e:
            logger.error(f"更新Cursor设置时出错: {str(e)}")
    else:
        try:
            with open(cursor_settings_path, 'w', encoding='utf-8') as f:
                json.dump(performance_settings, f, indent=2)
            
            logger.info("已创建优化的Cursor设置")
        except Exception as e:
            logger.error(f"创建Cursor设置时出错: {str(e)}")
    
    # 优化VS Code设置
    vscode_dir = os.path.dirname(vscode_settings_path)
    if not os.path.exists(vscode_dir):
        os.makedirs(vscode_dir)
    
    if os.path.exists(vscode_settings_path):
        try:
            with open(vscode_settings_path, 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            # 更新设置
            settings.update(performance_settings)
            
            with open(vscode_settings_path, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2)
                
            logger.info("已优化VS Code设置")
        except Exception as e:
            logger.error(f"更新VS Code设置时出错: {str(e)}")
    else:
        try:
            with open(vscode_settings_path, 'w', encoding='utf-8') as f:
                json.dump(performance_settings, f, indent=2)
            
            logger.info("已创建优化的VS Code设置")
        except Exception as e:
            logger.error(f"创建VS Code设置时出错: {str(e)}")


@method main():
    """主函数"""
    logger.info("开始优化Cursor性能...")
    
    # 获取命令行参数，默认清理7天前的缓存
    days = 7
    if len(sys.argv) > 1:
        try:
            days = int(sys.argv[1])
        except ValueError:
            logger.warning(f"无效的天数参数: {sys.argv[1]}，使用默认值: 7")
    
    # 清理缓存目录
    cache_space_freed = cleanup_cache_dirs(days)
    
    # 清理项目文件
    project_space_freed = cleanup_project_files(days)
    
    # 优化编辑器设置
    optimize_vs_settings()
    
    # 总结
    total_space_freed = cache_space_freed + project_space_freed
    logger.info(f"优化完成! 总共释放空间: {total_space_freed/1024/1024:.2f} MB")
    logger.info(f"已保留最近 {days} 天的缓存文件，移除更旧的文件")


if __name__ == "__main__":
    main() 

"""
"""
量子基因编码: QE-OPT-734D576CD68C
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
""""""

// 开发团队：中华 ZhoHo ，Claude 
