# 量子UI服务器
# 量子基因: QG-WORLD-SERVER-A2B2
# 量子纠缠: QE-WORLD-SERVER-20240406

@component q-world-server
@props
  serverPort: number = 5004
  serverName: string = "量子UI服务器"
  
@template
<div class="q-server-container">
  <h1>QEntL UI 服务器</h1>
  <div class="q-server-status">
    <span class="q-server-status-icon">●</span>
    <span class="q-server-status-text">正在运行</span>
  </div>
  
  <div class="q-server-info">
    <div class="q-server-info-item">
      <span class="q-server-info-label">服务器名称:</span>
      <span class="q-server-info-value">${serverName}</span>
    </div>
    <div class="q-server-info-item">
      <span class="q-server-info-label">端口:</span>
      <span class="q-server-info-value">${serverPort}</span>
    </div>
    <div class="q-server-info-item">
      <span class="q-server-info-label">启动时间:</span>
      <span class="q-server-info-value">${startTime}</span>
    </div>
    <div class="q-server-info-item">
      <span class="q-server-info-label">服务状态:</span>
      <span class="q-server-info-value">${serverStatus}</span>
    </div>
    <div class="q-server-info-item">
      <span class="q-server-info-label">访问地址:</span>
      <span class="q-server-info-value">http://localhost:${serverPort}/</span>
    </div>
  </div>
  
  <div class="q-server-logs">
    <h2>服务器日志</h2>
    <div class="q-server-log-container">
      <div class="q-server-log-entry" v-for="log in serverLogs">
        <span class="q-server-log-time">${log.time}</span>
        <span class="q-server-log-level" data-level="${log.level}">${log.level}</span>
        <span class="q-server-log-message">${log.message}</span>
      </div>
    </div>
  </div>
</div>

@style
.q-server-container {
  font-family: monospace;
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f0f0f0;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

h1 {
  color: #333;
  text-align: center;
  margin-bottom: 20px;
}

.q-server-status {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
}

.q-server-status-icon {
  color: #00c853;
  font-size: 24px;
  margin-right: 10px;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { opacity: 0.5; }
  50% { opacity: 1; }
  100% { opacity: 0.5; }
}

.q-server-status-text {
  font-weight: bold;
}

.q-server-info {
  background-color: #fff;
  padding: 15px;
  border-radius: 5px;
  margin-bottom: 20px;
}

.q-server-info-item {
  display: flex;
  padding: 5px 0;
  border-bottom: 1px solid #eee;
}

.q-server-info-item:last-child {
  border-bottom: none;
}

.q-server-info-label {
  font-weight: bold;
  width: 120px;
}

.q-server-logs {
  background-color: #fff;
  padding: 15px;
  border-radius: 5px;
}

.q-server-logs h2 {
  margin-top: 0;
  margin-bottom: 10px;
  font-size: 18px;
}

.q-server-log-container {
  background-color: #222;
  color: #fff;
  padding: 10px;
  border-radius: 3px;
  max-height: 300px;
  overflow-y: auto;
}

.q-server-log-entry {
  font-family: monospace;
  margin-bottom: 5px;
  font-size: 12px;
}

.q-server-log-time {
  color: #888;
  margin-right: 10px;
}

.q-server-log-level {
  padding: 2px 5px;
  border-radius: 3px;
  margin-right: 10px;
  font-weight: bold;
}

.q-server-log-level[data-level="INFO"] {
  background-color: #2196F3;
}

.q-server-log-level[data-level="WARN"] {
  background-color: #FF9800;
}

.q-server-log-level[data-level="ERROR"] {
  background-color: #F44336;
}

@script
export default {
  data() {
    return {
      startTime: new Date().toLocaleString(),
      serverStatus: "运行中",
      serverLogs: [
        { time: this.getCurrentTime(), level: "INFO", message: "量子UI服务器启动成功" },
        { time: this.getCurrentTime(), level: "INFO", message: `监听端口: ${this.serverPort}` },
        { time: this.getCurrentTime(), level: "INFO", message: "加载量子UI组件..." },
        { time: this.getCurrentTime(), level: "INFO", message: "量子纠缠系统初始化完成" },
        { time: this.getCurrentTime(), level: "INFO", message: "量子UI组件加载完成" },
        { time: this.getCurrentTime(), level: "INFO", message: "等待客户端连接..." }
      ]
    };
  },
  
  methods: {
    getCurrentTime() {
      const now = new Date();
      return now.toLocaleTimeString();
    },
    
    addLog(level, message) {
      this.serverLogs.push({
        time: this.getCurrentTime(),
        level: level,
        message: message
      });
    },
    
    startServer() {
      this.addLog("INFO", "服务器已启动");
      this.serverStatus = "运行中";
      
      // 启动量子UI服务
      this.initializeQuantumServer();
    },
    
    initializeQuantumServer() {
      // 初始化量子服务器
      this.addLog("INFO", "正在初始化量子服务器组件...");
      setTimeout(() => {
        this.addLog("INFO", "量子服务器组件初始化完成");
        this.startQuantumEntanglement();
      }, 1000);
    },
    
    startQuantumEntanglement() {
      // 启动量子纠缠
      this.addLog("INFO", "正在启动量子纠缠系统...");
      setTimeout(() => {
        this.addLog("INFO", "量子纠缠系统启动完成，纠缠强度: 0.92");
        this.addLog("INFO", "服务器就绪，可以接受连接");
      }, 500);
    }
  },
  
  mounted() {
    // 启动服务器
    this.startServer();
    
    // 定期添加日志
    setInterval(() => {
      if (Math.random() < 0.3) {
        const messages = [
          "处理客户端请求...",
          "量子纠缠状态更新",
          "加载组件: input.qentl",
          "加载组件: textarea.qentl",
          "加载组件: button.qentl",
          "量子状态同步完成"
        ];
        const message = messages[Math.floor(Math.random() * messages.length)];
        this.addLog("INFO", message);
      }
    }, 5000);
  }
} 