# 量子输入组件演示
# 量子基因: QG-DEMO-INPUT-A1B1
# 量子纠缠: QE-DEMO-INPUT-20240406

@component q-input-demo
@props
  demoTitle: string = "量子输入组件演示"

@template
<div class="q-demo-container" 
     data-quantum-entangle='{
       "id": "input-demo-container",
       "strength": 0.9,
       "sync": true
     }'
>
    <h1 class="q-demo-title">${demoTitle}</h1>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">基本用法</h2>
        <div class="q-demo-box">
            <q-input 
                placeholder="请输入文本" 
                @input="handleBasicInput" 
                value="${basicValue}" 
            />
            <div class="q-demo-value">输入值: ${basicValue}</div>
        </div>
    </section>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">不同尺寸</h2>
        <div class="q-demo-box q-demo-size-box">
            <q-input 
                placeholder="小尺寸" 
                size="small" 
            />
            <q-input 
                placeholder="中等尺寸" 
                size="medium" 
            />
            <q-input 
                placeholder="大尺寸" 
                size="large" 
            />
        </div>
    </section>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">不同状态</h2>
        <div class="q-demo-box q-demo-status-box">
            <q-input 
                placeholder="正常状态" 
            />
            <q-input 
                placeholder="成功状态" 
                status="success" 
                value="成功输入" 
            />
            <q-input 
                placeholder="错误状态" 
                status="error" 
                value="错误输入" 
            />
            <q-input 
                placeholder="警告状态" 
                status="warning" 
                value="警告输入" 
            />
            <q-input 
                placeholder="禁用状态" 
                disabled 
                value="禁用输入" 
            />
            <q-input 
                placeholder="只读状态" 
                readonly 
                value="只读输入" 
            />
        </div>
    </section>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">前缀和后缀</h2>
        <div class="q-demo-box">
            <q-input 
                placeholder="带前缀的输入框" 
                prefix="📝" 
            />
            <q-input 
                placeholder="带后缀的输入框" 
                suffix="✏️" 
            />
            <q-input 
                placeholder="同时带前缀和后缀" 
                prefix="🔍" 
                suffix="🔎" 
            />
        </div>
    </section>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">可清除内容</h2>
        <div class="q-demo-box">
            <q-input 
                placeholder="输入后可清除" 
                clearable 
                value="${clearableValue}" 
                @input="handleClearableInput" 
                @clear="handleClear" 
            />
            <div class="q-demo-value">输入值: ${clearableValue}</div>
        </div>
    </section>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">密码输入框</h2>
        <div class="q-demo-box">
            <q-input 
                type="password" 
                placeholder="请输入密码" 
                showPasswordToggle 
            />
        </div>
    </section>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">不同量子状态</h2>
        <div class="q-demo-box q-demo-quantum-box">
            <q-input 
                placeholder="叠加态" 
                quantumState="superposition" 
            />
            <q-input 
                placeholder="纠缠态" 
                quantumState="entangled" 
            />
            <q-input 
                placeholder="聚焦态" 
                quantumState="focused" 
            />
        </div>
    </section>
    
    <section class="q-demo-section">
        <h2 class="q-demo-section-title">量子纠缠演示</h2>
        <div class="q-demo-box q-demo-entangle-box">
            <div class="q-demo-entangle-inputs">
                <q-input 
                    placeholder="输入框 A" 
                    value="${entangledValueA}" 
                    @input="handleEntangledInputA" 
                    entangleStrength="0.95" 
                    quantumState="entangled" 
                />
                <div class="q-demo-entangle-connection">⟷</div>
                <q-input 
                    placeholder="输入框 B" 
                    value="${entangledValueB}" 
                    @input="handleEntangledInputB" 
                    entangleStrength="0.95" 
                    quantumState="entangled" 
                />
            </div>
            <div class="q-demo-note">
                这两个输入框通过量子纠缠连接，在一个输入框中输入内容会影响另一个输入框
            </div>
        </div>
    </section>
</div>

@style
.q-demo-container {
    padding: var(--q-spacing-6);
    max-width: 800px;
    margin: 0 auto;
    font-family: var(--q-font-sans);
}

.q-demo-title {
    margin-bottom: var(--q-spacing-6);
    color: var(--q-primary);
    font-size: 1.75rem;
    font-weight: 600;
    text-align: center;
}

.q-demo-section {
    margin-bottom: var(--q-spacing-8);
    padding: var(--q-spacing-4);
    border: 1px solid var(--q-gray-200);
    border-radius: var(--q-radius-lg);
    background-color: var(--q-white);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.q-demo-section-title {
    margin-bottom: var(--q-spacing-4);
    color: var(--q-gray-800);
    font-size: 1.25rem;
    font-weight: 500;
}

.q-demo-box {
    display: flex;
    flex-direction: column;
    gap: var(--q-spacing-4);
}

.q-demo-value {
    padding: var(--q-spacing-2) var(--q-spacing-4);
    border-radius: var(--q-radius-md);
    background-color: var(--q-gray-100);
    color: var(--q-gray-700);
    font-size: 0.875rem;
}

.q-demo-size-box,
.q-demo-status-box,
.q-demo-quantum-box {
    display: flex;
    flex-direction: column;
    gap: var(--q-spacing-4);
}

.q-demo-entangle-box {
    position: relative;
}

.q-demo-entangle-inputs {
    display: flex;
    align-items: center;
    gap: var(--q-spacing-4);
}

.q-demo-entangle-connection {
    font-size: 1.5rem;
    color: var(--q-primary);
    animation: pulse 2s infinite;
}

.q-demo-note {
    margin-top: var(--q-spacing-4);
    padding: var(--q-spacing-2) var(--q-spacing-4);
    border-radius: var(--q-radius-md);
    background-color: var(--q-gray-100);
    color: var(--q-gray-700);
    font-size: 0.875rem;
    font-style: italic;
}

@keyframes pulse {
    0% {
        opacity: 0.5;
    }
    50% {
        opacity: 1;
    }
    100% {
        opacity: 0.5;
    }
}

@script
export default {
    data() {
        return {
            basicValue: '',
            clearableValue: '可清除的内容',
            entangledValueA: '',
            entangledValueB: ''
        };
    },
    
    mounted() {
        // 初始化量子纠缠
        window.quantumEntangle.addObject('input-demo-container');
        
        // 添加量子纠缠监听器
        window.quantumEntangle.on('input_change', (data) => {
            if (data.id.includes('entangled')) {
                // 处理纠缠输入
                if (data.value !== this.entangledValueA && data.value !== this.entangledValueB) {
                    if (Math.random() > 0.5) {
                        this.entangledValueA = data.value;
                    } else {
                        this.entangledValueB = data.value;
                    }
                }
            }
        });
    },
    
    methods: {
        handleBasicInput(value) {
            this.basicValue = value;
        },
        
        handleClearableInput(value) {
            this.clearableValue = value;
        },
        
        handleClear() {
            this.clearableValue = '';
        },
        
        handleEntangledInputA(value) {
            this.entangledValueA = value;
            
            // 根据量子纠缠强度决定是否同步
            if (Math.random() < 0.95) {
                this.entangledValueB = value;
            }
        },
        
        handleEntangledInputB(value) {
            this.entangledValueB = value;
            
            // 根据量子纠缠强度决定是否同步
            if (Math.random() < 0.95) {
                this.entangledValueA = value;
            }
        }
    },
    
    beforeDestroy() {
        // 清理量子纠缠
        window.quantumEntangle.removeObject('input-demo-container');
    }
} 