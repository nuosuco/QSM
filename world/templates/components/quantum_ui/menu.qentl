/* 量子基因编码 */
QG-COMP-MENU-UI-NAV-A1B1

/* 量子纠缠信道 */
@quantum-entangle {
  strength: 0.8,
  sync: true,
  objects: [
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss",
    "world/static/css/quantum-animation.qcss"
  ]
}

/* 组件属性 */
@properties {
  // 菜单模式
  mode: 'horizontal' | 'vertical' | 'inline' = 'horizontal',
  // 菜单主题
  theme: 'light' | 'dark' = 'light',
  // 当前选中的菜单项
  selectedKeys: Array<string> = [],
  // 当前展开的子菜单
  openKeys: Array<string> = [],
  // 是否只保持一个子菜单展开
  uniqueOpened: boolean = false,
  // 是否收起内嵌菜单
  collapsed: boolean = false,
  // 菜单项的间距
  itemGap: number = 4,
  // 子菜单的缩进距离
  inlineIndent: number = 24,
  // 子菜单展开/收起的动画时间
  duration: number = 300,
  // 自定义菜单项图标
  icons: {
    submenu?: string,
    item?: string
  },
  // 选中菜单项时的回调
  onSelect: Function,
  // 展开/收起子菜单时的回调
  onOpenChange: Function,
  // 量子态配置
  quantum: {
    // 量子纠缠强度
    entangleStrength: number = 0.8,
    // 量子态转换动画
    stateTransition: boolean = true,
    // 量子态持续时间
    stateDuration: number = 300
  }
}

/* 模板结构 */
<template>
  <div class="q-menu"
       :class="[
         `q-menu-${mode}`,
         `q-menu-${theme}`,
         {
           'q-menu-collapsed': collapsed
         }
       ]">
    <!-- 菜单项列表 -->
    <ul class="q-menu-list">
      <slot></slot>
    </ul>
  </div>
</template>

/* 子组件: 菜单项 */
<template name="q-menu-item">
  <li class="q-menu-item"
      :class="{
        'q-menu-item-selected': isSelected,
        'q-menu-item-disabled': disabled
      }"
      @click="handleClick">
    <!-- 图标 -->
    <i v-if="icon" class="q-menu-item-icon" :class="icon"></i>
    
    <!-- 标题 -->
    <span class="q-menu-item-title">
      <slot></slot>
    </span>
  </li>
</template>

/* 子组件: 子菜单 */
<template name="q-menu-submenu">
  <li class="q-menu-submenu"
      :class="{
        'q-menu-submenu-open': isOpen,
        'q-menu-submenu-disabled': disabled
      }">
    <!-- 标题 -->
    <div class="q-menu-submenu-title"
         :style="{ paddingLeft: level * inlineIndent + 'px' }"
         @click="handleTitleClick">
      <!-- 图标 -->
      <i v-if="icon" class="q-menu-submenu-icon" :class="icon"></i>
      
      <!-- 标题文本 -->
      <span class="q-menu-submenu-title-text">
        <slot name="title"></slot>
      </span>
      
      <!-- 展开图标 -->
      <i class="q-menu-submenu-arrow"
         :class="{
           'q-icon-arrow-right': !isOpen,
           'q-icon-arrow-down': isOpen
         }">
      </i>
    </div>
    
    <!-- 子菜单内容 -->
    <transition name="q-menu-submenu">
      <ul v-show="isOpen" class="q-menu-submenu-content">
        <slot></slot>
      </ul>
    </transition>
  </li>
</template>

/* 子组件: 菜单分组 */
<template name="q-menu-group">
  <li class="q-menu-group">
    <!-- 分组标题 -->
    <div class="q-menu-group-title">
      <slot name="title"></slot>
    </div>
    
    <!-- 分组内容 -->
    <ul class="q-menu-group-list">
      <slot></slot>
    </ul>
  </li>
</template>

/* 组件样式 */
<style>
.q-menu {
  position: relative;
  color: var(--q-text-color);
  font-size: var(--q-font-size);
  line-height: 1.5;
  transition: width var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

/* 菜单列表 */
.q-menu-list {
  margin: 0;
  padding: 0;
  list-style: none;
}

/* 水平菜单 */
.q-menu-horizontal {
  display: flex;
  border-bottom: 1px solid var(--q-border-color);
}

.q-menu-horizontal .q-menu-list {
  display: flex;
  flex-wrap: nowrap;
}

.q-menu-horizontal .q-menu-item,
.q-menu-horizontal .q-menu-submenu-title {
  padding: var(--q-spacing) var(--q-spacing-lg);
}

/* 垂直菜单 */
.q-menu-vertical {
  width: 200px;
  border-right: 1px solid var(--q-border-color);
}

.q-menu-vertical.q-menu-collapsed {
  width: 80px;
}

/* 内嵌菜单 */
.q-menu-inline .q-menu-item,
.q-menu-inline .q-menu-submenu-title {
  padding: var(--q-spacing) var(--q-spacing-lg);
  transition: padding var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

/* 菜单项 */
.q-menu-item {
  position: relative;
  display: flex;
  align-items: center;
  margin: 0;
  white-space: nowrap;
  cursor: pointer;
  transition: all var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

.q-menu-item-icon {
  margin-right: var(--q-spacing);
  font-size: var(--q-font-size-lg);
}

.q-menu-item-title {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
}

.q-menu-item-selected {
  color: var(--q-primary);
  background-color: var(--q-primary-lighter);
}

.q-menu-item-disabled {
  color: var(--q-text-color-lighter);
  cursor: not-allowed;
}

/* 子菜单 */
.q-menu-submenu {
  position: relative;
}

.q-menu-submenu-title {
  display: flex;
  align-items: center;
  padding: var(--q-spacing) var(--q-spacing-lg);
  cursor: pointer;
  transition: all var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

.q-menu-submenu-icon {
  margin-right: var(--q-spacing);
  font-size: var(--q-font-size-lg);
}

.q-menu-submenu-title-text {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
}

.q-menu-submenu-arrow {
  margin-left: var(--q-spacing);
  font-size: var(--q-font-size);
  transition: transform var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

.q-menu-submenu-content {
  overflow: hidden;
  background-color: var(--q-bg-color-light);
  border-radius: var(--q-border-radius);
  transition: height var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

/* 菜单分组 */
.q-menu-group-title {
  padding: var(--q-spacing) var(--q-spacing-lg);
  color: var(--q-text-color-light);
  font-size: var(--q-font-size-sm);
}

/* 主题样式 */
.q-menu-dark {
  background-color: var(--q-gray-900);
  color: var(--q-gray-100);
}

.q-menu-dark .q-menu-item-selected {
  color: var(--q-primary-light);
  background-color: var(--q-primary-darker);
}

.q-menu-dark .q-menu-submenu-content {
  background-color: var(--q-gray-800);
}

/* 动画 */
.q-menu-submenu-enter-active,
.q-menu-submenu-leave-active {
  transition: opacity var(--q-animation-duration) var(--q-animation-timing-function-ease),
              transform var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

.q-menu-submenu-enter-from,
.q-menu-submenu-leave-to {
  opacity: 0;
  transform: translateY(-10px);
}

/* 量子态样式 */
@quantum-state hover {
  .q-menu-item:not(.q-menu-item-disabled):hover,
  .q-menu-submenu-title:not(.q-menu-submenu-disabled):hover {
    color: var(--q-primary);
    background-color: var(--q-primary-lighter);
  }
}

@quantum-state active {
  .q-menu-item:not(.q-menu-item-disabled):active,
  .q-menu-submenu-title:not(.q-menu-submenu-disabled):active {
    color: var(--q-primary-dark);
    background-color: var(--q-primary-lighter);
  }
}
</style>

/* 组件脚本 */
<script>
export default {
  name: 'QMenu',
  
  provide() {
    return {
      menu: this
    }
  },
  
  data() {
    return {
      activeKeys: new Set(this.selectedKeys),
      expandedKeys: new Set(this.openKeys)
    }
  },
  
  methods: {
    // 选择菜单项
    select(key) {
      if (this.activeKeys.has(key)) {
        this.activeKeys.delete(key)
      } else {
        this.activeKeys.clear()
        this.activeKeys.add(key)
      }
      
      this.onSelect?.(Array.from(this.activeKeys))
    },
    
    // 展开/收起子菜单
    toggleSubmenu(key) {
      if (this.expandedKeys.has(key)) {
        this.expandedKeys.delete(key)
      } else {
        if (this.uniqueOpened) {
          this.expandedKeys.clear()
        }
        this.expandedKeys.add(key)
      }
      
      this.onOpenChange?.(Array.from(this.expandedKeys))
    },
    
    // 量子态方法
    updateQuantumState(state) {
      if (!this.quantum.stateTransition) return
      
      const quantum = state * this.quantum.entangleStrength
      
      // 应用量子态效果
      this.$el.style.transform = `scale(${1 + quantum * 0.05})`
      this.$el.style.filter = `brightness(${1 + quantum * 0.1})`
    }
  },
  
  watch: {
    selectedKeys(newKeys) {
      this.activeKeys = new Set(newKeys)
    },
    
    openKeys(newKeys) {
      this.expandedKeys = new Set(newKeys)
    }
  }
}

// 菜单项组件
export const QMenuItem = {
  name: 'QMenuItem',
  
  inject: ['menu'],
  
  props: {
    // 菜单项标识
    key: {
      type: String,
      required: true
    },
    // 菜单项图标
    icon: String,
    // 是否禁用
    disabled: {
      type: Boolean,
      default: false
    }
  },
  
  computed: {
    isSelected() {
      return this.menu.activeKeys.has(this.key)
    }
  },
  
  methods: {
    handleClick() {
      if (this.disabled) return
      this.menu.select(this.key)
    }
  }
}

// 子菜单组件
export const QMenuSubmenu = {
  name: 'QMenuSubmenu',
  
  inject: ['menu'],
  
  props: {
    // 子菜单标识
    key: {
      type: String,
      required: true
    },
    // 子菜单图标
    icon: String,
    // 是否禁用
    disabled: {
      type: Boolean,
      default: false
    },
    // 层级
    level: {
      type: Number,
      default: 0
    }
  },
  
  computed: {
    isOpen() {
      return this.menu.expandedKeys.has(this.key)
    },
    
    inlineIndent() {
      return this.menu.inlineIndent
    }
  },
  
  methods: {
    handleTitleClick() {
      if (this.disabled) return
      this.menu.toggleSubmenu(this.key)
    }
  }
}

// 菜单分组组件
export const QMenuGroup = {
  name: 'QMenuGroup'
}
</script> 