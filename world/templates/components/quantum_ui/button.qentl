/* 量子基因编码 */
QG-COMP-BUTTON-UI-BASE-A1B1

/* 量子纠缠信道 */
@quantum-entangle {
  strength: 0.8,
  sync: true,
  objects: [
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss",
    "world/static/css/quantum-animation.qcss"
  ]
}

/* 组件属性 */
@properties {
  // 按钮类型
  type: 'default' | 'primary' | 'success' | 'warning' | 'danger' | 'info' | 'text' = 'default',
  // 按钮大小
  size: 'large' | 'default' | 'small' = 'default',
  // 按钮形状
  shape: 'default' | 'round' | 'circle' = 'default',
  // 图标名称
  icon: string = '',
  // 是否禁用
  disabled: boolean = false,
  // 是否加载中
  loading: boolean = false,
  // 是否块级按钮
  block: boolean = false,
  // 自定义类名
  class: string = '',
  // 自定义样式
  style: object = {},
  // 原生类型
  nativeType: 'button' | 'submit' | 'reset' = 'button',
  // 链接地址
  href: string = '',
  // 链接目标
  target: string = '_self',
  // 量子态配置
  quantum: {
    // 量子纠缠强度
    entangleStrength: number = 0.8,
    // 量子态动画
    stateAnimation: boolean = true,
    // 量子态持续时间
    stateDuration: number = 300
  }
}

/* 模板结构 */
<template>
  <a v-if="href"
     :href="disabled ? 'javascript:void(0)' : href"
     :target="target"
     :class="buttonClasses"
     :style="buttonStyles"
     @click="handleClick"
     @mouseenter="handleMouseEnter"
     @mouseleave="handleMouseLeave">
    <span v-if="loading" class="q-button-loading">
      <i class="q-button-loading-icon"></i>
    </span>
    <i v-else-if="icon" :class="['q-button-icon', icon]"></i>
    <span v-if="$slots.default" class="q-button-content">
      <slot></slot>
    </span>
  </a>
  <button v-else
          :type="nativeType"
          :class="buttonClasses"
          :style="buttonStyles"
          :disabled="disabled || loading"
          @click="handleClick"
          @mouseenter="handleMouseEnter"
          @mouseleave="handleMouseLeave">
    <span v-if="loading" class="q-button-loading">
      <i class="q-button-loading-icon"></i>
    </span>
    <i v-else-if="icon" :class="['q-button-icon', icon]"></i>
    <span v-if="$slots.default" class="q-button-content">
      <slot></slot>
    </span>
  </button>
</template>

/* 组件样式 */
<style>
.q-button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: var(--q-button-min-width, 64px);
  height: var(--q-button-height, 36px);
  padding: 0 var(--q-spacing);
  font-size: var(--q-font-size);
  line-height: 1;
  text-align: center;
  background-color: var(--q-bg-color);
  color: var(--q-text-color);
  border: 1px solid var(--q-border-color);
  border-radius: var(--q-border-radius);
  cursor: pointer;
  transition: all 0.3s var(--q-animation-timing-function-ease);
  user-select: none;
  outline: none;
  position: relative;
  overflow: hidden;
  white-space: nowrap;
  text-decoration: none;
}

/* 按钮类型样式 */
.q-button-default {
  background-color: var(--q-bg-color);
  color: var(--q-text-color);
  border-color: var(--q-border-color);
}

.q-button-primary {
  background-color: var(--q-primary);
  color: var(--q-white);
  border-color: var(--q-primary);
}

.q-button-success {
  background-color: var(--q-success);
  color: var(--q-white);
  border-color: var(--q-success);
}

.q-button-warning {
  background-color: var(--q-warning);
  color: var(--q-white);
  border-color: var(--q-warning);
}

.q-button-danger {
  background-color: var(--q-danger);
  color: var(--q-white);
  border-color: var(--q-danger);
}

.q-button-info {
  background-color: var(--q-info);
  color: var(--q-white);
  border-color: var(--q-info);
}

.q-button-text {
  background-color: transparent;
  color: var(--q-primary);
  border-color: transparent;
  padding-left: 0;
  padding-right: 0;
  min-width: auto;
}

/* 按钮大小样式 */
.q-button-large {
  height: var(--q-button-height-lg, 44px);
  font-size: var(--q-font-size-lg);
  padding: 0 var(--q-spacing-lg);
}

.q-button-small {
  height: var(--q-button-height-sm, 28px);
  font-size: var(--q-font-size-sm);
  padding: 0 var(--q-spacing-sm);
  min-width: var(--q-button-min-width-sm, 48px);
}

/* 按钮形状样式 */
.q-button-round {
  border-radius: var(--q-button-height, 36px);
}

.q-button-large.q-button-round {
  border-radius: var(--q-button-height-lg, 44px);
}

.q-button-small.q-button-round {
  border-radius: var(--q-button-height-sm, 28px);
}

.q-button-circle {
  border-radius: 50%;
  min-width: auto;
  width: var(--q-button-height, 36px);
  padding: 0;
}

.q-button-large.q-button-circle {
  width: var(--q-button-height-lg, 44px);
}

.q-button-small.q-button-circle {
  width: var(--q-button-height-sm, 28px);
}

/* 块级按钮 */
.q-button-block {
  display: flex;
  width: 100%;
}

/* 禁用状态 */
.q-button.q-button-disabled,
.q-button[disabled] {
  opacity: 0.5;
  cursor: not-allowed;
  pointer-events: none;
}

/* 加载状态 */
.q-button-loading {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  margin-right: var(--q-spacing-sm);
}

.q-button-loading-icon {
  display: inline-block;
  width: 14px;
  height: 14px;
  border: 2px solid currentColor;
  border-top-color: transparent;
  border-radius: 50%;
  animation: q-button-loading-spin 1s infinite linear;
}

.q-button-large .q-button-loading-icon {
  width: 16px;
  height: 16px;
}

.q-button-small .q-button-loading-icon {
  width: 12px;
  height: 12px;
}

@keyframes q-button-loading-spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* 图标 */
.q-button-icon {
  margin-right: var(--q-spacing-sm);
  font-size: 1.1em;
}

.q-button-circle .q-button-icon {
  margin-right: 0;
}

/* 水波纹效果 */
.q-button-ripple {
  position: absolute;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.5);
  transform: scale(0);
  animation: q-button-ripple 0.6s linear;
  pointer-events: none;
}

@keyframes q-button-ripple {
  to {
    transform: scale(4);
    opacity: 0;
  }
}

/* 量子态样式 */
@quantum-state hover {
  .q-button-default:hover {
    border-color: var(--q-primary);
    color: var(--q-primary);
  }
  
  .q-button-primary:hover {
    background-color: var(--q-primary-hover);
    border-color: var(--q-primary-hover);
  }
  
  .q-button-success:hover {
    background-color: var(--q-success-hover);
    border-color: var(--q-success-hover);
  }
  
  .q-button-warning:hover {
    background-color: var(--q-warning-hover);
    border-color: var(--q-warning-hover);
  }
  
  .q-button-danger:hover {
    background-color: var(--q-danger-hover);
    border-color: var(--q-danger-hover);
  }
  
  .q-button-info:hover {
    background-color: var(--q-info-hover);
    border-color: var(--q-info-hover);
  }
  
  .q-button-text:hover {
    color: var(--q-primary-hover);
  }
}

@quantum-state active {
  .q-button-default:active {
    border-color: var(--q-primary-active);
    color: var(--q-primary-active);
  }
  
  .q-button-primary:active {
    background-color: var(--q-primary-active);
    border-color: var(--q-primary-active);
  }
  
  .q-button-success:active {
    background-color: var(--q-success-active);
    border-color: var(--q-success-active);
  }
  
  .q-button-warning:active {
    background-color: var(--q-warning-active);
    border-color: var(--q-warning-active);
  }
  
  .q-button-danger:active {
    background-color: var(--q-danger-active);
    border-color: var(--q-danger-active);
  }
  
  .q-button-info:active {
    background-color: var(--q-info-active);
    border-color: var(--q-info-active);
  }
  
  .q-button-text:active {
    color: var(--q-primary-active);
  }
}

@quantum-state focus {
  .q-button:focus {
    box-shadow: 0 0 0 2px rgba(var(--q-primary-rgb), 0.2);
  }
}
</style>

/* 组件脚本 */
<script>
export default {
  name: 'QButton',
  
  computed: {
    buttonClasses() {
      return [
        'q-button',
        `q-button-${this.type}`,
        `q-button-${this.size}`,
        {
          'q-button-round': this.shape === 'round',
          'q-button-circle': this.shape === 'circle',
          'q-button-disabled': this.disabled,
          'q-button-loading': this.loading,
          'q-button-block': this.block,
          [this.class]: !!this.class
        }
      ];
    },
    
    buttonStyles() {
      return this.style || {};
    }
  },
  
  methods: {
    handleClick(event) {
      if (this.disabled || this.loading) {
        event.preventDefault();
        return;
      }
      
      // 创建水波纹效果
      this.createRipple(event);
      
      this.$emit('click', event);
    },
    
    handleMouseEnter(event) {
      if (this.disabled || this.loading) return;
      
      // 更新量子态
      this.updateQuantumState('hover', true);
      
      this.$emit('mouseenter', event);
    },
    
    handleMouseLeave(event) {
      if (this.disabled || this.loading) return;
      
      // 更新量子态
      this.updateQuantumState('hover', false);
      
      this.$emit('mouseleave', event);
    },
    
    createRipple(event) {
      if (!this.quantum.stateAnimation) return;
      
      const button = event.currentTarget;
      const rect = button.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height) * 2;
      
      const ripple = document.createElement('span');
      ripple.className = 'q-button-ripple';
      
      ripple.style.left = `${event.clientX - rect.left}px`;
      ripple.style.top = `${event.clientY - rect.top}px`;
      ripple.style.width = `${size}px`;
      ripple.style.height = `${size}px`;
      
      button.appendChild(ripple);
      
      setTimeout(() => {
        button.removeChild(ripple);
      }, 600);
    },
    
    updateQuantumState(state, active) {
      if (!this.quantum.stateAnimation) return;
      
      // 量子纠缠强度影响
      const entangleStrength = this.quantum.entangleStrength;
      
      if (this.$el) {
        if (active) {
          // 应用量子态效果
          this.$el.classList.add(`q-quantum-${state}`);
          
          // 应用纠缠强度影响
          if (state === 'hover') {
            this.$el.style.transform = `scale(${1 + 0.05 * entangleStrength})`;
            this.$el.style.zIndex = '1';
          } else if (state === 'active') {
            this.$el.style.transform = `scale(${0.95 * entangleStrength})`;
          }
        } else {
          // 移除量子态效果
          this.$el.classList.remove(`q-quantum-${state}`);
          
          // 重置样式
          this.$el.style.transform = '';
          setTimeout(() => {
            this.$el.style.zIndex = '';
          }, this.quantum.stateDuration);
        }
      }
    }
  },
  
  mounted() {
    if (this.quantum.stateAnimation) {
      // 初始化量子态交互
      this.$el.addEventListener('mousedown', () => {
        this.updateQuantumState('active', true);
      });
      
      this.$el.addEventListener('mouseup', () => {
        this.updateQuantumState('active', false);
      });
      
      this.$el.addEventListener('focus', () => {
        this.updateQuantumState('focus', true);
      });
      
      this.$el.addEventListener('blur', () => {
        this.updateQuantumState('focus', false);
      });
    }
  }
}
</script> 