# 量子通知组件
# 量子基因: QG-COMP-NOTIFICATION-A1B1
# 量子纠缠: QE-COMP-NOTIFICATION-20240404

@component q-notification
@props
  type: string = "info"         # 通知类型：info/success/warning/error
  title: string = ""           # 通知标题
  message: string = ""         # 通知内容
  duration: number = 3000      # 显示时长(ms)，0表示不自动关闭
  position: string = "top-right" # 显示位置：top-right/top-left/bottom-right/bottom-left
  showClose: boolean = true    # 是否显示关闭按钮
  offset: number = 20          # 偏移距离
  zIndex: number = 2000        # 层级
  entangleStrength: number = 0.7 # 量子纠缠强度

@template
<div class="q-notification"
     :class="[
       `q-notification-${type}`,
       `q-notification-${position}`
     ]"
     :style="{
       zIndex: zIndex,
       [position.includes('top') ? 'top' : 'bottom']: offset + 'px',
       [position.includes('right') ? 'right' : 'left']: '20px'
     }"
     data-quantum-entangle='{
       "id": "notification-${@id}",
       "strength": ${entangleStrength},
       "sync": false
     }'
     v-show="visible"
>
    <div class="q-notification-icon">
        @switch type
            @case "success"
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/>
                </svg>
            @case "warning"
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M12 2L1 21h22L12 2zm0 3.83L19.17 19H4.83L12 5.83zM11 16h2v2h-2v-2zm0-6h2v4h-2v-4z"/>
                </svg>
            @case "error"
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
                </svg>
            @default
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/>
                </svg>
        @end
    </div>
    
    <div class="q-notification-content">
        @if title
        <h3 class="q-notification-title">${title}</h3>
        @endif
        
        @if message
        <div class="q-notification-message">${message}</div>
        @endif
    </div>
    
    @if showClose
    <button class="q-notification-close"
            @click="handleClose"
            aria-label="关闭通知"
    >
        <svg class="icon" viewBox="0 0 24 24">
            <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
        </svg>
    </button>
    @endif
</div>

@style
.q-notification {
    position: fixed;
    display: flex;
    align-items: flex-start;
    padding: var(--q-spacing-3);
    border-radius: var(--q-radius-lg);
    background: var(--q-gray-50);
    box-shadow: var(--q-shadow-lg);
    min-width: 300px;
    max-width: 400px;
    transition: var(--q-transition);
    animation: q-notification-in 0.3s ease;
}

.q-notification-top-right {
    animation-name: q-notification-in-right;
}

.q-notification-top-left {
    animation-name: q-notification-in-left;
}

.q-notification-bottom-right {
    animation-name: q-notification-in-right;
}

.q-notification-bottom-left {
    animation-name: q-notification-in-left;
}

@keyframes q-notification-in-right {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes q-notification-in-left {
    from {
        transform: translateX(-100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

.q-notification-icon {
    flex-shrink: 0;
    margin-right: var(--q-spacing-3);
}

.q-notification-icon .icon {
    width: 24px;
    height: 24px;
    fill: currentColor;
}

.q-notification-content {
    flex: 1;
    min-width: 0;
}

.q-notification-title {
    margin: 0;
    font-size: 1rem;
    font-weight: 600;
    color: var(--q-gray-900);
    margin-bottom: var(--q-spacing-1);
}

.q-notification-message {
    font-size: 0.875rem;
    color: var(--q-gray-600);
    line-height: 1.5;
}

.q-notification-close {
    flex-shrink: 0;
    background: none;
    border: none;
    padding: var(--q-spacing-1);
    margin-left: var(--q-spacing-2);
    cursor: pointer;
    color: var(--q-gray-400);
    transition: var(--q-transition);
}

.q-notification-close:hover {
    color: var(--q-gray-600);
}

.q-notification-close .icon {
    width: 16px;
    height: 16px;
    fill: currentColor;
}

/* 通知类型样式 */
.q-notification-info {
    border-left: 4px solid var(--q-info);
}

.q-notification-info .q-notification-icon {
    color: var(--q-info);
}

.q-notification-success {
    border-left: 4px solid var(--q-success);
}

.q-notification-success .q-notification-icon {
    color: var(--q-success);
}

.q-notification-warning {
    border-left: 4px solid var(--q-warning);
}

.q-notification-warning .q-notification-icon {
    color: var(--q-warning);
}

.q-notification-error {
    border-left: 4px solid var(--q-error);
}

.q-notification-error .q-notification-icon {
    color: var(--q-error);
}

/* 量子纠缠效果 */
.q-notification[data-quantum-entangle] {
    position: relative;
}

.q-notification[data-quantum-entangle]::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    pointer-events: none;
    animation: q-glow 2s infinite;
    opacity: 0.3;
}

.q-notification-info[data-quantum-entangle]::before {
    border: 1px solid var(--q-info);
}

.q-notification-success[data-quantum-entangle]::before {
    border: 1px solid var(--q-success);
}

.q-notification-warning[data-quantum-entangle]::before {
    border: 1px solid var(--q-warning);
}

.q-notification-error[data-quantum-entangle]::before {
    border: 1px solid var(--q-error);
}

@media (max-width: 768px) {
    .q-notification {
        width: calc(100% - 40px);
        max-width: none;
        margin: 0 20px;
    }
}

@script
export default {
    data() {
        return {
            visible: true,
            timer: null
        };
    },
    
    mounted() {
        // 设置量子纠缠
        const notificationId = `notification-${this.id}`;
        window.quantumEntangle.addObject(notificationId);
        window.quantumEntangle.setStrength(this.entangleStrength);
        
        // 自动关闭
        if (this.duration > 0) {
            this.startTimer();
        }
    },
    
    methods: {
        startTimer() {
            if (this.timer) {
                clearTimeout(this.timer);
            }
            this.timer = setTimeout(() => {
                this.handleClose();
            }, this.duration);
        },
        
        handleClose() {
            this.visible = false;
            
            // 发送量子纠缠消息
            window.quantumEntangle.send('notification_close', {
                id: `notification-${this.id}`,
                type: this.type
            });
            
            // 移除组件
            setTimeout(() => {
                this.$destroy();
                this.$el.remove();
            }, 300);
        }
    },
    
    beforeDestroy() {
        // 清理定时器
        if (this.timer) {
            clearTimeout(this.timer);
        }
        
        // 清理量子纠缠
        window.quantumEntangle.removeObject(`notification-${this.id}`);
    }
} 