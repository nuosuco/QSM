/* 量子基因编码 */
QG-COMP-CHARTS-UI-DATA-A1B1

/* 量子纠缠信道 */
@quantum-entangle {
  strength: 0.8,
  sync: true,
  objects: [
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss",
    "world/static/css/quantum-animation.qcss"
  ]
}

/* 组件属性 */
@properties {
  // 图表类型
  type: 'line' | 'bar' | 'pie' | 'scatter' | 'radar' = 'line',
  // 数据源
  data: {
    labels: Array<string>,
    datasets: Array<{
      label: string,
      data: Array<number>,
      backgroundColor?: string | Array<string>,
      borderColor?: string | Array<string>,
      borderWidth?: number,
      fill?: boolean,
      tension?: number
    }>
  },
  // 图表标题
  title: string,
  // 图表宽度
  width: string | number = '100%',
  // 图表高度
  height: string | number = '400px',
  // 是否显示图例
  showLegend: boolean = true,
  // 是否显示网格
  showGrid: boolean = true,
  // 是否显示工具提示
  showTooltip: boolean = true,
  // 是否显示动画
  animation: boolean = true,
  // 是否响应式
  responsive: boolean = true,
  // 坐标轴配置
  axes: {
    x: {
      title?: string,
      display?: boolean,
      grid?: boolean,
      ticks?: {
        autoSkip?: boolean,
        maxRotation?: number
      }
    },
    y: {
      title?: string,
      display?: boolean,
      grid?: boolean,
      ticks?: {
        beginAtZero?: boolean,
        stepSize?: number
      }
    }
  },
  // 图例配置
  legend: {
    position: 'top' | 'bottom' | 'left' | 'right' = 'top',
    align: 'start' | 'center' | 'end' = 'center'
  },
  // 工具提示配置
  tooltip: {
    mode: 'point' | 'nearest' | 'index' | 'dataset' = 'point',
    intersect: boolean = true
  },
  // 交互配置
  interaction: {
    mode: 'point' | 'nearest' | 'index' | 'dataset' = 'point',
    intersect: boolean = true
  },
  // 量子态配置
  quantum: {
    // 量子纠缠强度
    entangleStrength: number = 0.8,
    // 量子态转换动画
    stateTransition: boolean = true,
    // 量子态持续时间
    stateDuration: number = 300
  }
}

/* 模板结构 */
<template>
  <div class="q-chart-container"
       :style="{
         width: typeof width === 'number' ? `${width}px` : width,
         height: typeof height === 'number' ? `${height}px` : height
       }">
    <!-- 图表标题 -->
    <div v-if="title" class="q-chart-title">{{ title }}</div>
    
    <!-- 图表画布 -->
    <canvas ref="canvas"
            class="q-chart-canvas"
            :width="canvasWidth"
            :height="canvasHeight">
    </canvas>
    
    <!-- 图例 -->
    <div v-if="showLegend" class="q-chart-legend" :class="[
      `q-chart-legend-${legend.position}`,
      `q-chart-legend-align-${legend.align}`
    ]">
      <div v-for="dataset in data.datasets"
           :key="dataset.label"
           class="q-chart-legend-item"
           @click="toggleDataset(dataset)">
        <span class="q-chart-legend-color"
              :style="{ backgroundColor: dataset.backgroundColor }">
        </span>
        <span class="q-chart-legend-label">{{ dataset.label }}</span>
      </div>
    </div>
  </div>
</template>

/* 组件样式 */
<style>
.q-chart-container {
  position: relative;
  background: var(--q-bg-color);
  border-radius: var(--q-border-radius);
  padding: var(--q-spacing);
  box-shadow: var(--q-shadow-1);
}

/* 标题样式 */
.q-chart-title {
  font-size: var(--q-font-size-lg);
  font-weight: 500;
  color: var(--q-text-color);
  text-align: center;
  margin-bottom: var(--q-spacing);
}

/* 画布样式 */
.q-chart-canvas {
  width: 100%;
  height: 100%;
}

/* 图例样式 */
.q-chart-legend {
  display: flex;
  flex-wrap: wrap;
  gap: var(--q-spacing);
  padding: var(--q-spacing);
}

.q-chart-legend-top {
  margin-bottom: var(--q-spacing);
}

.q-chart-legend-bottom {
  margin-top: var(--q-spacing);
}

.q-chart-legend-left {
  flex-direction: column;
  position: absolute;
  left: var(--q-spacing);
  top: 50%;
  transform: translateY(-50%);
}

.q-chart-legend-right {
  flex-direction: column;
  position: absolute;
  right: var(--q-spacing);
  top: 50%;
  transform: translateY(-50%);
}

.q-chart-legend-align-start {
  justify-content: flex-start;
}

.q-chart-legend-align-center {
  justify-content: center;
}

.q-chart-legend-align-end {
  justify-content: flex-end;
}

.q-chart-legend-item {
  display: flex;
  align-items: center;
  gap: var(--q-spacing-sm);
  cursor: pointer;
  transition: opacity var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

.q-chart-legend-item.is-hidden {
  opacity: 0.5;
}

.q-chart-legend-color {
  width: 16px;
  height: 16px;
  border-radius: var(--q-border-radius-sm);
}

.q-chart-legend-label {
  color: var(--q-text-color);
  font-size: var(--q-font-size-sm);
}

/* 量子态样式 */
@quantum-state hover {
  .q-chart-legend-item:hover {
    opacity: 0.8;
  }
}

@quantum-state active {
  .q-chart-container {
    transform: scale(0.99);
  }
}
</style>

/* 组件脚本 */
<script>
export default {
  name: 'QCharts',
  
  data() {
    return {
      chart: null,
      hiddenDatasets: new Set(),
      canvasWidth: 0,
      canvasHeight: 0
    }
  },
  
  mounted() {
    this.initChart()
    
    if (this.responsive) {
      window.addEventListener('resize', this.handleResize)
    }
  },
  
  beforeDestroy() {
    if (this.responsive) {
      window.removeEventListener('resize', this.handleResize)
    }
    
    if (this.chart) {
      this.chart.destroy()
    }
  },
  
  methods: {
    initChart() {
      const ctx = this.$refs.canvas.getContext('2d')
      
      // 创建图表配置
      const config = {
        type: this.type,
        data: this.getChartData(),
        options: {
          responsive: this.responsive,
          maintainAspectRatio: false,
          animation: this.getAnimationConfig(),
          plugins: {
            legend: {
              display: false // 使用自定义图例
            },
            tooltip: this.getTooltipConfig()
          },
          scales: this.getScalesConfig(),
          interaction: this.interaction
        }
      }
      
      // 创建图表实例
      this.chart = new Chart(ctx, config)
    },
    
    getChartData() {
      return {
        labels: this.data.labels,
        datasets: this.data.datasets.map(dataset => ({
          ...dataset,
          hidden: this.hiddenDatasets.has(dataset.label)
        }))
      }
    },
    
    getAnimationConfig() {
      if (!this.animation) return false
      
      return {
        duration: this.quantum.stateDuration,
        easing: 'easeInOutQuart',
        onProgress: (animation) => {
          const quantum = animation.currentStep / animation.numSteps
          this.$emit('quantum-state', quantum)
        }
      }
    },
    
    getTooltipConfig() {
      if (!this.showTooltip) return false
      
      return {
        enabled: true,
        mode: this.tooltip.mode,
        intersect: this.tooltip.intersect,
        callbacks: {
          label: (context) => {
            const dataset = context.dataset
            const value = context.parsed.y
            return `${dataset.label}: ${value}`
          }
        }
      }
    },
    
    getScalesConfig() {
      return {
        x: {
          display: this.axes.x.display,
          title: {
            display: !!this.axes.x.title,
            text: this.axes.x.title
          },
          grid: {
            display: this.showGrid && this.axes.x.grid
          },
          ticks: this.axes.x.ticks
        },
        y: {
          display: this.axes.y.display,
          title: {
            display: !!this.axes.y.title,
            text: this.axes.y.title
          },
          grid: {
            display: this.showGrid && this.axes.y.grid
          },
          ticks: this.axes.y.ticks
        }
      }
    },
    
    toggleDataset(dataset) {
      if (this.hiddenDatasets.has(dataset.label)) {
        this.hiddenDatasets.delete(dataset.label)
      } else {
        this.hiddenDatasets.add(dataset.label)
      }
      
      // 更新图表
      this.chart.data = this.getChartData()
      this.chart.update('show')
    },
    
    handleResize() {
      if (!this.chart) return
      
      this.canvasWidth = this.$el.clientWidth
      this.canvasHeight = this.$el.clientHeight
      this.chart.resize()
    },
    
    // 量子态方法
    updateQuantumState(state) {
      if (!this.quantum.stateTransition) return
      
      // 应用量子态转换
      this.data.datasets.forEach(dataset => {
        const quantum = state * this.quantum.entangleStrength
        
        // 更新数据点
        dataset.data = dataset.data.map(value => {
          const fluctuation = Math.random() * quantum
          return value * (1 + fluctuation)
        })
      })
      
      // 更新图表
      this.chart.update('none')
    }
  },
  
  watch: {
    data: {
      deep: true,
      handler() {
        if (this.chart) {
          this.chart.data = this.getChartData()
          this.chart.update('show')
        }
      }
    },
    
    type() {
      if (this.chart) {
        this.chart.destroy()
        this.initChart()
      }
    }
  }
}
</script> 