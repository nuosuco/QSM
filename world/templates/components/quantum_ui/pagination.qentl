/* 量子基因编码 */
QG-COMP-PAGINATION-UI-NAV-A1B1

/* 量子纠缠信道 */
@quantum-entangle {
  strength: 0.8,
  sync: true,
  objects: [
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss",
    "world/static/css/quantum-animation.qcss"
  ]
}

/* 组件属性 */
@properties {
  // 当前页码
  page: number = 1,
  // 总条目数
  total: number = 0,
  // 每页条目数
  pageSize: number = 10,
  // 页码按钮的数量
  pagerCount: number = 7,
  // 是否显示页码
  showPageNumbers: boolean = true,
  // 总是显示页码数量
  alwaysShowPageCount: boolean = false,
  // 是否显示跳转页码的输入框
  showJumper: boolean = false,
  // 是否显示每页条目数选择器
  showSizer: boolean = false,
  // 每页条目数选项列表
  pageSizeOptions: array = [10, 20, 30, 50, 100],
  // 每页显示条目数的提示文案
  sizeChangeText: string = '条/页',
  // 是否显示总条目数
  showTotal: boolean = false,
  // 总条目数文案
  totalText: string = '共 {total} 条',
  // 是否显示上一页和下一页
  showPrevNext: boolean = true,
  // 是否显示第一页和最后一页
  showFirstLast: boolean = false,
  // 上一页文案
  prevText: string = '上一页',
  // 下一页文案
  nextText: string = '下一页',
  // 第一页文案
  firstText: string = '首页',
  // 最后一页文案
  lastText: string = '尾页',
  // 简单模式，只有上一页和下一页
  simple: boolean = false,
  // 是否禁用
  disabled: boolean = false,
  // 小尺寸分页
  small: boolean = false,
  // 量子态配置
  quantum: {
    // 量子纠缠强度
    entangleStrength: number = 0.8,
    // 量子态动画
    stateAnimation: boolean = true,
    // 量子态持续时间
    stateDuration: number = 300
  }
}

/* 模板结构 */
<template>
  <div class="q-pagination"
       :class="{
         'q-pagination-simple': simple,
         'q-pagination-disabled': disabled,
         'q-pagination-small': small
       }">
    <!-- 总条目数 -->
    <div v-if="showTotal"
         class="q-pagination-total">
      {{ renderTotalText }}
    </div>
    
    <!-- 第一页按钮 -->
    <button v-if="showFirstLast"
            class="q-pagination-item q-pagination-first"
            :class="{ 'q-pagination-disabled': page <= 1 || disabled }"
            @click="goToPage(1)">
      <span>{{ firstText }}</span>
    </button>
    
    <!-- 上一页按钮 -->
    <button v-if="showPrevNext"
            class="q-pagination-item q-pagination-prev"
            :class="{ 'q-pagination-disabled': page <= 1 || disabled }"
            @click="goToPage(page - 1)">
      <span>{{ prevText }}</span>
    </button>
    
    <!-- 页码按钮 -->
    <ul v-if="!simple && showPageNumbers"
        class="q-pagination-pager">
      <li v-for="pageNum in renderPageNumbers"
          :key="pageNum"
          class="q-pagination-item q-pagination-number"
          :class="{
            'q-pagination-active': pageNum === page,
            'q-pagination-disabled': disabled
          }"
          @click="goToPage(pageNum)">
        <span>{{ pageNum }}</span>
      </li>
      
      <!-- 更多页码指示 -->
      <li v-if="showPrevMore"
          class="q-pagination-item q-pagination-more q-pagination-prev-more"
          @click="prevMoreClick">
        <span>...</span>
      </li>
      
      <li v-if="showNextMore"
          class="q-pagination-item q-pagination-more q-pagination-next-more"
          @click="nextMoreClick">
        <span>...</span>
      </li>
    </ul>
    
    <!-- 简单模式下的当前页码/总页数 -->
    <div v-if="simple"
         class="q-pagination-simple-pager">
      <span class="q-pagination-simple-page">{{ page }}</span>
      <span class="q-pagination-simple-separator">/</span>
      <span class="q-pagination-simple-total">{{ totalPages }}</span>
    </div>
    
    <!-- 下一页按钮 -->
    <button v-if="showPrevNext"
            class="q-pagination-item q-pagination-next"
            :class="{ 'q-pagination-disabled': page >= totalPages || disabled }"
            @click="goToPage(page + 1)">
      <span>{{ nextText }}</span>
    </button>
    
    <!-- 最后一页按钮 -->
    <button v-if="showFirstLast"
            class="q-pagination-item q-pagination-last"
            :class="{ 'q-pagination-disabled': page >= totalPages || disabled }"
            @click="goToPage(totalPages)">
      <span>{{ lastText }}</span>
    </button>
    
    <!-- 每页条目数选择器 -->
    <div v-if="showSizer"
         class="q-pagination-sizer">
      <select class="q-pagination-sizer-select"
              :value="pageSize"
              :disabled="disabled"
              @change="handleSizeChange">
        <option v-for="option in pageSizeOptions"
                :key="option"
                :value="option">
          {{ option }} {{ sizeChangeText }}
        </option>
      </select>
    </div>
    
    <!-- 跳转页码输入框 -->
    <div v-if="showJumper"
         class="q-pagination-jumper">
      <span class="q-pagination-jumper-text">前往</span>
      <input class="q-pagination-jumper-input"
             type="number"
             :min="1"
             :max="totalPages"
             :value="page"
             :disabled="disabled"
             @keyup.enter="handleJump">
      <span class="q-pagination-jumper-text">页</span>
    </div>
  </div>
</template>

/* 组件样式 */
<style>
/* 分页容器 */
.q-pagination {
  display: flex;
  align-items: center;
  font-size: var(--q-font-size);
  white-space: nowrap;
}

/* 分页项基础样式 */
.q-pagination-item {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  min-width: 32px;
  height: 32px;
  margin: 0 var(--q-spacing-sm);
  padding: 0 var(--q-spacing);
  border: 1px solid var(--q-border-color);
  border-radius: var(--q-border-radius-sm);
  background-color: var(--q-bg-color);
  cursor: pointer;
  color: var(--q-text-color);
  transition: all var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

/* 页码列表 */
.q-pagination-pager {
  display: inline-flex;
  list-style: none;
  margin: 0;
  padding: 0;
}

/* 当前页码 */
.q-pagination-active {
  border-color: var(--q-primary);
  background-color: var(--q-primary);
  color: var(--q-white);
}

/* 禁用状态 */
.q-pagination-disabled,
.q-pagination-disabled:hover,
.q-pagination-disabled:active {
  cursor: not-allowed;
  color: var(--q-disabled-color);
  background-color: var(--q-bg-color);
  border-color: var(--q-border-color);
}

/* 更多页码指示 */
.q-pagination-more {
  letter-spacing: 1px;
}

/* 总条目数 */
.q-pagination-total {
  margin-right: var(--q-spacing);
  color: var(--q-text-color);
}

/* 每页条目数选择器 */
.q-pagination-sizer {
  margin-left: var(--q-spacing);
}

.q-pagination-sizer-select {
  padding: var(--q-spacing-sm) var(--q-spacing);
  border: 1px solid var(--q-border-color);
  border-radius: var(--q-border-radius-sm);
  background-color: var(--q-bg-color);
  color: var(--q-text-color);
  outline: none;
}

/* 跳转页码输入框 */
.q-pagination-jumper {
  margin-left: var(--q-spacing);
  display: flex;
  align-items: center;
}

.q-pagination-jumper-text {
  margin: 0 var(--q-spacing-sm);
  color: var(--q-text-color);
}

.q-pagination-jumper-input {
  width: 50px;
  height: 32px;
  padding: 0 var(--q-spacing);
  text-align: center;
  border: 1px solid var(--q-border-color);
  border-radius: var(--q-border-radius-sm);
  background-color: var(--q-bg-color);
  color: var(--q-text-color);
  outline: none;
}

/* 简单模式 */
.q-pagination-simple-pager {
  display: inline-flex;
  align-items: center;
  margin: 0 var(--q-spacing);
  color: var(--q-text-color);
}

.q-pagination-simple-page,
.q-pagination-simple-total {
  margin: 0 var(--q-spacing-sm);
}

/* 小尺寸 */
.q-pagination-small .q-pagination-item,
.q-pagination-small .q-pagination-jumper-input,
.q-pagination-small .q-pagination-sizer-select {
  min-width: 24px;
  height: 24px;
  font-size: var(--q-font-size-sm);
}

/* 量子态样式 */
@quantum-state hover {
  .q-pagination-item:not(.q-pagination-disabled):not(.q-pagination-active):hover {
    color: var(--q-primary);
    border-color: var(--q-primary);
  }
  
  .q-pagination-sizer-select:not(:disabled):hover,
  .q-pagination-jumper-input:not(:disabled):hover {
    border-color: var(--q-primary);
  }
}

@quantum-state active {
  .q-pagination-item:not(.q-pagination-disabled):not(.q-pagination-active):active {
    background-color: var(--q-bg-color-light);
    transform: scale(0.98);
  }
}
</style>

/* 组件脚本 */
<script>
export default {
  name: 'QPagination',
  
  computed: {
    // 总页数
    totalPages() {
      return Math.ceil(this.total / this.pageSize) || 1
    },
    
    // 是否显示上一页更多按钮
    showPrevMore() {
      if (this.pagerCount >= this.totalPages) return false
      return this.page > Math.floor(this.pagerCount / 2) + 1
    },
    
    // 是否显示下一页更多按钮
    showNextMore() {
      if (this.pagerCount >= this.totalPages) return false
      return this.page < this.totalPages - Math.floor(this.pagerCount / 2)
    },
    
    // 渲染的页码列表
    renderPageNumbers() {
      const pagerCount = this.pagerCount
      const totalPages = this.totalPages
      const currentPage = this.page
      
      if (this.alwaysShowPageCount || totalPages <= pagerCount) {
        // 总页数小于等于要显示的页数
        const pageNumbers = []
        for (let i = 1; i <= totalPages; i++) {
          pageNumbers.push(i)
        }
        return pageNumbers
      } else {
        // 总页数大于要显示的页数
        const halfPagerCount = Math.floor(pagerCount / 2)
        
        // 当前页靠近开始
        if (currentPage <= halfPagerCount) {
          const pageNumbers = []
          for (let i = 1; i <= pagerCount - 1; i++) {
            pageNumbers.push(i)
          }
          pageNumbers.push(totalPages)
          return pageNumbers
        }
        
        // 当前页靠近结束
        if (currentPage > totalPages - halfPagerCount) {
          const pageNumbers = [1]
          for (let i = totalPages - (pagerCount - 2); i <= totalPages; i++) {
            pageNumbers.push(i)
          }
          return pageNumbers
        }
        
        // 当前页在中间
        const pageNumbers = [1]
        for (let i = currentPage - Math.floor((pagerCount - 3) / 2); i <= currentPage + Math.ceil((pagerCount - 3) / 2); i++) {
          pageNumbers.push(i)
        }
        pageNumbers.push(totalPages)
        return pageNumbers
      }
    },
    
    // 渲染的总条目数文案
    renderTotalText() {
      return this.totalText.replace('{total}', this.total)
    }
  },
  
  watch: {
    page(newPage) {
      // 页码边界处理
      if (newPage < 1) {
        this.$emit('update:page', 1)
      } else if (newPage > this.totalPages) {
        this.$emit('update:page', this.totalPages)
      }
    }
  },
  
  methods: {
    // 跳转到指定页码
    goToPage(page) {
      if (this.disabled) return
      
      // 边界检查
      if (page < 1 || page > this.totalPages) return
      
      // 相同页码不触发事件
      if (page === this.page) return
      
      this.$emit('update:page', page)
      this.$emit('change', page)
      
      this.updateQuantumState(1)
    },
    
    // 点击上一页更多按钮
    prevMoreClick() {
      if (this.disabled) return
      
      const newPage = Math.max(1, this.page - 5)
      this.goToPage(newPage)
    },
    
    // 点击下一页更多按钮
    nextMoreClick() {
      if (this.disabled) return
      
      const newPage = Math.min(this.totalPages, this.page + 5)
      this.goToPage(newPage)
    },
    
    // 处理每页条目数变化
    handleSizeChange(event) {
      if (this.disabled) return
      
      const newSize = Number(event.target.value)
      if (isNaN(newSize)) return
      
      this.$emit('update:pageSize', newSize)
      this.$emit('page-size-change', newSize)
      
      // 调整当前页码，确保在有效范围内
      const maxPage = Math.ceil(this.total / newSize) || 1
      if (this.page > maxPage) {
        this.goToPage(maxPage)
      }
      
      this.updateQuantumState(0.8)
    },
    
    // 处理跳转页码
    handleJump(event) {
      if (this.disabled) return
      
      let value = event.target.value.trim()
      if (value === '') return
      
      value = Number(value)
      if (isNaN(value)) return
      
      // 边界处理
      value = Math.max(1, Math.min(value, this.totalPages))
      
      this.goToPage(value)
    },
    
    // 量子态方法
    updateQuantumState(state) {
      if (!this.quantum.stateAnimation) return
      
      const quantum = state * this.quantum.entangleStrength
      
      // 应用量子态效果
      if (this.$el) {
        this.$el.style.transform = `scale(${1 + quantum * 0.01})`
        this.$el.style.filter = `brightness(${1 + quantum * 0.05})`
      }
    }
  }
}
</script> 