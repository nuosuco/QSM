# 量子UI组件展示页面
# 量子基因: QG-PAGE-UI-PLAYGROUND-A1B1
# 量子纠缠: QE-PAGE-UI-PLAYGROUND-20240406

@component q-ui-playground
@props
  pageTitle: string = "量子UI组件展示"

@template
<div class="q-page-container"
     data-quantum-entangle='{
       "id": "ui-playground-container",
       "strength": 0.92,
       "sync": true
     }'
>
    <header class="q-page-header">
        <h1 class="q-page-title">${pageTitle}</h1>
        <p class="q-page-description">
            这是量子UI组件库的展示页面，展示了各种具有量子特性的UI组件。
            所有组件都使用量子纠缠技术，实现了更智能、更直观的用户交互体验。
        </p>
    </header>
    
    <main class="q-playground-content">
        <nav class="q-component-nav">
            <ul class="q-component-menu">
                <li><a href="#input" @click.prevent="setActiveComponent('input')" class="${activeComponent === 'input' ? 'active' : ''}">输入框组件</a></li>
                <li><a href="#textarea" @click.prevent="setActiveComponent('textarea')" class="${activeComponent === 'textarea' ? 'active' : ''}">文本区域组件</a></li>
                <li><a href="#button" @click.prevent="setActiveComponent('button')" class="${activeComponent === 'button' ? 'active' : ''}">按钮组件</a></li>
                <li><a href="#form" @click.prevent="setActiveComponent('form')" class="${activeComponent === 'form' ? 'active' : ''}">表单组件</a></li>
                <li><a href="#form-elements" @click.prevent="setActiveComponent('form-elements')" class="${activeComponent === 'form-elements' ? 'active' : ''}">表单元素测试</a></li>
                <li><a href="#card" @click.prevent="setActiveComponent('card')" class="${activeComponent === 'card' ? 'active' : ''}">卡片组件</a></li>
                <li><a href="#dialog" @click.prevent="setActiveComponent('dialog')" class="${activeComponent === 'dialog' ? 'active' : ''}">对话框组件</a></li>
                <li><a href="#menu" @click.prevent="setActiveComponent('menu')" class="${activeComponent === 'menu' ? 'active' : ''}">菜单组件</a></li>
            </ul>
        </nav>
        
        <section class="q-component-display">
            <div class="q-component-view">
                <header class="q-component-header">
                    <h2 class="q-component-title">${getComponentTitle()}</h2>
                    <button class="q-view-code-btn" @click="toggleCodeView">
                        ${showCode ? '隐藏代码' : '查看代码'}
                    </button>
                </header>
                
                <div class="q-component-demo" v-if="!showCode">
                    @if activeComponent === 'input'
                    <q-input-demo />
                    @elseif activeComponent === 'textarea'
                    <q-textarea-demo />
                    @elseif activeComponent === 'button'
                    <div class="q-component-not-implemented">按钮组件演示尚未实现</div>
                    @elseif activeComponent === 'form'
                    <div class="q-component-not-implemented">表单组件演示尚未实现</div>
                    @elseif activeComponent === 'form-elements'
                    <q-form-elements-test />
                    @elseif activeComponent === 'card'
                    <div class="q-component-not-implemented">卡片组件演示尚未实现</div>
                    @elseif activeComponent === 'dialog'
                    <div class="q-component-not-implemented">对话框组件演示尚未实现</div>
                    @elseif activeComponent === 'menu'
                    <div class="q-component-not-implemented">菜单组件演示尚未实现</div>
                    @else
                    <div class="q-component-welcome">
                        <h2>欢迎使用量子UI组件库</h2>
                        <p>请从左侧菜单选择一个组件查看演示。</p>
                    </div>
                    @endif
                </div>
                
                <div class="q-component-code" v-if="showCode">
                    <pre class="q-code-block">${getComponentCode()}</pre>
                </div>
            </div>
        </section>
    </main>
    
    <footer class="q-page-footer">
        <p>量子基因: QG-PAGE-UI-PLAYGROUND-A1B1 | 量子纠缠强度: 0.92</p>
        <p>版权所有 © ${new Date().getFullYear()} 量子UI组件库</p>
    </footer>
</div>

@style
:root {
    --q-primary: #6366f1;
    --q-primary-dark: #4f46e5;
    --q-primary-light: #818cf8;
    --q-success: #10b981;
    --q-error: #ef4444;
    --q-warning: #f59e0b;
    --q-gray-50: #f9fafb;
    --q-gray-100: #f3f4f6;
    --q-gray-200: #e5e7eb;
    --q-gray-300: #d1d5db;
    --q-gray-400: #9ca3af;
    --q-gray-500: #6b7280;
    --q-gray-600: #4b5563;
    --q-gray-700: #374151;
    --q-gray-800: #1f2937;
    --q-gray-900: #111827;
    --q-white: #ffffff;
    --q-black: #000000;
    --q-radius-sm: 0.125rem;
    --q-radius-md: 0.375rem;
    --q-radius-lg: 0.5rem;
    --q-radius-xl: 0.75rem;
    --q-spacing-1: 0.25rem;
    --q-spacing-2: 0.5rem;
    --q-spacing-3: 0.75rem;
    --q-spacing-4: 1rem;
    --q-spacing-5: 1.25rem;
    --q-spacing-6: 1.5rem;
    --q-spacing-8: 2rem;
    --q-spacing-10: 2.5rem;
    --q-spacing-12: 3rem;
    --q-font-sans: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    --q-font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    --q-transition: all 0.2s ease;
}

body {
    font-family: var(--q-font-sans);
    color: var(--q-gray-800);
    background-color: var(--q-gray-100);
    margin: 0;
    padding: 0;
    line-height: 1.5;
}

.q-page-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.q-page-header {
    background-color: var(--q-primary);
    color: white;
    padding: var(--q-spacing-6) var(--q-spacing-8);
    text-align: center;
}

.q-page-title {
    font-size: 2rem;
    margin-bottom: var(--q-spacing-2);
}

.q-page-description {
    font-size: 1rem;
    max-width: 800px;
    margin: 0 auto;
    opacity: 0.9;
}

.q-playground-content {
    flex: 1;
    display: flex;
    max-width: 1200px;
    margin: 0 auto;
    padding: var(--q-spacing-6);
    gap: var(--q-spacing-6);
}

.q-component-nav {
    width: 250px;
    flex-shrink: 0;
    background-color: var(--q-white);
    border-radius: var(--q-radius-lg);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    overflow: hidden;
}

.q-component-menu {
    list-style: none;
    margin: 0;
    padding: 0;
}

.q-component-menu li a {
    display: block;
    padding: var(--q-spacing-3) var(--q-spacing-4);
    color: var(--q-gray-700);
    text-decoration: none;
    border-left: 3px solid transparent;
    transition: var(--q-transition);
}

.q-component-menu li a:hover {
    background-color: var(--q-gray-100);
    color: var(--q-primary);
}

.q-component-menu li a.active {
    background-color: rgba(99, 102, 241, 0.05);
    color: var(--q-primary);
    border-left-color: var(--q-primary);
    font-weight: 500;
}

.q-component-display {
    flex: 1;
    background-color: var(--q-white);
    border-radius: var(--q-radius-lg);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    overflow: hidden;
}

.q-component-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--q-spacing-4) var(--q-spacing-6);
    border-bottom: 1px solid var(--q-gray-200);
}

.q-component-title {
    margin: 0;
    font-size: 1.25rem;
}

.q-view-code-btn {
    background-color: var(--q-gray-200);
    color: var(--q-gray-700);
    border: none;
    padding: var(--q-spacing-2) var(--q-spacing-3);
    border-radius: var(--q-radius-md);
    cursor: pointer;
    font-size: 0.875rem;
    transition: var(--q-transition);
}

.q-view-code-btn:hover {
    background-color: var(--q-gray-300);
}

.q-component-demo, 
.q-component-code {
    padding: var(--q-spacing-6);
}

.q-component-welcome {
    text-align: center;
    padding: var(--q-spacing-10);
}

.q-component-welcome h2 {
    font-size: 1.5rem;
    color: var(--q-primary);
    margin-bottom: var(--q-spacing-4);
}

.q-component-not-implemented {
    padding: var(--q-spacing-10);
    text-align: center;
    color: var(--q-gray-500);
    font-style: italic;
}

.q-code-block {
    background-color: var(--q-gray-800);
    color: var(--q-gray-100);
    padding: var(--q-spacing-4);
    border-radius: var(--q-radius-md);
    overflow-x: auto;
    font-family: var(--q-font-mono);
    font-size: 0.875rem;
    line-height: 1.7;
    white-space: pre-wrap;
}

.q-page-footer {
    background-color: var(--q-gray-800);
    color: var(--q-gray-400);
    text-align: center;
    padding: var(--q-spacing-6);
    font-size: 0.875rem;
}

.q-page-footer p {
    margin: var(--q-spacing-2) 0;
}

@media (max-width: 768px) {
    .q-playground-content {
        flex-direction: column;
    }
    
    .q-component-nav {
        width: 100%;
    }
}

@script
export default {
    data() {
        return {
            activeComponent: '',
            showCode: false,
            componentCodes: {
                input: `@component q-input
@props
  type: string = "text"  
  value: string = ""
  placeholder: string = ""
  disabled: boolean = false
  // 更多属性...
  
@template
<div class="q-input-wrapper">
  <input
    type="${type}"
    value="${value}"
    placeholder="${placeholder}"
    @input="handleInput"
  />
</div>

@script
export default {
  methods: {
    handleInput(event) {
      this.$emit('input', event.target.value);
    }
  }
}`,
                textarea: `@component q-textarea
@props
  value: string = ""
  placeholder: string = ""
  rows: number = 4
  // 更多属性...
  
@template
<div class="q-textarea-wrapper">
  <textarea
    value="${value}"
    placeholder="${placeholder}"
    :rows="rows"
    @input="handleInput"
  >${value}</textarea>
</div>

@script
export default {
  methods: {
    handleInput(event) {
      this.$emit('input', event.target.value);
    }
  }
}`,
                'form-elements': `@component q-form-elements-test
@props
  pageTitle: string = "量子表单元素测试"
  
@template
<div class="q-test-container">
  <form @submit.prevent="handleSubmit">
    <!-- 表单内容 -->
    <q-input name="username" placeholder="请输入用户名" />
    <q-textarea name="bio" placeholder="请输入个人简介" />
    <!-- 更多表单元素 -->
  </form>
</div>

@script
export default {
  methods: {
    handleSubmit() {
      // 表单提交逻辑
    }
  }
}`
            }
        };
    },
    
    mounted() {
        // 初始化量子纠缠
        window.quantumEntangle.addObject('ui-playground-container');
        
        // 从URL获取初始活动组件
        const hash = window.location.hash.substring(1);
        if (hash && this.isValidComponent(hash)) {
            this.activeComponent = hash;
        }
        
        // 监听URL变化
        window.addEventListener('hashchange', this.handleHashChange);
    },
    
    methods: {
        setActiveComponent(component) {
            this.activeComponent = component;
            window.location.hash = component;
            this.showCode = false;
            
            // 量子纠缠通知
            window.quantumEntangle.send('component_change', {
                id: 'ui-playground-container',
                component: component
            });
        },
        
        toggleCodeView() {
            this.showCode = !this.showCode;
        },
        
        handleHashChange() {
            const hash = window.location.hash.substring(1);
            if (hash && this.isValidComponent(hash)) {
                this.activeComponent = hash;
            }
        },
        
        isValidComponent(component) {
            return ['input', 'textarea', 'button', 'form', 'form-elements', 'card', 'dialog', 'menu'].includes(component);
        },
        
        getComponentTitle() {
            const titles = {
                'input': '输入框组件',
                'textarea': '文本区域组件',
                'button': '按钮组件',
                'form': '表单组件',
                'form-elements': '表单元素测试',
                'card': '卡片组件',
                'dialog': '对话框组件',
                'menu': '菜单组件'
            };
            
            return this.activeComponent ? titles[this.activeComponent] : '组件展示';
        },
        
        getComponentCode() {
            return this.componentCodes[this.activeComponent] || '// 该组件代码尚未提供';
        }
    },
    
    beforeDestroy() {
        // 移除事件监听
        window.removeEventListener('hashchange', this.handleHashChange);
        
        // 清理量子纠缠
        window.quantumEntangle.removeObject('ui-playground-container');
    }
} 