/**
 * 量子状态存储 - 前端状态管理系统
 * 量子基因编码: QG-SYS-STORE-UI-CORE-A1B1
 */

class QuantumStore {
  /**
   * 构造函数
   * @param {Object} options - 存储配置选项
   * @param {Object} options.state - 初始状态对象
   * @param {Object} options.mutations - 状态变更方法集合
   * @param {Object} options.actions - 异步操作方法集合
   * @param {Object} options.getters - 派生状态计算方法集合
   * @param {Number} options.entanglementStrength - 量子纠缠强度，默认为 0.8
   * @param {Boolean} options.persistState - 是否持久化状态，默认为 false
   * @param {String} options.persistKey - 持久化存储的键名，默认为 'quantum_store_state'
   */
  constructor(options = {}) {
    // 初始化配置
    this.state = this._createState(options.state || {});
    this.mutations = options.mutations || {};
    this.actions = options.actions || {};
    this.getters = this._createGetters(options.getters || {});
    this.entanglementStrength = options.entanglementStrength || 0.8;
    this.persistState = options.persistState || false;
    this.persistKey = options.persistKey || 'quantum_store_state';
    
    // 内部状态
    this._subscribers = [];
    this._isCommitting = false;
    this._isDispatching = false;
    this._pendingMutations = [];
    this._mutationHistory = [];
    this._maxHistoryLength = 50;
    this._currentTransaction = null;
    
    // 连接量子纠缠通道
    if (window.quantumEntanglementChannel) {
      this.entanglementChannel = window.quantumEntanglementChannel;
      this.entanglementChannel.subscribe(
        'store:*', 
        this._handleEntangledStoreMessage.bind(this)
      );
    } else {
      console.warn('量子纠缠通道不可用，状态存储将以非纠缠模式运行');
    }
    
    // 初始化
    this._init();
  }
  
  /**
   * 初始化状态存储
   * @private
   */
  _init() {
    // 如果启用了状态持久化，尝试从存储中恢复
    if (this.persistState) {
      this._restoreState();
    }
  }
  
  /**
   * 创建代理状态对象
   * @param {Object} state - 初始状态对象
   * @returns {Proxy} - 代理后的状态对象
   * @private
   */
  _createState(state) {
    // 创建深度代理，使状态变更可追踪
    const createProxy = (target, path = '') => {
      return new Proxy(target, {
        get: (obj, key) => {
          // 返回嵌套对象的代理
          if (obj[key] !== null && typeof obj[key] === 'object') {
            return createProxy(obj[key], path ? `${path}.${key}` : key);
          }
          return obj[key];
        },
        set: (obj, key, value) => {
          // 禁止直接修改状态
          if (!this._isCommitting) {
            console.error('[QuantumStore] 不能直接修改状态，请使用 commit 方法');
            return false;
          }
          
          // 检查值是否变化
          const hasChanged = obj[key] !== value;
          
          // 记录变更
          if (hasChanged) {
            const statePath = path ? `${path}.${key}` : key;
            this._recordMutation(statePath, obj[key], value);
          }
          
          // 设置新值
          obj[key] = value;
          
          return true;
        }
      });
    };
    
    return createProxy(state);
  }
  
  /**
   * 创建 getters 代理对象
   * @param {Object} getters - getter 方法集合
   * @returns {Proxy} - 代理后的 getters 对象
   * @private
   */
  _createGetters(getters) {
    const computedGetters = {};
    const getterCache = new Map();
    
    // 为每个 getter 创建计算属性
    for (const key in getters) {
      Object.defineProperty(computedGetters, key, {
        get: () => {
          // 使用缓存避免重复计算
          if (getterCache.has(key)) {
            return getterCache.get(key);
          }
          
          // 计算 getter 值
          const value = getters[key](this.state, computedGetters);
          getterCache.set(key, value);
          
          return value;
        },
        enumerable: true
      });
    }
    
    // 在状态变更时清除缓存
    this.subscribe(() => {
      getterCache.clear();
    });
    
    return computedGetters;
  }
  
  /**
   * 记录状态变更
   * @param {String} path - 状态路径
   * @param {*} oldValue - 旧值
   * @param {*} newValue - 新值
   * @private
   */
  _recordMutation(path, oldValue, newValue) {
    const mutation = {
      path,
      oldValue,
      newValue,
      timestamp: Date.now()
    };
    
    // 将变更添加到当前事务或历史记录
    if (this._currentTransaction) {
      this._currentTransaction.mutations.push(mutation);
    } else {
      this._mutationHistory.push(mutation);
      
      // 限制历史记录长度
      if (this._mutationHistory.length > this._maxHistoryLength) {
        this._mutationHistory.shift();
      }
    }
  }
  
  /**
   * 从存储中恢复状态
   * @private
   */
  _restoreState() {
    try {
      const savedState = localStorage.getItem(this.persistKey);
      if (savedState) {
        const parsedState = JSON.parse(savedState);
        this._isCommitting = true;
        this._mergeState(this.state, parsedState);
        this._isCommitting = false;
      }
    } catch (error) {
      console.error('[QuantumStore] 恢复状态失败:', error);
    }
  }
  
  /**
   * 持久化当前状态
   * @private
   */
  _persistCurrentState() {
    if (!this.persistState) return;
    
    try {
      const stateToSave = JSON.stringify(this.state);
      localStorage.setItem(this.persistKey, stateToSave);
    } catch (error) {
      console.error('[QuantumStore] 持久化状态失败:', error);
    }
  }
  
  /**
   * 合并状态对象
   * @param {Object} target - 目标状态对象
   * @param {Object} source - 源状态对象
   * @private
   */
  _mergeState(target, source) {
    for (const key in source) {
      // 递归合并嵌套对象
      if (
        source[key] !== null && 
        typeof source[key] === 'object' && 
        target[key] !== null && 
        typeof target[key] === 'object'
      ) {
        this._mergeState(target[key], source[key]);
      } else {
        // 直接赋值简单类型
        target[key] = source[key];
      }
    }
  }
  
  /**
   * 通知所有订阅者
   * @param {String} type - 事件类型
   * @param {String} mutation - 变更名称
   * @param {*} payload - 载荷数据
   * @private
   */
  _notifySubscribers(type, mutation, payload) {
    this._subscribers.forEach(subscriber => {
      try {
        subscriber({
          type,
          mutation,
          payload,
          state: this.state
        });
      } catch (error) {
        console.error('[QuantumStore] 订阅者回调错误:', error);
      }
    });
  }
  
  /**
   * 处理纠缠存储消息
   * @param {Object} message - 纠缠消息对象
   * @private
   */
  _handleEntangledStoreMessage(message) {
    // 跳过本地源消息
    if (message.sourceId === this.entanglementChannel.getId()) {
      return;
    }
    
    if (message.type === 'store:mutation') {
      // 处理远程状态变更
      // 计算是否应用变更，基于纠缠强度
      const shouldApply = Math.random() < this.entanglementStrength;
      
      if (shouldApply) {
        const { mutation, payload } = message;
        
        // 标记为纠缠提交，避免循环通知
        this._commit(mutation, payload, true);
      }
    } else if (message.type === 'store:sync_request') {
      // 其他实例请求同步状态
      this.entanglementChannel.send({
        type: 'store:sync_response',
        state: this.state,
        timestamp: Date.now()
      });
    } else if (message.type === 'store:sync_response') {
      // 收到同步响应
      // 使用接收到的状态更新本地状态
      this._isCommitting = true;
      this._mergeState(this.state, message.state);
      this._isCommitting = false;
      
      // 通知订阅者状态已同步
      this._notifySubscribers('sync', null, null);
    }
  }
  
  /**
   * 提交状态变更
   * @param {String} type - 变更类型
   * @param {*} payload - 变更载荷
   * @param {Boolean} isEntangled - 是否由纠缠触发
   * @private
   */
  _commit(type, payload, isEntangled = false) {
    // 检查变更是否存在
    if (!this.mutations[type]) {
      console.error(`[QuantumStore] 未知的变更类型: ${type}`);
      return;
    }
    
    // 防止嵌套提交
    if (this._isCommitting) {
      this._pendingMutations.push({ type, payload });
      return;
    }
    
    try {
      this._isCommitting = true;
      
      // 执行变更函数
      this.mutations[type](this.state, payload);
      
      // 如果启用了持久化，保存状态
      if (this.persistState) {
        this._persistCurrentState();
      }
      
      // 通知订阅者
      this._notifySubscribers('mutation', type, payload);
      
      // 处理纠缠通信
      if (!isEntangled && this.entanglementChannel) {
        this.entanglementChannel.send({
          type: 'store:mutation',
          mutation: type,
          payload,
          timestamp: Date.now()
        });
      }
    } finally {
      this._isCommitting = false;
      
      // 处理等待的变更
      if (this._pendingMutations.length > 0) {
        const { type, payload } = this._pendingMutations.shift();
        this._commit(type, payload, isEntangled);
      }
    }
  }
  
  /**
   * 提交状态变更
   * @param {String} type - 变更类型
   * @param {*} payload - 变更载荷
   */
  commit(type, payload) {
    this._commit(type, payload);
  }
  
  /**
   * 开始事务
   * @returns {Object} - 事务对象
   */
  beginTransaction() {
    if (this._currentTransaction) {
      throw new Error('[QuantumStore] 已存在未完成的事务');
    }
    
    this._currentTransaction = {
      id: Date.now(),
      mutations: [],
      state: JSON.parse(JSON.stringify(this.state))
    };
    
    return this._currentTransaction;
  }
  
  /**
   * 提交事务
   */
  commitTransaction() {
    if (!this._currentTransaction) {
      throw new Error('[QuantumStore] 没有活动的事务可提交');
    }
    
    // 添加事务到历史
    this._mutationHistory.push({
      type: 'transaction',
      id: this._currentTransaction.id,
      mutations: this._currentTransaction.mutations,
      timestamp: Date.now()
    });
    
    // 限制历史记录长度
    if (this._mutationHistory.length > this._maxHistoryLength) {
      this._mutationHistory.shift();
    }
    
    // 通知订阅者
    this._notifySubscribers('transaction', 'commit', this._currentTransaction);
    
    // 清除当前事务
    this._currentTransaction = null;
    
    // 如果启用了持久化，保存状态
    if (this.persistState) {
      this._persistCurrentState();
    }
  }
  
  /**
   * 回滚事务
   */
  rollbackTransaction() {
    if (!this._currentTransaction) {
      throw new Error('[QuantumStore] 没有活动的事务可回滚');
    }
    
    // 恢复事务开始时的状态
    this._isCommitting = true;
    this._mergeState(this.state, this._currentTransaction.state);
    this._isCommitting = false;
    
    // 通知订阅者
    this._notifySubscribers('transaction', 'rollback', this._currentTransaction);
    
    // 清除当前事务
    this._currentTransaction = null;
  }
  
  /**
   * 分派异步操作
   * @param {String} type - 操作类型
   * @param {*} payload - 操作载荷
   * @returns {Promise} - 操作完成的 Promise
   */
  async dispatch(type, payload) {
    // 检查操作是否存在
    if (!this.actions[type]) {
      console.error(`[QuantumStore] 未知的操作类型: ${type}`);
      return Promise.reject(new Error(`未知的操作类型: ${type}`));
    }
    
    try {
      this._isDispatching = true;
      
      // 创建上下文对象
      const context = {
        state: this.state,
        getters: this.getters,
        commit: this.commit.bind(this),
        dispatch: this.dispatch.bind(this)
      };
      
      // 通知订阅者
      this._notifySubscribers('action', type, payload);
      
      // 执行操作函数
      return await Promise.resolve(this.actions[type](context, payload));
    } finally {
      this._isDispatching = false;
    }
  }
  
  /**
   * 订阅状态变更
   * @param {Function} callback - 回调函数
   * @returns {Function} - 取消订阅的函数
   */
  subscribe(callback) {
    this._subscribers.push(callback);
    
    // 返回取消订阅的函数
    return () => {
      const index = this._subscribers.indexOf(callback);
      if (index !== -1) {
        this._subscribers.splice(index, 1);
      }
    };
  }
  
  /**
   * 时间旅行到指定状态
   * @param {Number} index - 历史记录索引
   */
  timeTravel(index) {
    if (index < 0 || index >= this._mutationHistory.length) {
      console.error('[QuantumStore] 无效的历史记录索引');
      return;
    }
    
    // 重建直到指定索引的状态
    const initialState = JSON.parse(JSON.stringify(this._initialState));
    this._isCommitting = true;
    
    try {
      this._mergeState(this.state, initialState);
      
      // 重放变更
      for (let i = 0; i <= index; i++) {
        const record = this._mutationHistory[i];
        
        if (record.type === 'transaction') {
          // 重放事务中的所有变更
          record.mutations.forEach(mutation => {
            const path = mutation.path.split('.');
            let target = this.state;
            
            // 导航到嵌套属性
            for (let j = 0; j < path.length - 1; j++) {
              target = target[path[j]];
            }
            
            // 设置值
            target[path[path.length - 1]] = mutation.newValue;
          });
        } else {
          // 单个变更
          const path = record.path.split('.');
          let target = this.state;
          
          // 导航到嵌套属性
          for (let j = 0; j < path.length - 1; j++) {
            target = target[path[j]];
          }
          
          // 设置值
          target[path[path.length - 1]] = record.newValue;
        }
      }
    } finally {
      this._isCommitting = false;
    }
    
    // 通知订阅者
    this._notifySubscribers('timeTravel', null, index);
    
    // 如果启用了持久化，保存状态
    if (this.persistState) {
      this._persistCurrentState();
    }
  }
  
  /**
   * 重置状态到初始值
   */
  resetState() {
    const initialState = JSON.parse(JSON.stringify(this._initialState));
    
    this._isCommitting = true;
    try {
      this._mergeState(this.state, initialState);
    } finally {
      this._isCommitting = false;
    }
    
    // 清除历史记录
    this._mutationHistory = [];
    
    // 通知订阅者
    this._notifySubscribers('reset', null, null);
    
    // 如果启用了持久化，保存状态
    if (this.persistState) {
      this._persistCurrentState();
    }
  }
  
  /**
   * 同步状态
   * 请求其他纠缠的存储实例发送它们的当前状态
   */
  syncState() {
    if (!this.entanglementChannel) {
      console.warn('[QuantumStore] 量子纠缠通道不可用，无法同步状态');
      return;
    }
    
    this.entanglementChannel.send({
      type: 'store:sync_request',
      timestamp: Date.now()
    });
  }
  
  /**
   * 获取当前状态的快照
   * @returns {Object} - 状态快照
   */
  getSnapshot() {
    return JSON.parse(JSON.stringify(this.state));
  }
  
  /**
   * 获取历史记录
   * @returns {Array} - 变更历史记录
   */
  getHistory() {
    return this._mutationHistory.slice();
  }
}

/**
 * 创建量子存储实例
 * @param {Object} options - 配置选项
 * @returns {QuantumStore} - 量子存储实例
 */
function createStore(options) {
  return new QuantumStore(options);
}

// 默认导出
export default {
  createStore
};

// 命名导出
export { QuantumStore, createStore }; 