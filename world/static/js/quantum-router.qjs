/**
 * 量子路由器 - 前端页面路由系统
 * 量子基因编码: QG-SYS-ROUTER-UI-CORE-A1B1
 */

class QuantumRouter {
  /**
   * 构造函数
   * @param {Object} options - 路由器配置选项
   * @param {String} options.rootElement - 根元素选择器，默认为 '#app'
   * @param {String} options.defaultRoute - 默认路由，默认为 '/'
   * @param {Number} options.transitionDuration - 页面过渡动画持续时间(毫秒)，默认为 300
   * @param {Boolean} options.useQuantumTransition - 是否使用量子过渡效果，默认为 true
   * @param {Number} options.entanglementStrength - 量子纠缠强度，默认为 0.85
   */
  constructor(options = {}) {
    // 初始化配置
    this.rootElement = options.rootElement || '#app';
    this.defaultRoute = options.defaultRoute || '/';
    this.transitionDuration = options.transitionDuration || 300;
    this.useQuantumTransition = options.useQuantumTransition !== undefined ? options.useQuantumTransition : true;
    this.entanglementStrength = options.entanglementStrength || 0.85;
    
    // 内部状态
    this.routes = new Map();
    this.currentRoute = null;
    this.previousRoute = null;
    this.rootEl = document.querySelector(this.rootElement);
    this.isTransitioning = false;
    this.navigationHistory = [];
    this.historyIndex = -1;
    
    // 绑定方法到实例
    this.navigate = this.navigate.bind(this);
    this.handlePopState = this.handlePopState.bind(this);
    this.resolveRoute = this.resolveRoute.bind(this);
    this.updateView = this.updateView.bind(this);
    
    // 连接量子纠缠通道
    if (window.quantumEntanglementChannel) {
      this.entanglementChannel = window.quantumEntanglementChannel;
      this.entanglementChannel.subscribe(
        'router:*', 
        this.handleEntangledRouteMessage.bind(this)
      );
    } else {
      console.warn('量子纠缠通道不可用，路由器将以非纠缠模式运行');
    }
    
    // 初始化路由器
    this.init();
  }
  
  /**
   * 初始化路由器
   */
  init() {
    // 添加事件监听器
    window.addEventListener('popstate', this.handlePopState);
    
    // 拦截所有页内导航链接
    document.body.addEventListener('click', (event) => {
      // 查找最近的 <a> 元素
      let target = event.target;
      while (target && target.tagName !== 'A') {
        target = target.parentElement;
      }
      
      // 如果不是链接或者有特殊属性，不处理
      if (!target || target.hasAttribute('external') || 
          target.hasAttribute('download') || target.target === '_blank') {
        return;
      }
      
      // 获取 href 并检查是否是内部链接
      const href = target.getAttribute('href');
      if (href && !href.startsWith('http') && !href.startsWith('//')) {
        event.preventDefault();
        this.navigate(href);
      }
    });
    
    // 初始导航到当前 URL 或默认路由
    const initialPath = window.location.pathname || this.defaultRoute;
    this.navigate(initialPath, { replaceState: true });
  }
  
  /**
   * 添加路由
   * @param {String} path - 路由路径
   * @param {Object} routeConfig - 路由配置对象
   * @param {Function} routeConfig.template - 返回内容的函数或字符串
   * @param {Function} routeConfig.beforeEnter - 进入路由前的钩子函数
   * @param {Function} routeConfig.afterEnter - 进入路由后的钩子函数
   * @param {Function} routeConfig.beforeLeave - 离开路由前的钩子函数
   * @param {Object} routeConfig.meta - 路由元数据
   * @returns {QuantumRouter} - 返回路由器实例，支持链式调用
   */
  add(path, routeConfig) {
    // 标准化路径
    const normalizedPath = path.startsWith('/') ? path : `/${path}`;
    
    // 标准化路由配置
    const route = {
      path: normalizedPath,
      template: routeConfig.template || (() => ''),
      beforeEnter: routeConfig.beforeEnter || null,
      afterEnter: routeConfig.afterEnter || null,
      beforeLeave: routeConfig.beforeLeave || null,
      meta: routeConfig.meta || {}
    };
    
    // 存储路由
    this.routes.set(normalizedPath, route);
    return this;
  }
  
  /**
   * 导航到指定路由
   * @param {String} path - 目标路由路径
   * @param {Object} options - 导航选项
   * @param {Boolean} options.replaceState - 是否替换当前历史记录，默认为 false
   * @param {Object} options.params - 传递给路由的参数
   * @param {Boolean} options.silent - 是否静默导航(不触发钩子)，默认为 false
   * @returns {Promise} - 导航完成的 Promise
   */
  async navigate(path, options = {}) {
    // 如果正在过渡中，忽略导航请求
    if (this.isTransitioning) return;
    this.isTransitioning = true;
    
    try {
      // 标准化路径
      const normalizedPath = path.startsWith('/') ? path : `/${path}`;
      
      // 解析路由
      const route = this.resolveRoute(normalizedPath);
      if (!route) {
        throw new Error(`路由未找到: ${normalizedPath}`);
      }
      
      // 更新前一个路由
      this.previousRoute = this.currentRoute;
      
      // 如果与当前路由相同且不是静默导航，忽略
      if (this.currentRoute && this.currentRoute.path === route.path && !options.silent) {
        this.isTransitioning = false;
        return;
      }
      
      // 执行离开钩子
      if (this.currentRoute && this.currentRoute.beforeLeave && !options.silent) {
        const canLeave = await Promise.resolve(this.currentRoute.beforeLeave(this.currentRoute, route));
        if (canLeave === false) {
          this.isTransitioning = false;
          return;
        }
      }
      
      // 执行进入钩子
      if (route.beforeEnter && !options.silent) {
        const canEnter = await Promise.resolve(route.beforeEnter(route, this.currentRoute));
        if (canEnter === false) {
          this.isTransitioning = false;
          return;
        }
      }
      
      // 更新当前路由
      this.currentRoute = { ...route, params: options.params || {} };
      
      // 更新历史记录
      if (!options.silent) {
        const state = { path: normalizedPath, params: options.params };
        
        if (options.replaceState) {
          window.history.replaceState(state, '', normalizedPath);
          
          // 更新导航历史
          if (this.historyIndex >= 0) {
            this.navigationHistory[this.historyIndex] = { path: normalizedPath, title: document.title };
          } else {
            this.navigationHistory.push({ path: normalizedPath, title: document.title });
            this.historyIndex = 0;
          }
        } else {
          window.history.pushState(state, '', normalizedPath);
          
          // 更新导航历史
          // 如果用户在历史中间导航后前进，需要清除之后的历史
          if (this.historyIndex < this.navigationHistory.length - 1) {
            this.navigationHistory = this.navigationHistory.slice(0, this.historyIndex + 1);
          }
          this.navigationHistory.push({ path: normalizedPath, title: document.title });
          this.historyIndex = this.navigationHistory.length - 1;
        }
      }
      
      // 通知纠缠组件
      if (this.entanglementChannel && !options.silent) {
        this.entanglementChannel.send({
          type: 'router:navigation',
          path: normalizedPath,
          metadata: route.meta,
          timestamp: Date.now()
        });
      }
      
      // 更新视图
      await this.updateView();
      
      // 执行进入后钩子
      if (route.afterEnter && !options.silent) {
        await Promise.resolve(route.afterEnter(route, this.previousRoute));
      }
    } catch (error) {
      console.error('导航错误:', error);
      
      // 导航到错误页面
      if (this.routes.has('/error') && path !== '/error') {
        this.navigate('/error', { 
          replaceState: true, 
          params: { error: error.message } 
        });
      }
    } finally {
      this.isTransitioning = false;
    }
  }
  
  /**
   * 解析路由
   * @param {String} path - 路由路径
   * @returns {Object|null} - 匹配的路由对象或 null
   */
  resolveRoute(path) {
    // 直接匹配
    if (this.routes.has(path)) {
      return this.routes.get(path);
    }
    
    // TODO: 实现参数路由匹配 (如: /user/:id)
    
    // 未找到路由，尝试使用 404 路由
    if (this.routes.has('/404')) {
      return this.routes.get('/404');
    }
    
    return null;
  }
  
  /**
   * 更新视图
   * @returns {Promise} - 更新完成的 Promise
   */
  async updateView() {
    // 已检查 currentRoute 存在，可以安全使用
    const content = await Promise.resolve(
      typeof this.currentRoute.template === 'function' 
        ? this.currentRoute.template(this.currentRoute.params) 
        : this.currentRoute.template
    );
    
    // 应用量子过渡效果
    if (this.useQuantumTransition && this.rootEl) {
      // 创建过渡容器
      const container = document.createElement('div');
      container.innerHTML = content;
      container.style.position = 'absolute';
      container.style.top = '0';
      container.style.left = '0';
      container.style.width = '100%';
      container.style.opacity = '0';
      container.style.transition = `opacity ${this.transitionDuration}ms ease-in-out`;
      
      // 添加量子效果类
      if (this.entanglementStrength > 0) {
        container.classList.add('q-transition-in');
        
        // 应用量子效果强度
        const quantumEffect = `scale(${1 - this.entanglementStrength * 0.1}) 
                              translateY(${this.entanglementStrength * 10}px)`;
        container.style.transform = quantumEffect;
        container.style.transition += `, transform ${this.transitionDuration}ms cubic-bezier(0.175, 0.885, 0.32, 1.275)`;
      }
      
      // 淡出当前内容
      if (this.rootEl.children.length > 0) {
        const oldContent = this.rootEl.children[0];
        oldContent.style.transition = `opacity ${this.transitionDuration}ms ease-in-out`;
        
        if (this.entanglementStrength > 0) {
          oldContent.classList.add('q-transition-out');
          
          // 应用量子效果强度
          const quantumOutEffect = `scale(${1 - this.entanglementStrength * 0.05}) 
                                   translateY(${-this.entanglementStrength * 5}px)`;
          oldContent.style.transform = quantumOutEffect;
          oldContent.style.transition += `, transform ${this.transitionDuration}ms ease-in-out`;
        }
        
        oldContent.style.opacity = '0';
        
        // 等待动画完成
        await new Promise(resolve => setTimeout(resolve, this.transitionDuration));
        this.rootEl.removeChild(oldContent);
      }
      
      // 添加新内容
      this.rootEl.appendChild(container);
      
      // 强制回流
      void container.offsetWidth;
      
      // 淡入
      container.style.opacity = '1';
      
      if (this.entanglementStrength > 0) {
        container.style.transform = 'scale(1) translateY(0)';
      }
      
      // 等待动画完成
      await new Promise(resolve => setTimeout(resolve, this.transitionDuration));
      
      // 清理过渡类
      container.classList.remove('q-transition-in');
    } else {
      // 无过渡效果，直接更新内容
      this.rootEl.innerHTML = content;
    }
  }
  
  /**
   * 处理弹出状态(浏览器后退/前进)
   * @param {PopStateEvent} event - 弹出状态事件
   */
  handlePopState(event) {
    const path = window.location.pathname;
    const state = event.state || { path, params: {} };
    
    // 更新历史索引
    const pathIndex = this.navigationHistory.findIndex(item => item.path === path);
    if (pathIndex !== -1) {
      this.historyIndex = pathIndex;
    }
    
    this.navigate(state.path, { 
      silent: false, 
      replaceState: true, 
      params: state.params 
    });
  }
  
  /**
   * 处理纠缠路由消息
   * @param {Object} message - 纠缠消息对象
   */
  handleEntangledRouteMessage(message) {
    if (message.type === 'router:request') {
      // 外部请求路由变更
      this.navigate(message.path, {
        replaceState: message.replaceState,
        params: message.params,
        silent: false
      });
    }
  }
  
  /**
   * 后退导航
   * @returns {Boolean} - 是否成功后退
   */
  back() {
    if (this.historyIndex > 0) {
      window.history.back();
      return true;
    }
    return false;
  }
  
  /**
   * 前进导航
   * @returns {Boolean} - 是否成功前进
   */
  forward() {
    if (this.historyIndex < this.navigationHistory.length - 1) {
      window.history.forward();
      return true;
    }
    return false;
  }
  
  /**
   * 获取当前路由状态
   * @returns {Object} - 当前路由状态
   */
  getState() {
    return {
      currentRoute: this.currentRoute,
      previousRoute: this.previousRoute,
      history: this.navigationHistory,
      historyIndex: this.historyIndex
    };
  }
}

// 创建全局量子路由器实例
const quantumRouter = new QuantumRouter({
  rootElement: '#app',
  defaultRoute: '/',
  transitionDuration: 350,
  useQuantumTransition: true,
  entanglementStrength: 0.85
});

// 导出
export default quantumRouter;
export { QuantumRouter }; 