/**
 * 量子纠缠通信断线重连模块
 */

// 重连配置
const DEFAULT_RECONNECT_CONFIG = {
    maxAttempts: 5,
    initialDelay: 1000,
    maxDelay: 30000,
    backoffFactor: 2
};

// 量子重连管理器
class QuantumReconnectionManager {
    constructor(config = {}) {
        this.config = { ...DEFAULT_RECONNECT_CONFIG, ...config };
        this.attempts = 0;
        this.currentDelay = this.config.initialDelay;
        this.reconnecting = false;
        this.onReconnect = null;
        this.onDisconnect = null;
    }
    
    // 开始重连
    startReconnection() {
        if (this.reconnecting) {
            return;
        }
        
        this.reconnecting = true;
        this.attempts = 0;
        this.currentDelay = this.config.initialDelay;
        
        this.attemptReconnect();
    }
    
    // 尝试重连
    attemptReconnect() {
        if (!this.reconnecting || this.attempts >= this.config.maxAttempts) {
            this.stopReconnection();
            return;
        }
        
        this.attempts++;
        
        // 触发重连回调
        if (this.onReconnect) {
            this.onReconnect(this.attempts)
                .then(() => {
                    // 重连成功
                    this.stopReconnection();
                })
                .catch(() => {
                    // 重连失败,使用指数退避算法计算下次重连延迟
                    this.currentDelay = Math.min(
                        this.currentDelay * this.config.backoffFactor,
                        this.config.maxDelay
                    );
                    
                    // 安排下次重连
                    setTimeout(() => this.attemptReconnect(), this.currentDelay);
                });
        }
    }
    
    // 停止重连
    stopReconnection() {
        this.reconnecting = false;
        this.attempts = 0;
        this.currentDelay = this.config.initialDelay;
    }
    
    // 设置重连回调
    setReconnectHandler(handler) {
        this.onReconnect = handler;
    }
    
    // 设置断开回调
    setDisconnectHandler(handler) {
        this.onDisconnect = handler;
    }
}

// 量子心跳检测
class QuantumHeartbeat {
    constructor(interval = 30000) {
        this.interval = interval;
        this.timer = null;
        this.onTimeout = null;
    }
    
    // 启动心跳
    start() {
        this.stop();
        this.timer = setInterval(() => {
            if (this.onTimeout) {
                this.onTimeout();
            }
        }, this.interval);
    }
    
    // 停止心跳
    stop() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
    }
    
    // 设置超时回调
    setTimeoutHandler(handler) {
        this.onTimeout = handler;
    }
}

// 量子连接状态
class QuantumConnectionState {
    constructor() {
        this.status = 'disconnected';
        this.lastConnected = null;
        this.disconnectReason = null;
        this.observers = new Set();
    }
    
    // 更新状态
    updateState(status, reason = null) {
        this.status = status;
        
        if (status === 'connected') {
            this.lastConnected = new Date();
            this.disconnectReason = null;
        } else if (status === 'disconnected') {
            this.disconnectReason = reason;
        }
        
        // 通知观察者
        this.notifyObservers();
    }
    
    // 添加观察者
    addObserver(observer) {
        this.observers.add(observer);
    }
    
    // 移除观察者
    removeObserver(observer) {
        this.observers.delete(observer);
    }
    
    // 通知观察者
    notifyObservers() {
        const state = {
            status: this.status,
            lastConnected: this.lastConnected,
            disconnectReason: this.disconnectReason
        };
        
        this.observers.forEach(observer => observer(state));
    }
}

// 导出重连模块
export const QuantumReconnection = {
    ReconnectionManager: QuantumReconnectionManager,
    Heartbeat: QuantumHeartbeat,
    ConnectionState: QuantumConnectionState
}; 