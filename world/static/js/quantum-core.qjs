/* 量子基因编码 */
QG-JS-CORE-WORLD-CORE-A1B1

/* 量子纠缠信道 */
@quantum-entangle {
  strength: 1.0,
  sync: true,
  objects: [
    "world/templates/base.qentl",
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss"
  ]
}

// 量子纠缠通信类
class QuantumEntanglementChannel {
  constructor(options = {}) {
    this.strength = options.strength || 1.0;
    this.sync = options.sync !== false;
    this.objects = options.objects || [];
    this.subscribers = new Map();
    this.messageQueue = [];
    this.isProcessing = false;
    this.retryAttempts = 3;
    this.retryDelay = 1000;
    
    // 初始化WebSocket连接
    this.initializeConnection();
  }

  // 初始化WebSocket连接
  initializeConnection() {
    this.ws = new WebSocket('ws://localhost:8000/quantum');
    
    this.ws.onopen = () => {
      console.log('量子纠缠信道已建立');
      this.processMessageQueue();
    };
    
    this.ws.onmessage = (event) => {
      this.handleMessage(JSON.parse(event.data));
    };
    
    this.ws.onclose = () => {
      console.log('量子纠缠信道已关闭');
      setTimeout(() => this.initializeConnection(), this.retryDelay);
    };
    
    this.ws.onerror = (error) => {
      console.error('量子纠缠信道错误:', error);
    };
  }

  // 发送消息
  send(message, target) {
    const quantumMessage = {
      id: crypto.randomUUID(),
      timestamp: Date.now(),
      strength: this.strength,
      sync: this.sync,
      sender: window.location.href,
      target: target,
      payload: message
    };

    if (this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(quantumMessage));
    } else {
      this.messageQueue.push(quantumMessage);
    }
  }

  // 处理消息队列
  async processMessageQueue() {
    if (this.isProcessing || this.messageQueue.length === 0) return;
    
    this.isProcessing = true;
    
    while (this.messageQueue.length > 0) {
      const message = this.messageQueue.shift();
      let attempts = 0;
      
      while (attempts < this.retryAttempts) {
        try {
          if (this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify(message));
            break;
          }
          await new Promise(resolve => setTimeout(resolve, this.retryDelay));
          attempts++;
        } catch (error) {
          console.error('发送消息失败:', error);
          attempts++;
        }
      }
    }
    
    this.isProcessing = false;
  }

  // 处理接收到的消息
  handleMessage(message) {
    if (!message || !message.id) return;
    
    // 通知所有订阅者
    this.subscribers.forEach((callback, pattern) => {
      if (this.matchPattern(message.target, pattern)) {
        callback(message);
      }
    });
  }

  // 订阅消息
  subscribe(pattern, callback) {
    if (typeof callback !== 'function') return;
    
    this.subscribers.set(pattern, callback);
    return () => this.subscribers.delete(pattern);
  }

  // 匹配消息模式
  matchPattern(target, pattern) {
    if (!target || !pattern) return false;
    
    const regex = new RegExp(pattern.replace(/\*/g, '.*'));
    return regex.test(target);
  }

  // 关闭连接
  close() {
    if (this.ws) {
      this.ws.close();
    }
  }
}

// 创建全局量子纠缠通信实例
window.quantumChannel = new QuantumEntanglementChannel({
  strength: 1.0,
  sync: true,
  objects: [
    "world/templates/base.qentl",
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss"
  ]
});

// 量子UI组件基类
class QuantumComponent {
  constructor(element, options = {}) {
    this.element = element;
    this.options = options;
    this.state = new Proxy({}, {
      set: (target, property, value) => {
        const oldValue = target[property];
        target[property] = value;
        
        if (oldValue !== value) {
          this.render();
          
          // 发送状态变更消息
          window.quantumChannel.send({
            type: 'state-change',
            component: this.constructor.name,
            property,
            oldValue,
            newValue: value
          }, `quantum-component/${this.constructor.name}/${this.element.id}`);
        }
        
        return true;
      }
    });
    
    this.init();
  }

  // 初始化组件
  init() {
    // 订阅组件消息
    this.unsubscribe = window.quantumChannel.subscribe(
      `quantum-component/${this.constructor.name}/${this.element.id}`,
      (message) => this.handleMessage(message)
    );
  }

  // 处理组件消息
  handleMessage(message) {
    if (message.type === 'state-change') {
      this.state[message.property] = message.newValue;
    }
  }

  // 渲染组件
  render() {
    // 由子类实现
  }

  // 销毁组件
  destroy() {
    if (this.unsubscribe) {
      this.unsubscribe();
    }
  }
}

// 导出
export {
  QuantumEntanglementChannel,
  QuantumComponent
}; 