/**
 * 量子消息队列管理
 * 量子基因编码: QG-SYS-MESSAGE-UI-CORE-A1B1
 * @version 1.0.0
 */

class QuantumMessage {
  /**
   * 构造函数
   * @param {Object} options - 配置选项
   * @param {Number} options.maxQueueSize - 最大队列大小，默认为 1000
   * @param {Number} options.processingInterval - 处理间隔(毫秒)，默认为 100
   * @param {Number} options.entanglementStrength - 量子纠缠强度，默认为 0.85
   * @param {Boolean} options.persistQueue - 是否持久化队列，默认为 false
   * @param {String} options.storageKey - 存储键名，默认为 'quantum_message_queue'
   */
  constructor(options = {}) {
    // 初始化配置
    this.maxQueueSize = options.maxQueueSize || 1000;
    this.processingInterval = options.processingInterval || 100;
    this.entanglementStrength = options.entanglementStrength || 0.85;
    this.persistQueue = options.persistQueue || false;
    this.storageKey = options.storageKey || 'quantum_message_queue';
    
    // 内部状态
    this.queue = [];
    this.subscribers = new Map();
    this.patterns = new Map();
    this.processingTimer = null;
    this.isProcessing = false;
    this.processedCount = 0;
    this.errorCount = 0;
    this.lastProcessTime = 0;
    this.messageHistory = [];
    this.maxHistorySize = 100;
    
    // 连接量子纠缠通道
    this._connectToEntanglementChannel();
    
    // 初始化
    this._init();
  }
  
  /**
   * 初始化消息队列
   * @private
   */
  _init() {
    // 尝试从存储中恢复队列
    if (this.persistQueue) {
      this._restoreQueue();
    }
    
    // 启动消息处理
    this._startProcessing();
    
    // 注册全局实例
    if (window.quantumMessages === undefined) {
      window.quantumMessages = this;
    }
    
    // 注册统计信息计算器
    setInterval(() => {
      this._computeStats();
    }, 5000);
    
    // 注册页面关闭事件处理
    if (this.persistQueue) {
      window.addEventListener('beforeunload', () => {
        this._persistQueue();
      });
    }
  }
  
  /**
   * 连接到量子纠缠通道
   * @private
   */
  _connectToEntanglementChannel() {
    if (window.quantumEntangle) {
      this.entanglementChannel = window.quantumEntangle;
      
      // 订阅消息
      this.entanglementChannel.subscribe('message:broadcast', (data) => {
        this._handleEntangledMessage(data);
      });
    } else {
      console.warn('量子纠缠通道不可用，消息队列将以本地模式运行');
    }
  }
  
  /**
   * 处理纠缠消息
   * @private
   * @param {Object} message - 纠缠消息
   */
  _handleEntangledMessage(message) {
    // 若强度不足，随机忽略部分消息
    if (Math.random() > this.entanglementStrength) {
      return;
    }
    
    // 将消息添加到队列
    this.queue.push({
      ...message,
      entangled: true,
      receivedAt: Date.now()
    });
    
    // 确保队列长度不超过最大值
    if (this.queue.length > this.maxQueueSize) {
      this.queue.shift();
    }
  }
  
  /**
   * 启动消息处理
   * @private
   */
  _startProcessing() {
    if (this.processingTimer) {
      return;
    }
    
    this.processingTimer = setInterval(() => {
      this._processNextMessage();
    }, this.processingInterval);
  }
  
  /**
   * 停止消息处理
   * @private
   */
  _stopProcessing() {
    if (this.processingTimer) {
      clearInterval(this.processingTimer);
      this.processingTimer = null;
    }
  }
  
  /**
   * 处理下一条消息
   * @private
   */
  _processNextMessage() {
    if (this.isProcessing || this.queue.length === 0) {
      return;
    }
    
    this.isProcessing = true;
    this.lastProcessTime = Date.now();
    
    // 取出队首消息
    const message = this.queue.shift();
    
    try {
      // 记录到历史
      this._addToHistory(message);
      
      // 分发消息给订阅者
      this._dispatchMessage(message);
      
      // 更新计数
      this.processedCount++;
    } catch (error) {
      console.error('处理消息时出错:', error);
      this.errorCount++;
    } finally {
      this.isProcessing = false;
    }
  }
  
  /**
   * 分发消息给订阅者
   * @private
   * @param {Object} message - 消息对象
   */
  _dispatchMessage(message) {
    const { type, data, sender } = message;
    
    // 精确类型匹配
    if (this.subscribers.has(type)) {
      const handlers = this.subscribers.get(type);
      handlers.forEach(handler => {
        try {
          handler(data, sender, message);
        } catch (error) {
          console.error(`消息处理器错误 (${type}):`, error);
        }
      });
    }
    
    // 模式匹配
    this.patterns.forEach((handlers, pattern) => {
      if (this._matchPattern(type, pattern)) {
        handlers.forEach(handler => {
          try {
            handler(data, sender, message);
          } catch (error) {
            console.error(`模式处理器错误 (${pattern}):`, error);
          }
        });
      }
    });
  }
  
  /**
   * 检查消息类型是否匹配模式
   * @private
   * @param {String} type - 消息类型
   * @param {String} pattern - 消息模式
   * @returns {Boolean} 是否匹配
   */
  _matchPattern(type, pattern) {
    if (pattern === '*') {
      return true;
    }
    
    if (pattern.endsWith('*')) {
      const prefix = pattern.slice(0, -1);
      return type.startsWith(prefix);
    }
    
    if (pattern.startsWith('*')) {
      const suffix = pattern.slice(1);
      return type.endsWith(suffix);
    }
    
    if (pattern.includes('*')) {
      const regex = new RegExp('^' + pattern.replace(/\*/g, '.*') + '$');
      return regex.test(type);
    }
    
    return type === pattern;
  }
  
  /**
   * 添加消息到历史记录
   * @private
   * @param {Object} message - 消息对象
   */
  _addToHistory(message) {
    // 添加到历史记录
    this.messageHistory.push({
      ...message,
      processedAt: Date.now()
    });
    
    // 限制历史大小
    if (this.messageHistory.length > this.maxHistorySize) {
      this.messageHistory.shift();
    }
  }
  
  /**
   * 计算统计信息
   * @private
   */
  _computeStats() {
    const now = Date.now();
    const stats = {
      queueSize: this.queue.length,
      processedCount: this.processedCount,
      errorCount: this.errorCount,
      processingRate: this.processedCount / ((now - this.lastProcessTime) / 1000),
      averageLatency: this.messageHistory.length > 0
        ? this.messageHistory.reduce((sum, msg) => sum + (msg.processedAt - msg.timestamp), 0) / this.messageHistory.length
        : 0
    };
    
    // 触发统计事件
    this._triggerEvent('stats', stats);
  }
  
  /**
   * 从存储恢复队列
   * @private
   */
  _restoreQueue() {
    try {
      const stored = localStorage.getItem(this.storageKey);
      if (stored) {
        const parsed = JSON.parse(stored);
        if (Array.isArray(parsed)) {
          this.queue = parsed;
        }
      }
    } catch (error) {
      console.error('恢复消息队列失败:', error);
    }
  }
  
  /**
   * 持久化队列到存储
   * @private
   */
  _persistQueue() {
    try {
      localStorage.setItem(this.storageKey, JSON.stringify(this.queue));
    } catch (error) {
      console.error('持久化消息队列失败:', error);
    }
  }
  
  /**
   * 触发事件
   * @private
   * @param {String} eventName - 事件名称
   * @param {Object} data - 事件数据
   */
  _triggerEvent(eventName, data = {}) {
    const event = new CustomEvent(`quantum:message:${eventName}`, {
      detail: data,
      bubbles: true,
      cancelable: true
    });
    
    document.dispatchEvent(event);
  }
  
  /**
   * 发送消息
   * @param {String} type - 消息类型
   * @param {*} data - 消息数据
   * @param {Object} options - 消息选项
   * @param {String} options.sender - 发送者ID
   * @param {Boolean} options.broadcast - 是否广播到其他实例
   * @param {Number} options.priority - 优先级(0-9)，越高越优先
   * @returns {String} 消息ID
   */
  send(type, data, options = {}) {
    const messageId = `msg-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    
    const message = {
      id: messageId,
      type,
      data,
      sender: options.sender || 'anonymous',
      priority: options.priority || 0,
      timestamp: Date.now(),
      broadcast: options.broadcast !== undefined ? options.broadcast : false
    };
    
    // 根据优先级添加到队列
    if (message.priority > 5) {
      // 优先级高，插入到队列头部
      this.queue.unshift(message);
    } else {
      // 优先级普通，添加到队列尾部
      this.queue.push(message);
    }
    
    // 确保队列长度不超过最大值
    if (this.queue.length > this.maxQueueSize) {
      // 移除优先级最低的消息
      const lowestPriorityIndex = this.queue.reduce(
        (minIndex, msg, index, arr) => (msg.priority < arr[minIndex].priority) ? index : minIndex, 
        0
      );
      this.queue.splice(lowestPriorityIndex, 1);
    }
    
    // 广播到其他实例
    if (message.broadcast && this.entanglementChannel) {
      this.entanglementChannel.send('message:broadcast', message);
    }
    
    // 触发发送事件
    this._triggerEvent('sent', { message });
    
    return messageId;
  }
  
  /**
   * 订阅消息
   * @param {String} type - 消息类型或模式
   * @param {Function} handler - 处理函数
   */
  subscribe(type, handler) {
    if (type.includes('*')) {
      // 带通配符的模式
      if (!this.patterns.has(type)) {
        this.patterns.set(type, []);
      }
      this.patterns.get(type).push(handler);
    } else {
      // 精确类型
      if (!this.subscribers.has(type)) {
        this.subscribers.set(type, []);
      }
      this.subscribers.get(type).push(handler);
    }
  }
  
  /**
   * 取消订阅
   * @param {String} type - 消息类型或模式
   * @param {Function} handler - 处理函数
   * @returns {Boolean} 是否成功取消
   */
  unsubscribe(type, handler) {
    if (type.includes('*')) {
      // 带通配符的模式
      if (!this.patterns.has(type)) {
        return false;
      }
      
      const handlers = this.patterns.get(type);
      const index = handlers.indexOf(handler);
      
      if (index !== -1) {
        handlers.splice(index, 1);
        if (handlers.length === 0) {
          this.patterns.delete(type);
        }
        return true;
      }
    } else {
      // 精确类型
      if (!this.subscribers.has(type)) {
        return false;
      }
      
      const handlers = this.subscribers.get(type);
      const index = handlers.indexOf(handler);
      
      if (index !== -1) {
        handlers.splice(index, 1);
        if (handlers.length === 0) {
          this.subscribers.delete(type);
        }
        return true;
      }
    }
    
    return false;
  }
  
  /**
   * 清空消息队列
   */
  clearQueue() {
    this.queue = [];
    this._triggerEvent('cleared');
    return this;
  }
  
  /**
   * 获取队列统计信息
   * @returns {Object} 统计信息
   */
  getStats() {
    return {
      queueSize: this.queue.length,
      processedCount: this.processedCount,
      errorCount: this.errorCount,
      subscriberCount: [...this.subscribers.values()].reduce((total, handlers) => total + handlers.length, 0),
      patternCount: [...this.patterns.values()].reduce((total, handlers) => total + handlers.length, 0)
    };
  }
  
  /**
   * 设置最大队列大小
   * @param {Number} size - 队列大小
   */
  setMaxQueueSize(size) {
    this.maxQueueSize = size;
    
    // 如果当前队列超过新上限，裁剪队列
    if (this.queue.length > this.maxQueueSize) {
      this.queue = this.queue.slice(-this.maxQueueSize);
    }
    
    return this;
  }
  
  /**
   * 设置处理间隔
   * @param {Number} interval - 间隔时间(毫秒)
   */
  setProcessingInterval(interval) {
    this.processingInterval = interval;
    
    // 重启处理器
    this._stopProcessing();
    this._startProcessing();
    
    return this;
  }
  
  /**
   * 设置纠缠强度
   * @param {Number} strength - 纠缠强度 (0.0-1.0)
   */
  setEntanglementStrength(strength) {
    this.entanglementStrength = Math.max(0, Math.min(1, strength));
    return this;
  }
  
  /**
   * 暂停消息处理
   */
  pause() {
    this._stopProcessing();
    this._triggerEvent('paused');
    return this;
  }
  
  /**
   * 恢复消息处理
   */
  resume() {
    this._startProcessing();
    this._triggerEvent('resumed');
    return this;
  }
  
  /**
   * 获取消息历史
   * @returns {Array} 消息历史
   */
  getHistory() {
    return [...this.messageHistory];
  }
  
  /**
   * 查询队列中的消息
   * @param {Function} predicate - 过滤函数
   * @returns {Array} 匹配的消息
   */
  query(predicate) {
    return this.queue.filter(predicate);
  }
  
  /**
   * 移除队列中的消息
   * @param {Function} predicate - 过滤函数
   * @returns {Number} 移除的消息数量
   */
  remove(predicate) {
    const initialLength = this.queue.length;
    this.queue = this.queue.filter(message => !predicate(message));
    return initialLength - this.queue.length;
  }
  
  /**
   * 立即处理所有队列消息
   * @returns {Promise} 处理完成的Promise
   */
  async flush() {
    const initialSize = this.queue.length;
    
    if (initialSize === 0) {
      return Promise.resolve(0);
    }
    
    // 暂停自动处理
    const wasProcessing = !!this.processingTimer;
    this._stopProcessing();
    
    // 处理所有消息
    while (this.queue.length > 0) {
      this._processNextMessage();
      // 小延迟以避免阻塞主线程
      await new Promise(resolve => setTimeout(resolve, 5));
    }
    
    // 恢复自动处理
    if (wasProcessing) {
      this._startProcessing();
    }
    
    this._triggerEvent('flushed', { processedCount: initialSize });
    
    return initialSize;
  }
}

// 创建全局实例
window.quantumMessage = new QuantumMessage(window.QUANTUM_MESSAGE || {});

// 导出
export default QuantumMessage; 