#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
简化版通知系统测试脚本
测试量子基因标记系统和文件监控系统的通知机制
"""

# 量子基因编码
QG-CODE-TESTS-SIMPLE-M8J3


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-TESTS-20250413
  state: ACTIVE
  strength: 0.97
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [logging]



# 添加项目根目录到系统路径
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
if project_root not in sys.path:
    sys.path.append(project_root)

# 配置日志
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("SimpleNotificationTest")

@method test_notification_system():
    """测试通知系统的基本功能"""
    logger.info("开始测试通知系统...")
    
    try:
        # 导入需要测试的模块
        @from Ref.utils.quantum_gene_marker @import notify_monitoring_systems
        @from Ref.utils.file_monitor @import notify_marker_monitor
        
        logger.info("模块导入成功")
        
        # 创建一个测试文件路径
        test_file = os.path.join(project_root, "test", "test_file.txt")
        
        # 测试文件监控系统通知量子基因标记系统
        logger.info("测试文件监控系统 -> 量子基因标记系统通知")
        result1 = notify_marker_monitor(test_file, 'add')
        logger.info(f"通知结果: {'成功' if result1 else '失败'}")
        
        # 测试量子基因标记系统通知文件监控系统
        logger.info("测试量子基因标记系统 -> 文件监控系统通知")
        result2 = notify_monitoring_systems(test_file, 'update')
        logger.info(f"通知结果: {'成功' if result2 else '失败'}")
        
        # 测试循环通知（不应引起递归错误）
        logger.info("测试循环通知（验证防递归机制）")
        notify_marker_monitor(test_file, 'update')
        
        logger.info("通知系统测试完成，未发生递归错误")
        return True
    except Exception as e:
        logger.error(f"测试过程中发生错误: {str(e)}", exc_info=True)
        return False

if __name__ == "__main__":
    success = test_notification_system()
    sys.exit(0 if success else 1) 