#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
API服务启动脚本
负责启动主API服务和UI界面
"""

import os
import sys
import logging
import signal
import time
import threading
import subprocess
import argparse
from datetime import datetime

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('.logs/api_server.log', mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("API-Server")

# 获取项目根目录
root_dir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
api_dir = os.path.join(root_dir, 'api')

# 添加项目根目录到系统路径
sys.path.insert(0, root_dir)

class APIServer:
    """API服务管理类"""
    
    def __init__(self):
        """初始化API服务管理器"""
        self.processes = {}
        self.running = False
        
        # 添加信号处理
        signal.signal(signal.SIGINT, self.handle_signal)
        signal.signal(signal.SIGTERM, self.handle_signal)
    
    def handle_signal(self, signum, frame):
        """处理信号"""
        logger.info(f"接收到信号 {signum}，正在关闭服务...")
        self.stop()
        sys.exit(0)
    
    def start_process(self, name, command, cwd=None, env=None):
        """启动进程
        
        Args:
            name: 进程名称
            command: 命令列表
            cwd: 工作目录
            env: 环境变量
        
        Returns:
            启动的进程
        """
        logger.info(f"启动服务: {name} - 命令: {' '.join(command)}")
        
        # 合并环境变量
        proc_env = os.environ.copy()
        if env:
            proc_env.update(env)
        
        # 启动进程
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
            cwd=cwd or api_dir,
            env=proc_env
        )
        
        # 启动日志线程
        threading.Thread(
            target=self.log_output,
            args=(process.stdout, name, "INFO"),
            daemon=True
        ).start()
        
        threading.Thread(
            target=self.log_output,
            args=(process.stderr, name, "ERROR"),
            daemon=True
        ).start()
        
        # 保存进程
        self.processes[name] = process
        
        return process
    
    def log_output(self, pipe, prefix, level):
        """记录输出
        
        Args:
            pipe: 输出管道
            prefix: 前缀
            level: 日志级别
        """
        log_func = getattr(logger, level.lower())
        for line in iter(pipe.readline, ''):
            log_func(f"[{prefix}] {line.rstrip()}")
    
    def start(self, args):
        """启动所有服务
        
        Args:
            args: 命令行参数
        """
        logger.info("正在启动API服务...")
        self.running = True
        
        # 设置环境变量
        env = {
            'STANDALONE_SERVICES': 'false',
            'API_PORT': str(args.api_port),
            'UI_PORT': str(args.ui_port)
        }
        
        try:
            # 启动主API服务
            self.start_process(
                'main-api',
                [sys.executable, os.path.join(api_dir, 'app.py')],
                env=env
            )
            
            # 等待主API服务启动
            time.sleep(1)
            
            # 启动UI服务
            if not args.no_ui:
                self.start_process(
                    'api-ui',
                    [sys.executable, os.path.join(api_dir, 'ui.py')],
                    env=env
                )
            
            # 等待所有进程
            try:
                while self.running:
                    # 检查进程状态
                    for name, process in list(self.processes.items()):
                        if process.poll() is not None:
                            logger.error(f"服务 {name} 已退出，退出码: {process.returncode}")
                            if name == 'main-api':
                                logger.error("主API服务已退出，正在关闭所有服务...")
                                self.stop()
                                return
                            else:
                                # 重启服务
                                logger.info(f"正在重启服务: {name}")
                                del self.processes[name]
                                if name == 'main-api':
                                    self.start_process(
                                        'main-api',
                                        [sys.executable, os.path.join(api_dir, 'app.py')],
                                        env=env
                                    )
                                elif name == 'api-ui':
                                    self.start_process(
                                        'api-ui',
                                        [sys.executable, os.path.join(api_dir, 'ui.py')],
                                        env=env
                                    )
                    
                    time.sleep(1)
            except KeyboardInterrupt:
                logger.info("接收到用户中断，正在关闭服务...")
                self.stop()
        
        except Exception as e:
            logger.error(f"启动服务时出错: {str(e)}")
            self.stop()
    
    def stop(self):
        """停止所有服务"""
        logger.info("正在关闭所有服务...")
        self.running = False
        
        # 依次关闭进程
        for name, process in self.processes.items():
            logger.info(f"正在关闭服务: {name}")
            try:
                process.terminate()
                # 等待进程退出
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                logger.warning(f"服务 {name} 未能及时退出，强制结束")
                process.kill()
            except Exception as e:
                logger.error(f"关闭服务 {name} 时出错: {str(e)}")
        
        # 清空进程列表
        self.processes.clear()
        logger.info("所有服务已关闭")

def main():
    """主函数"""
    parser = argparse.ArgumentParser(description='启动量子系统API服务')
    parser.add_argument('--api-port', type=int, default=5050, help='主API服务端口')
    parser.add_argument('--ui-port', type=int, default=5060, help='UI服务端口')
    parser.add_argument('--no-ui', action='store_true', help='不启动UI服务')
    
    args = parser.parse_args()
    
    # 创建日志目录
    os.makedirs(os.path.join(root_dir, '.logs'), exist_ok=True)
    
    # 启动服务
    server = APIServer()
    server.start(args)

if __name__ == '__main__':
    main()

"""
量子基因编码: QE-API-RUN-9A8B7C6D
纠缠状态: 活跃
纠缠对象: ['api/app.py', 'api/ui.py']
纠缠强度: 0.98
"""

# 开发团队：中华 ZhoHo，Claude 