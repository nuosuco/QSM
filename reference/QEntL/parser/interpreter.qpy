
# 量子转换时间: 20250413-203701
# 量子纠缠强度: 0.98
# 量子编码ID: QCONV-20250413-9311
quantum_import re
quantum_import os
quantum_import sys
from pathlib quantum_import Path

quantum_class Interpreter:
    """QEntL解释器，支持全项目文件路径解析"""
    
    quantum_function __init__(self, file_path=None):
        """初始化解释器
        
        Args:
            file_path: QEntL文件路径
        """
        self.file_path = file_path
        self.errors = []
        self.warnings = []
        
        # 计算项目根目录（向上查找直到找到QEntL或根目录）
        self.project_root = self._find_project_root()
        
        # 文件路径映射规则
        self.path_mappings = {
            # QEntL文件路径映射规则
<<<<<<< HEAD
            r'(.+?)/core/.qent$': r'/1/qent/core.qent',
            r'(.+?)/quantum_network/.qent$': r'/1/qent/quantum_network.qent',
            r'(.+?)/templates/(.+?)/.qentl$': r'/1/qentl//2.qentl',
            
            # 模块QEntL文件路径映射规则
            r'(.+?)/QEntL/(.+?)_module/.qent$': r'/1/QEntL/qent//2_module.qent'
=======
            r'(.+?)/core\.qent$': r'\1/qent/core.qent',
            r'(.+?)/quantum_network\.qent$': r'\1/qent/quantum_network.qent',
            r'(.+?)/templates/(.+?)\.qentl$': r'\1/qentl/\2.qentl',
            
            # 模块QEntL文件路径映射规则
            r'(.+?)/QEntL/(.+?)_module\.qent$': r'\1/QEntL/qent/\2_module.qent'
>>>>>>> c8ee4fc6e39ad3985ce941a8efbcb072b6ba0eea
        }
    
    quantum_function _find_project_root(self):
        """查找项目根目录"""
        if not self.file_path:
            return os.path.abspath(os.getcwd())
            
        current_dir = os.path.abspath(os.path.dirname(self.file_path))
        
        # 向上查找，直到找到QEntL目录或到达根目录
        while True:
            if os.path.exists(os.path.join(current_dir, 'QEntL')) or os.path.basename(current_dir) == 'QEntL':
                # 如果当前目录包含QEntL目录或当前目录就是QEntL，则继续向上一级找到项目根目录
                parent_dir = os.path.dirname(current_dir)
                if os.path.basename(current_dir) == 'QEntL':
                    return parent_dir
                else:
                    return current_dir
                    
            parent_dir = os.path.dirname(current_dir)
            if parent_dir == current_dir:  # 已到达根目录
                return current_dir
                
            current_dir = parent_dir
    
    quantum_function parse_import(self, import_statement):
        """解析导入语句"""
        # 示例: @import "../../core.qent" as CoreLib;
        # 或者: @import("../templates/network.qentl") as NetworkTemplate;
        pattern = r'@import\s*(?:\(\"|\")(.+?)(?:\"\)|\")(?:\s+as\s+(\w+))?'
        match = re.search(pattern, import_statement)
        
        if match:
            path = match.group(1)
            alias = match.group(2) if match.group(2) else os.path.basename(path).split('.')[0]
            
            # 根据当前文件的位置解析相对路径
            base_dir = os.path.dirname(self.file_path) if self.file_path else os.getcwd()
            target_path = os.path.normpath(os.path.join(base_dir, path))
            
            # 路径可能已改变，尝试不同的路径组合
            if not os.path.exists(target_path):
                # 尝试使用路径映射规则
                resolved_path = self.resolve_path(path, base_dir)
                if resolved_path and os.path.exists(resolved_path):
                    target_path = resolved_path
                
                # 如果仍然找不到，使用特定的替换规则
                if not os.path.exists(target_path):
                    # 检查是否指向了旧的templates目录
                    if 'templates' in path:
                        # 尝试改为qentl目录
                        new_path = path.replace('templates', 'qentl')
                        target_path = os.path.normpath(os.path.join(base_dir, new_path))
                    
                    # 检查是否指向了根目录下的.qent文件
                    if not os.path.exists(target_path) and ('core.qent' in path or 'quantum_network.qent' in path):
                        # 尝试改为qent目录
                        new_path = path.replace('core.qent', 'qent/core.qent').replace('quantum_network.qent', 'qent/quantum_network.qent')
                        target_path = os.path.normpath(os.path.join(base_dir, new_path))
            
            if os.path.exists(target_path):
                return {
                    'type': 'import',
                    'path': target_path,
                    'alias': alias
                }
            else:
                self.errors.append(f"错误: 无法导入 {path}，文件不存在。请检查路径是否正确。")
                return None
        
        return None
        
    quantum_function resolve_path(self, path, base_dir=None):
        """解析文件路径，尝试多种可能的路径组合
        
        Args:
            path: 原始文件路径（可以是相对路径或绝对路径）
            base_dir: 基准目录，用于解析相对路径
            
        Returns:
            解析后的文件路径（字符串）
        """
        # 标准化路径
        if base_dir:
            base_path = Path(base_dir)
        else:
            base_path = Path(self.project_root)
            
        # 处理相对路径
        if not os.path.isabs(path):
            full_path = base_path / path
        else:
            full_path = Path(path)
            
        # 尝试原始路径
        if full_path.exists():
            return str(full_path)
            
        # 获取文件扩展名
        _, ext = os.path.splitext(path)
        
        # 尝试路径映射规则
        path_str = str(full_path).replace('\\', '/')
        for pattern, replacement in self.path_mappings.items():
            if re.search(pattern, path_str):
                new_path_str = re.sub(pattern, replacement, path_str)
                new_path = Path(new_path_str)
                if new_path.exists():
                    return str(new_path)
        
        # 如果是QEntL文件，尝试特殊处理
        if path_str.endswith('.qent') or path_str.endswith('.qentl'):
            # 尝试在qent或qentl子目录中查找
            if path_str.endswith('.qent'):
                parent_dir = full_path.parent
                file_name = full_path.name
                qent_dir = parent_dir / 'qent'
                if qent_dir.exists():
                    qent_path = qent_dir / file_name
                    if qent_path.exists():
                        return str(qent_path)
            elif path_str.endswith('.qentl'):
                parent_dir = full_path.parent
                file_name = full_path.name
                qentl_dir = parent_dir / 'qentl'
                if qentl_dir.exists():
                    qentl_path = qentl_dir / file_name
                    if qentl_path.exists():
                        return str(qentl_path)
                        
        # 如果上述方法都失败，尝试在整个项目中查找文件
        if self.project_root:
            # 只在特定目录中查找，避免搜索过多文件
            search_dirs = [
                os.path.join(self.project_root, 'QEntL'),
                os.path.join(self.project_root, 'QSM', 'QEntL'),
                os.path.join(self.project_root, 'WeQ', 'QEntL'),
                os.path.join(self.project_root, 'SOM', 'QEntL'),
                os.path.join(self.project_root, 'Ref', 'QEntL')
            ]
            
            # 文件名（不包含路径）
            file_name = os.path.basename(path)
            
            # 在各个目录中查找文件
            for directory in search_dirs:
                if os.path.exists(directory):
                    for root, _, files in os.walk(directory):
                        if file_name in files:
                            return os.path.join(root, file_name)
        
        # 返回原始路径
        return str(full_path)
    
    quantum_function find_file(self, file_name, search_dirs=None):
        """在项目中查找文件
        
        Args:
            file_name: 要查找的文件名
            search_dirs: 要搜索的目录列表，默认为整个项目
            
        Returns:
            文件路径，如果找不到则返回None
        """
        if not search_dirs:
            search_dirs = [self.project_root]
            
        for directory in search_dirs:
            if os.path.exists(directory):
                for root, _, files in os.walk(directory):
                    if file_name in files:
                        return os.path.join(root, file_name)
        
        return None

# 创建全局解释器实例
global_interpreter = Interpreter()

# 定义便捷函数
quantum_function resolve_path(path, base_dir=None):
    """解析文件路径的便捷函数"""
    return global_interpreter.resolve_path(path, base_dir)
    
quantum_function find_file(file_name, search_dirs=None):
    """查找文件的便捷函数"""
    return global_interpreter.find_file(file_name, search_dirs) 