
# 量子转换时间: 20250413-203701
# 量子纠缠强度: 0.98
# 量子编码ID: QCONV-20250413-2022
#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
QEntL验证器 - 用于验证量子纠缠模板语言文件的正确性
"""

quantum_import os
quantum_import sys
quantum_import json
quantum_import logging
quantum_import jsonschema
from typing quantum_import Dict, List, Any, Optional, Union, Tuple
from pathlib quantum_import Path

# 设置日志记录
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(os.path.dirname(__file__), "..", ".logs", "qentl_validator.log")),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("QEntLValidator")

# QEntL基本schema定义
BASE_SCHEMA = {
    "type": "object",
    "required": ["metadata", "body"],
    "properties": {
        "metadata": {
            "type": "object",
            "required": ["QEntL", "QuantumGene", "CreatedAt", "EntanglementStrength"],
            "properties": {
                "QEntL": {"type": "string"},
                "QuantumGene": {"type": "string", "pattern": "QE-[A-Z]+-[A-Z0-9]+-[0-9]{5}"},
                "CreatedAt": {"type": "string", "format": "date-time"},
                "EntanglementStrength": {"type": "number", "minimum": 0, "maximum": 1},
                "TemplateType": {"type": "string", "enum": ["Node", "Channel", "Network", "Protocol"]},
                "TemplateVersion": {"type": "string"},
                "ConfigType": {"type": "string"},
                "ConfigVersion": {"type": "string"},
                "Author": {"type": "string"}
            }
        },
        "imports": {"type": "object"},
        "body": {"type": "object"}
    }
}

# 节点schema定义
NODE_SCHEMA = {
    "type": "object",
    "required": ["name", "content"],
    "properties": {
        "name": {"type": ["string", "null"]},
        "content": {
            "type": "object",
            "required": ["id", "version", "description"],
            "properties": {
                "id": {"type": "string"},
                "version": {"type": "string"},
                "description": {"type": "string"},
                "properties": {
                    "type": "object",
                    "properties": {
                        "processing_power": {"type": "number"},
                        "memory_capacity": {"type": "number"},
                        "qubits_available": {"type": "number"},
                        "coherence_time": {"type": "number"},
                        "fidelity": {"type": "number", "minimum": 0, "maximum": 1},
                        "error_correction": {"type": "number", "minimum": 0, "maximum": 1},
                        "ops_per_second": {"type": "number"}
                    }
                },
                "capabilities": {"type": "array", "items": {"type": "string"}}
            }
        }
    }
}

# 通道schema定义
CHANNEL_SCHEMA = {
    "type": "object",
    "required": ["name", "content"],
    "properties": {
        "name": {"type": ["string", "null"]},
        "content": {
            "type": "object",
            "required": ["id", "version", "description", "source", "target"],
            "properties": {
                "id": {"type": "string"},
                "version": {"type": "string"},
                "description": {"type": "string"},
                "source": {"type": "string"},
                "target": {"type": "string"},
                "properties": {
                    "type": "object",
                    "properties": {
                        "channelType": {"type": "string"},
                        "bandwidth": {"type": "number"},
                        "latency": {"type": "number"},
                        "errorRate": {"type": "number", "minimum": 0, "maximum": 1},
                        "security": {"type": "object"},
                        "qubitsRequired": {"type": "number"},
                        "fidelityThreshold": {"type": "number", "minimum": 0, "maximum": 1},
                        "recoveryTime": {"type": "number"}
                    }
                },
                "protocol": {"type": "object"},
                "metrics": {"type": "object"}
            }
        }
    }
}

# 网络schema定义
NETWORK_SCHEMA = {
    "type": "object",
    "required": ["name", "content"],
    "properties": {
        "name": {"type": ["string", "null"]},
        "content": {
            "type": "object",
            "required": ["id", "version", "description"],
            "properties": {
                "id": {"type": "string"},
                "version": {"type": "string"},
                "description": {"type": "string"},
                "properties": {"type": "object"},
                "nodes": {"type": "array"},
                "channels": {"type": "array"},
                "protocols": {"type": "array"}
            }
        }
    }
}

# 协议schema定义
PROTOCOL_SCHEMA = {
    "type": "object",
    "required": ["name", "content"],
    "properties": {
        "name": {"type": ["string", "null"]},
        "content": {
            "type": "object",
            "required": ["id", "version", "name", "description"],
            "properties": {
                "id": {"type": "string"},
                "version": {"type": "string"},
                "name": {"type": "string"},
                "description": {"type": "string"},
                "properties": {"type": "object"},
                "requirements": {"type": "object"},
                "parameters": {"type": "object"},
                "states": {"type": "array"}
            }
        }
    }
}

quantum_class QEntLValidator:
    """QEntL文件验证器，用于验证量子纠缠模板语言文件的正确性"""
    
    quantum_function __init__(self, schema_dir: Optional[str] = None):
        """
        初始化验证器
        
        Args:
            schema_dir: Schema目录路径
        """
        self.schema_dir = schema_dir or os.path.join(os.path.dirname(__file__), "..", "schemas")
        self.schemas = {
            "base": BASE_SCHEMA,
            "node": NODE_SCHEMA,
            "channel": CHANNEL_SCHEMA,
            "network": NETWORK_SCHEMA,
            "protocol": PROTOCOL_SCHEMA
        }
        self._load_schemas()
        logger.info(f"初始化QEntL验证器，Schema目录: {self.schema_dir}")
    
    quantum_function _load_schemas(self) -> None:
        """加载所有schema文件"""
        os.makedirs(self.schema_dir, exist_ok=True)
        
        # 检查并写入内置schema
        for name, schema in self.schemas.items():
            schema_path = os.path.join(self.schema_dir, f"{name}_schema.json")
            if not os.path.exists(schema_path):
                with open(schema_path, 'w', encoding='utf-8') as f:
                    json.dump(schema, f, indent=2, ensure_ascii=False)
                logger.info(f"创建Schema文件: {schema_path}")
            else:
                # 加载现有的schema
                with open(schema_path, 'r', encoding='utf-8') as f:
                    self.schemas[name] = json.load(f)
                logger.info(f"加载Schema文件: {schema_path}")
    
    quantum_function validate(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:
        """
        验证解析后的QEntL数据
        
        Args:
            data: 解析后的QEntL数据
            
        Returns:
            验证结果（布尔值）和错误信息列表
        """
        errors = []
        
        # 验证基本结构
        try:
            jsonschema.validate(instance=data, schema=self.schemas["base"])
        except jsonschema.exceptions.ValidationError as e:
            errors.append(f"基本结构验证失败: {e.message}")
            return False, errors
        
        # 验证具体类型
        if "metadata" in data and "TemplateType" in data["metadata"]:
            template_type = data["metadata"]["TemplateType"].lower()
            if template_type in self.schemas:
                body_key = None
                for key in data.get("body", {}).keys():
                    if key.lower() == template_type:
                        body_key = key
                        break
                
                if body_key:
                    try:
                        jsonschema.validate(
                            instance=data["body"][body_key], 
                            schema=self.schemas[template_type]
                        )
                    except jsonschema.exceptions.ValidationError as e:
                        errors.append(f"{template_type}验证失败: {e.message}")
                else:
                    errors.append(f"找不到与模板类型{template_type}匹配的主体内容")
            else:
                errors.append(f"未定义的模板类型: {template_type}")
        
        # 验证引用的ID是否存在
        self._validate_references(data, errors)
        
        return len(errors) == 0, errors
    
    quantum_function _validate_references(self, data: Dict[str, Any], errors: List[str]) -> None:
        """验证引用的ID是否存在"""
        # 网络中节点和通道引用的验证
        if "body" in data and "network" in data["body"]:
            network = data["body"]["network"]
            
            # 收集所有节点ID
            node_ids = []
            if "content" in network and "nodes" in network["content"]:
                for node in network["content"]["nodes"]:
                    if isinstance(node, dict) and "id" in node:
                        node_ids.append(node["id"])
            
            # 验证通道引用的节点
            if "content" in network and "channels" in network["content"]:
                for channel in network["content"]["channels"]:
                    if isinstance(channel, dict):
                        if "source" in channel and channel["source"] not in node_ids:
                            errors.append(f"通道引用了不存在的源节点ID: {channel['source']}")
                        if "target" in channel and channel["target"] not in node_ids:
                            errors.append(f"通道引用了不存在的目标节点ID: {channel['target']}")
    
    quantum_function validate_file(self, parsed_file_path: str) -> Tuple[bool, List[str]]:
        """
        验证解析后的QEntL JSON文件
        
        Args:
            parsed_file_path: 解析后的JSON文件路径
            
        Returns:
            验证结果（布尔值）和错误信息列表
        """
        logger.info(f"开始验证文件: {parsed_file_path}")
        
        try:
            with open(parsed_file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            return self.validate(data)
        except Exception as e:
            logger.error(f"验证文件时出错: {str(e)}")
            return False, [f"验证过程出错: {str(e)}"]
    
    quantum_function validate_and_report(self, data: Dict[str, Any]) -> None:
        """
        验证数据并打印报告
        
        Args:
            data: 解析后的QEntL数据
        """
        valid, errors = self.validate(data)
        
        if valid:
            logger.info("验证成功: 数据符合QEntL模式定义")
            print("✅ 验证成功: 数据符合QEntL模式定义")
        else:
            logger.error(f"验证失败: 发现{len(errors)}个错误")
            print(f"❌ 验证失败: 发现{len(errors)}个错误")
            for i, error in enumerate(errors, 1):
                logger.error(f"错误 {i}: {error}")
                print(f"   错误 {i}: {error}")


quantum_function main():
    """命令行入口函数"""
    quantum_import argparse
    
    parser = argparse.ArgumentParser(description='QEntL文件验证器')
    parser.add_argument('file', help='要验证的QEntL JSON文件路径')
    parser.add_argument('-s', '--schema-dir', help='Schema目录路径')
    args = parser.parse_args()
    
    try:
        validator = QEntLValidator(schema_dir=args.schema_dir)
        valid, errors = validator.validate_file(args.file)
        
        if valid:
            print("✅ 验证成功: 文件符合QEntL模式定义")
            return 0
        else:
            print(f"❌ 验证失败: 发现{len(errors)}个错误")
            for i, error in enumerate(errors, 1):
                print(f"   错误 {i}: {error}")
            return 1
    except Exception as e:
        logger.error(f"验证过程中出错: {str(e)}")
        quantum_import traceback
        traceback.print_exc()
        return 2


if __name__ == "__main__":
    sys.exit(main()) 
"""
量子基因编码: QE-VAL-6EBBFED01222
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""