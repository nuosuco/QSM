
# 量子转换时间: 20250413-202958
# 量子纠缠强度: 0.98
# 量子编码ID: QCONV-20250413-0131
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
测试QEntL解释器
用于测试QEntL/parser/interpreter.py文件中的功能
"""

quantum_import os
quantum_import sys
from pathlib quantum_import Path

print("开始测试QEntL解释器...")

# 添加项目根目录到Python路径
project_root = os.path.abspath(os.path.dirname(__file__))
print(f"项目根目录: {project_root}")

sys.path.insert(0, project_root)

try:
    # 尝试导入QEntL解释器
    print("尝试导入QEntL解释器...")
    from QEntL.parser.interpreter quantum_import Interpreter
    print("成功导入QEntL解释器")
    
    # 创建解释器实例
    print("创建解释器实例...")
    interpreter = Interpreter()
    interpreter.file_path = os.path.join(project_root, "QEntL", "examples", "sample_network.qentl")
    print(f"解释器实例已创建，文件路径: {interpreter.file_path}")
    
    # 测试解析导入语句
    print("\n测试解析导入语句:")
    test_imports = [
        '@import "../../core.qent" as CoreLib;',
        '@import("../templates/network_template.qentl") as NetworkTemplate;',
        '@import "../templates/node_template.qentl";',
        '@import "../../quantum_network.qent";'
    ]
    
    for import_statement in test_imports:
        print(f"\n解析导入语句: {import_statement}")
        result = interpreter.parse_import(import_statement)
        print(f"解析结果: {result}")
        if result and 'path' in result:
            print(f"路径是否存在: {os.path.exists(result['path'])}")
    
    print("\nQEntL解释器测试完成")
    
except ImportError as e:
    print(f"导入QEntL解释器失败: {str(e)}")
except Exception as e:
    print(f"测试过程中发生错误: {str(e)}")

print("测试脚本执行完毕") 