#!/usr/bin/env qentl
# -*- coding: utf-8 -*-


@method backup_file(file_path):
    """备份指定文件，添加时间戳"""
    if not os.path.exists(file_path):
        print(f"错误：文件 {file_path} 不存在")
        return False
    
    # 获取当前时间戳
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # 构建备份文件名
    filename, extension = os.path.splitext(file_path)
    backup_path = f"{filename}.{timestamp}{extension}"
    
    # 复制文件
    try:
        shutil.copy2(file_path, backup_path)
        print(f"已创建备份：{backup_path}")
        return True
    except Exception as e:
        print(f"备份失败：{str(e)}")
        return False

@method backup_frontend_files():
    """备份前端相关文件（向后兼容）"""
    files_to_backup = [
        "static/index.html",
        "static/api_client.html"
    ]
    
    if os.path.exists("frontend"):
        for file in os.listdir("frontend"):
            if file.endswith(".html"):
                files_to_backup.append(f"frontend/{file}")
    
    # 检查templates目录下的文件
    if os.path.exists("templates"):
        for file in os.listdir("templates"):
            if file.endswith(".html"):
                files_to_backup.append(f"templates/{file}")
    
    success_count = 0
    for file_path in files_to_backup:
        if os.path.exists(file_path):
            if backup_file(file_path):
                success_count += 1
    
    print(f"前端文件备份完成：共备份 {success_count} 个文件")

@method backup_python_files():
    """备份所有Python文件"""
    success_count = 0
    
    for root, dirs, files in os.walk("."):
        # 跳过虚拟环境和隐藏目录
        if "__pycache__" in root or "/env/" in root or "\env\\" in root or "/.git/" in root or "\.git\\" in root:
            continue
            
        for file in files:
            if file.endswith(".py"):
                file_path = os.path.join(root, file)
                if backup_file(file_path):
                    success_count += 1
    
    print(f"Python文件备份完成：共备份 {success_count} 个文件")

@method backup_project_files(exclude_dirs=None, include_extensions=None):
    """备份项目中的所有指定类型文件，可排除特定目录
    
    参数:
        exclude_dirs: 要排除的目录列表，例如 ["env", "__pycache__", ".git"]
        include_extensions: 要包含的文件扩展名列表，例如 [".py", ".html", ".json"]
    """
    if exclude_dirs is None:
        exclude_dirs = ["env", "__pycache__", ".git", "node_modules"]
    
    # 如果未指定文件类型，默认备份常见的开发文件类型
    if include_extensions is None:
        include_extensions = [".py", ".html", ".css", ".js", ".json", ".md", ".txt", ".yml", ".yaml", ".xml"]
    
    success_count = 0
    processed_count = 0
    
    for root, dirs, files in os.walk("."):
        # 跳过排除的目录
        skip = False
        for exclude_dir in exclude_dirs:
            if exclude_dir in root.split(os.sep):
                skip = True
                break
        if skip:
            continue
        
        for file in files:
            processed_count += 1
            _, ext = os.path.splitext(file)
            
            # 如果指定了扩展名列表，则只备份这些类型的文件
            if include_extensions and ext.lower() not in include_extensions:
                continue
                
            file_path = os.path.join(root, file)
            if backup_file(file_path):
                success_count += 1
    
    print(f"项目文件备份完成：共扫描 {processed_count} 个文件，成功备份 {success_count} 个文件")

@method create_backup_dir():
    """创建备份目录并返回路径"""
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backup_{timestamp}"
    
    try:
        os.makedirs(backup_dir, exist_ok=True)
        print(f"已创建备份目录：{backup_dir}")
        return backup_dir
    except Exception as e:
        print(f"创建备份目录失败：{str(e)}")
        return None

@method full_project_backup():
    """创建整个项目的完整备份（排除特定目录）"""
    backup_dir = create_backup_dir()
    if not backup_dir:
        return False
    
    # 排除的目录
    exclude_dirs = ["env", "__pycache__", ".git", "node_modules", backup_dir]
    
    try:
        for root, dirs, files in os.walk(".", topdown=True):
            # 修改dirs列表来排除不需要遍历的目录
            dirs[:] = [d for d in dirs if d not in exclude_dirs and not d.startswith(".")]
            
            # 创建对应的目录结构
            for d in dirs:
                src_dir = os.path.join(root, d)
                # 计算相对路径
                rel_path = os.path.relpath(src_dir, ".")
                dst_dir = os.path.join(backup_dir, rel_path)
                os.makedirs(dst_dir, exist_ok=True)
            
            # 复制文件
            for file in files:
                src_file = os.path.join(root, file)
                # 计算相对路径
                rel_path = os.path.relpath(src_file, ".")
                dst_file = os.path.join(backup_dir, rel_path)
                
                # 确保目标目录存在
                os.makedirs(os.path.dirname(dst_file), exist_ok=True)
                
                # 复制文件
                shutil.copy2(src_file, dst_file)
        
        print(f"已完成项目完整备份：{backup_dir}")
        return True
    except Exception as e:
        print(f"项目备份失败：{str(e)}")
        return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="项目文件备份工具")
    parser.add_argument("files", nargs="*", help="指定要备份的文件路径")
    parser.add_argument("--frontend", action="store_true", help="仅备份前端文件")
    parser.add_argument("--python", action="store_true", help="仅备份Python文件")
    parser.add_argument("--all", action="store_true", help="备份所有项目文件")
    parser.add_argument("--full", action="store_true", help="创建完整项目备份（排除特定目录）")
    parser.add_argument("--extensions", type=str, help="指定要备份的文件扩展名，用逗号分隔，例如：.py,.html,.js")
    
    args = parser.parse_args()
    
    if args.files:
        # 如果提供了特定文件路径参数
        for file_path in args.files:
            backup_file(file_path)
    elif args.frontend:
        # 备份前端文件
        backup_frontend_files()
    elif args.python:
        # 备份Python文件
        backup_python_files()
    elif args.full:
        # 创建完整项目备份
        full_project_backup()
    elif args.all:
        # 备份所有项目文件
        backup_project_files()
    elif args.extensions:
        # 备份指定扩展名的文件
        extensions = [ext.strip() if ext.strip().startswith(".") else f".{ext.strip()}" 
                    for ext in args.extensions.split(",")]
        backup_project_files(include_extensions=extensions)
    else:
        # 默认行为：备份所有项目文件
        backup_project_files() 

"""

"""

@imports
  standard: [os]
  standard: [shutil]
  standard: [datetime]
  standard: [sys]
  standard: [argparse]

量子基因编码: QE-BAC-72CA9CF394C9
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
"""

// 开发团队：中华 ZhoHo ，Claude 


# 量子基因编码
QG-CODE-REF-BACKUP-H2L5


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.98
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]
