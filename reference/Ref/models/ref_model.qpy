#!/usr/bin/env qpy
# -*- coding: utf-8 -*-

"""
Ref量子自反省模型模块
提供系统自监控、自修复和自优化的能力
"""

# 量子基因编码
QG-MODEL-REF-CORE-A2S4

# 量子纠缠信道
@quantum_entangle
  channel_id: QE-MODEL-REF-20240405
  state: ACTIVE
  strength: 0.98
  objects: [
    "QSM/models/qsm_superposition_model.qpy",
    "WeQ/models/weq_model.qentl",
    "SOM/models/som_model.qpy"
  ]

@imports
  standard: [os, json, logging, time, datetime, threading, re, sys, random]
  quantum: [Dict, List, Any, Tuple, Optional, Union, Set, Path]
  quantum_math: [numpy as np]

@constants
  ROOT_DIR = Path(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
  LOG_DIR = ROOT_DIR / '.logs'
  DATA_DIR = ROOT_DIR / 'Ref' / 'data'
  MONITOR_DIR = DATA_DIR / 'monitors'
  REGISTRY_DIR = ROOT_DIR / 'Ref' / 'registry'
  
  # 监控级别
  MONITOR_LEVELS = {
    'CRITICAL': 50,  # 紧急情况，需要立即处理
    'ERROR': 40,     # 严重问题，需要修复
    'WARNING': 30,   # 警告，可能需要关注
    'INFO': 20,      # 一般信息
    'DEBUG': 10,     # 调试信息
    'TRACE': 5       # 跟踪信息
  }
  
  # 自反省类型
  REFLECTION_TYPES = {
    'PERFORMANCE': '性能分析',
    'CONSISTENCY': '一致性检查',
    'INTEGRITY': '完整性验证',
    'SECURITY': '安全性评估',
    'EFFICIENCY': '效率优化',
    'RELIABILITY': '可靠性分析'
  }
  
  # 修复策略
  REPAIR_STRATEGIES = {
    'AUTO_FIX': '自动修复',
    'ROLLBACK': '回滚到之前状态',
    'ISOLATE': '隔离问题组件',
    'RESTART': '重启组件',
    'NOTIFY': '仅通知'
  }

@initialization
  # 创建日志和数据目录
  LOG_DIR.mkdir(exist_ok=True)
  DATA_DIR.mkdir(exist_ok=True, parents=True)
  MONITOR_DIR.mkdir(exist_ok=True)
  REGISTRY_DIR.mkdir(exist_ok=True)
  
  # 配置日志
  logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - [%(levelname)s] - %(message)s',
    handlers=[
      logging.FileHandler(LOG_DIR / f'ref_model_{datetime.datetime.now().strftime("%Y%m%d")}.log'),
      logging.StreamHandler()
    ]
  )
  logger = logging.getLogger('REF-MODEL')

@class ComponentSignature:
  """组件签名类，用于标识和验证系统组件"""
  
  @constructor(component_id: str, component_type: str, version: str, file_path: Optional[str] = None)
    """初始化组件签名
    
    Args:
        component_id: 组件唯一标识符
        component_type: 组件类型
        version: 组件版本
        file_path: 组件文件路径
    """
    self.component_id = component_id
    self.component_type = component_type
    self.version = version
    self.file_path = file_path
    self.created_at = datetime.datetime.now().isoformat()
    self.last_verified = None
    self.status = 'REGISTERED'
    self.checksum = None
    
    if file_path and os.path.exists(file_path):
      self.update_checksum()
  
  @method update_checksum(self)
    """更新组件校验和"""
    if not self.file_path or not os.path.exists(self.file_path):
      return
      
    import hashlib
    with open(self.file_path, 'rb') as f:
      file_data = f.read()
      self.checksum = hashlib.sha256(file_data).hexdigest()
  
  @method verify(self) -> bool:
    """验证组件完整性
    
    Returns:
        组件是否完整有效
    """
    if not self.file_path or not os.path.exists(self.file_path):
      self.status = 'MISSING'
      return False
    
    import hashlib
    with open(self.file_path, 'rb') as f:
      file_data = f.read()
      current_checksum = hashlib.sha256(file_data).hexdigest()
    
    is_valid = current_checksum == self.checksum
    self.last_verified = datetime.datetime.now().isoformat()
    
    if is_valid:
      self.status = 'VERIFIED'
    else:
      self.status = 'CORRUPTED'
      
    return is_valid
  
  @method to_dict(self) -> Dict[str, Any]:
    """转换为字典表示
    
    Returns:
        字典表示
    """
    return {
      'component_id': self.component_id,
      'component_type': self.component_type,
      'version': self.version,
      'file_path': self.file_path,
      'created_at': self.created_at,
      'last_verified': self.last_verified,
      'status': self.status,
      'checksum': self.checksum
    }
  
  @classmethod
  @method from_dict(cls, data: Dict[str, Any]) -> 'ComponentSignature':
    """从字典创建组件签名
    
    Args:
        data: 字典数据
        
    Returns:
        组件签名实例
    """
    signature = cls(
      component_id=data['component_id'],
      component_type=data['component_type'],
      version=data['version'],
      file_path=data.get('file_path')
    )
    signature.created_at = data.get('created_at', signature.created_at)
    signature.last_verified = data.get('last_verified')
    signature.status = data.get('status', 'REGISTERED')
    signature.checksum = data.get('checksum')
    
    return signature

@class MonitorMetric:
  """监控指标类，表示一个被监控的指标"""
  
  @constructor(metric_id: str, name: str, type: str)
    """初始化监控指标
    
    Args:
        metric_id: 指标ID
        name: 指标名称
        type: 指标类型
    """
    self.metric_id = metric_id
    self.name = name
    self.type = type
    self.created_at = datetime.datetime.now().isoformat()
    self.history = []  # 历史记录
    self.thresholds = {
      'warning': None,  # 警告阈值
      'error': None,    # 错误阈值
      'critical': None  # 严重阈值
    }
    self.current_value = None
    self.last_updated = None
    self.status = 'NORMAL'  # NORMAL, WARNING, ERROR, CRITICAL
  
  @method set_thresholds(self, warning: Optional[float] = None, error: Optional[float] = None, critical: Optional[float] = None)
    """设置监控阈值
    
    Args:
        warning: 警告阈值
        error: 错误阈值
        critical: 严重阈值
    """
    if warning is not None:
      self.thresholds['warning'] = warning
    
    if error is not None:
      self.thresholds['error'] = error
    
    if critical is not None:
      self.thresholds['critical'] = critical
  
  @method update(self, value: Any, timestamp: Optional[str] = None)
    """更新指标值
    
    Args:
        value: 新的指标值
        timestamp: 时间戳，如果为None则使用当前时间
    """
    if timestamp is None:
      timestamp = datetime.datetime.now().isoformat()
    
    # 保存当前值
    self.current_value = value
    self.last_updated = timestamp
    
    # 添加到历史记录
    self.history.append({
      'value': value,
      'timestamp': timestamp
    })
    
    # 限制历史记录长度
    if len(self.history) > 100:
      self.history = self.history[-100:]
    
    # 更新状态
    self._evaluate_status()
  
  @method _evaluate_status(self)
    """评估当前状态"""
    if self.current_value is None:
      self.status = 'UNKNOWN'
      return
    
    # 默认为正常状态
    self.status = 'NORMAL'
    
    # 检查阈值
    try:
      value = float(self.current_value)
      
      if self.thresholds['critical'] is not None and value >= self.thresholds['critical']:
        self.status = 'CRITICAL'
      elif self.thresholds['error'] is not None and value >= self.thresholds['error']:
        self.status = 'ERROR'
      elif self.thresholds['warning'] is not None and value >= self.thresholds['warning']:
        self.status = 'WARNING'
    except (ValueError, TypeError):
      # 如果值不能转换为浮点数，则无法与阈值比较
      pass
  
  @method get_trend(self, period: int = 10) -> str:
    """获取指标趋势
    
    Args:
        period: 分析的历史记录数量
        
    Returns:
        趋势描述: 'RISING', 'FALLING', 'STABLE', 'FLUCTUATING', 'UNKNOWN'
    """
    if len(self.history) < 2:
      return 'UNKNOWN'
    
    # 获取最近的记录
    recent = self.history[-min(period, len(self.history)):]
    
    try:
      # 尝试转换为数值
      values = [float(item['value']) for item in recent]
      
      # 计算变化
      changes = [values[i] - values[i-1] for i in range(1, len(values))]
      positive_changes = sum(1 for c in changes if c > 0)
      negative_changes = sum(1 for c in changes if c < 0)
      
      # 计算总体变化
      total_change = values[-1] - values[0]
      
      # 确定趋势
      change_ratio = abs(total_change) / (sum(abs(c) for c in changes) / len(changes)) if sum(abs(c) for c in changes) > 0 else 0
      
      if change_ratio < 0.3:
        return 'FLUCTUATING'
      elif total_change > 0:
        return 'RISING'
      elif total_change < 0:
        return 'FALLING'
      else:
        return 'STABLE'
        
    except (ValueError, TypeError):
      return 'UNKNOWN'
  
  @method to_dict(self) -> Dict[str, Any]:
    """转换为字典表示
    
    Returns:
        字典表示
    """
    return {
      'metric_id': self.metric_id,
      'name': self.name,
      'type': self.type,
      'created_at': self.created_at,
      'current_value': self.current_value,
      'last_updated': self.last_updated,
      'status': self.status,
      'thresholds': self.thresholds,
      'history': self.history[-10:],  # 仅包含最近10条记录
      'trend': self.get_trend()
    }
  
  @classmethod
  @method from_dict(cls, data: Dict[str, Any]) -> 'MonitorMetric':
    """从字典创建监控指标
    
    Args:
        data: 字典数据
        
    Returns:
        监控指标实例
    """
    metric = cls(
      metric_id=data['metric_id'],
      name=data['name'],
      type=data['type']
    )
    metric.created_at = data.get('created_at', metric.created_at)
    metric.current_value = data.get('current_value')
    metric.last_updated = data.get('last_updated')
    metric.status = data.get('status', 'NORMAL')
    metric.thresholds = data.get('thresholds', metric.thresholds)
    metric.history = data.get('history', [])
    
    return metric

@class ReflectionReport:
  """自反省报告类，用于记录系统自反省结果"""
  
  @constructor(report_id: str, reflection_type: str, target_component: str)
    """初始化自反省报告
    
    Args:
        report_id: 报告ID
        reflection_type: 自反省类型
        target_component: 目标组件
    """
    self.report_id = report_id
    self.reflection_type = reflection_type
    self.target_component = target_component
    self.created_at = datetime.datetime.now().isoformat()
    self.completed_at = None
    self.status = 'PENDING'  # PENDING, IN_PROGRESS, COMPLETED, FAILED
    self.findings = []  # 发现的问题或观察结果
    self.metrics = {}  # 相关指标
    self.recommendations = []  # 建议的操作
    self.repair_actions = []  # 已执行的修复操作
  
  @method add_finding(self, severity: str, description: str, details: Optional[Dict[str, Any]] = None)
    """添加发现
    
    Args:
        severity: 严重程度 (INFO, WARNING, ERROR, CRITICAL)
        description: 发现描述
        details: 详细信息
    """
    if severity not in ['INFO', 'WARNING', 'ERROR', 'CRITICAL']:
      severity = 'INFO'
    
    finding = {
      'id': f"finding_{len(self.findings) + 1}",
      'severity': severity,
      'description': description,
      'details': details or {},
      'timestamp': datetime.datetime.now().isoformat()
    }
    
    self.findings.append(finding)
  
  @method add_metric(self, metric: MonitorMetric)
    """添加相关指标
    
    Args:
        metric: 监控指标
    """
    self.metrics[metric.metric_id] = metric.to_dict()
  
  @method add_recommendation(self, action: str, priority: str, description: str, repair_strategy: str)
    """添加建议
    
    Args:
        action: 建议的操作
        priority: 优先级 (LOW, MEDIUM, HIGH, CRITICAL)
        description: 建议描述
        repair_strategy: 修复策略
    """
    if priority not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:
      priority = 'MEDIUM'
    
    if repair_strategy not in REPAIR_STRATEGIES:
      repair_strategy = 'NOTIFY'
    
    recommendation = {
      'id': f"rec_{len(self.recommendations) + 1}",
      'action': action,
      'priority': priority,
      'description': description,
      'repair_strategy': repair_strategy,
      'timestamp': datetime.datetime.now().isoformat(),
      'status': 'PENDING'  # PENDING, APPROVED, REJECTED, IMPLEMENTED
    }
    
    self.recommendations.append(recommendation)
  
  @method record_repair_action(self, action_type: str, description: str, result: str, details: Optional[Dict[str, Any]] = None)
    """记录修复操作
    
    Args:
        action_type: 操作类型
        description: 操作描述
        result: 操作结果 (SUCCESS, FAILED, PARTIAL)
        details: 详细信息
    """
    if result not in ['SUCCESS', 'FAILED', 'PARTIAL']:
      result = 'PARTIAL'
    
    action = {
      'id': f"action_{len(self.repair_actions) + 1}",
      'action_type': action_type,
      'description': description,
      'result': result,
      'details': details or {},
      'timestamp': datetime.datetime.now().isoformat()
    }
    
    self.repair_actions.append(action)
  
  @method complete(self, success: bool = True)
    """完成报告
    
    Args:
        success: 自反省是否成功
    """
    self.completed_at = datetime.datetime.now().isoformat()
    self.status = 'COMPLETED' if success else 'FAILED'
  
  @method get_summary(self) -> Dict[str, Any]:
    """获取报告摘要
    
    Returns:
        报告摘要
    """
    # 计算严重程度分布
    severity_counts = {
      'INFO': 0,
      'WARNING': 0,
      'ERROR': 0,
      'CRITICAL': 0
    }
    
    for finding in self.findings:
      severity_counts[finding['severity']] += 1
    
    # 计算修复建议优先级分布
    priority_counts = {
      'LOW': 0,
      'MEDIUM': 0,
      'HIGH': 0,
      'CRITICAL': 0
    }
    
    for rec in self.recommendations:
      priority_counts[rec['priority']] += 1
    
    # 计算修复操作结果分布
    action_results = {
      'SUCCESS': 0,
      'FAILED': 0,
      'PARTIAL': 0
    }
    
    for action in self.repair_actions:
      action_results[action['result']] += 1
    
    return {
      'report_id': self.report_id,
      'reflection_type': self.reflection_type,
      'type_name': REFLECTION_TYPES.get(self.reflection_type, '未知类型'),
      'target_component': self.target_component,
      'status': self.status,
      'created_at': self.created_at,
      'completed_at': self.completed_at,
      'duration': self._calculate_duration(),
      'finding_count': len(self.findings),
      'severity_distribution': severity_counts,
      'recommendation_count': len(self.recommendations),
      'priority_distribution': priority_counts,
      'action_count': len(self.repair_actions),
      'action_results': action_results
    }
  
  @method _calculate_duration(self) -> Optional[float]:
    """计算报告持续时间（秒）
    
    Returns:
        持续时间，如果报告未完成则为None
    """
    if not self.completed_at:
      return None
    
    start_time = datetime.datetime.fromisoformat(self.created_at)
    end_time = datetime.datetime.fromisoformat(self.completed_at)
    
    return (end_time - start_time).total_seconds()
  
  @method to_dict(self) -> Dict[str, Any]:
    """转换为字典表示
    
    Returns:
        字典表示
    """
    return {
      'report_id': self.report_id,
      'reflection_type': self.reflection_type,
      'target_component': self.target_component,
      'created_at': self.created_at,
      'completed_at': self.completed_at,
      'status': self.status,
      'findings': self.findings,
      'metrics': self.metrics,
      'recommendations': self.recommendations,
      'repair_actions': self.repair_actions,
      'summary': self.get_summary()
    }
  
  @classmethod
  @method from_dict(cls, data: Dict[str, Any]) -> 'ReflectionReport':
    """从字典创建反省报告
    
    Args:
        data: 字典数据
        
    Returns:
        反省报告实例
    """
    report = cls(
      report_id=data['report_id'],
      reflection_type=data['reflection_type'],
      target_component=data['target_component']
    )
    report.created_at = data.get('created_at', report.created_at)
    report.completed_at = data.get('completed_at')
    report.status = data.get('status', 'PENDING')
    report.findings = data.get('findings', [])
    report.metrics = data.get('metrics', {})
    report.recommendations = data.get('recommendations', [])
    report.repair_actions = data.get('repair_actions', [])
    
    return report

@class RepairStrategy:
  """修复策略类，用于定义和执行修复操作"""
  
  @constructor(strategy_id: str, strategy_type: str, description: str)
    """初始化修复策略
    
    Args:
        strategy_id: 策略ID
        strategy_type: 策略类型
        description: 策略描述
    """
    self.strategy_id = strategy_id
    self.strategy_type = strategy_type
    self.description = description
    self.created_at = datetime.datetime.now().isoformat()
    self.steps = []  # 修复步骤
    self.preconditions = []  # 前置条件
    self.postconditions = []  # 后置条件
    self.dependencies = []  # 依赖策略
    self.applicable_to = []  # 适用的组件类型
    self.success_count = 0  # 成功次数
    self.failure_count = 0  # 失败次数
  
  @method add_step(self, action: str, params: Dict[str, Any], description: str, rollback_action: Optional[str] = None)
    """添加修复步骤
    
    Args:
        action: 步骤操作
        params: 操作参数
        description: 步骤描述
        rollback_action: 回滚操作
    """
    step = {
      'id': f"step_{len(self.steps) + 1}",
      'action': action,
      'params': params,
      'description': description,
      'rollback_action': rollback_action,
      'is_critical': False  # 标记是否为关键步骤
    }
    
    self.steps.append(step)
  
  @method add_precondition(self, condition: str, description: str)
    """添加前置条件
    
    Args:
        condition: 条件表达式
        description: 条件描述
    """
    self.preconditions.append({
      'id': f"pre_{len(self.preconditions) + 1}",
      'condition': condition,
      'description': description
    })
  
  @method add_postcondition(self, condition: str, description: str)
    """添加后置条件
    
    Args:
        condition: 条件表达式
        description: 条件描述
    """
    self.postconditions.append({
      'id': f"post_{len(self.postconditions) + 1}",
      'condition': condition,
      'description': description
    })
  
  @method add_dependency(self, strategy_id: str)
    """添加依赖策略
    
    Args:
        strategy_id: 依赖的策略ID
    """
    if strategy_id not in self.dependencies:
      self.dependencies.append(strategy_id)
  
  @method add_applicable_component(self, component_type: str)
    """添加适用的组件类型
    
    Args:
        component_type: 组件类型
    """
    if component_type not in self.applicable_to:
      self.applicable_to.append(component_type)
  
  @method execute(self, target_component: str, context: Dict[str, Any]) -> Dict[str, Any]:
    """执行修复策略
    
    Args:
        target_component: 目标组件
        context: 执行上下文
        
    Returns:
        执行结果
    """
    result = {
      'strategy_id': self.strategy_id,
      'target_component': target_component,
      'start_time': datetime.datetime.now().isoformat(),
      'end_time': None,
      'status': 'IN_PROGRESS',
      'step_results': [],
      'success': False,
      'message': ''
    }
    
    try:
      # 检查前置条件
      for precond in self.preconditions:
        if not self._evaluate_condition(precond['condition'], context):
          result['status'] = 'FAILED'
          result['message'] = f"前置条件不满足: {precond['description']}"
          self.failure_count += 1
          return result
      
      # 执行步骤
      rollback_needed = False
      executed_steps = []
      
      for step in self.steps:
        step_result = {
          'step_id': step['id'],
          'action': step['action'],
          'start_time': datetime.datetime.now().isoformat(),
          'end_time': None,
          'status': 'IN_PROGRESS',
          'output': None,
          'error': None
        }
        
        try:
          # 执行步骤操作
          output = self._execute_action(step['action'], step['params'], context)
          step_result['output'] = output
          step_result['status'] = 'COMPLETED'
          executed_steps.append(step)
          
        except Exception as e:
          step_result['status'] = 'FAILED'
          step_result['error'] = str(e)
          rollback_needed = True
          
          # 如果是关键步骤，停止执行后续步骤
          if step['is_critical']:
            result['message'] = f"关键步骤执行失败: {step['description']}"
            break
        
        finally:
          step_result['end_time'] = datetime.datetime.now().isoformat()
          result['step_results'].append(step_result)
      
      # 如果需要回滚
      if rollback_needed:
        result['status'] = 'FAILED'
        result['message'] = '执行失败，正在回滚'
        
        # 反向执行回滚操作
        for step in reversed(executed_steps):
          if step['rollback_action']:
            try:
              self._execute_action(step['rollback_action'], step['params'], context)
            except Exception as e:
              result['message'] += f", 回滚步骤 {step['id']} 失败: {str(e)}"
        
        self.failure_count += 1
      else:
        # 检查后置条件
        all_postconditions_met = True
        for postcond in self.postconditions:
          if not self._evaluate_condition(postcond['condition'], context):
            all_postconditions_met = False
            result['message'] = f"后置条件不满足: {postcond['description']}"
            break
        
        if all_postconditions_met:
          result['status'] = 'COMPLETED'
          result['success'] = True
          result['message'] = '修复策略执行成功'
          self.success_count += 1
        else:
          result['status'] = 'FAILED'
          self.failure_count += 1
      
    except Exception as e:
      result['status'] = 'FAILED'
      result['message'] = f"执行过程中发生错误: {str(e)}"
      self.failure_count += 1
    
    finally:
      result['end_time'] = datetime.datetime.now().isoformat()
    
    return result
  
  @method _evaluate_condition(self, condition: str, context: Dict[str, Any]) -> bool:
    """评估条件
    
    Args:
        condition: 条件表达式
        context: 执行上下文
        
    Returns:
        条件是否满足
    """
    # 这里是简化实现，实际应该使用更安全的方式评估条件
    try:
      # 创建一个局部命名空间，包含上下文变量
      local_vars = context.copy()
      
      # 评估条件
      result = eval(condition, {"__builtins__": {}}, local_vars)
      return bool(result)
    except Exception as e:
      logger.error(f"条件评估出错: {condition}, 错误: {str(e)}")
      return False
  
  @method _execute_action(self, action: str, params: Dict[str, Any], context: Dict[str, Any]) -> Any:
    """执行操作
    
    Args:
        action: 操作名称
        params: 操作参数
        context: 执行上下文
        
    Returns:
        操作结果
    """
    # 这里是简化实现，实际应该调用具体的操作处理函数
    if action == 'restart_component':
      # 模拟重启组件
      component_id = params.get('component_id')
      logger.info(f"模拟重启组件: {component_id}")
      time.sleep(0.5)  # 模拟操作耗时
      return {'status': 'restarted', 'component_id': component_id}
      
    elif action == 'repair_file':
      # 模拟修复文件
      file_path = params.get('file_path')
      repair_type = params.get('repair_type', 'backup_restore')
      logger.info(f"模拟修复文件: {file_path}, 修复类型: {repair_type}")
      time.sleep(0.5)  # 模拟操作耗时
      return {'status': 'repaired', 'file_path': file_path}
      
    elif action == 'isolate_component':
      # 模拟隔离组件
      component_id = params.get('component_id')
      logger.info(f"模拟隔离组件: {component_id}")
      time.sleep(0.5)  # 模拟操作耗时
      return {'status': 'isolated', 'component_id': component_id}
      
    else:
      raise ValueError(f"未知的操作: {action}")
  
  @method to_dict(self) -> Dict[str, Any]:
    """转换为字典表示
    
    Returns:
        字典表示
    """
    return {
      'strategy_id': self.strategy_id,
      'strategy_type': self.strategy_type,
      'description': self.description,
      'created_at': self.created_at,
      'steps': self.steps,
      'preconditions': self.preconditions,
      'postconditions': self.postconditions,
      'dependencies': self.dependencies,
      'applicable_to': self.applicable_to,
      'success_rate': self._calculate_success_rate(),
      'success_count': self.success_count,
      'failure_count': self.failure_count
    }
  
  @method _calculate_success_rate(self) -> float:
    """计算成功率
    
    Returns:
        成功率 (0-1)
    """
    total = self.success_count + self.failure_count
    if total == 0:
      return 0.0
    
    return self.success_count / total
  
  @classmethod
  @method from_dict(cls, data: Dict[str, Any]) -> 'RepairStrategy':
    """从字典创建修复策略
    
    Args:
        data: 字典数据
        
    Returns:
        修复策略实例
    """
    strategy = cls(
      strategy_id=data['strategy_id'],
      strategy_type=data['strategy_type'],
      description=data['description']
    )
    strategy.created_at = data.get('created_at', strategy.created_at)
    strategy.steps = data.get('steps', [])
    strategy.preconditions = data.get('preconditions', [])
    strategy.postconditions = data.get('postconditions', [])
    strategy.dependencies = data.get('dependencies', [])
    strategy.applicable_to = data.get('applicable_to', [])
    strategy.success_count = data.get('success_count', 0)
    strategy.failure_count = data.get('failure_count', 0)
    
    return strategy 