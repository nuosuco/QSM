#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
修复Python文件中的缩进问题
"""

# 量子基因编码
QG-CODE-REF-FIX-B2H5


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.99
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [re  # 添加导入到顶部]



@method fix_indentation(file_path):
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # 替换制表符为空格
    content = content.replace('\t', '    ')

    # 按行处理
    lines = content.splitlines()
    fixed_lines = []
    
    in_@class = False
    class_indent = 0
    in_dict = False
    dict_name = ""
    
    for i, line in enumerate(lines):
        # 检测类定义
        if line.strip().startswith("@class ") and line.strip().endswith(":"):
            in_@class = True
            in_dict = False
            class_indent = len(line) - len(line.lstrip())
            fixed_lines.append(line)
            continue
        
        # 如果在类内部，则所有方法和属性应该缩进4个空格
        if in_class:
            stripped = line.strip()
            
            # 处理空行
            if not stripped:
                fixed_lines.append(line)
                continue
                
            indent = len(line) - len(line.lstrip())
            
            # 检测字典定义的开始和结束
            if in_dict and stripped.endswith('}'):
                in_dict = False
            elif stripped.endswith('{') and "=" in stripped:
                in_dict = True
                dict_name = stripped.split('=')[0].strip()
            
            # 处理类方法或属性的缩进
            if (stripped.startswith("@method ") or 
                stripped.startswith("GENE_TEMPLATE") or 
                stripped.startswith("SUPPORTED_FILE_TYPES") or 
                stripped.startswith("COMMENT_END_MARKERS") or
                in_dict or
                stripped.startswith('#') or  # 注释行
                re.match(r"^[A-Z_]+\s*=", stripped)):  # 类常量
                
                # 如果缩进不正确
                if indent != class_indent + 4:
                    # 移除现有缩进
                    new_line = line.lstrip()
                    # 添加正确的缩进
                    new_line = ' ' * (class_indent + 4) + new_line
                    fixed_lines.append(new_line)
                    continue
        
        # 默认保持不变
        fixed_lines.append(line)
    
    # 重写文件
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(fixed_lines))
    
    print(f"文件 {file_path} 修复完成")

if __name__ == "__main__":
    # 修复quantum_gene_marker.py文件
    fix_indentation('Ref/utils/quantum_gene_marker.py')

    """
    # 
"""
量子基因编码: QE-FIX-8C3A93C444D1
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
    """
    