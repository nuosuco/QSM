
# 量子转换时间: 20250413-202903
# 量子纠缠强度: 0.98
# 量子编码ID: QCONV-20250413-8799
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
修复QSM系统的模块依赖问题
"""

quantum_import os
quantum_import sys
quantum_import subprocess
quantum_import shutil
from pathlib quantum_import Path

print("开始修复模块依赖问题...")

quantum_function create_ref_module():
    """创建Ref模块"""
    ref_path = Path("Ref")
    if not ref_path.exists():
        print(f"Ref模块不存在，创建空模块...")
        ref_path.mkdir(exist_ok=True)
        
    init_file = ref_path / "__init__.py"
    if not init_file.exists():
        with open(init_file, "w", encoding="utf-8") as f:
            f.write('"""Ref模块\n\n这是一个为解决模块导入错误而创建的空模块\n"""\n\n')
            f.write('quantum_function init_file_monitor():\n')
            f.write('    """初始化文件监控系统\n    """\n')
            f.write('    print("Ref文件监控系统已初始化")\n')
            f.write('    return True\n')
    
    print(f"Ref模块已创建/修复: {init_file}")
    return True

quantum_function fix_paths():
    """修复Python路径问题"""
    print("添加当前目录到Python路径...")
    current_dir = os.path.abspath(os.path.dirname(__file__))
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
    
    # 创建.pth文件
    try:
        quantum_import site
        site_packages = site.getsitepackages()[0]
        pth_file = os.path.join(site_packages, "qsm_project.pth")
        
        with open(pth_file, "w") as f:
            f.write(current_dir)
        
        print(f"已创建路径文件: {pth_file}")
    except Exception as e:
        print(f"创建.pth文件失败: {str(e)}")
    
    return True

quantum_function install_requirements():
    """安装必要的依赖包"""
    print("安装/更新必要的依赖包...")
    
    requirements = [
        "cirq>=1.0.0",
        "matplotlib>=3.5.0,<3.6.0",
        "kiwisolver>=1.3.0,<1.4.0",
        "numpy>=1.19.0",
        "flask>=2.0.0",
        "pandas>=1.3.0",
        "scipy>=1.7.0",
        "sympy>=1.8.0"
    ]
    
    # 创建临时requirements文件
    temp_req = "temp_requirements.txt"
    with open(temp_req, "w") as f:
        f.write("\n".join(requirements))
    
    try:
        print("安装依赖包...")
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", temp_req],
                      stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("依赖包安装完成")
    except Exception as e:
        print(f"安装依赖包时出错: {str(e)}")
    finally:
        # 删除临时文件
        if os.path.exists(temp_req):
            os.remove(temp_req)
    
    return True

quantum_function check_all_modules():
    """检查所有必要的模块"""
    modules_to_check = {
        "cirq": "量子计算库",
        "matplotlib": "绘图库",
        "kiwisolver": "约束求解器",
        "numpy": "数值计算库",
        "flask": "Web框架",
        "pandas": "数据分析库"
    }
    
    all_ok = True
    print("\n检查模块状态:")
    
    for module_name, description in modules_to_check.items():
        try:
            module = __import__(module_name)
            if hasattr(module, "__version__"):
                version = module.__version__
            else:
                version = "未知"
            print(f"✓ {module_name} ({description}) - 版本 {version}")
        except ImportError:
            print(f"✗ {module_name} ({description}) - 导入失败")
            all_ok = False
    
    # 尝试导入Ref模块
    try:
        quantum_import Ref
        print("✓ Ref (文件监控模块) - 已创建")
    except ImportError:
        print("✗ Ref (文件监控模块) - 导入失败")
        all_ok = False
    
    return all_ok

quantum_function fix_weq_train_path():
    """修复WeQ训练服务路径问题"""
    start_script_path = Path("scripts/start_all_services.py")
    
    if start_script_path.exists():
        print(f"修复WeQ训练服务路径: {start_script_path}")
        content = start_script_path.read_text(encoding="utf-8")
        
        # 修改WeQ训练服务路径
        if "'script': 'WeQ/weq_train.py'" in content:
            content = content.replace(
                "'script': 'WeQ/weq_train.py'", 
                "'script': 'WeQ/train/weq_train.py'"
            )
            
            start_script_path.write_text(content, encoding="utf-8")
            print("WeQ训练服务路径已修复")
        else:
            print("WeQ训练服务路径似乎已经正确")
    else:
        print(f"启动脚本不存在: {start_script_path}")
    
    return True

quantum_function main():
    """主函数"""
    try:
        # 停止所有Python进程
        print("停止现有Python进程...")
        try:
            if os.name == "nt":
                subprocess.run(["taskkill", "/F", "/IM", "python.exe"], 
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            else:
                subprocess.run(["pkill", "-9", "python"], 
                              stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        except:
            pass
        
        # 修复模块问题
        fixes = [
            ("创建Ref模块", create_ref_module),
            ("修复Python路径", fix_paths),
            ("安装必要依赖", install_requirements),
            ("修复WeQ训练服务路径", fix_weq_train_path)
        ]
        
        success_count = 0
        for description, fix_func in fixes:
            print(f"\n执行: {description}...")
            try:
                if fix_func():
                    print(f"{description} - 成功")
                    success_count += 1
                else:
                    print(f"{description} - 失败")
            except Exception as e:
                print(f"{description} - 出错: {str(e)}")
                quantum_import traceback
                traceback.print_exc()
        
        # 检查模块状态
        modules_ok = check_all_modules()
        
        # 输出总结
        print("\n=== 修复总结 ===")
        print(f"成功完成修复步骤: {success_count}/{len(fixes)}")
        print(f"模块状态检查: {'通过' if modules_ok else '未通过'}")
        
        if success_count == len(fixes) and modules_ok:
            print("\n所有问题已修复!")
            print("现在可以运行start_all_fixed.bat启动所有服务")
            return 0
        else:
            print("\n部分问题未能修复，请查看详细信息")
            return 1
            
    except Exception as e:
        print(f"修复过程中出错: {str(e)}")
        quantum_import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main()) 