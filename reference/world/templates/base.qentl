# QSM量子叠加模型系统基础模板
# 量子基因: QG-TEMP-BASE-WORLD-CORE-A2B1
# 量子纠缠: QE-TEMP-BASE-20240404

@metadata
title: QSM量子叠加模型系统
lang: zh-CN
charset: UTF-8
viewport: width=device-width, initial-scale=1.0

@styles
# 基础样式
/world/static/css/normalize.qcss
/world/static/css/quantum-theme.qcss
/world/static/css/global.qcss
@block extra_css

@scripts
# 基础脚本
/world/static/js/quantum_entanglement/core.qjs
/world/static/js/quantum_entanglement/client.qjs
/world/static/js/quantum_loader.qjs
/world/static/js/global.qjs
@block extra_js

@body
# 导航栏
@include components/nav.qentl

# 主要内容
@container main
  @block content

# 页脚
@include components/footer.qentl

# 量子加载器
@include components/quantum_ui/loader.qentl

# 页面特定脚本
@block page_js

<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="量子叠加态模型系统">
    
    <!-- 量子基因编码 -->
    <meta name="quantum-gene" content="QG-TEMP-BASE-WORLD-CORE-A2B1">
    
    <!-- 量子纠缠信道 -->
    <script type="text/javascript">
        window.QUANTUM_ENTANGLE = {
            channelId: 'QE-TEMP-BASE-' + Date.now(),
            state: 'ACTIVE',
            strength: 1.0,
            objects: [
                "world/static/css/quantum-theme.qcss",
                "world/static/css/quantum-layout.qcss",
                "world/static/css/quantum-animation.qcss",
                "world/static/js/quantum-core.qjs",
                "world/static/js/quantum-router.qjs",
                "world/static/js/quantum-store.qjs"
            ]
        };
    </script>
    
    <!-- 基础样式 -->
    <link rel="stylesheet" href="/static/css/quantum-theme.qcss">
    <link rel="stylesheet" href="/static/css/quantum-layout.qcss">
    <link rel="stylesheet" href="/static/css/quantum-animation.qcss">
    
    <!-- 量子组件样式 -->
    <link rel="stylesheet" href="/static/css/components/quantum-card.qcss">
    <link rel="stylesheet" href="/static/css/components/quantum-form.qcss">
    <link rel="stylesheet" href="/static/css/components/quantum-dialog.qcss">
    <link rel="stylesheet" href="/static/css/components/quantum-notification.qcss">
    
    <title>{% block title %}量子叠加态模型系统{% endblock %}</title>
    
    <!-- 量子核心脚本 -->
    <script src="/static/js/quantum-core.qjs" type="module"></script>
    <script src="/static/js/quantum-router.qjs" type="module"></script>
    <script src="/static/js/quantum-store.qjs" type="module"></script>
    <script src="/static/js/quantum-compiler.qjs" type="module"></script>
    
    <!-- 初始化量子系统 -->
    <script type="module">
        import { QuantumEntanglementChannel } from '/static/js/quantum-core.qjs';
        import QuantumRouter from '/static/js/quantum-router.qjs';
        import { createStore } from '/static/js/quantum-store.qjs';
        
        // 创建量子纠缠通道
        window.quantumChannel = new QuantumEntanglementChannel({
            channelId: window.QUANTUM_ENTANGLE.channelId,
            initialState: {},
            entangleStrength: window.QUANTUM_ENTANGLE.strength,
            onMessage: (message) => {
                console.log('[量子通信] 接收到消息:', message);
            }
        });
        
        // 创建量子路由器
        window.quantumRouter = new QuantumRouter({
            mode: 'hash',
            routes: [
                { 
                    path: '/', 
                    name: 'home',
                    meta: { title: '首页 - 量子叠加态模型系统' }
                },
                { 
                    path: '/weq', 
                    name: 'weq',
                    meta: { title: '量子社交 - 量子叠加态模型系统' }
                },
                { 
                    path: '/som', 
                    name: 'som',
                    meta: { title: '量子经济 - 量子叠加态模型系统' }
                },
                { 
                    path: '/ref', 
                    name: 'ref',
                    meta: { title: '量子自反省 - 量子叠加态模型系统' }
                }
            ],
            beforeEach: (to, from, next) => {
                // 更新页面标题
                if (to.meta && to.meta.title) {
                    document.title = to.meta.title;
                }
                next();
            }
        });
        
        // 创建量子状态管理器
        window.quantumStore = createStore({
            state: {
                // 全局状态
                appName: '量子叠加态模型系统',
                version: '1.0.0',
                loading: false,
                theme: 'light',
                user: null
            },
            getters: {
                // 全局计算属性
                isLoggedIn: state => !!state.user,
                appVersion: state => state.version,
                currentTheme: state => state.theme
            },
            mutations: {
                // 全局状态变更
                setLoading(state, loading) {
                    state.loading = loading;
                },
                setTheme(state, theme) {
                    state.theme = theme;
                    document.body.setAttribute('data-theme', theme);
                },
                setUser(state, user) {
                    state.user = user;
                }
            },
            actions: {
                // 全局异步操作
                async toggleTheme({ state, commit }) {
                    const newTheme = state.theme === 'light' ? 'dark' : 'light';
                    commit('setTheme', newTheme);
                },
                async logout({ commit }) {
                    commit('setUser', null);
                }
            },
            modules: {
                // 子模块
                weq: {
                    namespaced: true,
                    state: { messages: [] },
                    mutations: {},
                    actions: {}
                },
                som: {
                    namespaced: true,
                    state: { balance: 0 },
                    mutations: {},
                    actions: {}
                },
                ref: {
                    namespaced: true,
                    state: { logs: [] },
                    mutations: {},
                    actions: {}
                }
            },
            entangleStrength: window.QUANTUM_ENTANGLE.strength,
            channelId: 'quantum-store-' + Date.now()
        });
        
        // 当DOM加载完成时初始化应用
        document.addEventListener('DOMContentLoaded', () => {
            console.log('[量子系统] 初始化完成');
            
            // 应用主题
            const theme = window.quantumStore.state.theme;
            document.body.setAttribute('data-theme', theme);
            
            // 监听路由变化
            window.quantumRouter.onChange(route => {
                // 更新当前路由状态
                console.log('[量子路由] 路由变化:', route);
            });
        });
    </script>
    
    {% block head %}{% endblock %}
</head>
<body data-theme="light">
    <!-- 量子纠缠容器 -->
    <div id="quantum-app" class="q-app" data-strength="1.0" data-sync="true">
        <!-- 导航栏 -->
        <nav class="q-nav">
            <div class="q-container">
                <div class="q-nav-logo">
                    <img src="/static/img/logo.png" alt="QSM Logo">
                    <span>量子叠加态模型</span>
                </div>
                <div class="q-nav-menu">
                    {% block navigation %}
                    <a href="#/" class="q-nav-item" data-route="home">首页</a>
                    <a href="#/weq" class="q-nav-item" data-route="weq">量子社交</a>
                    <a href="#/som" class="q-nav-item" data-route="som">量子经济</a>
                    <a href="#/ref" class="q-nav-item" data-route="ref">量子自反省</a>
                    {% endblock %}
                </div>
                <div class="q-nav-actions">
                    <button id="theme-toggler" class="q-btn q-btn-icon" title="切换主题">
                        <i class="q-icon q-icon-theme"></i>
                    </button>
                </div>
            </div>
        </nav>

        <!-- 主内容区 -->
        <main class="q-main">
            <div class="q-container">
                {% block content %}{% endblock %}
            </div>
        </main>

        <!-- 页脚 -->
        <footer class="q-footer">
            <div class="q-container">
                <div class="q-footer-content">
                    <div class="q-footer-section">
                        <h3>关于我们</h3>
                        <p>服务人类、服务生命、服务宇宙</p>
                    </div>
                    <div class="q-footer-section">
                        <h3>联系方式</h3>
                        <p>Email: contact@qsm.quantum</p>
                    </div>
                    <div class="q-footer-section">
                        <h3>开发团队</h3>
                        <p>中华 ZhoHo & Claude</p>
                    </div>
                </div>
                <div class="q-footer-bottom">
                    <p>&copy; 2024 量子叠加态模型系统. All rights reserved.</p>
                </div>
            </div>
        </footer>
        
        <!-- 全局加载器 -->
        <div id="q-global-loader" class="q-loader q-loader-fullscreen" style="display: none;">
            <div class="q-loader-spinner">
                <div class="q-loader-spin"></div>
                <div class="q-loader-label">加载中...</div>
            </div>
        </div>
    </div>

    <!-- 页面特定脚本 -->
    <script type="module">
        // 主题切换功能
        document.getElementById('theme-toggler').addEventListener('click', () => {
            window.quantumStore.dispatch('toggleTheme');
        });
        
        // 路由导航激活状态
        function updateActiveNavItem(route) {
            const navItems = document.querySelectorAll('.q-nav-item');
            navItems.forEach(item => {
                const routeName = item.getAttribute('data-route');
                if ((route.name === routeName) || 
                    (routeName === 'home' && route.path === '/')) {
                    item.classList.add('active');
                } else {
                    item.classList.remove('active');
                }
            });
        }
        
        // 初始激活当前路由对应的导航项
        updateActiveNavItem(window.quantumRouter.getCurrentRoute());
        
        // 监听路由变化更新导航激活状态
        window.quantumRouter.onChange(route => {
            updateActiveNavItem(route);
        });
        
        // 监听加载状态变化
        window.quantumStore.subscribe(mutation => {
            if (mutation.type === 'setLoading') {
                const loader = document.getElementById('q-global-loader');
                if (mutation.payload) {
                    loader.style.display = 'flex';
                } else {
                    loader.style.display = 'none';
                }
            }
        });
    </script>
    
    {% block scripts %}{% endblock %}
</body>
</html> 