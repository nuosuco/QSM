/* 量子基因编码 */
QG-COMP-POPCONFIRM-UI-FEEDBACK-A1B1

/* 量子纠缠信道 */
@quantum-entangle {
  strength: 0.8,
  sync: true,
  objects: [
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss",
    "world/static/css/quantum-animation.qcss"
  ]
}

/* 组件属性 */
@properties {
  // 标题
  title: string = '',
  // 确认按钮文字
  confirmText: string = '确认',
  // 取消按钮文字
  cancelText: string = '取消',
  // 确认按钮类型
  confirmType: 'primary' | 'danger' = 'primary',
  // 图标
  icon: string = 'warning',
  // 弹出位置
  placement: 'top' | 'right' | 'bottom' | 'left' = 'top',
  // 触发方式
  trigger: 'hover' | 'click' = 'click',
  // 是否禁用
  disabled: boolean = false,
  // 是否显示箭头
  showArrow: boolean = true,
  // 偏移距离
  offset: number = 12,
  // 是否可以进入弹出层
  enterable: boolean = true,
  // 隐藏延时(毫秒)
  hideDelay: number = 200,
  // 确认回调
  onConfirm: Function,
  // 取消回调
  onCancel: Function,
  // 量子态配置
  quantum: {
    // 量子纠缠强度
    entangleStrength: number = 0.8,
    // 量子态转换动画
    stateTransition: boolean = true,
    // 量子态持续时间
    stateDuration: number = 300
  }
}

/* 模板结构 */
<template>
  <div class="q-popconfirm"
       :class="{
         'q-popconfirm-disabled': disabled
       }">
    <!-- 触发元素 -->
    <div class="q-popconfirm-trigger"
         @mouseenter="handleMouseEnter"
         @mouseleave="handleMouseLeave"
         @click="handleClick">
      <slot></slot>
    </div>
    
    <!-- 弹出层 -->
    <transition name="q-popconfirm-fade">
      <div v-show="visible"
           class="q-popconfirm-content"
           :class="[
             `q-popconfirm-${placement}`,
             {
               'q-popconfirm-with-arrow': showArrow
             }
           ]"
           :style="contentStyle"
           @mouseenter="handlePopupMouseEnter"
           @mouseleave="handlePopupMouseLeave">
        <!-- 箭头 -->
        <div v-if="showArrow"
             class="q-popconfirm-arrow"
             :style="arrowStyle">
        </div>
        
        <!-- 内容 -->
        <div class="q-popconfirm-inner">
          <!-- 图标 -->
          <i v-if="icon"
             class="q-popconfirm-icon"
             :class="icon">
          </i>
          
          <!-- 标题 -->
          <div class="q-popconfirm-title">
            {{ title }}
          </div>
          
          <!-- 按钮组 -->
          <div class="q-popconfirm-buttons">
            <button class="q-popconfirm-button q-popconfirm-button-cancel"
                    @click="handleCancel">
              {{ cancelText }}
            </button>
            <button class="q-popconfirm-button"
                    :class="`q-popconfirm-button-${confirmType}`"
                    @click="handleConfirm">
              {{ confirmText }}
            </button>
          </div>
        </div>
      </div>
    </transition>
  </div>
</template>

/* 组件样式 */
<style>
.q-popconfirm {
  position: relative;
  display: inline-block;
}

.q-popconfirm-disabled {
  cursor: not-allowed;
  opacity: 0.5;
}

/* 弹出层 */
.q-popconfirm-content {
  position: absolute;
  z-index: 1000;
  padding: var(--q-spacing);
  background-color: var(--q-bg-color);
  border-radius: var(--q-border-radius);
  box-shadow: var(--q-shadow);
  white-space: nowrap;
}

/* 箭头 */
.q-popconfirm-arrow {
  position: absolute;
  width: 8px;
  height: 8px;
  background-color: var(--q-bg-color);
  transform: rotate(45deg);
}

/* 位置样式 */
.q-popconfirm-top {
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  margin-bottom: var(--q-spacing);
}

.q-popconfirm-top .q-popconfirm-arrow {
  bottom: -4px;
  left: 50%;
  margin-left: -4px;
}

.q-popconfirm-right {
  top: 50%;
  left: 100%;
  transform: translateY(-50%);
  margin-left: var(--q-spacing);
}

.q-popconfirm-right .q-popconfirm-arrow {
  top: 50%;
  left: -4px;
  margin-top: -4px;
}

.q-popconfirm-bottom {
  top: 100%;
  left: 50%;
  transform: translateX(-50%);
  margin-top: var(--q-spacing);
}

.q-popconfirm-bottom .q-popconfirm-arrow {
  top: -4px;
  left: 50%;
  margin-left: -4px;
}

.q-popconfirm-left {
  top: 50%;
  right: 100%;
  transform: translateY(-50%);
  margin-right: var(--q-spacing);
}

.q-popconfirm-left .q-popconfirm-arrow {
  top: 50%;
  right: -4px;
  margin-top: -4px;
}

/* 内容样式 */
.q-popconfirm-inner {
  padding: var(--q-spacing);
}

.q-popconfirm-icon {
  margin-right: var(--q-spacing-sm);
  font-size: var(--q-font-size-lg);
  color: var(--q-warning);
}

.q-popconfirm-title {
  display: inline;
  font-size: var(--q-font-size);
  color: var(--q-text-color);
}

/* 按钮组 */
.q-popconfirm-buttons {
  margin-top: var(--q-spacing);
  text-align: right;
}

.q-popconfirm-button {
  margin-left: var(--q-spacing-sm);
  padding: var(--q-spacing-sm) var(--q-spacing);
  font-size: var(--q-font-size-sm);
  border: 1px solid var(--q-border-color);
  border-radius: var(--q-border-radius-sm);
  background-color: var(--q-bg-color);
  cursor: pointer;
  transition: all var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

.q-popconfirm-button-cancel {
  color: var(--q-text-color);
}

.q-popconfirm-button-primary {
  color: var(--q-white);
  background-color: var(--q-primary);
  border-color: var(--q-primary);
}

.q-popconfirm-button-danger {
  color: var(--q-white);
  background-color: var(--q-danger);
  border-color: var(--q-danger);
}

/* 动画 */
.q-popconfirm-fade-enter-active,
.q-popconfirm-fade-leave-active {
  transition: opacity var(--q-animation-duration) var(--q-animation-timing-function-ease),
              transform var(--q-animation-duration) var(--q-animation-timing-function-ease);
}

.q-popconfirm-fade-enter-from,
.q-popconfirm-fade-leave-to {
  opacity: 0;
  transform: scale(0.8);
}

/* 量子态样式 */
@quantum-state hover {
  .q-popconfirm-button:not(:disabled):hover {
    opacity: 0.8;
  }
  
  .q-popconfirm-button-primary:not(:disabled):hover {
    background-color: var(--q-primary-light);
    border-color: var(--q-primary-light);
  }
  
  .q-popconfirm-button-danger:not(:disabled):hover {
    background-color: var(--q-danger-light);
    border-color: var(--q-danger-light);
  }
}

@quantum-state active {
  .q-popconfirm-button:not(:disabled):active {
    transform: scale(0.98);
  }
}
</style>

/* 组件脚本 */
<script>
export default {
  name: 'QPopconfirm',
  
  data() {
    return {
      visible: false,
      timeoutId: null
    }
  },
  
  computed: {
    contentStyle() {
      return {
        transform: `translate(${this.offset}px, 0)`
      }
    },
    
    arrowStyle() {
      return {
        transform: `rotate(45deg) translate(${this.offset / 2}px, 0)`
      }
    }
  },
  
  methods: {
    // 显示弹出层
    show() {
      if (this.disabled) return
      this.visible = true
      this.updateQuantumState(1)
    },
    
    // 隐藏弹出层
    hide() {
      this.visible = false
      this.updateQuantumState(0)
    },
    
    // 处理鼠标进入
    handleMouseEnter() {
      if (this.trigger !== 'hover') return
      if (this.timeoutId) {
        clearTimeout(this.timeoutId)
        this.timeoutId = null
      }
      this.show()
    },
    
    // 处理鼠标离开
    handleMouseLeave() {
      if (this.trigger !== 'hover') return
      this.timeoutId = setTimeout(() => {
        this.hide()
      }, this.hideDelay)
    },
    
    // 处理点击
    handleClick() {
      if (this.trigger !== 'click') return
      if (this.visible) {
        this.hide()
      } else {
        this.show()
      }
    },
    
    // 处理弹出层鼠标进入
    handlePopupMouseEnter() {
      if (!this.enterable) return
      if (this.timeoutId) {
        clearTimeout(this.timeoutId)
        this.timeoutId = null
      }
    },
    
    // 处理弹出层鼠标离开
    handlePopupMouseLeave() {
      if (!this.enterable) return
      this.handleMouseLeave()
    },
    
    // 处理确认
    handleConfirm() {
      this.hide()
      this.onConfirm?.()
    },
    
    // 处理取消
    handleCancel() {
      this.hide()
      this.onCancel?.()
    },
    
    // 量子态方法
    updateQuantumState(state) {
      if (!this.quantum.stateTransition) return
      
      const quantum = state * this.quantum.entangleStrength
      
      // 应用量子态效果
      this.$el.style.transform = `scale(${1 + quantum * 0.05})`
      this.$el.style.filter = `brightness(${1 + quantum * 0.1})`
    }
  },
  
  beforeUnmount() {
    if (this.timeoutId) {
      clearTimeout(this.timeoutId)
      this.timeoutId = null
    }
  }
}
</script> 