/* 量子基因编码 */
QG-COMP-FLEX-UI-LAYOUT-A1B1

/* 量子纠缠信道 */
@quantum-entangle {
  strength: 0.9,
  sync: true,
  objects: [
    "world/static/css/quantum-theme.qcss",
    "world/static/css/quantum-layout.qcss",
    "world/static/css/quantum-animation.qcss"
  ]
}

/* Flex 容器组件属性 */
@properties FlexContainer {
  // 显示方式
  display: 'flex' | 'inline-flex' = 'flex',
  // 主轴方向
  direction: 'row' | 'row-reverse' | 'column' | 'column-reverse' = 'row',
  // 主轴对齐
  justify: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly' = 'flex-start',
  // 交叉轴对齐
  align: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch' = 'flex-start',
  // 多行对齐
  alignContent: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch' = 'stretch',
  // 是否换行
  wrap: 'nowrap' | 'wrap' | 'wrap-reverse' = 'nowrap',
  // 元素间距
  gap: number = 0,
  // 行间距
  rowGap: number = 0,
  // 列间距
  columnGap: number = 0,
  // 量子态配置
  quantum: {
    // 量子纠缠强度
    entangleStrength: number = 0.9,
    // 量子态转换动画
    stateTransition: boolean = true,
    // 量子态持续时间
    stateDuration: number = 300
  }
}

/* Flex 项目组件属性 */
@properties FlexItem {
  // 排序
  order: number = 0,
  // 放大比例
  grow: number = 0,
  // 缩小比例
  shrink: number = 1,
  // 基准尺寸
  basis: string = 'auto',
  // 自身对齐
  alignSelf: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch' = 'auto',
  // 量子态配置
  quantum: {
    // 量子纠缠强度
    entangleStrength: number = 0.9,
    // 量子态转换动画
    stateTransition: boolean = true,
    // 量子态持续时间
    stateDuration: number = 300
  }
}

/* FlexContainer 模板结构 */
<template name="FlexContainer">
  <div class="q-flex-container"
       :class="[
         `q-flex-display-${display}`,
         `q-flex-direction-${direction}`,
         `q-flex-justify-${justify}`,
         `q-flex-align-${align}`,
         `q-flex-align-content-${alignContent}`,
         `q-flex-wrap-${wrap}`
       ]"
       :style="containerStyle">
    <slot></slot>
  </div>
</template>

/* FlexItem 模板结构 */
<template name="FlexItem">
  <div class="q-flex-item"
       :style="itemStyle">
    <slot></slot>
  </div>
</template>

/* 组件样式 */
<style>
/* 容器样式 */
.q-flex-container {
  box-sizing: border-box;
}

/* 显示方式 */
.q-flex-display-flex {
  display: flex;
}

.q-flex-display-inline-flex {
  display: inline-flex;
}

/* 方向 */
.q-flex-direction-row {
  flex-direction: row;
}

.q-flex-direction-row-reverse {
  flex-direction: row-reverse;
}

.q-flex-direction-column {
  flex-direction: column;
}

.q-flex-direction-column-reverse {
  flex-direction: column-reverse;
}

/* 主轴对齐 */
.q-flex-justify-flex-start {
  justify-content: flex-start;
}

.q-flex-justify-flex-end {
  justify-content: flex-end;
}

.q-flex-justify-center {
  justify-content: center;
}

.q-flex-justify-space-between {
  justify-content: space-between;
}

.q-flex-justify-space-around {
  justify-content: space-around;
}

.q-flex-justify-space-evenly {
  justify-content: space-evenly;
}

/* 交叉轴对齐 */
.q-flex-align-flex-start {
  align-items: flex-start;
}

.q-flex-align-flex-end {
  align-items: flex-end;
}

.q-flex-align-center {
  align-items: center;
}

.q-flex-align-baseline {
  align-items: baseline;
}

.q-flex-align-stretch {
  align-items: stretch;
}

/* 多行对齐 */
.q-flex-align-content-flex-start {
  align-content: flex-start;
}

.q-flex-align-content-flex-end {
  align-content: flex-end;
}

.q-flex-align-content-center {
  align-content: center;
}

.q-flex-align-content-space-between {
  align-content: space-between;
}

.q-flex-align-content-space-around {
  align-content: space-around;
}

.q-flex-align-content-stretch {
  align-content: stretch;
}

/* 换行 */
.q-flex-wrap-nowrap {
  flex-wrap: nowrap;
}

.q-flex-wrap-wrap {
  flex-wrap: wrap;
}

.q-flex-wrap-wrap-reverse {
  flex-wrap: wrap-reverse;
}

/* 项目样式 */
.q-flex-item {
  box-sizing: border-box;
}

/* 量子态样式 */
@quantum-state hover {
  .q-flex-container:hover {
    background-color: var(--q-bg-hover);
  }
  
  .q-flex-item:hover {
    background-color: var(--q-bg-hover);
  }
}

@quantum-state active {
  .q-flex-container:active {
    transform: scale(0.99);
  }
  
  .q-flex-item:active {
    transform: scale(0.99);
  }
}
</style>

/* FlexContainer 组件脚本 */
<script name="FlexContainer">
export default {
  name: 'QFlexContainer',
  
  computed: {
    containerStyle() {
      const style = {}
      
      if (this.gap) {
        style.gap = `${this.gap}px`
      }
      
      if (this.rowGap) {
        style.rowGap = `${this.rowGap}px`
      }
      
      if (this.columnGap) {
        style.columnGap = `${this.columnGap}px`
      }
      
      return style
    }
  },
  
  methods: {
    // 量子态方法
    updateQuantumState(state) {
      if (!this.quantum.stateTransition) return
      
      const quantum = state * this.quantum.entangleStrength
      
      // 应用量子态效果
      this.$el.style.transform = `scale(${1 + quantum * 0.01})`
      this.$el.style.filter = `brightness(${1 + quantum * 0.05})`
    }
  }
}
</script>

/* FlexItem 组件脚本 */
<script name="FlexItem">
export default {
  name: 'QFlexItem',
  
  computed: {
    itemStyle() {
      return {
        order: this.order !== 0 ? this.order : null,
        flexGrow: this.grow !== 0 ? this.grow : null,
        flexShrink: this.shrink !== 1 ? this.shrink : null,
        flexBasis: this.basis !== 'auto' ? this.basis : null,
        alignSelf: this.alignSelf !== 'auto' ? this.alignSelf : null
      }
    }
  },
  
  methods: {
    // 量子态方法
    updateQuantumState(state) {
      if (!this.quantum.stateTransition) return
      
      const quantum = state * this.quantum.entangleStrength
      
      // 应用量子态效果
      this.$el.style.transform = `scale(${1 + quantum * 0.01})`
      this.$el.style.filter = `brightness(${1 + quantum * 0.05})`
    }
  }
}
</script>

<!-- 组件定义 -->
<component name="QFlex">
  <props>
    <!-- 布局属性 -->
    <prop name="direction" type="String" default="row" desc="主轴方向" options="row,row-reverse,column,column-reverse" />
    <prop name="wrap" type="String" default="nowrap" desc="换行方式" options="nowrap,wrap,wrap-reverse" />
    <prop name="justify" type="String" default="start" desc="主轴对齐方式" options="start,end,center,between,around,evenly" />
    <prop name="align" type="String" default="start" desc="交叉轴对齐方式" options="start,end,center,baseline,stretch" />
    <prop name="alignContent" type="String" default="start" desc="多行对齐方式" options="start,end,center,between,around,stretch" />
    <prop name="gap" type="String|Number" default="0" desc="元素间距" />
    <prop name="rowGap" type="String|Number" default="0" desc="行间距" />
    <prop name="columnGap" type="String|Number" default="0" desc="列间距" />
    
    <!-- 容器属性 -->
    <prop name="inline" type="Boolean" default="false" desc="是否为内联弹性布局" />
    <prop name="fluid" type="Boolean" default="false" desc="是否撑满容器" />
    <prop name="width" type="String|Number" default="auto" desc="容器宽度" />
    <prop name="height" type="String|Number" default="auto" desc="容器高度" />
    <prop name="padding" type="String|Number" default="0" desc="内边距" />
    <prop name="margin" type="String|Number" default="0" desc="外边距" />
    
    <!-- 量子属性 -->
    <prop name="quantumState" type="String" default="default" desc="量子状态" options="default,hover,active,focus,disabled" />
    <prop name="entangleStrength" type="Number" default="0.85" desc="量子纠缠强度" />
  </props>
  
  <!-- 插槽 -->
  <slots>
    <slot name="default" desc="默认内容插槽" />
  </slots>
  
  <!-- 模板结构 -->
  <template>
    <div :class="containerClasses" :style="containerStyles">
      <slot></slot>
    </div>
  </template>
  
  <!-- 样式定义 -->
  <style>
    /* 基础样式 */
    .q-flex {
      display: flex;
    }
    
    .q-flex--inline {
      display: inline-flex;
    }
    
    /* 流体布局 */
    .q-flex--fluid {
      width: 100%;
      height: 100%;
    }
    
    /* 方向类名 */
    .q-flex--row {
      flex-direction: row;
    }
    
    .q-flex--row-reverse {
      flex-direction: row-reverse;
    }
    
    .q-flex--column {
      flex-direction: column;
    }
    
    .q-flex--column-reverse {
      flex-direction: column-reverse;
    }
    
    /* 换行类名 */
    .q-flex--nowrap {
      flex-wrap: nowrap;
    }
    
    .q-flex--wrap {
      flex-wrap: wrap;
    }
    
    .q-flex--wrap-reverse {
      flex-wrap: wrap-reverse;
    }
    
    /* 主轴对齐类名 */
    .q-flex--justify-start {
      justify-content: flex-start;
    }
    
    .q-flex--justify-end {
      justify-content: flex-end;
    }
    
    .q-flex--justify-center {
      justify-content: center;
    }
    
    .q-flex--justify-between {
      justify-content: space-between;
    }
    
    .q-flex--justify-around {
      justify-content: space-around;
    }
    
    .q-flex--justify-evenly {
      justify-content: space-evenly;
    }
    
    /* 交叉轴对齐类名 */
    .q-flex--align-start {
      align-items: flex-start;
    }
    
    .q-flex--align-end {
      align-items: flex-end;
    }
    
    .q-flex--align-center {
      align-items: center;
    }
    
    .q-flex--align-baseline {
      align-items: baseline;
    }
    
    .q-flex--align-stretch {
      align-items: stretch;
    }
    
    /* 多行对齐类名 */
    .q-flex--align-content-start {
      align-content: flex-start;
    }
    
    .q-flex--align-content-end {
      align-content: flex-end;
    }
    
    .q-flex--align-content-center {
      align-content: center;
    }
    
    .q-flex--align-content-between {
      align-content: space-between;
    }
    
    .q-flex--align-content-around {
      align-content: space-around;
    }
    
    .q-flex--align-content-stretch {
      align-content: stretch;
    }
    
    /* 量子态样式 */
    .q-flex--quantum-hover {
      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }
    
    .q-flex--quantum-hover:hover {
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.09);
      transform: translateY(-2px);
    }
    
    .q-flex--quantum-active {
      transform: scale(0.98);
      transition: transform 0.2s cubic-bezier(0.25, 0.8, 0.25, 1);
    }
    
    .q-flex--quantum-focus {
      outline: 2px solid var(--q-color-primary-light);
      outline-offset: 2px;
    }
    
    .q-flex--quantum-disabled {
      opacity: 0.6;
      cursor: not-allowed;
      pointer-events: none;
    }
    
    /* 响应式调整 */
    @media (max-width: 768px) {
      .q-flex--responsive-column {
        flex-direction: column;
      }
      
      .q-flex--responsive-wrap {
        flex-wrap: wrap;
      }
    }
  </style>
  
  <!-- 脚本逻辑 -->
  <script>
    export default {
      name: 'QFlex',
      
      computed: {
        // 容器类名
        containerClasses() {
          return [
            'q-flex',
            this.inline ? 'q-flex--inline' : '',
            this.fluid ? 'q-flex--fluid' : '',
            `q-flex--${this.direction}`,
            `q-flex--${this.wrap}`,
            `q-flex--justify-${this.justify}`,
            `q-flex--align-${this.align}`,
            `q-flex--align-content-${this.alignContent}`,
            this.quantumState !== 'default' ? `q-flex--quantum-${this.quantumState}` : ''
          ].filter(Boolean)
        },
        
        // 容器样式
        containerStyles() {
          const unitValue = (value) => {
            if (value === null || value === undefined || value === '') return null
            
            return typeof value === 'number' && value !== 0 ? `${value}px` : value
          }
          
          return {
            width: unitValue(this.width),
            height: unitValue(this.height),
            padding: unitValue(this.padding),
            margin: unitValue(this.margin),
            gap: unitValue(this.gap),
            rowGap: unitValue(this.rowGap),
            columnGap: unitValue(this.columnGap)
          }
        }
      },
      
      methods: {
        // 量子态更新方法
        updateQuantumState(state) {
          if (this.entangleStrength <= 0) return
          
          const element = this.$el
          if (!element) return
          
          const quantum = state * this.entangleStrength
          
          // 应用量子态效果
          if (quantum > 0.5) {
            element.style.transform = `scale(${1 + (quantum - 0.5) * 0.02})`
            element.style.transition = `transform 0.3s cubic-bezier(0.25, 0.8, 0.25, 1)`
          } else {
            element.style.transform = ''
          }
        }
      },
      
      mounted() {
        // 初始化量子态
        this.updateQuantumState(0.5)
      }
    }
  </script>
</component> 