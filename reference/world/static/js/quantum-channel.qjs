/**
 * 量子通信信道管理
 * 量子基因编码: QG-SYS-CHANNEL-UI-CORE-A1B1
 * @version 1.0.0
 */

class QuantumChannel {
  /**
   * 构造函数
   * @param {Object} options - 信道配置选项
   * @param {String} options.channelId - 信道标识，默认为随机生成
   * @param {Number} options.strength - 纠缠强度，默认为 0.8
   * @param {Boolean} options.secure - 是否启用安全传输，默认为 true
   * @param {Number} options.timeout - 连接超时时间(毫秒)，默认为 5000
   * @param {Number} options.retryInterval - 重连间隔(毫秒)，默认为 3000
   * @param {Number} options.maxRetries - 最大重连次数，默认为 5
   */
  constructor(options = {}) {
    // 初始化配置
    this.channelId = options.channelId || `QC-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    this.strength = options.strength || 0.8;
    this.secure = options.secure !== undefined ? options.secure : true;
    this.timeout = options.timeout || 5000;
    this.retryInterval = options.retryInterval || 3000;
    this.maxRetries = options.maxRetries || 5;
    
    // 内部状态
    this.status = 'closed';
    this.connections = new Map();
    this.endpoints = new Map();
    this.messageQueue = [];
    this.retryCount = 0;
    this.messageHandlers = new Map();
    
    // 初始化
    this._init();
  }
  
  /**
   * 初始化信道
   * @private
   */
  _init() {
    // 注册全局实例
    if (window.quantumChannels === undefined) {
      window.quantumChannels = new Map();
    }
    window.quantumChannels.set(this.channelId, this);
    
    // 连接至量子纠缠信道
    if (window.quantumEntangle) {
      this._connectToEntanglement();
    } else {
      console.warn(`量子纠缠系统不可用，信道 ${this.channelId} 将在纠缠系统可用时自动连接`);
      document.addEventListener('quantum:entangle:ready', () => {
        this._connectToEntanglement();
      });
    }
  }
  
  /**
   * 连接到量子纠缠系统
   * @private
   */
  _connectToEntanglement() {
    this.entanglement = window.quantumEntangle;
    
    // 注册信道
    this.entanglement.send('channel:register', {
      channelId: this.channelId,
      strength: this.strength,
      secure: this.secure
    });
    
    // 订阅信道消息
    this.entanglement.subscribe(`channel:${this.channelId}:*`, (message) => {
      this._handleEntangledMessage(message);
    });
    
    this.status = 'ready';
    this._flushMessageQueue();
    
    // 触发就绪事件
    this._triggerEvent('ready');
  }
  
  /**
   * 处理纠缠消息
   * @private
   * @param {Object} message - 纠缠消息
   */
  _handleEntangledMessage(message) {
    const { type, data, sourceId } = message;
    
    // 跳过自己发送的消息
    if (sourceId === this.channelId) {
      return;
    }
    
    // 处理信道控制消息
    if (type === 'channel:connect') {
      this._handleConnect(data);
    } else if (type === 'channel:disconnect') {
      this._handleDisconnect(data);
    } else if (type === 'channel:message') {
      this._handleMessage(data);
    } else if (type === 'channel:sync') {
      this._handleSync(data);
    }
  }
  
  /**
   * 处理连接请求
   * @private
   * @param {Object} data - 连接数据
   */
  _handleConnect(data) {
    const { endpointId, metadata } = data;
    
    // 添加到连接列表
    this.connections.set(endpointId, {
      connected: true,
      metadata: metadata || {},
      lastActive: Date.now()
    });
    
    // 确认连接
    this.entanglement.send(`channel:${this.channelId}:ack`, {
      endpointId: this.channelId,
      targetId: endpointId,
      timestamp: Date.now()
    });
    
    // 触发连接事件
    this._triggerEvent('connect', { endpointId, metadata });
  }
  
  /**
   * 处理断开连接
   * @private
   * @param {Object} data - 断开连接数据
   */
  _handleDisconnect(data) {
    const { endpointId } = data;
    
    // 从连接列表移除
    if (this.connections.has(endpointId)) {
      this.connections.delete(endpointId);
      
      // 触发断开连接事件
      this._triggerEvent('disconnect', { endpointId });
    }
  }
  
  /**
   * 处理信道消息
   * @private
   * @param {Object} data - 消息数据
   */
  _handleMessage(data) {
    const { from, to, type, content, timestamp } = data;
    
    // 确认收到
    this.entanglement.send(`channel:${this.channelId}:ack`, {
      messageId: data.messageId,
      receivedAt: Date.now()
    });
    
    // 分发消息到对应处理器
    if (this.messageHandlers.has(type)) {
      const handlers = this.messageHandlers.get(type);
      handlers.forEach(handler => {
        try {
          handler(content, from);
        } catch (error) {
          console.error(`处理信道消息出错:`, error);
        }
      });
    }
    
    // 触发消息事件
    this._triggerEvent('message', { from, to, type, content, timestamp });
  }
  
  /**
   * 处理信道同步
   * @private
   * @param {Object} data - 同步数据
   */
  _handleSync(data) {
    const { endpoints, timestamp } = data;
    
    // 更新端点信息
    endpoints.forEach(endpoint => {
      this.endpoints.set(endpoint.id, endpoint);
    });
    
    // 触发同步事件
    this._triggerEvent('sync', { endpoints, timestamp });
  }
  
  /**
   * 触发事件
   * @private
   * @param {String} eventName - 事件名称
   * @param {Object} data - 事件数据
   */
  _triggerEvent(eventName, data = {}) {
    const event = new CustomEvent(`quantum:channel:${eventName}`, {
      detail: {
        channelId: this.channelId,
        ...data
      },
      bubbles: true,
      cancelable: true
    });
    
    document.dispatchEvent(event);
  }
  
  /**
   * 处理消息队列
   * @private
   */
  _flushMessageQueue() {
    if (this.status !== 'ready' || this.messageQueue.length === 0) {
      return;
    }
    
    const queueCopy = [...this.messageQueue];
    this.messageQueue = [];
    
    queueCopy.forEach(item => {
      this.send(item.type, item.content, item.to);
    });
  }
  
  /**
   * 连接到信道
   * @param {Object} metadata - 连接元数据
   */
  connect(metadata = {}) {
    if (this.status === 'closed') {
      this._init();
    }
    
    this.entanglement.send(`channel:${this.channelId}:connect`, {
      endpointId: this.channelId,
      metadata,
      timestamp: Date.now()
    });
    
    this.status = 'connected';
    this._triggerEvent('connected', { metadata });
  }
  
  /**
   * 断开信道连接
   */
  disconnect() {
    this.entanglement.send(`channel:${this.channelId}:disconnect`, {
      endpointId: this.channelId,
      timestamp: Date.now()
    });
    
    this.status = 'closed';
    this.connections.clear();
    this._triggerEvent('disconnected');
  }
  
  /**
   * 发送消息
   * @param {String} type - 消息类型
   * @param {*} content - 消息内容
   * @param {String} to - 目标端点ID，默认为广播
   * @returns {String} 消息ID
   */
  send(type, content, to = null) {
    // 如果信道未就绪，加入队列
    if (this.status !== 'ready' && this.status !== 'connected') {
      this.messageQueue.push({ type, content, to });
      return null;
    }
    
    const messageId = `msg-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    
    this.entanglement.send(`channel:${this.channelId}:message`, {
      messageId,
      type,
      content,
      from: this.channelId,
      to,
      timestamp: Date.now()
    });
    
    return messageId;
  }
  
  /**
   * 注册消息处理器
   * @param {String} type - 消息类型
   * @param {Function} handler - 处理函数
   */
  on(type, handler) {
    if (!this.messageHandlers.has(type)) {
      this.messageHandlers.set(type, []);
    }
    
    this.messageHandlers.get(type).push(handler);
  }
  
  /**
   * 移除消息处理器
   * @param {String} type - 消息类型
   * @param {Function} handler - 处理函数
   */
  off(type, handler) {
    if (!this.messageHandlers.has(type)) {
      return;
    }
    
    const handlers = this.messageHandlers.get(type);
    const index = handlers.indexOf(handler);
    
    if (index !== -1) {
      handlers.splice(index, 1);
    }
    
    if (handlers.length === 0) {
      this.messageHandlers.delete(type);
    }
  }
  
  /**
   * 同步信道状态
   */
  sync() {
    this.entanglement.send(`channel:${this.channelId}:sync`, {
      endpointId: this.channelId,
      timestamp: Date.now()
    });
  }
  
  /**
   * 获取所有连接的端点
   * @returns {Array} 端点列表
   */
  getConnections() {
    return Array.from(this.connections.entries()).map(([id, data]) => ({
      id,
      ...data
    }));
  }
  
  /**
   * 设置纠缠强度
   * @param {Number} strength - 纠缠强度 (0.0-1.0)
   */
  setStrength(strength) {
    this.strength = Math.max(0, Math.min(1, strength));
    
    if (this.entanglement) {
      this.entanglement.send(`channel:${this.channelId}:config`, {
        strength: this.strength
      });
    }
  }
}

// 导出
export default QuantumChannel; 