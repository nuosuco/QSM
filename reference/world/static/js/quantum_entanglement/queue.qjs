/**
 * 量子纠缠通信消息队列模块
 */

// 消息优先级
const MessagePriority = {
    HIGH: 0,
    NORMAL: 1,
    LOW: 2
};

// 消息状态
const MessageStatus = {
    PENDING: 'pending',
    PROCESSING: 'processing',
    COMPLETED: 'completed',
    FAILED: 'failed'
};

// 量子消息
class QuantumMessage {
    constructor(data, priority = MessagePriority.NORMAL) {
        this.id = crypto.randomUUID();
        this.data = data;
        this.priority = priority;
        this.status = MessageStatus.PENDING;
        this.timestamp = Date.now();
        this.retries = 0;
        this.error = null;
    }
}

// 量子消息队列
class QuantumMessageQueue {
    constructor(config = {}) {
        this.config = {
            maxSize: 1000,
            maxRetries: 3,
            retryDelay: 1000,
            ...config
        };
        
        this.queue = new Map();
        this.processingQueue = new Map();
        this.completedQueue = new Map();
        this.failedQueue = new Map();
        
        this.handlers = new Map();
        this.middleware = [];
    }
    
    // 添加消息
    enqueue(data, priority = MessagePriority.NORMAL) {
        if (this.queue.size >= this.config.maxSize) {
            throw new Error('Queue is full');
        }
        
        const message = new QuantumMessage(data, priority);
        this.queue.set(message.id, message);
        
        // 按优先级排序并处理消息
        this.processNextMessage();
        
        return message.id;
    }
    
    // 处理下一条消息
    async processNextMessage() {
        if (this.queue.size === 0) {
            return;
        }
        
        // 按优先级获取下一条消息
        const messages = Array.from(this.queue.values());
        messages.sort((a, b) => a.priority - b.priority);
        
        const message = messages[0];
        this.queue.delete(message.id);
        
        // 应用中间件
        let processedData = message.data;
        for (const middleware of this.middleware) {
            try {
                processedData = await middleware(processedData);
            } catch (error) {
                message.error = error;
                message.status = MessageStatus.FAILED;
                this.failedQueue.set(message.id, message);
                return;
            }
        }
        
        // 处理消息
        message.status = MessageStatus.PROCESSING;
        this.processingQueue.set(message.id, message);
        
        try {
            const handler = this.handlers.get(processedData.type);
            if (!handler) {
                throw new Error(`No handler for message type: ${processedData.type}`);
            }
            
            await handler(processedData);
            
            message.status = MessageStatus.COMPLETED;
            this.completedQueue.set(message.id, message);
            this.processingQueue.delete(message.id);
        } catch (error) {
            message.error = error;
            message.retries++;
            
            if (message.retries >= this.config.maxRetries) {
                message.status = MessageStatus.FAILED;
                this.failedQueue.set(message.id, message);
                this.processingQueue.delete(message.id);
            } else {
                // 重试
                setTimeout(() => {
                    this.queue.set(message.id, message);
                    this.processingQueue.delete(message.id);
                    this.processNextMessage();
                }, this.config.retryDelay * message.retries);
            }
        }
    }
    
    // 注册消息处理器
    registerHandler(type, handler) {
        this.handlers.set(type, handler);
    }
    
    // 添加中间件
    use(middleware) {
        this.middleware.push(middleware);
    }
    
    // 获取消息状态
    getMessageStatus(id) {
        const message = 
            this.queue.get(id) ||
            this.processingQueue.get(id) ||
            this.completedQueue.get(id) ||
            this.failedQueue.get(id);
            
        return message ? message.status : null;
    }
    
    // 清理已完成的消息
    cleanup(maxAge = 3600000) { // 默认1小时
        const now = Date.now();
        
        for (const [id, message] of this.completedQueue) {
            if (now - message.timestamp > maxAge) {
                this.completedQueue.delete(id);
            }
        }
        
        for (const [id, message] of this.failedQueue) {
            if (now - message.timestamp > maxAge) {
                this.failedQueue.delete(id);
            }
        }
    }
}

// 量子消息订阅器
class QuantumMessageSubscriber {
    constructor() {
        this.subscribers = new Map();
    }
    
    // 订阅消息
    subscribe(type, callback) {
        if (!this.subscribers.has(type)) {
            this.subscribers.set(type, new Set());
        }
        
        this.subscribers.get(type).add(callback);
        
        return () => {
            this.subscribers.get(type).delete(callback);
        };
    }
    
    // 发布消息
    publish(type, data) {
        const subscribers = this.subscribers.get(type);
        if (subscribers) {
            subscribers.forEach(callback => callback(data));
        }
    }
}

// 导出队列模块
export const QuantumQueue = {
    MessageQueue: QuantumMessageQueue,
    MessageSubscriber: QuantumMessageSubscriber,
    Priority: MessagePriority,
    Status: MessageStatus
}; 