/**
 * 量子状态同步系统
 * 量子基因编码: QG-SYS-SYNC-UI-CORE-A1B1
 * @version 1.0.0
 */

class QuantumSync {
  /**
   * 构造函数
   * @param {Object} options - 同步配置选项
   * @param {String} options.syncId - 同步标识，默认为随机生成
   * @param {Number} options.strength - 纠缠强度，默认为 0.75
   * @param {Boolean} options.autoSync - 是否自动同步，默认为 true
   * @param {Number} options.syncInterval - 同步间隔(毫秒)，默认为 5000
   * @param {Function} options.conflictResolver - 冲突解决函数
   * @param {Array} options.ignoreKeys - 忽略同步的键列表
   */
  constructor(options = {}) {
    // 初始化配置
    this.syncId = options.syncId || `QS-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    this.strength = options.strength || 0.75;
    this.autoSync = options.autoSync !== undefined ? options.autoSync : true;
    this.syncInterval = options.syncInterval || 5000;
    this.conflictResolver = options.conflictResolver || this._defaultConflictResolver;
    this.ignoreKeys = options.ignoreKeys || [];
    
    // 内部状态
    this.state = {};
    this.remoteState = {};
    this.lastSyncTime = 0;
    this.pendingChanges = new Map();
    this.syncIntervalId = null;
    this.observers = new Map();
    this.version = 0;
    this.remoteVersion = 0;
    this.syncInProgress = false;
    
    // 连接量子信道
    this._connectChannel();
    
    // 初始化自动同步
    if (this.autoSync) {
      this._startAutoSync();
    }
  }
  
  /**
   * 连接量子信道
   * @private
   */
  _connectChannel() {
    // 如果全局量子通道存在，使用它
    if (window.quantumChannel) {
      this.channel = window.quantumChannel;
    } else if (window.quantumEntangle) {
      // 否则使用量子纠缠通道
      this.channel = window.quantumEntangle;
    } else {
      console.warn('量子通信系统不可用，状态同步将仅在本地工作');
      return;
    }
    
    // 注册同步消息处理
    if (this.channel.on) {
      this.channel.on('sync:request', this._handleSyncRequest.bind(this));
      this.channel.on('sync:update', this._handleSyncUpdate.bind(this));
      this.channel.on('sync:ack', this._handleSyncAck.bind(this));
    } else if (this.channel.subscribe) {
      this.channel.subscribe('sync:*', (message) => {
        const { type, data } = message;
        if (type === 'sync:request') {
          this._handleSyncRequest(data);
        } else if (type === 'sync:update') {
          this._handleSyncUpdate(data);
        } else if (type === 'sync:ack') {
          this._handleSyncAck(data);
        }
      });
    }
  }
  
  /**
   * 处理同步请求
   * @private
   * @param {Object} data - 请求数据
   */
  _handleSyncRequest(data) {
    const { syncId, version } = data;
    
    // 忽略自己的请求
    if (syncId === this.syncId) {
      return;
    }
    
    // 发送当前状态作为响应
    this._sendSyncUpdate(syncId);
  }
  
  /**
   * 处理同步更新
   * @private
   * @param {Object} data - 更新数据
   */
  _handleSyncUpdate(data) {
    const { syncId, state, version, timestamp } = data;
    
    // 忽略自己的更新
    if (syncId === this.syncId) {
      return;
    }
    
    // 忽略旧版本的更新
    if (version < this.remoteVersion) {
      return;
    }
    
    // 更新远程状态和版本
    this.remoteState = state;
    this.remoteVersion = version;
    
    // 确认收到更新
    this._sendSyncAck(syncId, version);
    
    // 如果强度足够，合并状态
    if (Math.random() < this.strength) {
      this._mergeState();
    }
  }
  
  /**
   * 处理同步确认
   * @private
   * @param {Object} data - 确认数据
   */
  _handleSyncAck(data) {
    const { syncId, version } = data;
    
    // 忽略不相关的确认
    if (syncId !== this.syncId) {
      return;
    }
    
    // 完成同步过程
    this.syncInProgress = false;
    
    // 触发同步完成事件
    this._triggerEvent('synced', { version });
  }
  
  /**
   * 发送同步请求
   * @private
   */
  _sendSyncRequest() {
    if (!this.channel) {
      return;
    }
    
    const message = {
      type: 'sync:request',
      data: {
        syncId: this.syncId,
        version: this.version,
        timestamp: Date.now()
      }
    };
    
    if (this.channel.send) {
      this.channel.send('sync:request', message.data);
    } else {
      this.channel.send(message);
    }
    
    this.syncInProgress = true;
  }
  
  /**
   * 发送同步更新
   * @private
   * @param {String} targetId - 目标同步ID
   */
  _sendSyncUpdate(targetId = null) {
    if (!this.channel) {
      return;
    }
    
    const message = {
      type: 'sync:update',
      data: {
        syncId: this.syncId,
        state: this.state,
        version: this.version,
        timestamp: Date.now(),
        targetId
      }
    };
    
    if (this.channel.send) {
      this.channel.send('sync:update', message.data, targetId);
    } else {
      this.channel.send(message);
    }
  }
  
  /**
   * 发送同步确认
   * @private
   * @param {String} targetId - 目标同步ID
   * @param {Number} version - 确认的版本
   */
  _sendSyncAck(targetId, version) {
    if (!this.channel) {
      return;
    }
    
    const message = {
      type: 'sync:ack',
      data: {
        syncId: this.syncId,
        version,
        timestamp: Date.now()
      }
    };
    
    if (this.channel.send) {
      this.channel.send('sync:ack', message.data, targetId);
    } else {
      this.channel.send(message);
    }
  }
  
  /**
   * 合并状态
   * @private
   */
  _mergeState() {
    // 创建合并后的状态对象
    const mergedState = { ...this.state };
    
    // 遍历远程状态
    for (const key in this.remoteState) {
      // 忽略指定的键
      if (this.ignoreKeys.includes(key)) {
        continue;
      }
      
      // 如果本地有相同的键
      if (key in this.state) {
        // 解决冲突
        mergedState[key] = this.conflictResolver(
          key,
          this.state[key],
          this.remoteState[key],
          this.version,
          this.remoteVersion
        );
      } else {
        // 本地没有该键，直接使用远程值
        mergedState[key] = this.remoteState[key];
      }
    }
    
    // 更新本地状态
    this._updateState(mergedState);
  }
  
  /**
   * 默认冲突解决器
   * @private
   * @param {String} key - 冲突的键
   * @param {*} localValue - 本地值
   * @param {*} remoteValue - 远程值
   * @param {Number} localVersion - 本地版本
   * @param {Number} remoteVersion - 远程版本
   * @returns {*} 解决后的值
   */
  _defaultConflictResolver(key, localValue, remoteValue, localVersion, remoteVersion) {
    // 简单的基于版本的解决方案
    // 版本较高的优先
    return remoteVersion > localVersion ? remoteValue : localValue;
  }
  
  /**
   * 启动自动同步
   * @private
   */
  _startAutoSync() {
    if (this.syncIntervalId) {
      return;
    }
    
    this.syncIntervalId = setInterval(() => {
      if (!this.syncInProgress) {
        this.sync();
      }
    }, this.syncInterval);
    
    // 初始同步
    setTimeout(() => {
      this.sync();
    }, 1000);
  }
  
  /**
   * 停止自动同步
   * @private
   */
  _stopAutoSync() {
    if (this.syncIntervalId) {
      clearInterval(this.syncIntervalId);
      this.syncIntervalId = null;
    }
  }
  
  /**
   * 更新本地状态
   * @private
   * @param {Object} newState - 新状态
   */
  _updateState(newState) {
    const prevState = { ...this.state };
    this.state = newState;
    this.version++;
    
    // 查找变更的键
    const changedKeys = new Set();
    
    // 检查新增和修改的键
    for (const key in newState) {
      if (!this._isEqual(newState[key], prevState[key])) {
        changedKeys.add(key);
      }
    }
    
    // 检查删除的键
    for (const key in prevState) {
      if (!(key in newState)) {
        changedKeys.add(key);
      }
    }
    
    // 通知观察者
    changedKeys.forEach(key => {
      if (this.observers.has(key)) {
        const observers = this.observers.get(key);
        observers.forEach(callback => {
          try {
            callback(newState[key], prevState[key]);
          } catch (error) {
            console.error(`观察者回调出错:`, error);
          }
        });
      }
    });
    
    // 触发状态变更事件
    if (changedKeys.size > 0) {
      this._triggerEvent('change', {
        changedKeys: Array.from(changedKeys),
        state: this.state,
        prevState
      });
    }
  }
  
  /**
   * 检查两个值是否相等
   * @private
   * @param {*} a - 第一个值
   * @param {*} b - 第二个值
   * @returns {Boolean} 是否相等
   */
  _isEqual(a, b) {
    if (a === b) {
      return true;
    }
    
    if (a == null || b == null) {
      return false;
    }
    
    if (typeof a !== 'object' || typeof b !== 'object') {
      return false;
    }
    
    const keysA = Object.keys(a);
    const keysB = Object.keys(b);
    
    if (keysA.length !== keysB.length) {
      return false;
    }
    
    return keysA.every(key => this._isEqual(a[key], b[key]));
  }
  
  /**
   * 触发事件
   * @private
   * @param {String} eventName - 事件名称
   * @param {Object} data - 事件数据
   */
  _triggerEvent(eventName, data = {}) {
    const event = new CustomEvent(`quantum:sync:${eventName}`, {
      detail: {
        syncId: this.syncId,
        ...data
      },
      bubbles: true,
      cancelable: true
    });
    
    document.dispatchEvent(event);
  }
  
  /**
   * 设置状态值
   * @param {String} key - 键
   * @param {*} value - 值
   */
  set(key, value) {
    const newState = { ...this.state };
    newState[key] = value;
    
    // 添加到待处理变更
    this.pendingChanges.set(key, value);
    
    // 更新状态
    this._updateState(newState);
    
    // 如果不是自动同步，记录变更以便手动同步
    return this;
  }
  
  /**
   * 批量设置状态值
   * @param {Object} values - 键值对
   */
  setMultiple(values) {
    const newState = { ...this.state };
    
    // 更新状态和待处理变更
    for (const key in values) {
      newState[key] = values[key];
      this.pendingChanges.set(key, values[key]);
    }
    
    // 更新状态
    this._updateState(newState);
    
    return this;
  }
  
  /**
   * 获取状态值
   * @param {String} key - 键
   * @param {*} defaultValue - 默认值
   * @returns {*} 状态值
   */
  get(key, defaultValue = null) {
    return key in this.state ? this.state[key] : defaultValue;
  }
  
  /**
   * 删除状态值
   * @param {String} key - 键
   */
  remove(key) {
    if (!(key in this.state)) {
      return this;
    }
    
    const newState = { ...this.state };
    delete newState[key];
    
    // 记录删除操作
    this.pendingChanges.set(key, undefined);
    
    // 更新状态
    this._updateState(newState);
    
    return this;
  }
  
  /**
   * 清空状态
   */
  clear() {
    // 记录所有键的删除
    for (const key in this.state) {
      this.pendingChanges.set(key, undefined);
    }
    
    // 更新状态为空对象
    this._updateState({});
    
    return this;
  }
  
  /**
   * 观察状态变化
   * @param {String} key - 要观察的键
   * @param {Function} callback - 回调函数
   */
  observe(key, callback) {
    if (!this.observers.has(key)) {
      this.observers.set(key, []);
    }
    
    this.observers.get(key).push(callback);
    
    return this;
  }
  
  /**
   * 取消观察
   * @param {String} key - 键
   * @param {Function} callback - 回调函数
   */
  unobserve(key, callback) {
    if (!this.observers.has(key)) {
      return this;
    }
    
    const observers = this.observers.get(key);
    const index = observers.indexOf(callback);
    
    if (index !== -1) {
      observers.splice(index, 1);
    }
    
    if (observers.length === 0) {
      this.observers.delete(key);
    }
    
    return this;
  }
  
  /**
   * 同步状态
   */
  sync() {
    if (this.syncInProgress) {
      return Promise.resolve(false);
    }
    
    this.syncInProgress = true;
    this.lastSyncTime = Date.now();
    
    // 发送同步请求
    this._sendSyncRequest();
    
    // 如果有待处理的变更，也发送更新
    if (this.pendingChanges.size > 0) {
      this._sendSyncUpdate();
      this.pendingChanges.clear();
    }
    
    // 返回Promise
    return new Promise((resolve) => {
      const handleSynced = () => {
        document.removeEventListener('quantum:sync:synced', handleSynced);
        resolve(true);
      };
      
      document.addEventListener('quantum:sync:synced', handleSynced);
      
      // 超时处理
      setTimeout(() => {
        document.removeEventListener('quantum:sync:synced', handleSynced);
        this.syncInProgress = false;
        resolve(false);
      }, 10000);
    });
  }
  
  /**
   * 获取完整状态
   * @returns {Object} 当前状态
   */
  getState() {
    return { ...this.state };
  }
  
  /**
   * 获取远程状态
   * @returns {Object} 远程状态
   */
  getRemoteState() {
    return { ...this.remoteState };
  }
  
  /**
   * 设置冲突解决器
   * @param {Function} resolver - 冲突解决函数
   */
  setConflictResolver(resolver) {
    this.conflictResolver = resolver || this._defaultConflictResolver;
    return this;
  }
  
  /**
   * 设置同步强度
   * @param {Number} strength - 同步强度 (0.0-1.0)
   */
  setStrength(strength) {
    this.strength = Math.max(0, Math.min(1, strength));
    return this;
  }
  
  /**
   * 配置自动同步
   * @param {Boolean} enabled - 是否启用
   * @param {Number} interval - 同步间隔(毫秒)
   */
  configAutoSync(enabled, interval = null) {
    if (enabled !== undefined) {
      this.autoSync = enabled;
      
      if (enabled) {
        this._startAutoSync();
      } else {
        this._stopAutoSync();
      }
    }
    
    if (interval !== null) {
      this.syncInterval = interval;
      
      if (this.autoSync) {
        this._stopAutoSync();
        this._startAutoSync();
      }
    }
    
    return this;
  }
  
  /**
   * 销毁实例
   */
  destroy() {
    this._stopAutoSync();
    this.observers.clear();
    this.pendingChanges.clear();
    
    // 触发销毁事件
    this._triggerEvent('destroyed');
  }
}

// 创建全局量子同步实例
window.quantumSync = new QuantumSync(window.QUANTUM_SYNC || {});

// 导出
export default QuantumSync; 