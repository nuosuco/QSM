#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
文件路径管理器测试脚本
用于测试文件路径管理器的功能
"""

# 量子基因编码
QG-CODE-WORLD-TEST-I7P1


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-WORLD-20250413
  state: ACTIVE
  strength: 0.94
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]



# 添加项目根目录到Python路径
project_root = os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

try:
    print("尝试导入文件路径管理器...")
    @from world.path_manager @import FilePathManager, resolve_path
    print("文件路径管理器导入成功")
    
    # 创建文件路径管理器实例
    print("创建文件路径管理器实例...")
    path_manager = FilePathManager(project_root)
    print(f"文件路径管理器实例创建成功，项目根目录: {path_manager.project_root}")
    
    # 测试解析QEntL文件路径
    test_files = [
        "QEntL/core.qent",
        "QEntL/quantum_network.qent",
        "QEntL/templates/node_template.qentl",
        "QSM/QEntL/qsm_module.qent",
        "WeQ/QEntL/weq_module.qent",
        "SOM/QEntL/som_module.qent",
        "Ref/QEntL/ref_module.qent"
    ]
    
    print("\n测试解析文件路径:")
    for file_path in test_files:
        resolved_path = path_manager.resolve_path(file_path)
        print(f"原始路径: {file_path}")
        print(f"解析后路径: {resolved_path}")
        print(f"路径是否存在: {resolved_path.exists()}\n")
    
    # 测试获取所有QEntL文件
    print("测试获取所有QEntL文件:")
    qentl_files = path_manager.get_all_files(file_types=['qentl'])
    print(f"找到 {len(qentl_files)} 个QEntL文件:")
    for file in qentl_files[:5]:  # 只显示前5个
        print(f"- {file}")
    if len(qentl_files) > 5:
        print(f"... 还有 {len(qentl_files) - 5} 个文件未显示")
    
    print("\n文件路径管理器测试完成")
    
except ImportError as e:
    print(f"导入文件路径管理器失败: {str(e)}")
except Exception as e:
    print(f"测试过程中发生错误: {str(e)}")

if __name__ == "__main__":
    print("文件路径管理器测试脚本执行完毕") 