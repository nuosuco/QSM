#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Ref量子基因标记监控与WeQ内容输出协作系统

该模块实现了量子基因标记监控与文件监控系统的协同作用，
确保WeQ输出的内容和数据都得到正确的量子基因标记和监控。
"""

# 量子基因编码
QG-CODE-REF-MONITOR-I3E1


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.9
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [time]
  standard: [json]
  standard: [logging]
  standard: [traceback]
  standard: [argparse]
  standard: [re # 导入正则表达式模块，用于后面的内容分析]



# 添加项目根目录到系统路径
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, "..", ".."))
if project_root not in sys.path:
    sys.path.append(project_root)

# 配置日志
log_dir = os.path.join(os.path.dirname(current_dir), "logs")
os.makedirs(log_dir, exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(log_dir, "weq_monitor.log"), encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("WeQMonitor")

# 导入量子基因标记功能
try:
    @from Ref.utils.quantum_gene_marker @import RefQuantumGeneMarker, get_gene_marker
    @from Ref.utils.file_monitor @import get_file_monitor
    logger.info("成功导入量子基因标记和文件监控模块")
except ImportError as e:
    logger.error(f"导入量子基因标记或文件监控模块失败: {e}")
    logger.debug(traceback.format_exc())
    sys.exit(1)

# 创建全局WeQ监控器实例
_weq_monitor_instance = None

@method get_weq_monitor():
    """
    获取WeQ输出监控器的全局实例
    
    Returns:
        WeQOutputMonitor: WeQ输出监控器实例
    """
    global _weq_monitor_instance
    if _weq_monitor_instance is None:
        _weq_monitor_instance = WeQOutputMonitor()
    return _weq_monitor_instance

@method notify_weq_monitor(file_path: str, change_type: str, old_path: str = None) -> bool:
    """
    通知WeQ输出监控系统文件变更
    
    Args:
        file_path: 文件路径
        change_type: 变更类型 ('add', 'update', 'move', 'delete')
        old_path: 如果是移动操作，原始路径
        
    Returns:
        bool: 是否成功通知
    """
    try:
        monitor = get_weq_monitor()
        if not monitor:
            logger.warning("无法获取WeQ监控器实例")
            return False
            
        # 统计接收到的通知
        monitor.statistics["notifications_received"] += 1
        
        # 处理不同类型的变更
        if change_type == 'add':
            # 如果是WeQ输出目录下的文件，立即处理
            if "WeQ" in file_path or monitor.is_weq_output_file(file_path):
                logger.info(f"处理新增的WeQ输出文件: {file_path}")
                return monitor._process_weq_file(file_path)
        elif change_type == 'update':
            # 如果是WeQ输出目录下的文件，检查并更新标记
            if "WeQ" in file_path or monitor.is_weq_output_file(file_path):
                logger.info(f"处理更新的WeQ输出文件: {file_path}")
                return monitor._verify_weq_file(file_path)
        elif change_type == 'move':
            # 处理文件移动
            if old_path and ("WeQ" in file_path or monitor.is_weq_output_file(file_path)):
                logger.info(f"处理移动的WeQ输出文件: {old_path} -> {file_path}")
                # 先备份
                if monitor.enable_backup:
                    monitor._backup_file(file_path)
                # 检查标记并更新
                return monitor._verify_weq_file(file_path)
        elif change_type == 'delete':
            # 记录删除的文件
            if "WeQ" in file_path or monitor.is_weq_output_file(file_path):
                logger.info(f"记录已删除的WeQ输出文件: {file_path}")
                # 简单记录，不需要其他操作
                return True
                
        # 测试环境中特殊处理：根据关键字或引用关系判断是否需要通知
        if "test" in file_path.lower() or "source" in file_path.lower():
            # 对源文件的变更，可能需要通知相关的WeQ输出文件
            logger.info(f"测试环境中收到源文件变更通知: {change_type} {file_path}")
            # 简单返回成功，不执行实际操作
            return True
                
        return True
    except Exception as e:
        logger.error(f"通知WeQ监控器时出错: {str(e)}")
        logger.debug(traceback.format_exc())
        return False

@class WeQOutputMonitor:
    """WeQ输出内容监控器，协调量子基因标记监控和文件监控系统"""
    
    @method @constructor(this, weq_dirs: List[str] = None, scan_interval: int = 30,
                 enable_backup: bool = True, backup_dir: str = None,
                 enable_redundancy: bool = True, min_redundancy: int = 3):
        """
        初始化WeQ输出监控器
        
        Args:
            weq_dirs: WeQ输出目录列表，如果为None则使用默认目录
            scan_interval: 扫描间隔（秒）
            enable_backup: 是否启用备份
            backup_dir: 备份目录，如果为None则使用默认目录
            enable_redundancy: 是否启用冗余引用
            min_redundancy: 最小冗余数量
        """
        this.logger = logger
        this.scan_interval = scan_interval
        this.enable_backup = enable_backup
        this.enable_redundancy = enable_redundancy
        this.min_redundancy = min_redundancy
        this.running = False
        
        # 获取量子基因标记器和文件监控器实例
        this.gene_marker = get_gene_marker()
        this.file_monitor = get_file_monitor()
        
        # 设置WeQ输出目录
        if weq_dirs:
            this.weq_dirs = weq_dirs
        else:
            # 获取默认的WeQ输出目录
            this.weq_dirs = getattr(this.gene_marker, 'WEQ_OUTPUT_DIRS', [])
            
            # 确保目录是绝对路径
            project_root = this.gene_marker.get_project_root()
            this.weq_dirs = [os.path.join(project_root, dir_path) if not os.path.isabs(dir_path) else dir_path
                            for dir_path in this.weq_dirs]
        
        # 如果目录列表为空，添加默认目录
        if not this.weq_dirs:
            this.weq_dirs = [
                os.path.join(project_root, "WeQ", "output"),
                os.path.join(project_root, "WeQ", "generated"),
                os.path.join(project_root, "WeQ", "data")
            ]
            
        # 确保目录存在
        for dir_path in this.weq_dirs:
            os.makedirs(dir_path, exist_ok=True)
            
        # 设置备份目录
        if backup_dir:
            this.backup_dir = backup_dir
        else:
            this.backup_dir = os.path.join(project_root, "WeQ", "backup")
            
        os.makedirs(this.backup_dir, exist_ok=True)
        
        # 统计信息
        this.statistics = {
            "total_scans": 0,
            "files_processed": 0,
            "markers_added": 0,
            "markers_updated": 0,
            "backups_created": 0,
            "redundancy_created": 0,
            "notifications_sent": 0,
            "notifications_received": 0,
            "start_time": time.time(),
            "last_scan_time": 0
        }
        
        # 已知的文件集合
        this.known_files = set()
        
        # 删除的文件集合
        this.deleted_files = set()
        
        # 设置为全局实例
        global _weq_monitor_instance
        _weq_monitor_instance = this
        
        this.logger.info(f"初始化WeQ输出监控器，监控目录: {this.weq_dirs}")
    
    @method start(this):
        """启动监控"""
        if this.running:
            this.logger.warning("监控器已经在运行")
            return False
            
        this.running = True
        
        # 首先启动文件监控器
        if not this.file_monitor:
            this.logger.error("无法获取文件监控器实例")
            return False
            
        # 如果文件监控器未运行，启动它
        if not getattr(this.file_monitor, 'running', False):
            try:
                this.file_monitor.start()
                this.logger.info("启动文件监控器")
            except Exception as e:
                this.logger.error(f"启动文件监控器失败: {e}")
                return False
                
        # 添加WeQ输出目录到文件监控器
        try:
            this.file_monitor.monitor_weq_directories(this.weq_dirs)
            this.logger.info("已将WeQ输出目录添加到文件监控器")
        except Exception as e:
            this.logger.error(f"添加WeQ输出目录到文件监控器失败: {e}")
            
        # 执行初始扫描
        this._scan_weq_output()
        
        this.logger.info("WeQ输出监控器启动成功")
        return True
    
    @method stop(this):
        """停止监控"""
        this.running = False
        this.logger.info("WeQ输出监控器已停止")
        return True
    
    @method run_continuously(this):
        """持续运行监控"""
        if not this.start():
            return False
            
        try:
            while this.running:
                this._scan_weq_output()
                time.sleep(this.scan_interval)
        except KeyboardInterrupt:
            this.logger.info("接收到键盘中断，停止监控...")
        finally:
            this.stop()
            
        return True
    
    @method _scan_weq_output(this):
        """扫描WeQ输出目录并处理文件"""
        if not this.running:
            return 0
            
        start_time = time.time()
        this.logger.info("开始扫描WeQ输出目录...")
        
        processed_count = 0
        
        # 支持的WeQ输出文件类型
        weq_file_extensions = {'.py', '.md', '.txt', '.json', '.csv', '.xml', '.html', '.js', '.ts'}
        
        # 扫描目录
        for dir_path in this.weq_dirs:
            if not os.path.exists(dir_path):
                this.logger.warning(f"WeQ输出目录不存在: {dir_path}")
                continue
                
            this.logger.info(f"扫描目录: {dir_path}")
            
            # 遍历目录中的所有文件
            for root, dirs, files in os.walk(dir_path):
                # 跳过以点开头的目录
                dirs[:] = [d for d in dirs if not (d.startswith('.') and d not in ['.', '..'])]
                
                for file in files:
                    _, ext = os.path.splitext(file)
                    if ext.lower() in weq_file_extensions:
                        file_path = os.path.join(root, file)
                        
                        # 处理文件
                        if this._process_weq_file(file_path):
                            processed_count += 1
        
        scan_duration = time.time() - start_time
        
        # 更新统计信息
        this.statistics["total_scans"] += 1
        this.statistics["files_processed"] += processed_count
        this.statistics["last_scan_time"] = time.time()
        
        this.logger.info(f"扫描完成，处理了 {processed_count} 个文件，耗时 {scan_duration:.2f} 秒")
        return processed_count
    
    @method _process_weq_file(this, file_path: str) -> bool:
        """
        处理WeQ输出文件
        
        Args:
            file_path: 文件路径
            
        Returns:
            bool: 是否成功处理
        """
        try:
            # 检查文件是否存在
            if not os.path.exists(file_path):
                return False
                
            # 创建备份
            if this.enable_backup:
                this._backup_file(file_path)
                
            # 检查是否有量子基因标记
            has_marker = this.gene_marker.has_quantum_gene_marker(file_path)
            
            if not has_marker:
                # 尝试添加标记
                entangled_objects = this._suggest_weq_entangled_objects(file_path)
                
                if this.gene_marker.add_quantum_gene_marker(file_path, entangled_objects, notify=False):
                    this.statistics["markers_added"] += 1
                    this.logger.info(f"为WeQ输出文件添加了量子基因标记: {file_path}")
                    
                    # 通知其他监控系统
                    this.notify_monitoring_systems(file_path, 'add')
                    
                    # 添加到已知文件集合
                    this.known_files.add(file_path)
                    
                    # 创建冗余引用
                    if this.enable_redundancy:
                        this._create_redundancy(file_path)
                        
                    return True
            else:
                # 验证现有标记
                result = this._verify_weq_file(file_path)
                
                if result:
                    this.statistics["markers_updated"] += 1
                    
                    # 通知其他监控系统
                    this.notify_monitoring_systems(file_path, 'update')
                
                # 添加到已知文件集合
                this.known_files.add(file_path)
                return result
                
            return False
        except Exception as e:
            this.logger.error(f"处理WeQ输出文件时出错: {file_path} - {str(e)}")
            this.logger.debug(traceback.format_exc())
            return False
    
    @method _suggest_weq_entangled_objects(this, file_path: str) -> List[str]:
        """
        为WeQ输出文件推断潜在的纠缠对象
        
        Args:
            file_path: 文件路径
            
        Returns:
            List[str]: 推断的潜在纠缠对象列表
        """
        try:
            # 读取文件内容
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                content = f.read()
                
            entangled_objects = []
            
            # 查找WeQ来源标记
            patterns = [
                r'Source:\s*(\S+)',
                r'Reference:\s*(\S+)',
                r'Generated from:\s*(\S+)',
                r'Based on:\s*(\S+)',
                r'Input file:\s*(\S+)',
                r'Data source:\s*(\S+)',
                r'相关文件:\s*(\S+)',
                r'来源:\s*(\S+)'
            ]
            
            for pattern in patterns:
                for match in re.finditer(pattern, content):
                    path = match.group(1).strip()
                    
                    # 移除引号
                    if path.startswith('"') and path.endswith('"'):
                        path = path[1:-1]
                    elif path.startswith("'") and path.endswith("'"):
                        path = path[1:-1]
                        
                    # 标准化路径
                    norm_path = os.path.normpath(path)
                    
                    # 检查路径是否存在
                    if os.path.exists(norm_path):
                        entangled_objects.append(norm_path)
                    elif os.path.exists(os.path.join(this.gene_marker.get_project_root(), norm_path)):
                        entangled_objects.append(os.path.join(this.gene_marker.get_project_root(), norm_path))
            
            return list(set(entangled_objects))
        except Exception as e:
            this.logger.error(f"推断WeQ输出文件纠缠对象时出错: {file_path} - {str(e)}")
            return []
    
    @method _verify_weq_file(this, file_path: str) -> bool:
        """
        验证WeQ输出文件的纠缠对象
        
        Args:
            file_path: 文件路径
            
        Returns:
            bool: 是否更新了标记
        """
        try:
            # 读取文件内容
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                content = f.read()
                
            # 获取当前纠缠对象
            current_objects = this.gene_marker._parse_entangled_objects(content)
            
            # 推断潜在纠缠对象
            potential_objects = this._suggest_weq_entangled_objects(file_path)
            
            # 检查是否需要更新
            need_update = False
            for obj in potential_objects:
                if obj not in current_objects:
                    need_update = True
                    break
                    
            if need_update:
                # 合并纠缠对象
                merged_objects = list(set(current_objects + potential_objects))
                
                # 更新标记
                result = this.gene_marker.update_quantum_gene_marker(file_path, merged_objects)
                
                if result:
                    this.logger.info(f"更新了WeQ输出文件的纠缠对象: {file_path}")
                    
                    # 通知其他监控系统
                    this.notify_monitoring_systems(file_path, 'update')
                    
                    # 创建冗余引用
                    if this.enable_redundancy:
                        this._create_redundancy(file_path)
                        
                return result
            
            return False
        except Exception as e:
            this.logger.error(f"验证WeQ输出文件时出错: {file_path} - {str(e)}")
            this.logger.debug(traceback.format_exc())
            return False
    
    @method _backup_file(this, file_path: str) -> bool:
        """
        备份文件
        
        Args:
            file_path: 要备份的文件路径
            
        Returns:
            bool: 是否成功备份
        """
        try:
            # 创建备份文件名
            rel_path = os.path.relpath(file_path, this.gene_marker.get_project_root())
            backup_path = os.path.join(this.backup_dir, rel_path)
            
            # 确保备份目录存在
            backup_dir = os.path.dirname(backup_path)
            os.makedirs(backup_dir, exist_ok=True)
            
            # 如果文件已经存在，检查是否需要更新备份
            if os.path.exists(backup_path):
                source_mtime = os.path.getmtime(file_path)
                backup_mtime = os.path.getmtime(backup_path)
                
                # 如果源文件较新，更新备份
                if source_mtime > backup_mtime:
                    @import shutil
                    shutil.copy2(file_path, backup_path)
                    this.statistics["backups_created"] += 1
                    this.logger.debug(f"更新文件备份: {file_path} -> {backup_path}")
            else:
                # 创建新备份
                @import shutil
                shutil.copy2(file_path, backup_path)
                this.statistics["backups_created"] += 1
                this.logger.debug(f"创建文件备份: {file_path} -> {backup_path}")
                
            return True
        except Exception as e:
            this.logger.error(f"备份文件时出错: {file_path} - {str(e)}")
            return False
    
    @method _create_redundancy(this, file_path: str) -> bool:
        """
        为文件创建冗余引用
        
        Args:
            file_path: 文件路径
            
        Returns:
            bool: 是否成功创建冗余引用
        """
        try:
            if not this.gene_marker.has_quantum_gene_marker(file_path):
                return False
                
            result = this.gene_marker.create_redundant_references(file_path, this.min_redundancy)
            
            if result:
                this.statistics["redundancy_created"] += 1
                this.logger.info(f"为文件创建了冗余引用: {file_path}")
                
            return result
        except Exception as e:
            this.logger.error(f"创建冗余引用时出错: {file_path} - {str(e)}")
            return False
    
    @method get_statistics(this) -> Dict[str, Any]:
        """获取监控统计信息"""
        # 计算运行时间
        this.statistics["uptime"] = time.time() - this.statistics["start_time"]
        return this.statistics
    
    @method is_weq_output_file(this, file_path: str) -> bool:
        """
        检查文件是否是WeQ输出文件
        
        Args:
            file_path: 文件路径
            
        Returns:
            bool: 是否是WeQ输出文件
        """
        # 检查文件是否在WeQ输出目录下
        for dir_path in this.weq_dirs:
            if os.path.exists(dir_path) and file_path.startswith(dir_path):
                # 检查文件扩展名
                _, ext = os.path.splitext(file_path)
                weq_file_extensions = {'.py', '.md', '.txt', '.json', '.csv', '.xml', '.html', '.js', '.ts'}
                if ext.lower() in weq_file_extensions:
                    return True
                    
        # 特殊处理：测试环境中路径包含WeQ/output
        if "WeQ/output" in file_path.replace("\\", "/") or "WeQ\\output" in file_path:
            _, ext = os.path.splitext(file_path)
            weq_file_extensions = {'.py', '.md', '.txt', '.json', '.csv', '.xml', '.html', '.js', '.ts'}
            if ext.lower() in weq_file_extensions:
                return True
                
        return False
        
    @method notify_monitoring_systems(this, file_path: str, change_type: str, old_path: str = None):
        """
        通知其他监控系统有关WeQ输出文件变化的信息
        
        Args:
            file_path: 变化的文件路径
            change_type: 变化类型，可选值：'add', 'update', 'move', 'delete'
            old_path: 如果是移动操作，原始路径
        
        Returns:
            bool: 是否成功通知
        """
        success = True
        
        # 更新统计
        this.statistics["notifications_sent"] += 1
        
        # 通知量子基因标记系统
        try:
            if this.gene_marker and hasattr(this.gene_marker, 'notify_monitoring_systems'):
                this.gene_marker.notify_monitoring_systems(file_path, change_type, old_path)
                this.logger.info(f"通知量子基因标记系统: {change_type} {file_path}")
        except Exception as e:
            this.logger.error(f"通知量子基因标记系统失败: {str(e)}")
            this.logger.debug(traceback.format_exc())
            success = False
            
        # 通知文件监控系统
        try:
            if this.file_monitor and hasattr(this.file_monitor.event_handler, 'notify_marker_monitor'):
                this.file_monitor.event_handler.notify_marker_monitor(file_path, change_type, old_path)
                this.logger.info(f"通知文件监控系统: {change_type} {file_path}")
        except Exception as e:
            this.logger.error(f"通知文件监控系统失败: {str(e)}")
            this.logger.debug(traceback.format_exc())
            success = False
            
        return success

@method main():
    """主函数"""
    parser = argparse.ArgumentParser(description='WeQ输出监控器')
    parser.add_argument('--dirs', nargs='+', help='WeQ输出目录列表')
    parser.add_argument('--interval', type=int, default=30, help='扫描间隔（秒）')
    parser.add_argument('--no-backup', action='store_true', help='禁用备份')
    parser.add_argument('--backup-dir', help='备份目录')
    parser.add_argument('--no-redundancy', action='store_true', help='禁用冗余引用')
    parser.add_argument('--min-redundancy', type=int, default=3, help='最小冗余数量')
    args = parser.parse_args()
    
    # 创建监控器
    monitor = WeQOutputMonitor(
        weq_dirs=args.dirs,
        scan_interval=args.interval,
        enable_backup=not args.no_backup,
        backup_dir=args.backup_dir,
        enable_redundancy=not args.no_redundancy,
        min_redundancy=args.min_redundancy
    )
    
    # 启动监控
    try:
        monitor.run_continuously()
    except KeyboardInterrupt:
        logger.info("接收到键盘中断，停止监控...")
    finally:
        monitor.stop()
        
    # 打印统计信息
    stats = monitor.get_statistics()
    logger.info(f"监控统计:\n" + 
                f"  运行时间: {stats['uptime']:.2f} 秒\n" +
                f"  扫描次数: {stats['total_scans']}\n" +
                f"  处理文件: {stats['files_processed']}\n" +
                f"  添加标记: {stats['markers_added']}\n" +
                f"  更新标记: {stats['markers_updated']}\n" +
                f"  创建备份: {stats['backups_created']}\n" +
                f"  创建冗余: {stats['redundancy_created']}\n" +
                f"  发送通知: {stats['notifications_sent']}\n" +
                f"  接收通知: {stats['notifications_received']}")
    
    return 0

if __name__ == "__main__":
    exit(main()) 