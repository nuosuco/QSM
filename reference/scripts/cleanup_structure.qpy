#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
项目结构清理脚本

该脚本用于清理项目结构，删除冗余文件和目录，合并重复目录，优化项目结构。
执行前会进行确认，确保不会误删重要文件。

用法:
    python scripts/cleanup_structure.py [--auto-confirm]
        --auto-confirm: 自动确认执行清理操作，无需手动确认
"""

# 量子基因编码
QG-CODE-SCRIPTS-CLEANUP-F4B6


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-SCRIPTS-20250413
  state: ACTIVE
  strength: 0.92
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [shutil]
  standard: [logging]
  standard: [datetime]
  standard: [argparse]
  standard: [re]

@constants
  ROOT_DIR = Path(os.path.abspath(os.path.dirname(os.path.dirname(__file__))))
  REDUNDANT_FILES = [
  REDUNDANT_DIRS = [
  IMPORTANT_FILES = [
  DIRECTORY_MERGES = [
  CORE_MODULES = ['QSM', 'WeQ', 'SOM', 'Ref', 'QEntL', 'api', 'scripts']




# 设置日志
log_dir = Path('.logs')
log_dir.mkdir(exist_ok=True)
current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
log_path = log_dir / f'structure_cleanup_{current_time}.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_path, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('结构清理')

# 项目根目录

# 要删除的冗余文件模式
    # 临时文件
    r'.*\.tmp$',
    r'.*\.bak$',
    r'.*\.swp$',
    r'.*~$',
    # 日志文件
    r'.*\.log$',
    # 旧版本的清理和组织脚本
    r'cleanup_project\.(py|ps1)$',
    r'quick_cleanup\.py$',
    r'organize_files\.py$',
    r'organize_ref_files\.ps1$',
    r'update_imports\.ps1$',
    r'fix_imports\.py$',
    # 测试脚本
    r'test_.*\.py$',
    r'.*_test\.py$',
    # 其他冗余文件
    r'null$',
    r'debug_log\.txt$',
    r'master_files\.txt$',
    r'service_update_files\.txt$',
    r'0001-.*\.patch$',
]

# 要删除的冗余目录
    'monitor_system',
    'monitor_system2',
    'output',
    'results',
    'crawler_data',
    'training_data',
    '.cursor',
]

# 要保留的重要文件
    'README.md',
    'requirements.txt',
    '.gitignore',
    'setup.py',
    'LICENSE',
    'Dockerfile',
]

# 目录合并映射
    # 源目录 -> 目标目录
    ('quantum_economy', 'QSM/quantum_economy'),
    ('quantum_core', 'QSM/core'),
    ('quantum_shared', 'QSM/utils'),
    ('world', 'QSM/world'),
    ('models', 'QSM/models'),
    ('crawlers', 'QSM/crawlers'),
    ('docs', 'QSM/docs'),
    ('maintenance', 'QSM/utils/maintenance'),
    ('config', 'QSM/config'),
    ('assets', 'QSM/static/assets'),
    ('quantum_data', 'QSM/data/quantum_data'),
]

# 主要子模块

@method parse_args():
    """解析命令行参数"""
    parser = argparse.ArgumentParser(description='项目结构清理脚本')
    parser.add_argument('--auto-confirm', action='store_true', help='自动确认执行清理操作，无需手动确认')
    return parser.parse_args()

@method is_redundant_file(file_path):
    """检查文件是否为冗余文件"""
    file_name = file_path.name
    
    # 检查是否为重要文件
    if file_name in IMPORTANT_FILES:
        return False
    
    # 检查是否匹配冗余文件模式
    for pattern in REDUNDANT_FILES:
        if re.match(pattern, file_name):
            return True
    
    return False

@method is_redundant_dir(dir_path):
    """检查目录是否为冗余目录"""
    dir_name = dir_path.name
    
    # 核心模块不能删除
    if dir_name in CORE_MODULES:
        return False
    
    # 检查是否为冗余目录
    if dir_name in REDUNDANT_DIRS:
        return True
    
    # 检查是否为临时目录或缓存目录
    if dir_name.startswith('.') and dir_name not in ['.logs', '.git', '.github']:
        # 保留.venv和.logs
        if dir_name in ['.venv', '.logs']:
            return False
        return True
    
    return False

@method find_redundant_files(directory=None):
    """查找冗余文件"""
    if directory is None:
        directory = ROOT_DIR
    
    redundant_files = []
    
    for item in directory.glob('*'):
        if item.is_file():
            if is_redundant_file(item):
                redundant_files.append(item)
        elif item.is_dir():
            # 如果目录本身不是冗余目录，则递归查找内部的冗余文件
            if not is_redundant_dir(item):
                redundant_files.extend(find_redundant_files(item))
    
    return redundant_files

@method find_redundant_dirs(directory=None):
    """查找冗余目录"""
    if directory is None:
        directory = ROOT_DIR
    
    redundant_dirs = []
    
    for item in directory.glob('*'):
        if item.is_dir():
            if is_redundant_dir(item):
                redundant_dirs.append(item)
            else:
                # 递归查找子目录中的冗余目录
                redundant_dirs.extend(find_redundant_dirs(item))
    
    return redundant_dirs

@method should_merge_dir(dir_path):
    """检查目录是否应该被合并"""
    dir_name = dir_path.name
    
    for source, _ in DIRECTORY_MERGES:
        if dir_name == source:
            return True
    
    return False

@method get_merge_target(dir_path):
    """获取目录应该合并到的目标目录"""
    dir_name = dir_path.name
    
    for source, target in DIRECTORY_MERGES:
        if dir_name == source:
            return Path(target)
    
    return None

@method merge_directory(source_dir, target_dir):
    """合并目录，将源目录中的文件移动到目标目录"""
    if not source_dir.exists():
        logger.warning(f"源目录不存在: {source_dir}")
        return
    
    # 确保目标目录存在
    target_dir.mkdir(parents=True, exist_ok=True)
    
    logger.info(f"合并目录: {source_dir} -> {target_dir}")
    
    # 遍历源目录中的所有文件和子目录
    for item in source_dir.glob('*'):
        target_item = target_dir / item.name
        
        if item.is_file():
            if not target_item.exists():
                # 如果是冗余文件，则不移动
                if is_redundant_file(item):
                    logger.info(f"跳过冗余文件: {item}")
                    continue
                    
                # 移动文件
                logger.info(f"移动文件: {item} -> {target_item}")
                try:
                    shutil.copy2(item, target_item)
                except Exception as e:
                    logger.error(f"移动文件失败: {item} -> {target_item}: {e}")
            else:
                logger.warning(f"目标文件已存在，跳过: {target_item}")
        
        elif item.is_dir():
            # 如果是冗余目录，则不移动
            if is_redundant_dir(item):
                logger.info(f"跳过冗余目录: {item}")
                continue
                
            # 递归合并子目录
            merge_directory(item, target_item)

@method update_imports_in_file(file_path, directory_merges):
    """更新文件中的导入路径"""
    if not file_path.exists():
        return
    
    # 只处理Python文件
    if file_path.suffix != '.py':
        return
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
        
        modified = False
        
        # 更新导入路径
        for source, target in directory_merges:
            # 将形如 @from source.xxx @import yyy 的导入更新为 @from target.xxx @import yyy
            source_pattern = fr'from\s+{source}\.(\w+)'
            target_replace = f'@from {target.replace("/", ".")}.\\1'
            
            # 检查替换前的内容是否存在匹配
            if re.search(source_pattern, content):
                new_content = re.sub(source_pattern, target_replace, content)
                if new_content != content:
                    content = new_content
                    modified = True
            
            # 将形如 @import source.xxx 的导入更新为 @import target.xxx
            source_pattern = fr'import\s+{source}\.(\w+)'
            target_replace = f'@import {target.replace("/", ".")}.\\1'
            
            # 检查替换前的内容是否存在匹配
            if re.search(source_pattern, content):
                new_content = re.sub(source_pattern, target_replace, content)
                if new_content != content:
                    content = new_content
                    modified = True
        
        # 如果内容被修改，则写回文件
        if modified:
            logger.info(f"更新文件中的导入路径: {file_path}")
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
    
    except Exception as e:
        logger.error(f"更新文件中的导入路径时出错: {file_path}: {e}")

@method update_imports(directory_merges):
    """更新所有Python文件中的导入路径"""
    logger.info("更新导入路径...")
    
    # 将目录合并映射转换为导入路径更新映射
    import_updates = []
    for source, target in directory_merges:
        import_updates.append((source, target.replace('/', '.')))
    
    # 遍历所有Python文件
    for module in CORE_MODULES:
        module_dir = ROOT_DIR / module
        if not module_dir.exists():
            continue
        
        for file_path in module_dir.glob('**/*.py'):
            update_imports_in_file(file_path, import_updates)
    
    logger.info("导入路径更新完成")

@method print_plan(redundant_files, redundant_dirs, directory_merges):
    """打印清理计划"""
    print("\n===== 项目结构清理计划 =====")
    
    print(f"\n将删除 {len(redundant_files)} 个冗余文件:")
    for file in redundant_files[:10]:
        print(f"  - {file}")
    if len(redundant_files) > 10:
        print(f"  ... 等 {len(redundant_files) - 10} 个文件")
    
    print(f"\n将删除 {len(redundant_dirs)} 个冗余目录:")
    for dir_path in redundant_dirs:
        print(f"  - {dir_path}")
    
    print("\n将合并以下目录:")
    for source, target in directory_merges:
        source_path = ROOT_DIR / source
        if source_path.exists():
            print(f"  - {source} -> {target}")
    
    print("\n此操作将重组项目结构，请确认以上计划无误。")
    print("操作日志将保存至:", log_path)

@method get_confirmation():
    """获取用户确认"""
    while True:
        choice = input("是否继续执行? (y/n): ").strip().lower()
        if choice in ['y', 'yes']:
            return True
        if choice in ['n', 'no']:
            return False
        print("请输入 y 或 n")

@method execute_cleanup(redundant_files, redundant_dirs, directory_merges):
    """执行清理操作"""
    logger.info("开始执行清理操作...")
    
    # 合并目录
    for source, target in directory_merges:
        source_path = ROOT_DIR / source
        target_path = ROOT_DIR / target
        
        if source_path.exists():
            merge_directory(source_path, target_path)
    
    # 删除冗余文件
    for file_path in redundant_files:
        if file_path.exists():
            logger.info(f"删除文件: {file_path}")
            try:
                file_path.unlink()
            except Exception as e:
                logger.error(f"删除文件失败: {file_path}: {e}")
    
    # 删除冗余目录
    for dir_path in redundant_dirs:
        if dir_path.exists():
            logger.info(f"删除目录: {dir_path}")
            try:
                shutil.rmtree(dir_path)
            except Exception as e:
                logger.error(f"删除目录失败: {dir_path}: {e}")
    
    # 更新导入路径
    update_imports(directory_merges)
    
    logger.info("清理操作执行完毕")

@method main():
    """主函数"""
    args = parse_args()
    
    logger.info("开始分析项目结构...")
    
    # 查找冗余文件和目录
    redundant_files = find_redundant_files()
    redundant_dirs = find_redundant_dirs()
    
    # 准备目录合并
    valid_merges = []
    for source, target in DIRECTORY_MERGES:
        source_path = ROOT_DIR / source
        if source_path.exists():
            valid_merges.append((source, target))
    
    # 打印清理计划
    print_plan(redundant_files, redundant_dirs, valid_merges)
    
    # 获取用户确认
    if not args.auto_confirm:
        if not get_confirmation():
            logger.info("用户取消操作，退出")
            return
    else:
        logger.info("自动确认模式，跳过确认步骤")
    
    # 执行清理操作
    execute_cleanup(redundant_files, redundant_dirs, valid_merges)
    
    logger.info(f"项目结构清理完成，日志已保存至: {log_path}")
    print(f"项目结构清理完成，日志已保存至: {log_path}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("用户中断操作，退出")
        print("\n操作已取消")
    except Exception as e:
        logger.error(f"执行过程中出错: {e}")
        print(f"执行过程中出错: {e}")

# 量子基因编码：QE-CLEAN-STRUCT-8D9F2E3B
# 纠缠态：活跃
# 纠缠对象：项目结构清理 <-> 量子系统核心
# 纠缠强度：0.99
# 开发团队：中华 ZhoHo & Claude 