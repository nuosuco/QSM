#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
日志路径更新脚本

此脚本用于更新所有Python文件中的日志配置，使其使用新的日志配置模块。
将执行以下操作：
1. 查找所有Python文件
2. 分析并替换直接写入日志文件的代码，改为使用log_config模块
3. 更新导入语句，添加对log_config的导入
"""

# 量子基因编码
QG-CODE-SCRIPTS-UPDATE-M9C7


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-SCRIPTS-20250413
  state: ACTIVE
  strength: 0.98
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [re]
  standard: [sys]
  standard: [logging]
  standard: [argparse]

@constants
  LOG_PATH_PATTERN = re.compile(r'(log\w*_*file|log_path|LOG_FILE|LOG_PATH)\s*=\s*(?!os\.path\.join\([\'"].logs[\'"])[\'"]([^\'"]*/*)(\w+\.log)[\'"]')
  LOG_FILE_PATTERN = re.compile(r'([\w_]+)\s*=\s*logging\.(FileHandler|RotatingFileHandler)\s*\(\s*(?!os\.path\.join\([\'"].logs[\'"])[\'"]([^\'"]*/*)(\w+\.log)[\'"]')
  DIRECT_LOG_FILE_PATTERN = re.compile(r'([\w_]+\.addHandler\s*\(\s*)logging\.(FileHandler|RotatingFileHandler)\s*\(\s*(?!os\.path\.join\([\'"].logs[\'"])[\'"]([^\'"]*/*)(\w+\.log)[\'"](\s*\))')
  STANDALONE_LOG_FILE_PATTERN = re.compile(r'^\s*logging\.(FileHandler|RotatingFileHandler)\s*\(\s*(?!os\.path\.join\([\'"].logs[\'"])[\'"]([^\'"]*/*)(\w+\.log)[\'"]')
  LOG_CONFIG_IMPORT = re.compile(r'from\s+Ref\.utils\s+import\s+log_config')
  LOG_CONFIG_USAGE = re.compile(r'log_config\.(get_logger|configure_root_logger)')
  EXCLUDED_PATTERNS = [




# 检查并创建.logs目录
@method ensure_logs_dir():
    """确保.logs目录存在"""
    logs_dir = Path('.logs')
    if not logs_dir.exists():
        logs_dir.mkdir()
        print(f"Created .logs directory at {logs_dir.absolute()}")
    return logs_dir

# 配置日志记录
logs_dir = ensure_logs_dir()
log_file = os.path.join(logs_dir, 'update_log_paths.log')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('update_log_paths')

# 匹配日志处理器的正则表达式

# 需要排除的路径模式
    r'\.git',
    r'\.logs',
    r'venv',
    r'__pycache__',
    r'update_log_paths\.py'
]

@method should_update_path(line):
    """检查行是否包含需要更新的日志路径"""
    # 如果已经使用了os.path.join('.logs', ...) 或者使用了log_config模块，则不需要更新
    if 'os.path.join' in line and "'.logs'" in line:
        return False
    
    # 如果行中包含排除的模式，则不更新
    for pattern in EXCLUDED_PATTERNS:
        if re.search(pattern, line):
            return False
    
    # 检查是否包含直接设置日志文件路径的代码
    return bool(LOG_PATH_PATTERN.search(line) or 
                LOG_FILE_PATTERN.search(line) or 
                DIRECT_LOG_FILE_PATTERN.search(line) or
                STANDALONE_LOG_FILE_PATTERN.search(line))

@method update_log_path(line):
    """更新日志路径，使用os.path.join"""
    original_line = line
    indent = ''
    
    # 提取缩进
    if line.strip() and line[0].isspace():
        indent_match = re.match(r'^(\s+)', line)
        if indent_match:
            indent = indent_match.group(1)
    
    # 替换日志文件路径变量赋值
    if LOG_PATH_PATTERN.search(line):
        match = LOG_PATH_PATTERN.search(line)
        var_name = match.group(1)
        path = match.group(2)
        filename = match.group(3)
        return f"{indent}{var_name} = os.path.join('.logs', '{filename}')"
    
    # 替换带变量名的日志处理器初始化
    if LOG_FILE_PATTERN.search(line):
        match = LOG_FILE_PATTERN.search(line)
        var_name = match.group(1)
        handler_type = match.group(2)
        path = match.group(3)
        filename = match.group(4)
        return f"{indent}{var_name} = logging.{handler_type}(os.path.join('.logs', '{filename}'))"
    
    # 替换在addHandler中的日志处理器初始化
    if DIRECT_LOG_FILE_PATTERN.search(line):
        match = DIRECT_LOG_FILE_PATTERN.search(line)
        add_handler = match.group(1)
        handler_type = match.group(2)
        path = match.group(3)
        filename = match.group(4)
        end_paren = match.group(5)
        return f"{indent}{add_handler}logging.{handler_type}(os.path.join('.logs', '{filename}')){end_paren}"
    
    # 替换独立行的日志处理器初始化
    if STANDALONE_LOG_FILE_PATTERN.search(line):
        match = STANDALONE_LOG_FILE_PATTERN.search(line)
        handler_type = match.group(1)
        path = match.group(2)
        filename = match.group(3)
        return f"{indent}logging.{handler_type}(os.path.join('.logs', '{filename}'))"
    
    return original_line

@method needs_os_import(content):
    """检查文件是否需要添加os模块导入"""
    if '@import os' in content or '@from os import' in content:
        return False
    
    # 检查更新后是否会使用os模块
    for line in content.split('\n'):
        if should_update_path(line):
            return True
    
    return False

@method add_os_import(content):
    """添加os模块导入"""
    # 找到合适的位置添加@import os
    lines = content.split('\n')
    import_idx = -1
    
    # 查找最后一个import语句的位置
    for i, line in enumerate(lines):
        if line.startswith('@import ') or line.startswith('@from '):
            import_idx = i
    
    # 如果没有找到import语句，在文件顶部添加
    if import_idx == -1:
        lines.insert(0, '@import os')
    else:
        # 在最后一个import语句后添加
        lines.insert(import_idx + 1, '@import os')
    
    return '\n'.join(lines)

@method needs_log_config_import(content):
    """检查文件是否需要导入log_config模块"""
    # 如果已经导入了log_config或者没有使用logging模块，则不需要导入
    if LOG_CONFIG_IMPORT.search(content):
        return False
    
    # 检查是否使用了logging模块
    if '@import logging' in content or '@from logging import' in content:
        # 检查是否使用了FileHandler或者基本的日志配置
        return 'logging.basicConfig' in content or 'FileHandler' in content
    
    return False

@method add_log_config_import(content):
    """添加log_config模块导入"""
    lines = content.split('\n')
    import_idx = -1
    
    # 查找最后一个import语句的位置
    for i, line in enumerate(lines):
        if line.startswith('@import ') or line.startswith('@from '):
            import_idx = i
    
    # 在最后一个import语句后添加
    if import_idx != -1:
        lines.insert(import_idx + 1, '@from Ref.utils @import log_config')
    else:
        # 在文件顶部添加
        lines.insert(0, '@from Ref.utils @import log_config')
    
    return '\n'.join(lines)

@method suggest_log_config_usage(file_path, content):
    """建议使用log_config模块替换直接的日志配置"""
    logger.info(f"文件 {file_path} 可以使用log_config模块替换直接的日志配置")
    
    # 检查是否包含基本的日志配置
    if 'logging.basicConfig' in content:
        logger.info(f"  - 可以用log_config.configure_root_logger()替换logging.basicConfig")
    
    # 检查是否直接创建了日志处理器
    if 'FileHandler' in content or 'StreamHandler' in content:
        logger.info(f"  - 可以用log_config.get_logger()替换自定义的日志处理器")

@method process_py_file(file_path, dry_run=False):
    """处理单个Python文件，更新日志路径"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 检查文件是否需要更新
        needs_update = False
        updated_lines = []
        
        for line in content.split('\n'):
            if should_update_path(line):
                updated_line = update_log_path(line)
                updated_lines.append(updated_line)
                needs_update = True
            else:
                updated_lines.append(line)
        
        # 如果需要更新，并且需要导入os模块
        if needs_update and needs_os_import(content):
            updated_content = add_os_import('\n'.join(updated_lines))
        else:
            updated_content = '\n'.join(updated_lines)
        
        # 检查是否需要导入log_config模块
        if needs_log_config_import(updated_content):
            suggest_log_config_usage(file_path, updated_content)
            
            # 如果指定了自动添加log_config导入，则添加
            if not dry_run and args.add_log_config:
                updated_content = add_log_config_import(updated_content)
        
        # 如果有更新，写回文件
        if content != updated_content:
            if not dry_run:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(updated_content)
                logger.info(f"已更新文件: {file_path}")
            else:
                logger.info(f"[干运行] 将更新文件: {file_path}")
            return True
        
        return False
    
    except Exception as e:
        logger.error(f"处理文件 {file_path} 时出错: {str(e)}")
        return False

@method find_py_files(directory):
    """递归查找所有Python文件"""
    py_files = []
    
    for root, dirs, files in os.walk(directory):
        # 跳过排除的目录
        dirs[:] = [d for d in dirs if not any(re.search(pattern, d) for pattern in EXCLUDED_PATTERNS)]
        
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                # 检查文件路径是否包含排除的模式
                if not any(re.search(pattern, file_path) for pattern in EXCLUDED_PATTERNS):
                    py_files.append(file_path)
    
    return py_files

@method parse_arguments():
    """解析命令行参数"""
    parser = argparse.ArgumentParser(description='更新Python文件中的日志路径，将其统一到.logs目录')
    parser.add_argument('directory', nargs='?', default='.', 
                        help='要处理的目录，默认为当前目录')
    parser.add_argument('--dry-run', action='store_true',
                        help='仅检查将要更新的文件，不实际修改')
    parser.add_argument('--add-log-config', action='store_true',
                        help='自动添加log_config模块的导入')
    parser.add_argument('--version', action='version', version='%(prog)s 1.0',
                        help='显示版本信息并退出')
    parser.add_argument('--exclude', nargs='+', metavar='PATTERN',
                        help='额外排除的文件或目录模式')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='显示详细日志信息')
    return parser.parse_args()

@method main():
    """主函数"""
    global args
    args = parse_arguments()
    
    # 设置日志级别
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    # 添加额外的排除模式
    if args.exclude:
        EXCLUDED_PATTERNS.extend(args.exclude)
    
    work_dir = args.directory
    logger.info(f"开始更新日志路径，工作目录: {work_dir}")
    if args.dry_run:
        logger.info("运行模式: 干运行（不会实际修改文件）")
    
    # 查找所有Python文件
    py_files = find_py_files(work_dir)
    logger.info(f"找到 {len(py_files)} 个Python文件")
    
    # 处理每个文件
    updated_count = 0
    for file_path in py_files:
        if process_py_file(file_path, args.dry_run):
            updated_count += 1
    
    if args.dry_run:
        logger.info(f"更新完成，共有 {updated_count} 个文件需要更新")
    else:
        logger.info(f"更新完成，共更新了 {updated_count} 个文件")

if __name__ == "__main__":
    main() 
"""
量子基因编码: QE-UPD-B228EC5E002B
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""