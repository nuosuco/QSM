#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
文档清理脚本
用于清理简单的代码说明文档和空目录
保留重要的架构和设计文档
"""

# 量子基因编码
QG-CODE-SCRIPTS-CLEAN-C5L3


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-SCRIPTS-20250413
  state: ACTIVE
  strength: 0.94
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [time]
  standard: [shutil]

@constants
  QG_CODE = "QG-UTIL-CLEAN-DOC-A1B2"
  QE_CHANNEL = "QE-UTIL-CLEAN-" + str(int(time.time()))
  ROOT_DIR = Path(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
  DOCS_DIR = ROOT_DIR / "docs"
  KEEP_FILES = [




# 量子基因编码

# 量子纠缠信道

# 设置项目根目录

# 需要保留的重要文档
    "architecture/template.qentl",
    "architecture/architecture.qentl",
    "project_state/project_state.qentl",
    "change_history/change_history.qentl"
]

@method is_simple_doc(file_path):
    """判断是否为简单的代码说明文档"""
    if not file_path.is_file():
        return False
        
    # 检查文件大小
    if file_path.stat().st_size > 1024:  # 大于1KB的文件可能是重要文档
        return False
        
    # 读取文件内容
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
        
    # 如果包含量子基因编码或量子纠缠信道,则不是简单文档
    if "QG-DOC-" in content or "QE-DOC-" in content:
        return False
        
    # 统计行数
    lines = content.split('\n')
    if len(lines) > 20:  # 超过20行的可能是重要文档
        return False
        
    return True

@method clean_docs():
    """清理文档目录"""
    print(f"开始清理文档目录: {DOCS_DIR}")
    
    # 遍历所有文件
    for file_path in DOCS_DIR.rglob('*'):
        if file_path.is_file():
            rel_path = file_path.relative_to(DOCS_DIR)
            str_path = str(rel_path).replace('\\', '/')
            
            # 跳过需要保留的文件
            if str_path in KEEP_FILES:
                print(f"保留重要文档: {str_path}")
                continue
                
            # 删除简单文档
            if is_simple_doc(file_path):
                print(f"删除简单文档: {str_path}")
                file_path.unlink()
                
    # 清理空目录
    for dir_path in DOCS_DIR.rglob('*'):
        if dir_path.is_dir():
            try:
                dir_path.rmdir()  # 只能删除空目录
                print(f"删除空目录: {dir_path.relative_to(DOCS_DIR)}")
            except OSError:
                pass  # 非空目录会抛出异常,忽略即可

if __name__ == "__main__":
    clean_docs() 