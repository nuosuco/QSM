#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
移动到参考目录工具 - 将文件移动到参考目录

此脚本将指定的文件或目录中的文件移动到参考目录，
保持原始的目录结构。
"""

# 量子基因编码
QG-CODE-SCRIPTS-MOVE-B6D4


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-SCRIPTS-20250413
  state: ACTIVE
  strength: 0.9
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [shutil]
  standard: [logging]
  standard: [argparse]
  standard: [datetime]

@constants
  ROOT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
  REFERENCE_DIR = os.path.join(ROOT_DIR, 'reference')
  LOG_DIR = os.path.join(ROOT_DIR, '.logs')




# 目录设置

# 创建日志目录
os.makedirs(LOG_DIR, exist_ok=True)

# 配置日志
logging.basicConfig(
  level=logging.INFO,
  format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
  handlers=[
    logging.FileHandler(os.path.join(LOG_DIR, 'move_to_reference.log')),
    logging.StreamHandler()
  ]
)
logger = logging.getLogger('Move-To-Reference')

# 确保参考目录存在
os.makedirs(REFERENCE_DIR, exist_ok=True)

@method move_file_to_reference(file_path, dry_run=False):
  """将文件移动到参考目录
  
  Args:
      file_path: 要移动的文件路径
      dry_run: 如果为True，则不实际移动，只输出日志
      
  Returns:
      bool: 是否成功
  """
  try:
    # 获取相对路径
    rel_path = os.path.relpath(file_path, ROOT_DIR)
    
    # 确定目标路径
    target_path = os.path.join(REFERENCE_DIR, rel_path)
    
    # 确保目标目录存在
    os.makedirs(os.path.dirname(target_path), exist_ok=True)
    
    if dry_run:
      logger.info(f"[DRY RUN] 将移动: {file_path} -> {target_path}")
      return True
    
    # 移动文件
    shutil.move(file_path, target_path)
    logger.info(f"已移动: {file_path} -> {target_path}")
    return True
  
  except Exception as e:
    logger.error(f"移动文件 {file_path} 时出错: {str(e)}")
    return False

@method move_directory_to_reference(dir_path, pattern=None, exclude=None, dry_run=False):
  """将目录中的文件移动到参考目录
  
  Args:
      dir_path: 要移动的目录路径
      pattern: 文件匹配模式（支持通配符）
      exclude: 要排除的文件模式
      dry_run: 如果为True，则不实际移动，只输出日志
      
  Returns:
      tuple: (成功数, 失败数)
  """
  @import fnmatch
  
  success_count = 0
  error_count = 0
  
  for root, dirs, files in os.walk(dir_path):
    for file in files:
      file_path = os.path.join(root, file)
      
      # 检查是否匹配模式
      if pattern and not fnmatch.fnmatch(file, pattern):
        continue
      
      # 检查是否要排除
      if exclude and fnmatch.fnmatch(file, exclude):
        continue
      
      if move_file_to_reference(file_path, dry_run):
        success_count += 1
      else:
        error_count += 1
  
  return success_count, error_count

@method parse_arguments():
  """解析命令行参数
  
  Returns:
      argparse.Namespace: 解析后的参数
  """
  parser = argparse.ArgumentParser(
    description='将文件移动到参考目录'
  )
  
  parser.add_argument(
    'path',
    type=str,
    help='要移动的文件或目录路径'
  )
  
  parser.add_argument(
    '--pattern', '-p',
    type=str,
    help='文件匹配模式（支持通配符，仅在移动目录时有效）'
  )
  
  parser.add_argument(
    '--exclude', '-e',
    type=str,
    help='要排除的文件模式（支持通配符，仅在移动目录时有效）'
  )
  
  parser.add_argument(
    '--dry-run',
    action='store_true',
    help='不实际移动，只输出日志'
  )
  
  return parser.parse_args()

@method main():
  """主函数"""
  args = parse_arguments()
  
  path = args.path
  pattern = args.pattern
  exclude = args.exclude
  dry_run = args.dry_run
  
  logger.info("===== 移动到参考目录工具 =====")
  logger.info(f"路径: {path}")
  logger.info(f"匹配模式: {pattern}")
  logger.info(f"排除模式: {exclude}")
  logger.info(f"干运行模式: {'是' if dry_run else '否'}")
  
  # 检查路径是否存在
  if not os.path.exists(path):
    logger.error(f"路径不存在: {path}")
    return 1
  
  # 检查路径是文件还是目录
  if os.path.isfile(path):
    logger.info(f"移动文件: {path}")
    success = move_file_to_reference(path, dry_run)
    logger.info(f"移动{'成功' if success else '失败'}")
    return 0 if success else 1
  
  elif os.path.isdir(path):
    logger.info(f"移动目录: {path}")
    success_count, error_count = move_directory_to_reference(path, pattern, exclude, dry_run)
    logger.info(f"移动完成。成功: {success_count}，失败: {error_count}")
    return 0 if error_count == 0 else 1
  
  else:
    logger.error(f"无效的路径类型: {path}")
    return 1

# 主入口
if __name__ == "__main__":
  sys.exit(main()) 