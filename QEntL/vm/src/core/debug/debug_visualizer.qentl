/**
 * @file debug_visualizer.qentl
 * @brief QEntL虚拟机调试信息可视化器
 * 
 * 量子基因编码: QGC-VM-DEBUGVIS-2024062801
 * 量子纠缠信道: QEC-VM-DEBUG-03
 */

import { Debugger, BreakpointType, VariableValue } from "./debugger.qentl";
import { Logger, LogLevel } from "../os_interface/logger.qentl";
import { FileSystem } from "../os_interface/file_system.qentl";

// 可视化模式
export enum VisualizationMode {
    // 文本模式 (控制台)
    TEXT,
    // HTML模式 (网页)
    HTML,
    // JSON模式 (数据导出)
    JSON
}

// 调试信息可视化器类
export class DebugVisualizer {
    // 关联的调试器
    private debugger: Debugger;
    
    // 日志记录器
    private logger: Logger;
    
    // 文件系统接口
    private fileSystem: FileSystem;
    
    // 可视化模式
    private mode: VisualizationMode;
    
    // 输出路径
    private outputPath: string;
    
    // 构造函数
    constructor(
        debugger_: Debugger,
        logger: Logger,
        fileSystem: FileSystem,
        mode: VisualizationMode = VisualizationMode.TEXT,
        outputPath: string = ""
    ) {
        this.debugger = debugger_;
        this.logger = logger;
        this.fileSystem = fileSystem;
        this.mode = mode;
        this.outputPath = outputPath;
    }
    
    // 生成断点可视化
    public visualizeBreakpoints(): string {
        const breakpoints = this.debugger.getAllBreakpoints();
        
        if (breakpoints.length === 0) {
            return this.formatOutput("当前没有设置断点。", "breakpoints");
        }
        
        let output = "";
        
        switch (this.mode) {
            case VisualizationMode.TEXT:
                output = "当前断点:\n";
                for (const breakpoint of breakpoints) {
                    output += `  ${breakpoint.toString()}\n`;
                }
                break;
                
            case VisualizationMode.HTML:
                output = "<h2>断点列表</h2>\n";
                output += "<table border='1'>\n";
                output += "  <tr><th>ID</th><th>类型</th><th>位置</th><th>状态</th><th>命中次数</th><th>条件</th></tr>\n";
                
                for (const breakpoint of breakpoints) {
                    let typeStr = "";
                    switch (breakpoint.type) {
                        case BreakpointType.SOURCE_LOCATION:
                            typeStr = "源码";
                            break;
                        case BreakpointType.MEMORY_ADDRESS:
                            typeStr = "内存";
                            break;
                        case BreakpointType.INSTRUCTION_ADDRESS:
                            typeStr = "指令";
                            break;
                        case BreakpointType.SYMBOL:
                            typeStr = "符号";
                            break;
                        case BreakpointType.CONDITIONAL:
                            typeStr = "条件";
                            break;
                    }
                    
                    const status = breakpoint.enabled ? 
                        "<span style='color:green'>启用</span>" : 
                        "<span style='color:red'>禁用</span>";
                    
                    const hitCountInfo = breakpoint.hitCountLimit > 0 ? 
                        `${breakpoint.hitCount}/${breakpoint.hitCountLimit}` : 
                        `${breakpoint.hitCount}`;
                    
                    output += "  <tr>\n";
                    output += `    <td>${breakpoint.id}</td>\n`;
                    output += `    <td>${typeStr}</td>\n`;
                    output += `    <td>${breakpoint.location}</td>\n`;
                    output += `    <td>${status}</td>\n`;
                    output += `    <td>${hitCountInfo}</td>\n`;
                    output += `    <td>${breakpoint.condition || ""}</td>\n`;
                    output += "  </tr>\n";
                }
                
                output += "</table>\n";
                break;
                
            case VisualizationMode.JSON:
                const breakpointsData = breakpoints.map(bp => {
                    return {
                        id: bp.id,
                        type: bp.type,
                        location: bp.location,
                        enabled: bp.enabled,
                        hitCount: bp.hitCount,
                        hitCountLimit: bp.hitCountLimit,
                        condition: bp.condition
                    };
                });
                
                output = JSON.stringify({
                    breakpoints: breakpointsData
                }, null, 2);
                break;
        }
        
        return this.formatOutput(output, "breakpoints");
    }
    
    // 生成变量可视化
    public visualizeVariables(): string {
        const localVars = this.debugger.getLocalVariables();
        const globalVars = this.debugger.getGlobalVariables();
        
        if (localVars.length === 0 && globalVars.length === 0) {
            return this.formatOutput("当前没有可用的变量。", "variables");
        }
        
        let output = "";
        
        switch (this.mode) {
            case VisualizationMode.TEXT:
                if (localVars.length > 0) {
                    output += "局部变量:\n";
                    for (const variable of localVars) {
                        output += `  ${variable.toString()}\n`;
                    }
                }
                
                if (globalVars.length > 0) {
                    if (output) output += "\n";
                    output += "全局变量:\n";
                    for (const variable of globalVars) {
                        output += `  ${variable.toString()}\n`;
                    }
                }
                break;
                
            case VisualizationMode.HTML:
                if (localVars.length > 0) {
                    output += "<h2>局部变量</h2>\n";
                    output += this.variablesToHtmlTable(localVars);
                }
                
                if (globalVars.length > 0) {
                    output += "<h2>全局变量</h2>\n";
                    output += this.variablesToHtmlTable(globalVars);
                }
                break;
                
            case VisualizationMode.JSON:
                const variablesData = {
                    local: localVars.map(this.variableToJsonObject),
                    global: globalVars.map(this.variableToJsonObject)
                };
                
                output = JSON.stringify({
                    variables: variablesData
                }, null, 2);
                break;
        }
        
        return this.formatOutput(output, "variables");
    }
    
    // 生成调用栈可视化
    public visualizeCallStack(): string {
        const stack = this.debugger.getCallStack();
        
        if (stack.length === 0) {
            return this.formatOutput("调用栈为空。", "callstack");
        }
        
        let output = "";
        
        switch (this.mode) {
            case VisualizationMode.TEXT:
                output = "调用栈:\n";
                for (let i = 0; i < stack.length; i++) {
                    output += `  #${i}: ${stack[i]}\n`;
                }
                break;
                
            case VisualizationMode.HTML:
                output = "<h2>调用栈</h2>\n";
                output += "<table border='1'>\n";
                output += "  <tr><th>帧</th><th>函数</th></tr>\n";
                
                for (let i = 0; i < stack.length; i++) {
                    output += "  <tr>\n";
                    output += `    <td>#${i}</td>\n`;
                    output += `    <td>${stack[i]}</td>\n`;
                    output += "  </tr>\n";
                }
                
                output += "</table>\n";
                break;
                
            case VisualizationMode.JSON:
                const callstackData = stack.map((frame, index) => {
                    return {
                        frame: index,
                        function: frame
                    };
                });
                
                output = JSON.stringify({
                    callstack: callstackData
                }, null, 2);
                break;
        }
        
        return this.formatOutput(output, "callstack");
    }
    
    // 生成源码可视化
    public visualizeSource(): string {
        const sourceLocation = this.debugger.getCurrentSourceLocation();
        
        if (!sourceLocation) {
            return this.formatOutput("当前没有活动的源文件位置。", "source");
        }
        
        const sourceLines = this.debugger.viewSource(
            sourceLocation.filePath,
            sourceLocation.currentLine,
            Math.max(5, Math.floor((sourceLocation.endLine - sourceLocation.startLine) / 2))
        );
        
        if (sourceLines.length === 0) {
            return this.formatOutput(`无法读取文件 ${sourceLocation.filePath}`, "source");
        }
        
        let output = "";
        
        switch (this.mode) {
            case VisualizationMode.TEXT:
                output = `源文件: ${sourceLocation.filePath}\n`;
                output += sourceLines.join("\n");
                break;
                
            case VisualizationMode.HTML:
                output = `<h2>源文件: ${sourceLocation.filePath}</h2>\n`;
                output += "<pre class='source'>\n";
                
                for (const line of sourceLines) {
                    if (line.startsWith(">")) {
                        output += `<span class='current-line'>${this.escapeHtml(line)}</span>\n`;
                    } else {
                        output += `${this.escapeHtml(line)}\n`;
                    }
                }
                
                output += "</pre>\n";
                break;
                
            case VisualizationMode.JSON:
                const sourceData = {
                    filePath: sourceLocation.filePath,
                    currentLine: sourceLocation.currentLine,
                    startLine: sourceLocation.startLine,
                    endLine: sourceLocation.endLine,
                    lines: sourceLines
                };
                
                output = JSON.stringify({
                    source: sourceData
                }, null, 2);
                break;
        }
        
        return this.formatOutput(output, "source");
    }
    
    // 生成完整调试状态的可视化
    public visualizeDebugState(): string {
        const state = this.debugger.getStateString();
        
        let output = "";
        
        switch (this.mode) {
            case VisualizationMode.TEXT:
                output = `调试器状态: ${state}\n\n`;
                output += this.visualizeSource();
                output += "\n";
                output += this.visualizeCallStack();
                output += "\n";
                output += this.visualizeVariables();
                output += "\n";
                output += this.visualizeBreakpoints();
                break;
                
            case VisualizationMode.HTML:
                output = `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>QEntL调试器状态</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        h1 { color: #333; }
        h2 { color: #666; margin-top: 20px; }
        pre.source { background-color: #f5f5f5; padding: 10px; border: 1px solid #ddd; }
        span.current-line { background-color: #ffe0e0; display: block; }
        table { border-collapse: collapse; margin-bottom: 20px; }
        th { background-color: #f0f0f0; }
        th, td { padding: 5px 10px; text-align: left; }
    </style>
</head>
<body>
    <h1>QEntL调试器状态: ${state}</h1>
    
    ${this.visualizeSource()}
    
    ${this.visualizeCallStack()}
    
    ${this.visualizeVariables()}
    
    ${this.visualizeBreakpoints()}
</body>
</html>`;
                break;
                
            case VisualizationMode.JSON:
                output = JSON.stringify({
                    state: state,
                    source: this.debugger.getCurrentSourceLocation(),
                    callstack: this.debugger.getCallStack(),
                    variables: {
                        local: this.debugger.getLocalVariables().map(this.variableToJsonObject),
                        global: this.debugger.getGlobalVariables().map(this.variableToJsonObject)
                    },
                    breakpoints: this.debugger.getAllBreakpoints().map(bp => ({
                        id: bp.id,
                        type: bp.type,
                        location: bp.location,
                        enabled: bp.enabled,
                        hitCount: bp.hitCount,
                        hitCountLimit: bp.hitCountLimit,
                        condition: bp.condition
                    }))
                }, null, 2);
                break;
        }
        
        return this.formatOutput(output, "debug_state");
    }
    
    // 保存可视化结果到文件
    public saveVisualization(content: string, filename: string): boolean {
        try {
            if (!this.outputPath) {
                this.logger.log(LogLevel.ERROR, "未设置输出路径，无法保存可视化结果");
                return false;
            }
            
            const filePath = this.outputPath + "/" + filename;
            this.fileSystem.writeFile(filePath, content);
            this.logger.log(LogLevel.INFO, `已保存可视化结果到 ${filePath}`);
            return true;
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `保存可视化结果失败: ${error}`);
            return false;
        }
    }
    
    // 设置可视化模式
    public setMode(mode: VisualizationMode): void {
        this.mode = mode;
    }
    
    // 设置输出路径
    public setOutputPath(path: string): void {
        this.outputPath = path;
    }
    
    // 辅助方法：格式化输出内容
    private formatOutput(content: string, type: string): string {
        // 对于HTML和JSON模式，直接返回内容
        if (this.mode === VisualizationMode.HTML || this.mode === VisualizationMode.JSON) {
            return content;
        }
        
        // 对于文本模式，添加分隔线
        return `===== ${type.toUpperCase()} =====\n${content}\n==================\n`;
    }
    
    // 辅助方法：变量数组转HTML表格
    private variablesToHtmlTable(variables: VariableValue[]): string {
        let output = "<table border='1'>\n";
        output += "  <tr><th>名称</th><th>类型</th><th>值</th><th>地址</th></tr>\n";
        
        for (const variable of variables) {
            const addressStr = variable.address !== undefined ? 
                `0x${variable.address.toString(16)}` : "";
            
            let valueStr = "";
            try {
                if (variable.value === null) {
                    valueStr = "<em>null</em>";
                } else if (typeof variable.value === "object") {
                    valueStr = `<pre>${this.escapeHtml(JSON.stringify(variable.value, null, 2))}</pre>`;
                } else {
                    valueStr = String(variable.value);
                }
            } catch (error) {
                valueStr = "<em>无法显示</em>";
            }
            
            output += "  <tr>\n";
            output += `    <td>${this.escapeHtml(variable.name)}</td>\n`;
            output += `    <td>${this.escapeHtml(variable.type)}</td>\n`;
            output += `    <td>${valueStr}</td>\n`;
            output += `    <td>${addressStr}</td>\n`;
            output += "  </tr>\n";
        }
        
        output += "</table>\n";
        return output;
    }
    
    // 辅助方法：变量转JSON对象
    private variableToJsonObject(variable: VariableValue): object {
        return {
            name: variable.name,
            type: variable.type,
            value: variable.value,
            address: variable.address
        };
    }
    
    // 辅助方法：HTML转义
    private escapeHtml(text: string): string {
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
} 