/**
 * @file debug_config.qentl
 * @brief QEntL虚拟机调试器配置管理器
 * 
 * 量子基因编码: QGC-VM-DEBUGCONFIG-2024062801
 * 量子纠缠信道: QEC-VM-DEBUG-04
 */

import { FileSystem } from "../os_interface/file_system.qentl";
import { Logger, LogLevel } from "../os_interface/logger.qentl";

// 调试器配置类
export class DebugConfig {
    // 默认配置
    private static readonly DEFAULT_CONFIG: DebuggerOptions = {
        // 基本设置
        debugInfoEnabled: true,            // 是否启用调试信息
        sourceMapEnabled: true,            // 是否启用源码映射
        symbolsEnabled: true,              // 是否启用符号表
        autoStart: false,                  // 是否自动启动调试目标
        
        // 断点设置
        breakOnStart: true,                // 是否在启动时暂停
        breakOnExit: false,                // 是否在退出时暂停
        breakOnException: true,            // 是否在异常时暂停
        breakOnAssert: true,               // 是否在断言失败时暂停
        ignoreLibraryFunctions: true,      // 是否忽略库函数中的断点
        
        // 显示设置
        showLocalVariables: true,          // 是否显示局部变量
        showGlobalVariables: true,         // 是否显示全局变量
        showRegisters: false,              // 是否显示寄存器
        showMemoryAddresses: true,         // 是否显示内存地址
        maxStringLength: 100,              // 字符串显示的最大长度
        maxArrayElements: 50,              // 数组显示的最大元素数量
        maxObjectProperties: 50,           // 对象显示的最大属性数量
        maxCallStackDepth: 20,             // 调用栈显示的最大深度
        
        // 性能设置
        maxBreakpoints: 100,               // 最大断点数量
        maxWatchExpressions: 20,           // 最大监视表达式数量
        maxEvaluationTime: 1000,           // 表达式求值的最大时间（毫秒）
        
        // 文件路径设置
        debugInfoPath: "",                 // 调试信息文件路径
        sourcePath: [],                    // 源码搜索路径
        outputPath: "debug_output",        // 调试输出路径
        
        // 高级设置
        usePrettyPrinters: true,           // 是否使用自定义格式化器
        allowHotReload: false,             // 是否允许热重载
        evaluationSafeMode: true,          // 表达式求值是否使用安全模式
        enableQuantumDebug: false          // 是否启用量子状态调试
    };
    
    // 当前配置
    private config: DebuggerOptions;
    
    // 文件系统接口
    private fileSystem: FileSystem;
    
    // 日志记录器
    private logger: Logger;
    
    // 配置文件路径
    private configPath: string;
    
    // 构造函数
    constructor(
        fileSystem: FileSystem,
        logger: Logger,
        configPath: string = "debug_config.json"
    ) {
        this.fileSystem = fileSystem;
        this.logger = logger;
        this.configPath = configPath;
        this.config = { ...DebugConfig.DEFAULT_CONFIG };
    }
    
    // 加载配置
    public load(): boolean {
        try {
            this.logger.log(LogLevel.INFO, `加载调试器配置: ${this.configPath}`);
            
            // 检查配置文件是否存在
            if (!this.fileSystem.fileExists(this.configPath)) {
                this.logger.log(LogLevel.WARN, "配置文件不存在，使用默认配置");
                return false;
            }
            
            // 读取配置文件
            const configContent = this.fileSystem.readFile(this.configPath);
            const loadedConfig = JSON.parse(configContent);
            
            // 合并配置
            this.config = {
                ...DebugConfig.DEFAULT_CONFIG,
                ...loadedConfig
            };
            
            this.logger.log(LogLevel.INFO, "成功加载调试器配置");
            return true;
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `加载配置失败: ${error}`);
            this.config = { ...DebugConfig.DEFAULT_CONFIG };
            return false;
        }
    }
    
    // 保存配置
    public save(): boolean {
        try {
            this.logger.log(LogLevel.INFO, `保存调试器配置: ${this.configPath}`);
            
            // 序列化配置
            const configContent = JSON.stringify(this.config, null, 2);
            
            // 写入配置文件
            this.fileSystem.writeFile(this.configPath, configContent);
            
            this.logger.log(LogLevel.INFO, "成功保存调试器配置");
            return true;
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `保存配置失败: ${error}`);
            return false;
        }
    }
    
    // 获取配置值
    public get<K extends keyof DebuggerOptions>(key: K): DebuggerOptions[K] {
        return this.config[key];
    }
    
    // 设置配置值
    public set<K extends keyof DebuggerOptions>(key: K, value: DebuggerOptions[K]): void {
        this.config[key] = value;
    }
    
    // 重置为默认配置
    public reset(): void {
        this.config = { ...DebugConfig.DEFAULT_CONFIG };
    }
    
    // 获取完整配置
    public getAll(): DebuggerOptions {
        return { ...this.config };
    }
    
    // 应用新配置
    public apply(newConfig: Partial<DebuggerOptions>): void {
        this.config = {
            ...this.config,
            ...newConfig
        };
    }
    
    // 获取配置描述
    public getOptionDescription(key: keyof DebuggerOptions): string {
        const descriptions: Record<keyof DebuggerOptions, string> = {
            // 基本设置
            debugInfoEnabled: "是否启用调试信息",
            sourceMapEnabled: "是否启用源码映射",
            symbolsEnabled: "是否启用符号表",
            autoStart: "是否自动启动调试目标",
            
            // 断点设置
            breakOnStart: "是否在启动时暂停",
            breakOnExit: "是否在退出时暂停",
            breakOnException: "是否在异常时暂停",
            breakOnAssert: "是否在断言失败时暂停",
            ignoreLibraryFunctions: "是否忽略库函数中的断点",
            
            // 显示设置
            showLocalVariables: "是否显示局部变量",
            showGlobalVariables: "是否显示全局变量",
            showRegisters: "是否显示寄存器",
            showMemoryAddresses: "是否显示内存地址",
            maxStringLength: "字符串显示的最大长度",
            maxArrayElements: "数组显示的最大元素数量",
            maxObjectProperties: "对象显示的最大属性数量",
            maxCallStackDepth: "调用栈显示的最大深度",
            
            // 性能设置
            maxBreakpoints: "最大断点数量",
            maxWatchExpressions: "最大监视表达式数量",
            maxEvaluationTime: "表达式求值的最大时间（毫秒）",
            
            // 文件路径设置
            debugInfoPath: "调试信息文件路径",
            sourcePath: "源码搜索路径",
            outputPath: "调试输出路径",
            
            // 高级设置
            usePrettyPrinters: "是否使用自定义格式化器",
            allowHotReload: "是否允许热重载",
            evaluationSafeMode: "表达式求值是否使用安全模式",
            enableQuantumDebug: "是否启用量子状态调试"
        };
        
        return descriptions[key] || "无描述";
    }
}

// 调试器配置选项接口
export interface DebuggerOptions {
    // 基本设置
    debugInfoEnabled: boolean;            // 是否启用调试信息
    sourceMapEnabled: boolean;            // 是否启用源码映射
    symbolsEnabled: boolean;              // 是否启用符号表
    autoStart: boolean;                   // 是否自动启动调试目标
    
    // 断点设置
    breakOnStart: boolean;                // 是否在启动时暂停
    breakOnExit: boolean;                 // 是否在退出时暂停
    breakOnException: boolean;            // 是否在异常时暂停
    breakOnAssert: boolean;               // 是否在断言失败时暂停
    ignoreLibraryFunctions: boolean;      // 是否忽略库函数中的断点
    
    // 显示设置
    showLocalVariables: boolean;          // 是否显示局部变量
    showGlobalVariables: boolean;         // 是否显示全局变量
    showRegisters: boolean;               // 是否显示寄存器
    showMemoryAddresses: boolean;         // 是否显示内存地址
    maxStringLength: number;              // 字符串显示的最大长度
    maxArrayElements: number;             // 数组显示的最大元素数量
    maxObjectProperties: number;          // 对象显示的最大属性数量
    maxCallStackDepth: number;            // 调用栈显示的最大深度
    
    // 性能设置
    maxBreakpoints: number;               // 最大断点数量
    maxWatchExpressions: number;          // 最大监视表达式数量
    maxEvaluationTime: number;            // 表达式求值的最大时间（毫秒）
    
    // 文件路径设置
    debugInfoPath: string;                // 调试信息文件路径
    sourcePath: string[];                 // 源码搜索路径
    outputPath: string;                   // 调试输出路径
    
    // 高级设置
    usePrettyPrinters: boolean;           // 是否使用自定义格式化器
    allowHotReload: boolean;              // 是否允许热重载
    evaluationSafeMode: boolean;          // 表达式求值是否使用安全模式
    enableQuantumDebug: boolean;          // 是否启用量子状态调试
} 