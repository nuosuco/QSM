/**
 * @file instruction_set.qentl
 * @brief QEntL虚拟机指令集定义
 * 
 * 量子基因编码: QGC-VM-INSTRUCTION-SET-2024062201
 * 量子纠缠信道: QEC-VM-INTERPRETER-01
 */

/**
 * @enum OpCode
 * @brief 虚拟机操作码枚举
 */
enum OpCode {
    // 基本操作
    NOP               = 0x00,    // 无操作
    HALT              = 0x01,    // 停止执行
    
    // 栈操作
    PUSH_NULL         = 0x10,    // 将null压入栈
    PUSH_TRUE         = 0x11,    // 将true压入栈
    PUSH_FALSE        = 0x12,    // 将false压入栈
    PUSH_INT          = 0x13,    // 将整数常量压入栈
    PUSH_FLOAT        = 0x14,    // 将浮点常量压入栈
    PUSH_STRING       = 0x15,    // 将字符串常量压入栈
    POP               = 0x16,    // 弹出栈顶元素
    DUP               = 0x17,    // 复制栈顶元素
    SWAP              = 0x18,    // 交换栈顶两个元素
    
    // 局部变量操作
    LOAD_LOCAL        = 0x20,    // 将局部变量加载到栈
    STORE_LOCAL       = 0x21,    // 将栈顶元素保存到局部变量
    
    // 全局变量操作
    LOAD_GLOBAL       = 0x30,    // 将全局变量加载到栈
    STORE_GLOBAL      = 0x31,    // 将栈顶元素保存到全局变量
    
    // 常量操作
    LOAD_CONST        = 0x40,    // 将常量池中的常量加载到栈
    
    // 数组操作
    NEW_ARRAY         = 0x50,    // 创建新数组
    ARRAY_LENGTH      = 0x51,    // 获取数组长度
    ARRAY_GET         = 0x52,    // 获取数组元素
    ARRAY_SET         = 0x53,    // 设置数组元素
    
    // 对象操作
    NEW_OBJECT        = 0x60,    // 创建新对象
    GET_PROPERTY      = 0x61,    // 获取对象属性
    SET_PROPERTY      = 0x62,    // 设置对象属性
    GET_METHOD        = 0x63,    // 获取对象方法
    
    // 类操作
    DEFINE_CLASS      = 0x70,    // 定义类
    
    // 函数操作
    DEFINE_FUNCTION   = 0x80,    // 定义函数
    CALL              = 0x81,    // 调用函数
    RETURN            = 0x82,    // 从函数返回
    
    // 算术操作
    ADD               = 0x90,    // 加法
    SUB               = 0x91,    // 减法
    MUL               = 0x92,    // 乘法
    DIV               = 0x93,    // 除法
    MOD               = 0x94,    // 取模
    NEG               = 0x95,    // 取负
    INC               = 0x96,    // 自增
    DEC               = 0x97,    // 自减
    
    // 位操作
    BIT_AND           = 0xA0,    // 按位与
    BIT_OR            = 0xA1,    // 按位或
    BIT_XOR           = 0xA2,    // 按位异或
    BIT_NOT           = 0xA3,    // 按位取反
    BIT_SHL           = 0xA4,    // 左移
    BIT_SHR           = 0xA5,    // 右移
    
    // 逻辑操作
    LOGICAL_AND       = 0xB0,    // 逻辑与
    LOGICAL_OR        = 0xB1,    // 逻辑或
    LOGICAL_NOT       = 0xB2,    // 逻辑非
    
    // 比较操作
    EQUAL             = 0xC0,    // 相等比较
    NOT_EQUAL         = 0xC1,    // 不等比较
    LESS              = 0xC2,    // 小于比较
    LESS_EQUAL        = 0xC3,    // 小于等于比较
    GREATER           = 0xC4,    // 大于比较
    GREATER_EQUAL     = 0xC5,    // 大于等于比较
    
    // 控制流操作
    JUMP              = 0xD0,    // 无条件跳转
    JUMP_TRUE         = 0xD1,    // 条件为真跳转
    JUMP_FALSE        = 0xD2,    // 条件为假跳转
    JUMP_NULL         = 0xD3,    // 为空跳转
    JUMP_NOT_NULL     = 0xD4,    // 非空跳转
    
    // 异常处理
    TRY_BEGIN         = 0xE0,    // 开始try块
    TRY_END           = 0xE1,    // 结束try块
    THROW             = 0xE2,    // 抛出异常
    
    // 量子操作
    QUANTUM_NEW       = 0xF0,    // 创建量子状态
    QUANTUM_MEASURE   = 0xF1,    // 测量量子状态
    QUANTUM_APPLY_X   = 0xF2,    // 应用X门
    QUANTUM_APPLY_Y   = 0xF3,    // 应用Y门
    QUANTUM_APPLY_Z   = 0xF4,    // 应用Z门
    QUANTUM_APPLY_H   = 0xF5,    // 应用H门
    QUANTUM_APPLY_CNOT= 0xF6,    // 应用CNOT门
    QUANTUM_ENTANGLE  = 0xF7,    // 创建量子纠缠
    
    // 扩展操作码区域
    EXTENDED          = 0xFF     // 扩展操作码前缀
}

/**
 * @enum ExtendedOpCode
 * @brief 扩展操作码枚举，用于支持更多指令
 */
enum ExtendedOpCode {
    // 系统操作
    PRINT             = 0x01,    // 打印值
    PRINT_LINE        = 0x02,    // 打印值后换行
    READ_LINE         = 0x03,    // 读取一行输入
    
    // 文件操作
    FILE_OPEN         = 0x10,    // 打开文件
    FILE_CLOSE        = 0x11,    // 关闭文件
    FILE_READ         = 0x12,    // 读取文件
    FILE_WRITE        = 0x13,    // 写入文件
    
    // 网络操作
    SOCKET_CREATE     = 0x20,    // 创建套接字
    SOCKET_CONNECT    = 0x21,    // 连接套接字
    SOCKET_BIND       = 0x22,    // 绑定套接字
    SOCKET_LISTEN     = 0x23,    // 监听套接字
    SOCKET_ACCEPT     = 0x24,    // 接受连接
    SOCKET_SEND       = 0x25,    // 发送数据
    SOCKET_RECEIVE    = 0x26,    // 接收数据
    SOCKET_CLOSE      = 0x27,    // 关闭套接字
    
    // 线程操作
    THREAD_CREATE     = 0x30,    // 创建线程
    THREAD_JOIN       = 0x31,    // 等待线程结束
    MUTEX_CREATE      = 0x32,    // 创建互斥锁
    MUTEX_LOCK        = 0x33,    // 锁定互斥锁
    MUTEX_UNLOCK      = 0x34,    // 解锁互斥锁
    
    // 调试操作
    DEBUG_BREAK       = 0xF0,    // 断点
    DEBUG_TRACE       = 0xF1     // 跟踪
}

/**
 * @class Instruction
 * @brief 指令类，表示一条虚拟机指令
 */
quantum_class Instruction {
    private {
        opcode: OpCode;            // 操作码
        extendedOpcode: ExtendedOpCode; // 扩展操作码（如果需要）
        operands: Array<Integer>;  // 操作数列表
        lineNumber: Integer;       // 源代码行号
    }
    
    /**
     * @brief 构造函数
     */
    constructor(opcode: OpCode, operands: Array<Integer> = null, lineNumber: Integer = 0) {
        this.opcode = opcode;
        this.extendedOpcode = null;
        this.operands = operands || new Array<Integer>();
        this.lineNumber = lineNumber;
    }
    
    /**
     * @brief 创建扩展指令
     */
    static function createExtended(extendedOpcode: ExtendedOpCode, operands: Array<Integer> = null, lineNumber: Integer = 0): Instruction {
        let instruction = new Instruction(OpCode.EXTENDED, operands, lineNumber);
        instruction.extendedOpcode = extendedOpcode;
        return instruction;
    }
    
    /**
     * @brief 获取操作码
     */
    public function getOpcode(): OpCode {
        return this.opcode;
    }
    
    /**
     * @brief 获取扩展操作码
     */
    public function getExtendedOpcode(): ExtendedOpCode {
        return this.extendedOpcode;
    }
    
    /**
     * @brief 检查是否为扩展指令
     */
    public function isExtended(): Boolean {
        return this.opcode === OpCode.EXTENDED;
    }
    
    /**
     * @brief 获取操作数列表
     */
    public function getOperands(): Array<Integer> {
        return this.operands;
    }
    
    /**
     * @brief 获取源代码行号
     */
    public function getLineNumber(): Integer {
        return this.lineNumber;
    }
    
    /**
     * @brief 获取操作码名称
     */
    public function getOpcodeName(): String {
        if (this.isExtended()) {
            // 获取扩展操作码名称
            for (let key in ExtendedOpCode) {
                if (ExtendedOpCode[key] === this.extendedOpcode) {
                    return "EXT_" + key;
                }
            }
            return "EXT_UNKNOWN";
        } else {
            // 获取标准操作码名称
            for (let key in OpCode) {
                if (OpCode[key] === this.opcode) {
                    return key;
                }
            }
            return "UNKNOWN";
        }
    }
    
    /**
     * @brief 转换为字符串表示
     */
    public function toString(): String {
        let result = this.getOpcodeName();
        
        if (this.operands.length > 0) {
            result += " ";
            for (let i = 0; i < this.operands.length; i++) {
                if (i > 0) {
                    result += ", ";
                }
                result += this.operands[i].toString();
            }
        }
        
        if (this.lineNumber > 0) {
            result += " (line " + this.lineNumber.toString() + ")";
        }
        
        return result;
    }
}

/**
 * @class InstructionBlock
 * @brief 指令块，表示一组指令序列
 */
quantum_class InstructionBlock {
    private {
        instructions: Array<Instruction>;  // 指令列表
    }
    
    /**
     * @brief 构造函数
     */
    constructor() {
        this.instructions = new Array<Instruction>();
    }
    
    /**
     * @brief 添加指令
     */
    public function addInstruction(instruction: Instruction): void {
        this.instructions.push(instruction);
    }
    
    /**
     * @brief 获取指令列表
     */
    public function getInstructions(): Array<Instruction> {
        return this.instructions;
    }
    
    /**
     * @brief 获取指令数量
     */
    public function getInstructionCount(): Integer {
        return this.instructions.length;
    }
    
    /**
     * @brief 获取指定索引的指令
     */
    public function getInstruction(index: Integer): Instruction {
        if (index < 0 || index >= this.instructions.length) {
            return null;
        }
        return this.instructions[index];
    }
    
    /**
     * @brief 在指定位置插入指令
     */
    public function insertInstruction(index: Integer, instruction: Instruction): void {
        if (index < 0 || index > this.instructions.length) {
            return;
        }
        this.instructions.splice(index, 0, instruction);
    }
    
    /**
     * @brief 移除指定位置的指令
     */
    public function removeInstruction(index: Integer): void {
        if (index < 0 || index >= this.instructions.length) {
            return;
        }
        this.instructions.splice(index, 1);
    }
}

// 导出类和枚举
export {
    OpCode,
    ExtendedOpCode,
    Instruction,
    InstructionBlock
};