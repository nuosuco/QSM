// 文件：interpreter.qentl
// 描述：QEntL语言的虚拟机解释器
// 量子基因编码：QGC-VM-INTERPRETER-2024061903
// 纠缠通道：QEC-VM-INTERPRETER-2024061903

// 导入必要的模块
import "QEntL/core/string.qentl";
import "QEntL/core/array.qentl";
import "QEntL/core/map.qentl";
import "QEntL/vm/memory_manager.qentl";
import "QEntL/vm/quantum_state.qentl";

// 导入字节码定义
import "QEntL/compiler/bytecode.qentl";

// 操作数栈最大深度
const MAX_STACK_SIZE = 1024;
// 调用栈最大深度
const MAX_FRAMES = 64;
// 全局变量表最大容量
const MAX_GLOBALS = 1024;

// 解释器状态枚举
enum InterpreterStatus {
    OK,              // 正常
    COMPILE_ERROR,   // 编译错误
    RUNTIME_ERROR,   // 运行时错误
    QUANTUM_ERROR,   // 量子操作错误
    STACK_OVERFLOW,  // 栈溢出
    MEMORY_ERROR,    // 内存错误
    IO_ERROR,        // IO错误
    UNKNOWN_ERROR    // 未知错误
}

// 解释器配置
class InterpreterConfig {
    private bool enableDebug;
    private bool traceExecution;
    private bool optimizeExecution;
    private int stackSize;
    private int garbageCollectionThreshold;
    
    constructor() {
        this.enableDebug = false;
        this.traceExecution = false;
        this.optimizeExecution = true;
        this.stackSize = MAX_STACK_SIZE;
        this.garbageCollectionThreshold = 1024 * 1024; // 1MB
    }
    
    public void setEnableDebug(bool enable) {
        this.enableDebug = enable;
    }
    
    public bool isDebugEnabled() {
        return this.enableDebug;
    }
    
    public void setTraceExecution(bool trace) {
        this.traceExecution = trace;
    }
    
    public bool isTraceExecutionEnabled() {
        return this.traceExecution;
    }
    
    public void setOptimizeExecution(bool optimize) {
        this.optimizeExecution = optimize;
    }
    
    public bool isOptimizeExecutionEnabled() {
        return this.optimizeExecution;
    }
    
    public void setStackSize(int size) {
        if (size > 0 && size <= 1024 * 1024) {
            this.stackSize = size;
        }
    }
    
    public int getStackSize() {
        return this.stackSize;
    }
    
    public void setGarbageCollectionThreshold(int threshold) {
        this.garbageCollectionThreshold = threshold;
    }
    
    public int getGarbageCollectionThreshold() {
        return this.garbageCollectionThreshold;
    }
}

// 调用帧
class CallFrame {
    private BytecodeFunction function;  // 当前执行的函数
    private int ip;                     // 指令指针
    private int baseStackIndex;         // 栈基址
    
    constructor(BytecodeFunction function, int baseStackIndex) {
        this.function = function;
        this.ip = 0;
        this.baseStackIndex = baseStackIndex;
    }
    
    public BytecodeFunction getFunction() {
        return this.function;
    }
    
    public int getIP() {
        return this.ip;
    }
    
    public void setIP(int ip) {
        this.ip = ip;
    }
    
    public void incrementIP() {
        this.ip++;
    }
    
    public int getBaseStackIndex() {
        return this.baseStackIndex;
    }
    
    public BytecodeInstruction getCurrentInstruction() {
        if (this.ip < function.getInstructions().length) {
            return function.getInstructions()[this.ip];
        }
        return null;
    }
}

// QEntL解释器
class Interpreter {
    // 私有成员
    private MemoryManager memoryManager;         // 内存管理器
    private QuantumStateManager quantumManager;  // 量子状态管理器
    private InterpreterConfig config;            // 解释器配置
    
    private Value[] stack;                       // 操作数栈
    private int stackTop;                        // 栈顶指针
    
    private CallFrame[] frames;                  // 调用栈
    private int frameCount;                      // 调用帧数量
    
    private Value[] globals;                     // 全局变量表
    private int globalsCount;                    // 全局变量数量
    
    private BytecodeModule currentModule;        // 当前执行模块
    private InterpreterStatus status;            // 解释器状态
    private string errorMessage;                 // 错误信息
    
    // 构造函数
    constructor() {
        this.memoryManager = new MemoryManager();
        this.quantumManager = new QuantumStateManager();
        this.config = new InterpreterConfig();
        
        this.stack = new Value[this.config.getStackSize()];
        this.stackTop = 0;
        
        this.frames = new CallFrame[MAX_FRAMES];
        this.frameCount = 0;
        
        this.globals = new Value[MAX_GLOBALS];
        this.globalsCount = 0;
        
        this.currentModule = null;
        this.status = InterpreterStatus.OK;
        this.errorMessage = "";
    }
    
    // 执行字节码文件
    public InterpreterStatus execute(BytecodeFile bytecodeFile) {
        // 检查文件有效性
        if (!this.validateBytecodeFile(bytecodeFile)) {
            this.status = InterpreterStatus.COMPILE_ERROR;
            this.errorMessage = "Invalid bytecode file format";
            return this.status;
        }
        
        this.currentModule = bytecodeFile.getModule();
        
        // 重置运行时状态
        this.reset();
        
        // 初始化全局变量
        this.initializeGlobals();
        
        // 获取主函数
        BytecodeFunction mainFunction = this.currentModule.getMainFunction();
        if (mainFunction == null) {
            this.status = InterpreterStatus.COMPILE_ERROR;
            this.errorMessage = "No main function found";
            return this.status;
        }
        
        // 调用主函数
        return this.callFunction(mainFunction, 0);
    }
    
    // 执行当前调用帧
    private InterpreterStatus runCurrentFrame() {
        CallFrame frame = this.frames[this.frameCount - 1];
        BytecodeFunction function = frame.getFunction();
        
        while (frame.getIP() < function.getInstructions().length) {
            // 获取当前指令
            BytecodeInstruction instruction = frame.getCurrentInstruction();
            
            // 打印调试信息
            if (this.config.isTraceExecutionEnabled()) {
                this.printDebugInstruction(instruction);
            }
            
            // 执行指令
            InterpreterStatus status = this.executeInstruction(instruction);
            if (status != InterpreterStatus.OK) {
                return status;
            }
            
            // 更新指令指针
            frame.incrementIP();
        }
        
        return InterpreterStatus.OK;
    }
    
    // 执行单条指令
    private InterpreterStatus executeInstruction(BytecodeInstruction instruction) {
        BytecodeOpcode opcode = instruction.getOpcode();
        int[] operands = instruction.getOperands();
        
        switch (opcode) {
            case BytecodeOpcode.NOP:
                // 无操作
                break;
                
            case BytecodeOpcode.HALT:
                // 停止执行
                return InterpreterStatus.OK;
                
            case BytecodeOpcode.LOAD_CONST:
                // 加载常量
                if (operands.length < 1) {
                    return this.runtimeError("LOAD_CONST: Missing operand");
                }
                int constIndex = operands[0];
                if (constIndex >= this.currentModule.getConstants().length) {
                    return this.runtimeError("LOAD_CONST: Invalid constant index");
                }
                BytecodeConstant constant = this.currentModule.getConstants()[constIndex];
                Value value = this.convertConstantToValue(constant);
                this.push(value);
                break;
                
            case BytecodeOpcode.LOAD_LOCAL:
                // 加载局部变量
                if (operands.length < 1) {
                    return this.runtimeError("LOAD_LOCAL: Missing operand");
                }
                int localIndex = operands[0];
                CallFrame frame = this.frames[this.frameCount - 1];
                int baseIndex = frame.getBaseStackIndex();
                if (localIndex >= frame.getFunction().getLocalCount()) {
                    return this.runtimeError("LOAD_LOCAL: Invalid local variable index");
                }
                this.push(this.stack[baseIndex + localIndex]);
                break;
                
            case BytecodeOpcode.STORE_LOCAL:
                // 存储局部变量
                if (operands.length < 1) {
                    return this.runtimeError("STORE_LOCAL: Missing operand");
                }
                int slotIndex = operands[0];
                CallFrame currentFrame = this.frames[this.frameCount - 1];
                int baseStackIndex = currentFrame.getBaseStackIndex();
                if (slotIndex >= currentFrame.getFunction().getLocalCount()) {
                    return this.runtimeError("STORE_LOCAL: Invalid local variable index");
                }
                Value valueToStore = this.peek(0);
                this.stack[baseStackIndex + slotIndex] = valueToStore;
                break;
                
            case BytecodeOpcode.LOAD_GLOBAL:
                // 加载全局变量
                if (operands.length < 1) {
                    return this.runtimeError("LOAD_GLOBAL: Missing operand");
                }
                int globalIndex = operands[0];
                if (globalIndex >= this.globalsCount) {
                    return this.runtimeError("LOAD_GLOBAL: Invalid global variable index");
                }
                this.push(this.globals[globalIndex]);
                break;
                
            case BytecodeOpcode.STORE_GLOBAL:
                // 存储全局变量
                if (operands.length < 1) {
                    return this.runtimeError("STORE_GLOBAL: Missing operand");
                }
                int globalSlot = operands[0];
                if (globalSlot >= this.globalsCount) {
                    return this.runtimeError("STORE_GLOBAL: Invalid global variable index");
                }
                this.globals[globalSlot] = this.peek(0);
                break;
                
            case BytecodeOpcode.JUMP:
                // 无条件跳转
                if (operands.length < 1) {
                    return this.runtimeError("JUMP: Missing operand");
                }
                int jumpOffset = operands[0];
                CallFrame jumpFrame = this.frames[this.frameCount - 1];
                jumpFrame.setIP(jumpFrame.getIP() + jumpOffset);
                break;
                
            case BytecodeOpcode.JUMP_IF_FALSE:
                // 条件跳转（如果假）
                if (operands.length < 1) {
                    return this.runtimeError("JUMP_IF_FALSE: Missing operand");
                }
                int condJumpOffset = operands[0];
                Value conditionValue = this.pop();
                if (!conditionValue.isTruthy()) {
                    CallFrame condFrame = this.frames[this.frameCount - 1];
                    condFrame.setIP(condFrame.getIP() + condJumpOffset);
                }
                break;
                
            case BytecodeOpcode.JUMP_IF_TRUE:
                // 条件跳转（如果真）
                if (operands.length < 1) {
                    return this.runtimeError("JUMP_IF_TRUE: Missing operand");
                }
                int trueJumpOffset = operands[0];
                Value trueConditionValue = this.pop();
                if (trueConditionValue.isTruthy()) {
                    CallFrame trueFrame = this.frames[this.frameCount - 1];
                    trueFrame.setIP(trueFrame.getIP() + trueJumpOffset);
                }
                break;
                
            case BytecodeOpcode.CALL:
                // 函数调用
                if (operands.length < 2) {
                    return this.runtimeError("CALL: Missing operands");
                }
                int functionIndex = operands[0];
                int argCount = operands[1];
                
                if (functionIndex >= this.currentModule.getFunctions().length) {
                    return this.runtimeError("CALL: Invalid function index");
                }
                
                BytecodeFunction calledFunction = this.currentModule.getFunctions()[functionIndex];
                if (calledFunction.getArity() != argCount) {
                    return this.runtimeError("CALL: Argument count mismatch");
                }
                
                // 调用函数
                return this.callFunction(calledFunction, argCount);
                
            case BytecodeOpcode.RETURN:
                // 函数返回
                // 获取返回值
                Value returnValue = this.pop();
                
                // 恢复调用帧
                this.frameCount--;
                if (this.frameCount == 0) {
                    // 主函数返回，执行完毕
                    return InterpreterStatus.OK;
                }
                
                // 清理当前帧的局部变量
                CallFrame returnFrame = this.frames[this.frameCount];
                int baseIndex = returnFrame.getBaseStackIndex();
                int localCount = returnFrame.getFunction().getLocalCount();
                this.stackTop = baseIndex;
                
                // 压入返回值
                this.push(returnValue);
                break;
                
            // 算术运算
            case BytecodeOpcode.ADD:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    Value result = a.add(b);
                    if (result == null) {
                        return this.runtimeError("ADD: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.SUB:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    Value result = a.subtract(b);
                    if (result == null) {
                        return this.runtimeError("SUB: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.MUL:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    Value result = a.multiply(b);
                    if (result == null) {
                        return this.runtimeError("MUL: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.DIV:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    
                    // 除零检查
                    if (b.isNumber() && b.asNumber() == 0) {
                        return this.runtimeError("DIV: Division by zero");
                    }
                    
                    Value result = a.divide(b);
                    if (result == null) {
                        return this.runtimeError("DIV: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.MOD:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    
                    // 除零检查
                    if (b.isNumber() && b.asNumber() == 0) {
                        return this.runtimeError("MOD: Modulo by zero");
                    }
                    
                    Value result = a.modulo(b);
                    if (result == null) {
                        return this.runtimeError("MOD: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.NEG:
                {
                    Value a = this.pop();
                    Value result = a.negate();
                    if (result == null) {
                        return this.runtimeError("NEG: Invalid operand type");
                    }
                    this.push(result);
                }
                break;
                
            // 比较运算
            case BytecodeOpcode.EQUAL:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    this.push(new Value(a.equals(b)));
                }
                break;
                
            case BytecodeOpcode.NOT_EQUAL:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    this.push(new Value(!a.equals(b)));
                }
                break;
                
            case BytecodeOpcode.GREATER:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    Value result = a.greaterThan(b);
                    if (result == null) {
                        return this.runtimeError("GREATER: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.GREATER_EQUAL:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    Value result = a.greaterThanEqual(b);
                    if (result == null) {
                        return this.runtimeError("GREATER_EQUAL: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.LESS:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    Value result = a.lessThan(b);
                    if (result == null) {
                        return this.runtimeError("LESS: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            case BytecodeOpcode.LESS_EQUAL:
                {
                    Value b = this.pop();
                    Value a = this.pop();
                    Value result = a.lessThanEqual(b);
                    if (result == null) {
                        return this.runtimeError("LESS_EQUAL: Invalid operand types");
                    }
                    this.push(result);
                }
                break;
                
            // 逻辑运算
            case BytecodeOpcode.NOT:
                {
                    Value a = this.pop();
                    this.push(new Value(!a.isTruthy()));
                }
                break;
                
            // 量子指令
            case BytecodeOpcode.QNEW:
                // 创建量子比特
                if (operands.length < 1) {
                    return this.runtimeError("QNEW: Missing operand");
                }
                int qubitCount = operands[0];
                if (qubitCount <= 0) {
                    return this.runtimeError("QNEW: Invalid qubit count");
                }
                
                try {
                    QuantumState quantumState = this.quantumManager.createQuantumState(qubitCount);
                    Value qvalue = new Value(BytecodeType.QUANTUM, quantumState);
                    this.push(qvalue);
                } catch (Exception e) {
                    return this.runtimeError("QNEW: Failed to create quantum state - " + e.getMessage());
                }
                break;
                
            case BytecodeOpcode.QMEASURE:
                // 量子比特测量
                Value qubitValue = this.pop();
                if (!qubitValue.isQuantum()) {
                    return this.runtimeError("QMEASURE: Expected quantum value");
                }
                
                try {
                    QuantumState qstate = qubitValue.asQuantum();
                    int measureResult = this.quantumManager.measureQubit(qstate, 0);
                    this.push(new Value(measureResult));
                } catch (Exception e) {
                    return this.runtimeError("QMEASURE: Measurement failed - " + e.getMessage());
                }
                break;
                
            case BytecodeOpcode.QENTANGLE:
                // 量子纠缠
                Value qubit2Value = this.pop();
                Value qubit1Value = this.pop();
                
                if (!qubit1Value.isQuantum() || !qubit2Value.isQuantum()) {
                    return this.runtimeError("QENTANGLE: Expected quantum values");
                }
                
                try {
                    QuantumState qstate1 = qubit1Value.asQuantum();
                    QuantumState qstate2 = qubit2Value.asQuantum();
                    QuantumState entangledState = this.quantumManager.entangle(qstate1, qstate2);
                    this.push(new Value(BytecodeType.QUANTUM, entangledState));
                } catch (Exception e) {
                    return this.runtimeError("QENTANGLE: Entanglement failed - " + e.getMessage());
                }
                break;
                
            case BytecodeOpcode.QSUPERPOS:
                // 量子叠加
                Value qubitValue = this.pop();
                
                if (!qubitValue.isQuantum()) {
                    return this.runtimeError("QSUPERPOS: Expected quantum value");
                }
                
                try {
                    QuantumState qstate = qubitValue.asQuantum();
                    this.quantumManager.applySuperposition(qstate, 0);
                    this.push(qubitValue); // 返回修改后的量子状态
                } catch (Exception e) {
                    return this.runtimeError("QSUPERPOS: Superposition failed - " + e.getMessage());
                }
                break;
                
            default:
                return this.runtimeError("Unknown opcode: " + opcode);
        }
        
        return InterpreterStatus.OK;
    }
    
    // 调用函数
    private InterpreterStatus callFunction(BytecodeFunction function, int argCount) {
        if (this.frameCount >= MAX_FRAMES) {
            return this.runtimeError("Stack overflow: Maximum call depth exceeded");
        }
        
        // 创建新的调用帧
        int baseStackIndex = this.stackTop - argCount;
        CallFrame frame = new CallFrame(function, baseStackIndex);
        this.frames[this.frameCount++] = frame;
        
        // 分配局部变量空间
        int localCount = function.getLocalCount();
        for (int i = argCount; i < localCount; i++) {
            this.push(new Value()); // 默认为nil
        }
        
        // 执行函数
        return this.runCurrentFrame();
    }
    
    // 栈操作
    private void push(Value value) {
        if (this.stackTop >= this.stack.length) {
            this.runtimeError("Stack overflow");
            return;
        }
        this.stack[this.stackTop++] = value;
    }
    
    private Value pop() {
        if (this.stackTop <= 0) {
            this.runtimeError("Stack underflow");
            return new Value();
        }
        return this.stack[--this.stackTop];
    }
    
    private Value peek(int depth) {
        if (this.stackTop - 1 - depth < 0) {
            this.runtimeError("Invalid stack access");
            return new Value();
        }
        return this.stack[this.stackTop - 1 - depth];
    }
    
    // 辅助方法
    private boolean validateBytecodeFile(BytecodeFile file) {
        if (file == null || file.getHeader() == null || file.getModule() == null) {
            return false;
        }
        
        // 检查魔数
        if (file.getHeader().getMagic() != 0x5145_4E54) {
            return false;
        }
        
        // 其他有效性检查可以在此添加
        
        return true;
    }
    
    private void reset() {
        this.stackTop = 0;
        this.frameCount = 0;
        this.status = InterpreterStatus.OK;
        this.errorMessage = "";
    }
    
    private void initializeGlobals() {
        string[] globals = this.currentModule.getGlobals();
        this.globalsCount = globals.length;
        
        for (int i = 0; i < globals.length; i++) {
            this.globals[i] = new Value(); // 默认值为nil
        }
    }
    
    private Value convertConstantToValue(BytecodeConstant constant) {
        BytecodeType type = constant.getType();
        any value = constant.getValue();
        
        switch (type) {
            case BytecodeType.NIL:
                return new Value();
                
            case BytecodeType.INT:
                return new Value((int)value);
                
            case BytecodeType.FLOAT:
                return new Value((float)value);
                
            case BytecodeType.BOOLEAN:
                return new Value((boolean)value);
                
            case BytecodeType.STRING:
                return new Value((string)value);
                
            case BytecodeType.QUANTUM:
                return new Value(BytecodeType.QUANTUM, value);
                
            default:
                return new Value();
        }
    }
    
    private InterpreterStatus runtimeError(string message) {
        this.status = InterpreterStatus.RUNTIME_ERROR;
        this.errorMessage = message;
        
        // 输出错误信息和调用栈跟踪
        if (this.config.isDebugEnabled()) {
            this.printErrorTrace();
        }
        
        return InterpreterStatus.RUNTIME_ERROR;
    }
    
    private void printErrorTrace() {
        System.errorPrintln(this.errorMessage);
        
        // 打印调用栈
        for (int i = this.frameCount - 1; i >= 0; i--) {
            CallFrame frame = this.frames[i];
            BytecodeFunction function = frame.getFunction();
            BytecodeInstruction instruction = frame.getCurrentInstruction();
            
            System.errorPrintln("  at " + function.getName() + " (line " + instruction.getLine() + ")");
        }
    }
    
    private void printDebugInstruction(BytecodeInstruction instruction) {
        string opcodeName = instruction.getOpcode().toString();
        string operandsStr = "";
        
        for (int i = 0; i < instruction.getOperands().length; i++) {
            if (i > 0) {
                operandsStr += ", ";
            }
            operandsStr += instruction.getOperands()[i];
        }
        
        System.debugPrintln("Exec: " + opcodeName + " " + operandsStr);
    }
    
    // Getter方法
    public InterpreterStatus getStatus() {
        return this.status;
    }
    
    public string getErrorMessage() {
        return this.errorMessage;
    }
    
    public InterpreterConfig getConfig() {
        return this.config;
    }
} 