/**
 * @file complex.qentl
 * @brief 复数类实现
 * 
 * 量子基因编码: QGC-COMPLEX-2024062801
 * 量子纠缠信道: QEC-VM-QUANTUM-01
 */

import "QEntL/core/math.qentl";

/**
 * @class Complex
 * @brief 表示复数的类
 */
quantum_class Complex {
    private {
        real: Number;    // 实部
        imag: Number;    // 虚部
    }
    
    /**
     * @brief 构造函数
     * @param real 实部
     * @param imag 虚部
     */
    constructor(real: Number = 0, imag: Number = 0) {
        this.real = real;
        this.imag = imag;
    }
    
    /**
     * @brief 获取实部
     */
    public function getReal(): Number {
        return this.real;
    }
    
    /**
     * @brief 获取虚部
     */
    public function getImag(): Number {
        return this.imag;
    }
    
    /**
     * @brief 设置实部
     */
    public function setReal(real: Number): void {
        this.real = real;
    }
    
    /**
     * @brief 设置虚部
     */
    public function setImag(imag: Number): void {
        this.imag = imag;
    }
    
    /**
     * @brief 复数加法
     * @param other 另一个复数
     * @return 相加后的新复数
     */
    public function add(other: Complex): Complex {
        return new Complex(this.real + other.real, this.imag + other.imag);
    }
    
    /**
     * @brief 复数减法
     * @param other 另一个复数
     * @return 相减后的新复数
     */
    public function subtract(other: Complex): Complex {
        return new Complex(this.real - other.real, this.imag - other.imag);
    }
    
    /**
     * @brief 复数乘法
     * @param other 可以是另一个复数或实数
     * @return 相乘后的新复数
     */
    public function multiply(other: any): Complex {
        if (typeof other === "number") {
            // 与实数相乘
            return new Complex(this.real * other, this.imag * other);
        } else {
            // 与复数相乘
            const newReal = this.real * other.real - this.imag * other.imag;
            const newImag = this.real * other.imag + this.imag * other.real;
            return new Complex(newReal, newImag);
        }
    }
    
    /**
     * @brief 复数除法
     * @param other 可以是另一个复数或实数
     * @return 相除后的新复数
     */
    public function divide(other: any): Complex {
        if (typeof other === "number") {
            // 被实数除
            if (Math.abs(other) < 1e-10) {
                throw new Error("除数接近零");
            }
            return new Complex(this.real / other, this.imag / other);
        } else {
            // 被复数除
            const denominator = other.real * other.real + other.imag * other.imag;
            if (Math.abs(denominator) < 1e-10) {
                throw new Error("除数模值接近零");
            }
            
            const newReal = (this.real * other.real + this.imag * other.imag) / denominator;
            const newImag = (this.imag * other.real - this.real * other.imag) / denominator;
            
            return new Complex(newReal, newImag);
        }
    }
    
    /**
     * @brief 计算复数的模方
     * @return |z|²
     */
    public function normSquared(): Number {
        return this.real * this.real + this.imag * this.imag;
    }
    
    /**
     * @brief 计算复数的模
     * @return |z|
     */
    public function norm(): Number {
        return Math.sqrt(this.normSquared());
    }
    
    /**
     * @brief 计算复数的共轭
     * @return 共轭复数
     */
    public function conjugate(): Complex {
        return new Complex(this.real, -this.imag);
    }
    
    /**
     * @brief 计算复数的辐角
     * @return 辐角（弧度）
     */
    public function arg(): Number {
        return Math.atan2(this.imag, this.real);
    }
    
    /**
     * @brief 以极坐标形式创建复数
     * @param r 模长
     * @param theta 辐角（弧度）
     * @return 复数
     */
    public static function fromPolar(r: Number, theta: Number): Complex {
        return new Complex(r * Math.cos(theta), r * Math.sin(theta));
    }
    
    /**
     * @brief 返回此复数的副本
     */
    public function clone(): Complex {
        return new Complex(this.real, this.imag);
    }
    
    /**
     * @brief 检查相等性
     * @param other 另一个复数
     * @param epsilon 误差范围
     * @return 是否相等
     */
    public function equals(other: Complex, epsilon: Number = 1e-10): Boolean {
        return Math.abs(this.real - other.real) < epsilon && 
               Math.abs(this.imag - other.imag) < epsilon;
    }
    
    /**
     * @brief 将复数转换为字符串表示
     */
    public function toString(): String {
        if (Math.abs(this.real) < 1e-10 && Math.abs(this.imag) < 1e-10) {
            return "0";
        } else if (Math.abs(this.real) < 1e-10) {
            return `${this.imag}i`;
        } else if (Math.abs(this.imag) < 1e-10) {
            return `${this.real}`;
        } else if (this.imag < 0) {
            return `${this.real} - ${-this.imag}i`;
        } else {
            return `${this.real} + ${this.imag}i`;
        }
    }
}

export { Complex }; 