/**
 * @file vm_launcher.qentl
 * @brief QEntL虚拟机命令行启动器
 * 
 * 量子基因编码: QGC-VM-LAUNCHER-2024062901
 * 量子纠缠信道: QEC-VM-CLI-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/fs.qentl";
import "QEntL/core/cmd/option_parser.qentl";

// 导入虚拟机核心组件
import { VM } from "QEntL/vm/src/core/vm.qentl";
import { VMConfig } from "QEntL/vm/src/core/vm_config.qentl";
import { BytecodeLoader } from "QEntL/vm/src/core/bytecode_loader.qentl";
import { DebugLevel } from "QEntL/vm/src/core/debug/debug_info.qentl";

/**
 * @class VMLauncher
 * @brief QEntL虚拟机启动器
 */
quantum_class VMLauncher {
    private {
        vm: VM;                   // 虚拟机实例
        config: VMConfig;         // 虚拟机配置
        verbose: Boolean;         // 详细输出
        bytecodeFile: String;     // 字节码文件路径
        programArgs: Array<String>; // 程序参数
        debugMode: Boolean;       // 调试模式
        debugLevel: DebugLevel;   // 调试级别
        noOptimize: Boolean;      // 是否禁用优化
        memoryLimit: Number;      // 内存限制（MB）
    }
    
    /**
     * @brief 构造函数
     */
    constructor() {
        this.verbose = false;
        this.bytecodeFile = "";
        this.programArgs = new Array<String>();
        this.debugMode = false;
        this.debugLevel = DebugLevel.NONE;
        this.noOptimize = false;
        this.memoryLimit = 256; // 默认256MB
        
        // 创建虚拟机配置
        this.config = new VMConfig();
        
        // 创建虚拟机实例
        this.vm = new VM(this.config);
    }
    
    /**
     * @brief 解析命令行参数
     */
    public function parseArgs(args: Array<String>): Boolean {
        // 创建选项解析器
        const parser = new OptionParser("QEntL虚拟机");
        
        // 添加选项
        parser.addOption("help", "h", "显示帮助信息");
        parser.addOption("version", "v", "显示版本信息");
        parser.addOption("verbose", "V", "显示详细输出");
        parser.addOption("debug", "d", "启用调试模式");
        parser.addOption("debug-level", "D", "设置调试级别 (none, basic, detailed, full)", true);
        parser.addOption("no-optimize", "O", "禁用字节码优化");
        parser.addOption("memory", "m", "设置内存限制（MB）", true);
        parser.addOption("file", "f", "指定字节码文件", true);
        
        // 解析参数
        parser.parse(args);
        
        // 处理帮助
        if (parser.isSet("help")) {
            this.printHelp();
            return false;
        }
        
        // 处理版本
        if (parser.isSet("version")) {
            this.printVersion();
            return false;
        }
        
        // 处理详细输出
        if (parser.isSet("verbose")) {
            this.verbose = true;
        }
        
        // 处理调试模式
        if (parser.isSet("debug")) {
            this.debugMode = true;
            this.debugLevel = DebugLevel.BASIC;
        }
        
        // 处理调试级别
        if (parser.isSet("debug-level")) {
            const levelStr = parser.getValue("debug-level");
            this.debugMode = true;
            
            if (levelStr === "none") {
                this.debugLevel = DebugLevel.NONE;
            } else if (levelStr === "basic") {
                this.debugLevel = DebugLevel.BASIC;
            } else if (levelStr === "detailed") {
                this.debugLevel = DebugLevel.DETAILED;
            } else if (levelStr === "full") {
                this.debugLevel = DebugLevel.FULL;
            } else {
                Console.writeLine(`错误: 无效的调试级别 '${levelStr}'`);
                return false;
            }
        }
        
        // 处理优化选项
        if (parser.isSet("no-optimize")) {
            this.noOptimize = true;
        }
        
        // 处理内存限制
        if (parser.isSet("memory")) {
            try {
                this.memoryLimit = Number.parseInt(parser.getValue("memory"));
                if (this.memoryLimit <= 0) {
                    Console.writeLine("错误: 内存限制必须大于0");
                    return false;
                }
            } catch (e) {
                Console.writeLine(`错误: 无效的内存限制 '${parser.getValue("memory")}'`);
                return false;
            }
        }
        
        // 处理字节码文件
        if (parser.isSet("file")) {
            this.bytecodeFile = parser.getValue("file");
        }
        
        // 获取非选项参数
        const nonOptions = parser.getNonOptions();
        
        // 处理字节码文件（如果通过位置参数指定）
        if (this.bytecodeFile === "" && nonOptions.length > 0) {
            this.bytecodeFile = nonOptions[0];
            
            // 程序参数是剩余的非选项参数
            if (nonOptions.length > 1) {
                this.programArgs = nonOptions.slice(1);
            }
        } else if (nonOptions.length > 0) {
            // 程序参数是所有非选项参数
            this.programArgs = nonOptions;
        }
        
        // 验证字节码文件
        if (this.bytecodeFile === "") {
            Console.writeLine("错误: 未指定字节码文件");
            this.printHelp();
            return false;
        }
        
        if (!FS.existsSync(this.bytecodeFile)) {
            Console.writeLine(`错误: 字节码文件 '${this.bytecodeFile}' 不存在`);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 配置虚拟机
     */
    private function configureVM(): void {
        // 设置调试模式
        this.config.setDebugMode(this.debugMode);
        this.config.setDebugLevel(this.debugLevel);
        
        // 设置优化
        this.config.setOptimizationEnabled(!this.noOptimize);
        
        // 设置内存限制
        this.config.setMemoryLimit(this.memoryLimit * 1024 * 1024); // 转换为字节
        
        // 设置程序参数
        this.config.setProgramArgs(this.programArgs);
        
        // 设置详细输出
        this.config.setVerbose(this.verbose);
    }
    
    /**
     * @brief 执行字节码
     */
    public function execute(): Number {
        try {
            this.log("启动QEntL虚拟机...");
            
            // 配置虚拟机
            this.configureVM();
            
            // 加载字节码
            this.log(`加载字节码文件: ${this.bytecodeFile}`);
            const loader = new BytecodeLoader();
            const bytecode = loader.loadFromFile(this.bytecodeFile);
            
            if (!bytecode) {
                Console.writeLine(`错误: 无法加载字节码文件 '${this.bytecodeFile}'`);
                return 1;
            }
            
            // 初始化虚拟机
            this.log("初始化虚拟机...");
            this.vm.initialize();
            
            // 加载字节码到虚拟机
            this.vm.loadBytecode(bytecode);
            
            // 执行程序
            this.log("执行程序...");
            const startTime = Date.now();
            const exitCode = this.vm.execute();
            const endTime = Date.now();
            
            // 输出执行结果
            if (this.verbose) {
                this.log(`程序执行完成，退出码: ${exitCode}`);
                this.log(`执行时间: ${(endTime - startTime) / 1000.0} 秒`);
                
                // 输出内存使用情况
                const memoryUsage = this.vm.getMemoryUsage();
                this.log(`内存使用: ${memoryUsage / (1024 * 1024)} MB`);
            }
            
            // 关闭虚拟机
            this.vm.shutdown();
            
            return exitCode;
        } catch (e) {
            Console.writeLine(`错误: 执行过程中发生异常: ${e}`);
            return 1;
        }
    }
    
    /**
     * @brief 打印帮助信息
     */
    private function printHelp(): void {
        Console.writeLine("QEntL虚拟机 - 执行QEntL字节码文件");
        Console.writeLine();
        Console.writeLine("用法: qentl-vm [选项] <字节码文件> [程序参数...]");
        Console.writeLine();
        Console.writeLine("选项:");
        Console.writeLine("  -h, --help              显示帮助信息");
        Console.writeLine("  -v, --version           显示版本信息");
        Console.writeLine("  -V, --verbose           显示详细输出");
        Console.writeLine("  -d, --debug             启用调试模式");
        Console.writeLine("  -D, --debug-level <级别> 设置调试级别 (none, basic, detailed, full)");
        Console.writeLine("  -O, --no-optimize       禁用字节码优化");
        Console.writeLine("  -m, --memory <MB>       设置内存限制（MB）");
        Console.writeLine("  -f, --file <文件>        指定字节码文件");
        Console.writeLine();
        Console.writeLine("示例:");
        Console.writeLine("  qentl-vm program.qbc");
        Console.writeLine("  qentl-vm -d program.qbc arg1 arg2");
        Console.writeLine("  qentl-vm --memory 512 program.qbc");
    }
    
    /**
     * @brief 打印版本信息
     */
    private function printVersion(): void {
        Console.writeLine("QEntL虚拟机 版本 1.0.0");
        Console.writeLine("Copyright (c) 2024 QEntL Project Team");
    }
    
    /**
     * @brief 日志输出
     */
    private function log(message: String): void {
        if (this.verbose) {
            Console.writeLine(message);
        }
    }
}

/**
 * @function main
 * @brief 主函数
 */
function main(): Number {
    // 创建启动器
    const launcher = new VMLauncher();
    
    // 解析命令行参数
    if (!launcher.parseArgs(Process.argv.slice(1))) {
        return 1;
    }
    
    // 执行字节码
    return launcher.execute();
}

// 执行主函数
Process.exit(main()); 