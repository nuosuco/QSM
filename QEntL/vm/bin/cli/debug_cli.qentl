/**
 * @file debug_cli.qentl
 * @brief QEntL虚拟机调试器命令行界面
 * 
 * 量子基因编码: QGC-VM-DEBUGCLI-2024062901
 * 量子纠缠信道: QEC-VM-DEBUG-CLI-01
 */

import { Interpreter } from "../../src/core/interpreter/interpreter.qentl";
import { Memory } from "../../src/core/memory/memory_manager.qentl";
import { Debugger, DebuggerState, BreakpointType } from "../../src/core/debug/debugger.qentl";
import { DebugSession } from "../../src/core/debug/debug_session.qentl";
import { Logger, LogLevel } from "../../src/core/os_interface/logger.qentl";
import { FileSystem } from "../../src/core/os_interface/file_system.qentl";
import { Console } from "../../src/core/os_interface/console.qentl";
import { Process } from "../../src/core/os_interface/process.qentl";

// 命令帮助信息结构
interface CommandHelp {
    command: string;       // 命令名称
    shortcut: string;      // 快捷方式
    args: string;          // 参数
    description: string;   // 描述
}

// 调试CLI命令处理器类
export class DebugCLI {
    // 调试会话
    private session: DebugSession;
    
    // 解释器
    private interpreter: Interpreter;
    
    // 内存管理器
    private memory: Memory;
    
    // 日志记录器
    private logger: Logger;
    
    // 文件系统接口
    private fileSystem: FileSystem;
    
    // 控制台接口
    private console: Console;
    
    // 进程接口
    private process: Process;
    
    // 命令帮助信息
    private commandHelp: CommandHelp[];
    
    // 是否继续运行
    private running: boolean;
    
    // 当前执行的程序文件
    private programFile: string;
    
    // 构造函数
    constructor() {
        // 初始化系统接口
        this.logger = new Logger(LogLevel.INFO);
        this.fileSystem = new FileSystem();
        this.console = new Console();
        this.process = new Process();
        
        // 初始化解释器和内存管理器
        this.memory = new Memory(this.logger);
        this.interpreter = new Interpreter(this.memory, this.logger, this.fileSystem, this.console);
        
        // 初始化调试会话
        this.session = new DebugSession(
            this.interpreter,
            this.memory,
            this.logger,
            this.fileSystem,
            this.console,
            false  // 本地会话
        );
        
        // 初始化命令帮助信息
        this.initCommandHelp();
        
        // 设置运行状态
        this.running = false;
        
        // 默认程序文件为空
        this.programFile = "";
    }
    
    // 初始化命令帮助信息
    private initCommandHelp(): void {
        this.commandHelp = [
            { command: "help", shortcut: "h", args: "", description: "显示帮助信息" },
            { command: "quit", shortcut: "q", args: "", description: "退出调试器" },
            { command: "run", shortcut: "r", args: "[文件名]", description: "运行程序" },
            { command: "continue", shortcut: "c", args: "", description: "继续执行" },
            { command: "next", shortcut: "n", args: "", description: "单步执行（跳过）" },
            { command: "step", shortcut: "s", args: "", description: "单步执行（进入）" },
            { command: "out", shortcut: "o", args: "", description: "单步执行（跳出）" },
            { command: "pause", shortcut: "p", args: "", description: "暂停执行" },
            { command: "restart", shortcut: "rs", args: "", description: "重新启动程序" },
            { command: "break", shortcut: "b", args: "<位置>", description: "设置断点" },
            { command: "delete", shortcut: "d", args: "<断点ID>", description: "删除断点" },
            { command: "enable", shortcut: "en", args: "<断点ID>", description: "启用断点" },
            { command: "disable", shortcut: "dis", args: "<断点ID>", description: "禁用断点" },
            { command: "info", shortcut: "i", args: "[类型]", description: "显示信息（break:断点, var:变量, stack:调用栈）" },
            { command: "print", shortcut: "p", args: "<表达式>", description: "计算表达式" },
            { command: "list", shortcut: "l", args: "[行号]", description: "显示源代码" },
            { command: "memory", shortcut: "m", args: "<地址> <大小>", description: "显示内存内容" }
        ];
    }
    
    // 启动调试CLI
    public start(args: string[]): void {
        this.console.println("QEntL 调试器命令行界面 v1.0");
        this.console.println("输入 'help' 获取命令列表");
        
        // 解析命令行参数
        if (args.length > 0) {
            this.programFile = args[0];
            this.console.println(`加载程序文件: ${this.programFile}`);
            this.runProgram(this.programFile);
        }
        
        // 开始命令循环
        this.running = true;
        this.commandLoop();
    }
    
    // 命令循环
    private commandLoop(): void {
        while (this.running) {
            const input = this.console.readLine("(qdbg) ");
            this.processCommand(input);
        }
    }
    
    // 处理命令
    private processCommand(input: string): void {
        if (!input || input.trim().length === 0) {
            return;
        }
        
        // 解析命令和参数
        const parts = input.trim().split(' ');
        const command = parts[0].toLowerCase();
        const args = parts.slice(1);
        
        switch (command) {
            case "help":
            case "h":
                this.showHelp();
                break;
                
            case "quit":
            case "q":
                this.quit();
                break;
                
            case "run":
            case "r":
                this.cmdRun(args);
                break;
                
            case "continue":
            case "c":
                this.cmdContinue();
                break;
                
            case "next":
            case "n":
                this.cmdNext();
                break;
                
            case "step":
            case "s":
                this.cmdStep();
                break;
                
            case "out":
            case "o":
                this.cmdOut();
                break;
                
            case "pause":
            case "p":
                this.cmdPause();
                break;
                
            case "restart":
            case "rs":
                this.cmdRestart();
                break;
                
            case "break":
            case "b":
                this.cmdBreak(args);
                break;
                
            case "delete":
            case "d":
                this.cmdDelete(args);
                break;
                
            case "enable":
            case "en":
                this.cmdEnable(args);
                break;
                
            case "disable":
            case "dis":
                this.cmdDisable(args);
                break;
                
            case "info":
            case "i":
                this.cmdInfo(args);
                break;
                
            case "print":
            case "p":
                this.cmdPrint(args);
                break;
                
            case "list":
            case "l":
                this.cmdList(args);
                break;
                
            case "memory":
            case "m":
                this.cmdMemory(args);
                break;
                
            default:
                this.console.println(`未知命令: ${command}。输入 'help' 获取命令列表。`);
                break;
        }
    }
    
    // 显示帮助信息
    private showHelp(): void {
        this.console.println("可用命令:");
        this.console.println("-------------------------------------------");
        
        for (const help of this.commandHelp) {
            const shortcut = help.shortcut ? `(${help.shortcut})` : "";
            const args = help.args ? help.args : "";
            this.console.println(`${help.command.padEnd(10)} ${shortcut.padEnd(6)} ${args.padEnd(15)} ${help.description}`);
        }
        
        this.console.println("-------------------------------------------");
    }
    
    // 退出调试器
    private quit(): void {
        this.running = false;
        this.console.println("退出调试器");
    }
    
    // 运行程序命令
    private cmdRun(args: string[]): void {
        let file = this.programFile;
        
        if (args.length > 0) {
            file = args[0];
            this.programFile = file;
        }
        
        if (!file) {
            this.console.println("错误: 未指定程序文件。使用 'run <文件名>' 指定文件。");
            return;
        }
        
        this.runProgram(file);
    }
    
    // 运行程序
    private runProgram(file: string): void {
        if (!this.fileSystem.fileExists(file)) {
            this.console.println(`错误: 文件不存在: ${file}`);
            return;
        }
        
        this.console.println(`运行程序: ${file}`);
        
        // 启动调试会话
        this.session = new DebugSession(
            this.interpreter,
            this.memory,
            this.logger,
            this.fileSystem,
            this.console,
            false  // 本地会话
        );
        
        // TODO: 实现与调试会话的连接，处理调试事件
    }
    
    // 继续执行命令
    private cmdContinue(): void {
        this.console.println("继续执行程序");
        // TODO: 实现
    }
    
    // 单步执行（跳过）命令
    private cmdNext(): void {
        this.console.println("单步执行（跳过）");
        // TODO: 实现
    }
    
    // 单步执行（进入）命令
    private cmdStep(): void {
        this.console.println("单步执行（进入）");
        // TODO: 实现
    }
    
    // 单步执行（跳出）命令
    private cmdOut(): void {
        this.console.println("单步执行（跳出）");
        // TODO: 实现
    }
    
    // 暂停执行命令
    private cmdPause(): void {
        this.console.println("暂停程序执行");
        // TODO: 实现
    }
    
    // 重新启动命令
    private cmdRestart(): void {
        this.console.println("重新启动程序");
        // TODO: 实现
    }
    
    // 设置断点命令
    private cmdBreak(args: string[]): void {
        if (args.length === 0) {
            this.console.println("错误: 缺少断点位置。使用 'break <位置>' 设置断点。");
            return;
        }
        
        const location = args[0];
        this.console.println(`设置断点: ${location}`);
        // TODO: 实现
    }
    
    // 删除断点命令
    private cmdDelete(args: string[]): void {
        if (args.length === 0) {
            this.console.println("错误: 缺少断点ID。使用 'delete <断点ID>' 删除断点。");
            return;
        }
        
        const id = parseInt(args[0]);
        if (isNaN(id)) {
            this.console.println("错误: 断点ID必须是数字。");
            return;
        }
        
        this.console.println(`删除断点: ${id}`);
        // TODO: 实现
    }
    
    // 启用断点命令
    private cmdEnable(args: string[]): void {
        if (args.length === 0) {
            this.console.println("错误: 缺少断点ID。使用 'enable <断点ID>' 启用断点。");
            return;
        }
        
        const id = parseInt(args[0]);
        if (isNaN(id)) {
            this.console.println("错误: 断点ID必须是数字。");
            return;
        }
        
        this.console.println(`启用断点: ${id}`);
        // TODO: 实现
    }
    
    // 禁用断点命令
    private cmdDisable(args: string[]): void {
        if (args.length === 0) {
            this.console.println("错误: 缺少断点ID。使用 'disable <断点ID>' 禁用断点。");
            return;
        }
        
        const id = parseInt(args[0]);
        if (isNaN(id)) {
            this.console.println("错误: 断点ID必须是数字。");
            return;
        }
        
        this.console.println(`禁用断点: ${id}`);
        // TODO: 实现
    }
    
    // 显示信息命令
    private cmdInfo(args: string[]): void {
        const type = args.length > 0 ? args[0].toLowerCase() : "break";
        
        switch (type) {
            case "break":
            case "b":
                this.console.println("当前断点:");
                // TODO: 实现
                break;
                
            case "var":
            case "v":
                this.console.println("当前变量:");
                // TODO: 实现
                break;
                
            case "stack":
            case "s":
                this.console.println("调用栈:");
                // TODO: 实现
                break;
                
            default:
                this.console.println(`未知信息类型: ${type}。可用类型: break, var, stack`);
                break;
        }
    }
    
    // 计算表达式命令
    private cmdPrint(args: string[]): void {
        if (args.length === 0) {
            this.console.println("错误: 缺少表达式。使用 'print <表达式>' 计算表达式。");
            return;
        }
        
        const expression = args.join(' ');
        this.console.println(`计算表达式: ${expression}`);
        // TODO: 实现
    }
    
    // 显示源代码命令
    private cmdList(args: string[]): void {
        const line = args.length > 0 ? parseInt(args[0]) : 0;
        
        if (args.length > 0 && isNaN(line)) {
            this.console.println("错误: 行号必须是数字。");
            return;
        }
        
        this.console.println(`显示源代码 ${line > 0 ? `从第 ${line} 行` : ''}`);
        // TODO: 实现
    }
    
    // 显示内存内容命令
    private cmdMemory(args: string[]): void {
        if (args.length < 2) {
            this.console.println("错误: 参数不足。使用 'memory <地址> <大小>' 显示内存内容。");
            return;
        }
        
        const address = parseInt(args[0]);
        const size = parseInt(args[1]);
        
        if (isNaN(address) || isNaN(size)) {
            this.console.println("错误: 地址和大小必须是数字。");
            return;
        }
        
        this.console.println(`显示内存内容: 地址 ${address}, 大小 ${size}`);
        // TODO: 实现
    }
}

// 主函数
function main(args: string[]): void {
    const cli = new DebugCLI();
    cli.start(args);
}

// 执行主函数
main(Process.getCommandLineArgs()); 