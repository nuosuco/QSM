/**
 * QEntL虚拟机统一启动入口
 * QuantumGene: QG-VM-UNIFENTRY-C3D4-1714043300
 * EntanglementStrength: 0.85
 */

// 检测操作系统类型
function detectOS() {
    const platform = process.platform;
    
    if (platform === 'win32') {
        return 'windows';
    } else if (platform === 'darwin') {
        return 'macos';
    } else if (platform === 'linux') {
        return 'linux';
    } else {
        return 'unknown';
    }
}

// 主函数
function main() {
    console.log("QEntL虚拟机启动中...");
    
    // 检测操作系统
    const os = detectOS();
    console.log(`检测到操作系统: ${os}`);
    
    // 获取命令行参数
    const args = process.argv.slice(2);
    const launcherArgs = args.join(' ');
    
    // 确定启动器路径
    let launcherPath;
    switch (os) {
        case 'windows':
            launcherPath = './launchers/windows_launcher.qjs';
            break;
        case 'macos':
            launcherPath = './launchers/macos_launcher.qjs';
            break;
        case 'linux':
            launcherPath = './launchers/linux_launcher.qjs';
            break;
        default:
            console.error("不支持的操作系统类型");
            process.exit(1);
    }
    
    // 启动系统特定的启动器
    try {
        const { spawn } = require('child_process');
        
        // 使用child_process启动对应的启动器
        const launcher = spawn('node', [launcherPath, ...args], {
            stdio: 'inherit'
        });
        
        launcher.on('error', (err) => {
            console.error(`启动器执行错误: ${err.message}`);
            process.exit(1);
        });
        
        launcher.on('close', (code) => {
            if (code !== 0) {
                console.error(`启动器退出，状态码: ${code}`);
                process.exit(code);
            } else {
                console.log("QEntL虚拟机已关闭");
            }
        });
    } catch (error) {
        console.error(`启动QEntL虚拟机失败: ${error.message}`);
        process.exit(1);
    }
}

// 执行主函数
main(); 