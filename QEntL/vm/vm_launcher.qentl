/**
 * QEntL虚拟机启动器
 * QuantumGene: QG-VM-LAUNCH-A1B2-1714042800
 * EntanglementStrength: 1.0
 */

quantum_program VMLauncher {
    // 量子基因编码
    metadata: {
        name: "QEntL虚拟机启动器",
        version: "1.0.0",
        description: "启动QEntL虚拟机并加载操作系统",
        quantum_gene: "QG-VM-LAUNCH-A1B2-1714042800",
        entanglement_strength: 1.0,
        node_state: "ACTIVE"
    },
    
    // 启动器配置
    config: {
        vm_path: "core/",                    // 虚拟机核心路径
        os_path: "tests/qentl_os.qentl",     // 操作系统路径
        log_level: "INFO",                   // 日志级别
        memory_size: 1024 * 1024 * 1024,     // 虚拟机内存大小 (1GB)
        auto_start_os: true                  // 自动启动操作系统
    },
    
    // 加载虚拟机
    loadVM: function() {
        log("VMLauncher", "加载QEntL虚拟机");
        
        // 导入虚拟机核心
        const VMCore = @import("core/vm_core.qentl");
        
        // 创建虚拟机实例
        this.vm = Object.create(VMCore);
        
        // 设置全局引用，使操作系统可以访问
        global.qentl_vm = this.vm;
        
        log("VMLauncher", "QEntL虚拟机加载完成");
        return true;
    },
    
    // 启动虚拟机
    startVM: function() {
        log("VMLauncher", "启动QEntL虚拟机");
        
        // 初始化虚拟机
        this.vm.setup();
        
        log("VMLauncher", "QEntL虚拟机启动完成");
        return true;
    },
    
    // 加载操作系统
    loadOS: function() {
        log("VMLauncher", `加载QEntL操作系统: ${this.config.os_path}`);
        
        // 加载操作系统
        let success = this.vm.loadOperatingSystem(this.config.os_path);
        
        if (success) {
            log("VMLauncher", "QEntL操作系统加载完成");
            return true;
        } else {
            log("VMLauncher", "QEntL操作系统加载失败", "ERROR");
            return false;
        }
    },
    
    // 运行虚拟机
    runVM: function() {
        log("VMLauncher", "开始运行QEntL虚拟机");
        
        // 运行虚拟机
        this.vm.run();
        
        log("VMLauncher", "QEntL虚拟机运行完成");
        return true;
    },
    
    // 主启动函数
    main: function() {
        log("VMLauncher", "开始启动QEntL虚拟环境");
        
        // 加载虚拟机
        if (!this.loadVM()) {
            log("VMLauncher", "加载虚拟机失败", "ERROR");
            return false;
        }
        
        // 启动虚拟机
        if (!this.startVM()) {
            log("VMLauncher", "启动虚拟机失败", "ERROR");
            return false;
        }
        
        // 如果配置为自动启动操作系统，则加载操作系统
        if (this.config.auto_start_os) {
            if (!this.loadOS()) {
                log("VMLauncher", "加载操作系统失败", "ERROR");
                return false;
            }
        }
        
        // 运行虚拟机
        if (!this.runVM()) {
            log("VMLauncher", "运行虚拟机失败", "ERROR");
            return false;
        }
        
        log("VMLauncher", "QEntL虚拟环境启动完成");
        return true;
    }
};

// 导出启动器
export VMLauncher;

// 如果是直接运行，则调用主函数
if (require.main === module) {
    VMLauncher.main();
} 