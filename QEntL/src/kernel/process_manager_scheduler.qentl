/**
 * QEntL量子进程调度模块
 * QuantumGene: QG-KERNEL-PROCSCH-L2M3-1714187526
 * EntanglementStrength: 0.92
 */

quantum_program ProcessManagerScheduler {
    metadata {
        name: "QEntL量子进程调度器",
        version: "1.0.0",
        author: "QEntL团队",
        description: "QEntL操作系统的量子进程调度模块，实现进程调度和上下文切换",
        quantum_gene: "QG-KERNEL-PROCSCH-L2M3-1714187526",
        entanglement_strength: 0.92
    }

    // 导入基础模块
    import ProcessManagerBase from "./process_manager_base.qentl";

    state {
        // 继承基础模块状态
        base: null,
        
        // 调度器配置
        config: {
            scheduler_type: null,          // 调度算法类型
            time_quantum: 10,              // 时间片大小（毫秒）
            aging_factor: 1.5,             // 老化因子
            preemption_enabled: true,      // 是否启用抢占
            quantum_priority_boost: 2,     // 量子进程优先级提升
            max_execution_without_yield: 1000, // 最大连续执行时间（毫秒）
        },
        
        // 调度统计
        statistics: {
            context_switches: 0,           // 上下文切换次数
            preemptions: 0,                // 抢占次数
            voluntary_yields: 0,           // 主动让出CPU次数
            scheduling_decisions: 0,       // 调度决策次数
            average_wait_time: 0,          // 平均等待时间
            total_wait_time: 0,            // 总等待时间
            processes_waited: 0            // 等待过的进程数
        },
        
        // 调度定时器ID
        scheduler_timer_id: null,
        
        // 上次调度时间
        last_schedule_time: 0,
        
        // 上下文切换锁
        context_switch_in_progress: false
    }

    // 初始化调度模块
    initialize(kernel_ref, base_module, config) {
        kernel_log("初始化进程调度模块...");
        
        // 保存基础模块引用
        this.base = base_module || ProcessManagerBase;
        
        // 确保基础模块已初始化
        if (!this.base.initialized) {
            kernel_log("错误：进程管理器基础模块未初始化");
            return false;
        }
        
        // 配置调度器
        if (config) {
            this.configure(config);
        }
        
        // 设置默认调度算法
        if (!this.config.scheduler_type) {
            this.config.scheduler_type = this.base.scheduler_types.ROUND_ROBIN;
        }
        
        // 设置初始时间
        this.last_schedule_time = Date.now();
        
        // 启动调度定时器
        this.start_scheduler_timer();
        
        kernel_log(`进程调度模块初始化完成，调度算法：${this.get_scheduler_name()}`);
        
        return true;
    }

    // 配置调度器
    configure(config) {
        if (!config) return;
        
        if (config.scheduler_type !== undefined) {
            this.config.scheduler_type = config.scheduler_type;
        }
        
        if (config.time_quantum !== undefined) {
            this.config.time_quantum = config.time_quantum;
        }
        
        if (config.aging_factor !== undefined) {
            this.config.aging_factor = config.aging_factor;
        }
        
        if (config.preemption_enabled !== undefined) {
            this.config.preemption_enabled = config.preemption_enabled;
        }
        
        if (config.quantum_priority_boost !== undefined) {
            this.config.quantum_priority_boost = config.quantum_priority_boost;
        }
        
        if (config.max_execution_without_yield !== undefined) {
            this.config.max_execution_without_yield = config.max_execution_without_yield;
        }
        
        kernel_log("调度器配置已更新");
    }

    // 获取调度器名称
    get_scheduler_name() {
        switch (this.config.scheduler_type) {
            case this.base.scheduler_types.ROUND_ROBIN:
                return "时间片轮转调度";
            case this.base.scheduler_types.PRIORITY:
                return "优先级调度";
            case this.base.scheduler_types.QUANTUM_AWARE:
                return "量子感知调度";
            default:
                return "未知调度算法";
        }
    }

    // 启动调度定时器
    start_scheduler_timer() {
        // 如果定时器已存在，先停止
        if (this.scheduler_timer_id !== null) {
            clearInterval(this.scheduler_timer_id);
        }
        
        // 创建新的定时器，定期调用调度函数
        this.scheduler_timer_id = setInterval(() => {
            this.schedule();
        }, this.config.time_quantum);
        
        kernel_log(`调度定时器已启动，时间片：${this.config.time_quantum}毫秒`);
    }

    // 停止调度定时器
    stop_scheduler_timer() {
        if (this.scheduler_timer_id !== null) {
            clearInterval(this.scheduler_timer_id);
            this.scheduler_timer_id = null;
            kernel_log("调度定时器已停止");
        }
    }

    // 调度函数
    schedule() {
        // 防止并发调度
        if (this.context_switch_in_progress) {
            return;
        }
        
        this.context_switch_in_progress = true;
        
        try {
            // 记录调度次数
            this.statistics.scheduling_decisions++;
            
            // 获取当前时间
            const current_time = Date.now();
            const elapsed = current_time - this.last_schedule_time;
            
            // 更新上次调度时间
            this.last_schedule_time = current_time;
            
            // 更新当前运行进程的执行时间
            if (this.base.current_pid !== null) {
                const current_process = this.base.process_table[this.base.current_pid];
                if (current_process) {
                    current_process.execution_time += elapsed;
                    
                    // 检查是否超过最大执行时间
                    if (current_process.execution_time - current_process.last_scheduled > 
                        this.config.max_execution_without_yield) {
                        kernel_log(`进程${this.base.current_pid}超过最大执行时间，强制抢占`);
                        this.preempt_current_process();
                    }
                }
            }
            
            // 根据调度算法选择下一个要运行的进程
            const next_pid = this.select_next_process();
            
            // 如果没有可运行的进程，运行空闲进程
            if (next_pid === null) {
                this.run_idle_process();
                return;
            }
            
            // 如果选中的进程就是当前进程，继续运行
            if (next_pid === this.base.current_pid) {
                // 不需要切换上下文
                return;
            }
            
            // 执行上下文切换
            this.switch_to_process(next_pid);
            
        } finally {
            this.context_switch_in_progress = false;
        }
    }

    // 选择下一个要运行的进程
    select_next_process() {
        switch (this.config.scheduler_type) {
            case this.base.scheduler_types.ROUND_ROBIN:
                return this.round_robin_select();
            case this.base.scheduler_types.PRIORITY:
                return this.priority_select();
            case this.base.scheduler_types.QUANTUM_AWARE:
                return this.quantum_aware_select();
            default:
                return this.round_robin_select();
        }
    }

    // 时间片轮转调度算法
    round_robin_select() {
        // 如果当前有运行的进程，检查它的时间片是否用完
        if (this.base.current_pid !== null) {
            const current_process = this.base.process_table[this.base.current_pid];
            
            // 如果进程仍然在运行状态且时间片未用完，继续运行
            if (current_process && 
                current_process.state === this.base.process_states.RUNNING &&
                (Date.now() - current_process.last_scheduled) < current_process.time_slice) {
                return this.base.current_pid;
            }
        }
        
        // 从就绪队列选择下一个进程
        return this.select_from_ready_queues();
    }

    // 优先级调度算法
    priority_select() {
        // 从最高优先级开始查找就绪的进程
        for (let priority = this.base.process_priorities.REALTIME; 
             priority >= this.base.process_priorities.IDLE; 
             priority--) {
            
            const queue = this.base.ready_queues[priority];
            if (queue && queue.length > 0) {
                // 获取队列中的第一个进程
                const pid = queue[0];
                
                // 将该进程移到队列末尾（在同优先级内轮转）
                queue.shift();
                queue.push(pid);
                
                return pid;
            }
        }
        
        // 如果没有就绪的进程，返回null
        return null;
    }

    // 量子感知调度算法
    quantum_aware_select() {
        // 首先检查是否有量子进程
        let has_quantum_process = false;
        
        // 从最高优先级开始查找量子进程
        for (let priority = this.base.process_priorities.REALTIME; 
             priority >= this.base.process_priorities.IDLE; 
             priority--) {
            
            const queue = this.base.ready_queues[priority];
            if (!queue || queue.length === 0) continue;
            
            // 查找量子进程
            for (let i = 0; i < queue.length; i++) {
                const pid = queue[i];
                const process = this.base.process_table[pid];
                
                if (process && process.is_quantum) {
                    has_quantum_process = true;
                    
                    // 如果找到量子进程，将它提前执行
                    queue.splice(i, 1);
                    queue.unshift(pid);
                    
                    // 提升其优先级
                    if (priority + this.config.quantum_priority_boost <= this.base.process_priorities.REALTIME) {
                        process.priority = priority + this.config.quantum_priority_boost;
                        
                        // 从当前队列移到更高优先级队列
                        queue.shift();
                        this.base.ready_queues[process.priority].push(pid);
                    }
                    
                    return pid;
                }
            }
        }
        
        // 如果没有量子进程，使用优先级调度
        return this.priority_select();
    }

    // 从就绪队列选择进程
    select_from_ready_queues() {
        // 从就绪队列选择下一个进程
        for (let priority = this.base.process_priorities.REALTIME; 
             priority >= this.base.process_priorities.IDLE; 
             priority--) {
            
            const queue = this.base.ready_queues[priority];
            if (queue && queue.length > 0) {
                // 获取队列中的第一个进程
                const pid = queue.shift();
                
                // 将该进程放回队列末尾（为下次调度）
                queue.push(pid);
                
                return pid;
            }
        }
        
        // 如果没有就绪的进程，返回null
        return null;
    }

    // 运行空闲进程
    run_idle_process() {
        // 检查空闲进程是否存在
        if (!this.base.process_table[0]) {
            kernel_log("警告：空闲进程不存在，将创建");
            this.base.create_idle_process();
        }
        
        // 如果当前已经在运行空闲进程，不需要切换
        if (this.base.current_pid === 0) {
            return;
        }
        
        // 切换到空闲进程
        this.switch_to_process(0);
    }

    // 切换到指定进程
    switch_to_process(pid) {
        // 获取目标进程
        const next_process = this.base.process_table[pid];
        if (!next_process) {
            kernel_log(`错误：找不到进程${pid}`);
            return false;
        }
        
        // 保存当前进程上下文（如果有）
        if (this.base.current_pid !== null) {
            const current_process = this.base.process_table[this.base.current_pid];
            if (current_process) {
                // 保存当前上下文
                this.save_process_context(this.base.current_pid);
                
                // 将当前进程状态从RUNNING改为READY
                if (current_process.state === this.base.process_states.RUNNING) {
                    current_process.state = this.base.process_states.READY;
                    
                    // 将进程加入就绪队列
                    this.base.ready_queues[current_process.priority].push(this.base.current_pid);
                }
            }
        }
        
        // 从就绪队列移除目标进程
        const queue = this.base.ready_queues[next_process.priority];
        const index = queue.indexOf(pid);
        if (index !== -1) {
            queue.splice(index, 1);
        }
        
        // 更新进程状态为RUNNING
        next_process.state = this.base.process_states.RUNNING;
        next_process.last_scheduled = Date.now();
        
        // 更新当前进程ID
        this.base.current_pid = pid;
        
        // 切换内存映射
        this.switch_memory_context(pid);
        
        // 恢复目标进程上下文
        this.restore_process_context(pid);
        
        // 增加上下文切换计数
        this.statistics.context_switches++;
        
        // 如果不是切换到空闲进程，记录日志
        if (pid !== 0) {
            kernel_log(`切换到进程${pid}(${next_process.name})，优先级：${this.base.get_priority_name(next_process.priority)}`);
        }
        
        return true;
    }

    // 保存进程上下文
    save_process_context(pid) {
        const process = this.base.process_table[pid];
        if (!process) return;
        
        // 在实际系统中，这里会从CPU寄存器保存值到进程上下文
        // 这里是简化的模拟实现
        
        // 保存寄存器状态
        // process.context.registers = <从CPU获取当前寄存器值>;
        
        // 保存程序计数器
        // process.context.program_counter = <从CPU获取当前PC值>;
        
        // 如果是量子进程，保存量子寄存器状态
        if (process.is_quantum) {
            // process.context.quantum_registers = <从量子处理单元获取量子寄存器状态>;
        }
    }

    // 恢复进程上下文
    restore_process_context(pid) {
        const process = this.base.process_table[pid];
        if (!process) return;
        
        // 在实际系统中，这里会将进程上下文的值加载到CPU寄存器
        // 这里是简化的模拟实现
        
        // 恢复寄存器状态
        // <将process.context.registers加载到CPU寄存器>;
        
        // 恢复程序计数器
        // <将process.context.program_counter加载到CPU的PC寄存器>;
        
        // 如果是量子进程，恢复量子寄存器状态
        if (process.is_quantum) {
            // <将process.context.quantum_registers加载到量子处理单元>;
        }
    }

    // 切换内存上下文
    switch_memory_context(pid) {
        const process = this.base.process_table[pid];
        if (!process || !process.memory_map) return;
        
        const memory_protection = this.base.kernel_reference.memory_protection;
        if (!memory_protection) {
            kernel_log("警告：内存保护模块未初始化，无法切换内存上下文");
            return;
        }
        
        // 激活进程的内存映射
        memory_protection.activate_memory_map(pid);
    }

    // 抢占当前进程
    preempt_current_process() {
        if (!this.config.preemption_enabled) {
            return false;
        }
        
        if (this.base.current_pid === null || this.base.current_pid === 0) {
            return false; // 无进程运行或空闲进程不需要抢占
        }
        
        kernel_log(`抢占进程${this.base.current_pid}`);
        
        // 增加抢占计数
        this.statistics.preemptions++;
        
        // 强制调度
        this.schedule();
        
        return true;
    }

    // 进程主动让出CPU
    yield_cpu(pid) {
        pid = pid || this.base.current_pid;
        
        if (pid === null || pid === 0) {
            return false; // 空闲进程不能让出CPU
        }
        
        const process = this.base.process_table[pid];
        if (!process || process.state !== this.base.process_states.RUNNING) {
            return false;
        }
        
        kernel_log(`进程${pid}主动让出CPU`);
        
        // 增加主动让出计数
        this.statistics.voluntary_yields++;
        
        // 更新进程状态
        process.state = this.base.process_states.READY;
        
        // 将进程加入就绪队列末尾
        this.base.ready_queues[process.priority].push(pid);
        
        // 清除当前进程
        if (this.base.current_pid === pid) {
            this.base.current_pid = null;
        }
        
        // 触发新的调度
        this.schedule();
        
        return true;
    }

    // 阻塞进程
    block_process(pid, reason) {
        pid = pid || this.base.current_pid;
        
        if (pid === null || pid === 0) {
            return false; // 空闲进程不能阻塞
        }
        
        const process = this.base.process_table[pid];
        if (!process) {
            return false;
        }
        
        kernel_log(`阻塞进程${pid}，原因：${reason}`);
        
        // 更新进程状态
        process.state = this.base.process_states.WAITING;
        process.waiting_reason = reason;
        
        // 计算等待开始时间
        process.wait_start_time = Date.now();
        
        // 添加到等待队列
        let queue_type = reason;
        if (!this.base.waiting_queues[queue_type]) {
            queue_type = "OTHER";
        }
        
        this.base.waiting_queues[queue_type].push(pid);
        
        // 如果阻塞的是当前运行的进程，触发新的调度
        if (this.base.current_pid === pid) {
            this.base.current_pid = null;
            this.schedule();
        }
        
        return true;
    }

    // 解除进程阻塞
    unblock_process(pid) {
        const process = this.base.process_table[pid];
        if (!process || process.state !== this.base.process_states.WAITING) {
            return false;
        }
        
        kernel_log(`解除进程${pid}的阻塞，恢复运行`);
        
        // 计算等待时间并更新统计
        const wait_time = Date.now() - process.wait_start_time;
        this.statistics.total_wait_time += wait_time;
        this.statistics.processes_waited++;
        this.statistics.average_wait_time = this.statistics.total_wait_time / this.statistics.processes_waited;
        
        // 从等待队列中移除
        const reason = process.waiting_reason;
        let queue_type = reason;
        if (!this.base.waiting_queues[queue_type]) {
            queue_type = "OTHER";
        }
        
        const queue = this.base.waiting_queues[queue_type];
        const index = queue.indexOf(pid);
        if (index !== -1) {
            queue.splice(index, 1);
        }
        
        // 更新进程状态为就绪
        process.state = this.base.process_states.READY;
        process.waiting_reason = null;
        process.wait_start_time = null;
        
        // 添加到就绪队列
        this.base.ready_queues[process.priority].push(pid);
        
        return true;
    }

    // 获取调度统计信息
    get_statistics() {
        return {
            ...this.statistics,
            scheduler_type: this.get_scheduler_name(),
            time_quantum: this.config.time_quantum,
            preemption_enabled: this.config.preemption_enabled
        };
    }
}

// 导出调度器模块
export ProcessManagerScheduler; 