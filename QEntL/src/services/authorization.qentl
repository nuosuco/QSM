// QEntL 授权服务
// 版本: 1.0.0
// 作者: QSM团队
// 量子基因码: QSM-AUTHZ-2056-Y892
// 描述: 实现用户授权与权限管理功能，包括角色分配、访问控制和权限检查

// 类型定义
type Permission {
    id: String,             // 权限ID
    name: String,           // 权限名称
    description: String,    // 权限描述
    category: String,       // 权限类别
    resourceType: String    // 资源类型
}

type Role {
    id: String,             // 角色ID
    name: String,           // 角色名称
    description: String,    // 角色描述
    permissions: List<String>, // 权限ID列表
    isSystemRole: Bool,     // 是否为系统角色
    createdAt: DateTime,    // 创建时间
    modifiedAt: DateTime    // 修改时间
}

type ResourceACL {
    resourceId: String,     // 资源ID
    resourceType: String,   // 资源类型
    ownerUserId: String,    // 拥有者用户ID
    userPermissions: Map<String, List<String>>, // 用户ID到权限列表的映射
    rolePermissions: Map<String, List<String>>, // 角色ID到权限列表的映射
    createdAt: DateTime,    // 创建时间
    modifiedAt: DateTime    // 修改时间
}

type AccessRequest {
    userId: String,         // 用户ID
    resourceId: String,     // 资源ID
    resourceType: String,   // 资源类型
    permissionId: String,   // 请求的权限ID
    context: Object         // 上下文信息
}

type AccessResult {
    allowed: Bool,          // 是否允许访问
    reason: String,         // 原因描述
    resourceId: String,     // 资源ID
    permissionId: String,   // 请求的权限ID
    userId: String,         // 用户ID
    evaluationTime: Int     // 评估时间(毫秒)
}

// 配置
config {
    // 基本设置
    cacheEnabled: true,             // 是否启用缓存
    cacheTimeout: 5,                // 缓存超时时间(分钟)
    logDecisions: true,             // 是否记录决策
    
    // 系统角色
    systemRoles: [
        {
            id: "admin",
            name: "管理员",
            description: "系统管理员，拥有所有权限"
        },
        {
            id: "user",
            name: "普通用户",
            description: "普通用户角色"
        },
        {
            id: "guest",
            name: "访客",
            description: "访客角色，权限受限"
        }
    ],
    
    // 系统权限
    systemPermissions: [
        {
            id: "system.admin",
            name: "系统管理",
            description: "系统管理权限"
        },
        {
            id: "user.view",
            name: "查看用户",
            description: "查看用户信息权限"
        },
        {
            id: "user.edit",
            name: "编辑用户",
            description: "编辑用户信息权限"
        },
        {
            id: "resource.create",
            name: "创建资源",
            description: "创建资源权限"
        },
        {
            id: "resource.view",
            name: "查看资源",
            description: "查看资源权限"
        },
        {
            id: "resource.edit",
            name: "编辑资源",
            description: "编辑资源权限"
        },
        {
            id: "resource.delete",
            name: "删除资源",
            description: "删除资源权限"
        }
    ],
    
    // 权限规则
    defaultAllow: false,           // 默认允许还是拒绝
    prioritizeExplicitDeny: true,  // 明确拒绝优先
    permissionInheritance: true,   // 允许权限继承
    hierarchicalResources: true,   // 分层资源
    
    // 量子安全
    useQuantumEntanglement: true,  // 使用量子纠缠增强安全性
    quantumSecurityLevel: "高"      // 量子安全级别
}

// 服务状态
state {
    initialized: Bool = false,           // 服务是否已初始化
    permissions: Map<String, Permission> = {}, // 权限存储
    roles: Map<String, Role> = {},       // 角色存储
    userRoles: Map<String, List<String>> = {}, // 用户到角色ID的映射
    resourceACLs: Map<String, ResourceACL> = {}, // 资源访问控制列表
    accessCache: Map<String, AccessResult> = {}, // 访问缓存
    
    // 事件监听器
    onAccessListeners: List<Function> = [],    // 访问事件监听器
    onRoleChangeListeners: List<Function> = [] // 角色变更事件监听器
}

// 公共函数
function initialize(customConfig: Object = null): Bool {
    if (state.initialized) {
        return true; // 已经初始化
    }
    
    // 合并自定义配置(如果有)
    if (customConfig != null) {
        config = _mergeConfigs(config, customConfig);
    }
    
    // 初始化权限
    _initializePermissions();
    
    // 初始化角色
    _initializeRoles();
    
    // 初始化量子安全功能(如果启用)
    if (config.useQuantumEntanglement) {
        _initializeQuantumSecurity();
    }
    
    state.initialized = true;
    return true;
}

// 检查用户是否有权限访问资源
function checkAccess(request: AccessRequest): AccessResult {
    _checkInitialized();
    
    let startTime = DateTime.now().toEpochMillis();
    
    // 检查缓存
    if (config.cacheEnabled) {
        let cacheKey = _generateCacheKey(request);
        if (state.accessCache.hasKey(cacheKey)) {
            let cachedResult = state.accessCache[cacheKey];
            // 检查缓存是否未过期
            if ((DateTime.now().toEpochMillis() - cachedResult.evaluationTime) < (config.cacheTimeout * 60 * 1000)) {
                return cachedResult;
            }
        }
    }
    
    // 执行访问检查
    let allowed = false;
    let reason = "默认拒绝访问";
    
    // 获取用户角色
    let userRoles = getUserRoles(request.userId);
    
    // 检查是否为管理员角色
    if (userRoles.contains("admin")) {
        allowed = true;
        reason = "管理员角色";
    } else {
        // 获取资源ACL
        let resourceId = request.resourceId;
        let resourceAcl = null;
        
        if (state.resourceACLs.hasKey(resourceId)) {
            resourceAcl = state.resourceACLs[resourceId];
            
            // 检查用户特定权限
            if (resourceAcl.userPermissions.hasKey(request.userId)) {
                let userPerms = resourceAcl.userPermissions[request.userId];
                if (userPerms.contains(request.permissionId)) {
                    allowed = true;
                    reason = "用户拥有直接权限";
                }
            }
            
            // 如果未允许，检查用户角色权限
            if (!allowed) {
                for (let i = 0; i < userRoles.length; i++) {
                    let roleId = userRoles[i];
                    if (resourceAcl.rolePermissions.hasKey(roleId)) {
                        let rolePerms = resourceAcl.rolePermissions[roleId];
                        if (rolePerms.contains(request.permissionId)) {
                            allowed = true;
                            reason = "用户通过角色 '" + roleId + "' 拥有权限";
                            break;
                        }
                    }
                }
            }
        } else if (config.hierarchicalResources) {
            // 如果启用了分层资源，检查父资源权限
            let parentResourceId = _getParentResourceId(resourceId);
            if (parentResourceId != "") {
                let parentRequest = AccessRequest {
                    userId: request.userId,
                    resourceId: parentResourceId,
                    resourceType: request.resourceType,
                    permissionId: request.permissionId,
                    context: request.context
                };
                
                let parentResult = checkAccess(parentRequest);
                if (parentResult.allowed) {
                    allowed = true;
                    reason = "从父资源 '" + parentResourceId + "' 继承的权限";
                }
            }
        }
        
        // 如果仍未决定，使用默认策略
        if (!allowed && !config.prioritizeExplicitDeny) {
            allowed = config.defaultAllow;
            reason = "使用默认政策：" + (allowed 器 "允许" : "拒绝");
        }
    }
    
    // 创建结果
    let result = AccessResult {
        allowed: allowed,
        reason: reason,
        resourceId: request.resourceId,
        permissionId: request.permissionId,
        userId: request.userId,
        evaluationTime: DateTime.now().toEpochMillis() - startTime
    };
    
    // 记录决策(如果启用)
    if (config.logDecisions) {
        _logAccessDecision(request, result);
    }
    
    // 更新缓存
    if (config.cacheEnabled) {
        let cacheKey = _generateCacheKey(request);
        state.accessCache[cacheKey] = result;
    }
    
    // 触发访问事件
    _triggerEvent("access", {
        request: request,
        result: result
    });
    
    return result;
}

// 获取用户角色
function getUserRoles(userId: String): List<String> {
    _checkInitialized();
    
    if (!state.userRoles.hasKey(userId)) {
        return [];
    }
    
    return state.userRoles[userId];
}

// 分配角色给用户
function assignRoleToUser(userId: String, roleId: String): Bool {
    _checkInitialized();
    
    // 检查角色是否存在
    if (!state.roles.hasKey(roleId)) {
        return false;
    }
    
    // 获取或创建用户角色列表
    if (!state.userRoles.hasKey(userId)) {
        state.userRoles[userId] = [];
    }
    
    let userRoles = state.userRoles[userId];
    
    // 检查用户是否已经拥有该角色
    if (userRoles.contains(roleId)) {
        return true;
    }
    
    // 添加角色
    userRoles.push(roleId);
    
    // 触发角色变更事件
    _triggerEvent("roleChange", {
        userId: userId,
        roleId: roleId,
        action: "assign"
    });
    
    return true;
}

// 从用户移除角色
function removeRoleFromUser(userId: String, roleId: String): Bool {
    _checkInitialized();
    
    // 检查用户是否有角色
    if (!state.userRoles.hasKey(userId)) {
        return false;
    }
    
    let userRoles = state.userRoles[userId];
    
    // 检查用户是否拥有该角色
    if (!userRoles.contains(roleId)) {
        return false;
    }
    
    // 移除角色
    state.userRoles[userId] = userRoles.filter(id => id != roleId);
    
    // 触发角色变更事件
    _triggerEvent("roleChange", {
        userId: userId,
        roleId: roleId,
        action: "remove"
    });
    
    return true;
}

// 创建自定义角色
function createRole(role: Role): String {
    _checkInitialized();
    
    // 生成角色ID(如果未提供)
    if (!role.id) {
        role.id = _generateId();
    }
    
    // 检查角色ID是否已存在
    if (state.roles.hasKey(role.id)) {
        return "";
    }
    
    // 设置创建和修改时间
    role.createdAt = DateTime.now();
    role.modifiedAt = DateTime.now();
    
    // 验证权限ID列表
    for (let i = 0; i < role.permissions.length; i++) {
        if (!state.permissions.hasKey(role.permissions[i])) {
            return "";
        }
    }
    
    // 添加角色
    state.roles[role.id] = role;
    
    return role.id;
}

// 更新角色
function updateRole(roleId: String, updates: Object): Bool {
    _checkInitialized();
    
    // 检查角色是否存在
    if (!state.roles.hasKey(roleId)) {
        return false;
    }
    
    let role = state.roles[roleId];
    
    // 系统角色不能修改
    if (role.isSystemRole) {
        return false;
    }
    
    // 应用更新
    if (updates.hasKey("name")) {
        role.name = updates.name;
    }
    
    if (updates.hasKey("description")) {
        role.description = updates.description;
    }
    
    if (updates.hasKey("permissions")) {
        // 验证权限ID列表
        for (let i = 0; i < updates.permissions.length; i++) {
            if (!state.permissions.hasKey(updates.permissions[i])) {
                return false;
            }
        }
        role.permissions = updates.permissions;
    }
    
    // 更新修改时间
    role.modifiedAt = DateTime.now();
    
    // 更新角色
    state.roles[roleId] = role;
    
    return true;
}

// 删除角色
function deleteRole(roleId: String): Bool {
    _checkInitialized();
    
    // 检查角色是否存在
    if (!state.roles.hasKey(roleId)) {
        return false;
    }
    
    let role = state.roles[roleId];
    
    // 系统角色不能删除
    if (role.isSystemRole) {
        return false;
    }
    
    // 从所有用户中移除此角色
    for (let userId in state.userRoles) {
        let userRoles = state.userRoles[userId];
        if (userRoles.contains(roleId)) {
            state.userRoles[userId] = userRoles.filter(id => id != roleId);
            
            // 触发角色变更事件
            _triggerEvent("roleChange", {
                userId: userId,
                roleId: roleId,
                action: "remove"
            });
        }
    }
    
    // 从所有资源ACL中移除此角色
    for (let resourceId in state.resourceACLs) {
        let acl = state.resourceACLs[resourceId];
        if (acl.rolePermissions.hasKey(roleId)) {
            acl.rolePermissions.remove(roleId);
            acl.modifiedAt = DateTime.now();
            state.resourceACLs[resourceId] = acl;
        }
    }
    
    // 删除角色
    state.roles.remove(roleId);
    
    return true;
}

// 获取角色信息
function getRole(roleId: String): Role {
    _checkInitialized();
    
    if (!state.roles.hasKey(roleId)) {
        return null;
    }
    
    return state.roles[roleId];
}

// 获取所有角色
function getAllRoles(): List<Role> {
    _checkInitialized();
    
    let roles = [];
    for (let roleId in state.roles) {
        roles.push(state.roles[roleId]);
    }
    
    return roles;
}

// 创建或更新资源ACL
function setResourceACL(acl: ResourceACL): Bool {
    _checkInitialized();
    
    // 验证用户权限
    for (let userId in acl.userPermissions) {
        let perms = acl.userPermissions[userId];
        for (let i = 0; i < perms.length; i++) {
            if (!state.permissions.hasKey(perms[i])) {
                return false;
            }
        }
    }
    
    // 验证角色权限
    for (let roleId in acl.rolePermissions) {
        if (!state.roles.hasKey(roleId)) {
            return false;
        }
        
        let perms = acl.rolePermissions[roleId];
        for (let i = 0; i < perms.length; i++) {
            if (!state.permissions.hasKey(perms[i])) {
                return false;
            }
        }
    }
    
    // 设置创建和修改时间
    if (!acl.createdAt) {
        acl.createdAt = DateTime.now();
    }
    acl.modifiedAt = DateTime.now();
    
    // 更新ACL
    state.resourceACLs[acl.resourceId] = acl;
    
    // 清除相关缓存
    if (config.cacheEnabled) {
        _clearResourceCache(acl.resourceId);
    }
    
    return true;
}

// 获取资源ACL
function getResourceACL(resourceId: String): ResourceACL {
    _checkInitialized();
    
    if (!state.resourceACLs.hasKey(resourceId)) {
        return null;
    }
    
    return state.resourceACLs[resourceId];
}

// 为资源添加用户权限
function addUserPermission(resourceId: String, userId: String, permissionId: String): Bool {
    _checkInitialized();
    
    // 检查权限是否存在
    if (!state.permissions.hasKey(permissionId)) {
        return false;
    }
    
    // 获取或创建资源ACL
    let acl = null;
    if (state.resourceACLs.hasKey(resourceId)) {
        acl = state.resourceACLs[resourceId];
    } else {
        acl = ResourceACL {
            resourceId: resourceId,
            resourceType: "",
            ownerUserId: "",
            userPermissions: {},
            rolePermissions: {},
            createdAt: DateTime.now(),
            modifiedAt: DateTime.now()
        };
    }
    
    // 获取或创建用户权限列表
    if (!acl.userPermissions.hasKey(userId)) {
        acl.userPermissions[userId] = [];
    }
    
    let perms = acl.userPermissions[userId];
    
    // 检查用户是否已经拥有该权限
    if (perms.contains(permissionId)) {
        return true;
    }
    
    // 添加权限
    perms.push(permissionId);
    acl.userPermissions[userId] = perms;
    acl.modifiedAt = DateTime.now();
    
    // 更新ACL
    state.resourceACLs[resourceId] = acl;
    
    // 清除相关缓存
    if (config.cacheEnabled) {
        _clearResourceCache(resourceId);
    }
    
    return true;
}

// 为资源添加角色权限
function addRolePermission(resourceId: String, roleId: String, permissionId: String): Bool {
    _checkInitialized();
    
    // 检查角色是否存在
    if (!state.roles.hasKey(roleId)) {
        return false;
    }
    
    // 检查权限是否存在
    if (!state.permissions.hasKey(permissionId)) {
        return false;
    }
    
    // 获取或创建资源ACL
    let acl = null;
    if (state.resourceACLs.hasKey(resourceId)) {
        acl = state.resourceACLs[resourceId];
    } else {
        acl = ResourceACL {
            resourceId: resourceId,
            resourceType: "",
            ownerUserId: "",
            userPermissions: {},
            rolePermissions: {},
            createdAt: DateTime.now(),
            modifiedAt: DateTime.now()
        };
    }
    
    // 获取或创建角色权限列表
    if (!acl.rolePermissions.hasKey(roleId)) {
        acl.rolePermissions[roleId] = [];
    }
    
    let perms = acl.rolePermissions[roleId];
    
    // 检查角色是否已经拥有该权限
    if (perms.contains(permissionId)) {
        return true;
    }
    
    // 添加权限
    perms.push(permissionId);
    acl.rolePermissions[roleId] = perms;
    acl.modifiedAt = DateTime.now();
    
    // 更新ACL
    state.resourceACLs[resourceId] = acl;
    
    // 清除相关缓存
    if (config.cacheEnabled) {
        _clearResourceCache(resourceId);
    }
    
    return true;
}

// 清除访问缓存
function clearCache(): Bool {
    _checkInitialized();
    
    state.accessCache = {};
    
    return true;
}

// 添加事件监听器
function addEventListener(eventName: String, callback: Function): String {
    _checkInitialized();
    
    let listenerId = _generateId();
    
    // 根据事件类型添加监听器
    switch (eventName) {
        case "access":
            state.onAccessListeners.push({id: listenerId, callback: callback});
            break;
        case "roleChange":
            state.onRoleChangeListeners.push({id: listenerId, callback: callback});
            break;
        default:
            return "";
    }
    
    return listenerId;
}

// 移除事件监听器
function removeEventListener(eventName: String, listenerId: String): Bool {
    _checkInitialized();
    
    // 根据事件类型移除监听器
    switch (eventName) {
        case "access":
            state.onAccessListeners = state.onAccessListeners.filter(listener => listener.id != listenerId);
            break;
        case "roleChange":
            state.onRoleChangeListeners = state.onRoleChangeListeners.filter(listener => listener.id != listenerId);
            break;
        default:
            return false;
    }
    
    return true;
}

// 内部函数

// 检查服务是否已初始化
function _checkInitialized() {
    if (!state.initialized) {
        throw "授权服务尚未初始化";
    }
}

// 合并配置
function _mergeConfigs(baseConfig: Object, customConfig: Object): Object {
    // 简单合并对象
    let result = baseConfig.clone();
    
    for (let key in customConfig) {
        if (result.hasKey(key)) {
            if (typeof result[key] == "object" && typeof customConfig[key] == "object") {
                result[key] = _mergeConfigs(result[key], customConfig[key]);
            } else {
                result[key] = customConfig[key];
            }
        }
    }
    
    return result;
}

// 初始化量子安全
function _initializeQuantumSecurity() {
    // 初始化量子安全功能
    // 实际实现会与量子处理模块交互
}

// 初始化权限
function _initializePermissions() {
    // 初始化系统权限
    for (let i = 0; i < config.systemPermissions.length; i++) {
        let permInfo = config.systemPermissions[i];
        let perm = Permission {
            id: permInfo.id,
            name: permInfo.name,
            description: permInfo.description,
            category: "系统",
            resourceType: "系统"
        };
        
        state.permissions[perm.id] = perm;
    }
}

// 初始化角色
function _initializeRoles() {
    // 初始化系统角色
    for (let i = 0; i < config.systemRoles.length; i++) {
        let roleInfo = config.systemRoles[i];
        let role = Role {
            id: roleInfo.id,
            name: roleInfo.name,
            description: roleInfo.description,
            permissions: [],
            isSystemRole: true,
            createdAt: DateTime.now(),
            modifiedAt: DateTime.now()
        };
        
        // 为管理员角色添加所有系统权限
        if (role.id == "admin") {
            for (let permId in state.permissions) {
                role.permissions.push(permId);
            }
        } else if (role.id == "user") {
            // 为普通用户添加基本权限
            role.permissions.push("user.view");
            role.permissions.push("resource.view");
        } else if (role.id == "guest") {
            // 为访客添加有限权限
            role.permissions.push("resource.view");
        }
        
        state.roles[role.id] = role;
    }
}

// 生成缓存键
function _generateCacheKey(request: AccessRequest): String {
    return request.userId + "_" + request.resourceId + "_" + request.permissionId;
}

// 清除资源相关缓存
function _clearResourceCache(resourceId: String) {
    // 查找并删除与资源相关的所有缓存项
    let keysToRemove = [];
    
    for (let key in state.accessCache) {
        if (key.contains("_" + resourceId + "_")) {
            keysToRemove.push(key);
        }
    }
    
    for (let i = 0; i < keysToRemove.length; i++) {
        state.accessCache.remove(keysToRemove[i]);
    }
}

// 获取父资源ID
function _getParentResourceId(resourceId: String): String {
    // 从资源ID解析父资源ID
    // 假设使用"/"分隔路径，例如"projects/123/documents/456"
    let parts = resourceId.split("/");
    if (parts.length <= 2) {
        return "";
    }
    
    parts.pop();
    parts.pop();
    return parts.join("/");
}

// 记录访问决策
function _logAccessDecision(request: AccessRequest, result: AccessResult) {
    // 记录访问决策
    // 实际实现会与日志服务交互
}

// 触发事件
function _triggerEvent(eventName: String, eventData: Object) {
    // 根据事件类型触发相应的事件
    let listeners = [];
    
    switch (eventName) {
        case "access":
            listeners = state.onAccessListeners;
            break;
        case "roleChange":
            listeners = state.onRoleChangeListeners;
            break;
    }
    
    // 调用所有监听器
    for (let i = 0; i < listeners.length; i++) {
        try {
            listeners[i].callback(eventData);
        } catch (e) {
            // 记录错误但不中断执行
        }
    }
}

// 生成随机ID
function _generateId(): String {
    return "id_" + Math.random().toString(36).substring(2, 15);
} 