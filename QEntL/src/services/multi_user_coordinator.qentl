// QEntL 多用户协调服务
// 版本: 1.0.0
// 作者: QSM团队
// 量子基因码: QSM-MUSR-4512-Q398
// 描述: 实现多用户协同和协作功能，包括实时协作、冲突解决和状态同步

// 类型定义
type UserStatus {
    ONLINE,            // 在线
    AWAY,              // 离开
    BUSY,              // 忙碌
    OFFLINE,           // 离线
    DO_NOT_DISTURB     // 请勿打扰
}

type ResourceLockType {
    READ,              // 读锁
    WRITE,             // 写锁
    EXCLUSIVE          // 独占锁
}

type ResourceLock {
    resourceId: String,      // 资源ID
    resourceType: String,    // 资源类型
    lockType: ResourceLockType, // 锁类型
    userId: String,          // 锁定用户ID
    acquiredAt: DateTime,    // 获取时间
    expiresAt: DateTime,     // 过期时间
    comment: String          // 锁定注释
}

type UserSession {
    userId: String,          // 用户ID
    username: String,        // 用户名
    status: UserStatus,      // 状态
    lastActivity: DateTime,  // 最后活动时间
    ipAddress: String,       // IP地址
    deviceInfo: String,      // 设备信息
    location: String,        // 位置信息
    activeResources: List<String> // 活动资源ID列表
}

type CollaborationZone {
    zoneId: String,          // 协作区ID
    name: String,            // 协作区名称
    description: String,     // 协作区描述
    resources: List<String>, // 资源ID列表
    participants: List<String>, // 参与者ID列表
    createdAt: DateTime,     // 创建时间
    createdBy: String,       // 创建者ID
    isActive: Bool           // 是否活跃
}

type ChangeOperation {
    resourceId: String,      // 资源ID
    userId: String,          // 用户ID
    timestamp: DateTime,     // 时间戳
    operationType: String,   // 操作类型(create, update, delete)
    path: String,            // 资源路径
    value: Any,              // 新值
    previousValue: Any       // 旧值
}

// 配置
config {
    // 会话设置
    sessionTimeout: 30,           // 会话超时(分钟)
    heartbeatInterval: 30,        // 心跳间隔(秒)
    maxSessionsPerUser: 5,        // 每用户最大会话数
    
    // 锁定设置
    defaultLockTimeout: 5,        // 默认锁超时(分钟)
    maxLocksPerUser: 20,          // 每用户最大锁数
    automaticLockRelease: true,   // 自动释放过期锁
    
    // 协作设置
    maxUsersPerZone: 50,          // 每协作区最大用户数
    notifyResourceChanges: true,  // 通知资源变更
    notifyUserStatusChanges: true,// 通知用户状态变更
    operationHistory: true,       // 保留操作历史
    maxOperationHistory: 1000,    // 最大操作历史数
    
    // 冲突解决
    conflictResolutionStrategy: "last-write-wins", // 冲突解决策略
    enableMerge: true,            // 启用合并
    requireLockOnWrite: true,     // 写入需要锁定
    
    // 量子协同特性
    quantumStateSync: true,       // 量子状态同步
    entanglementProtocol: "高级"   // 量子纠缠协议级别
}

// 服务状态
state {
    initialized: Bool = false,           // 服务是否已初始化
    
    // 用户会话
    userSessions: Map<String, UserSession> = {}, // 用户会话 <sessionId, UserSession>
    userSessionMap: Map<String, List<String>> = {}, // 用户到会话ID的映射 <userId, List<sessionId>>
    
    // 资源锁
    resourceLocks: Map<String, ResourceLock> = {}, // 资源锁 <resourceId, ResourceLock>
    userLocks: Map<String, List<String>> = {}, // 用户到锁资源ID的映射 <userId, List<resourceId>>
    
    // 协作区
    collaborationZones: Map<String, CollaborationZone> = {}, // 协作区 <zoneId, CollaborationZone>
    userZones: Map<String, List<String>> = {}, // 用户到协作区ID的映射 <userId, List<zoneId>>
    
    // 操作历史
    operationHistory: List<ChangeOperation> = [], // 操作历史
    
    // 事件监听器
    onUserStatusListeners: List<Object> = [],    // 用户状态事件监听器
    onResourceChangeListeners: List<Object> = [], // 资源变更事件监听器
    onLockListeners: List<Object> = [],          // 锁事件监听器
    onZoneListeners: List<Object> = []           // 协作区事件监听器
}

// 公共函数
function initialize(customConfig: Object = null): Bool {
    if (state.initialized) {
        return true; // 已经初始化
    }
    
    // 合并自定义配置(如果有)
    if (customConfig != null) {
        config = _mergeConfigs(config, customConfig);
    }
    
    // 初始化量子协同功能(如果启用)
    if (config.quantumStateSync) {
        _initializeQuantumSync();
    }
    
    // 启动过期锁清理任务
    if (config.automaticLockRelease) {
        _startLockCleanupTask();
    }
    
    state.initialized = true;
    return true;
}

// 用户会话管理
// 创建用户会话
function createUserSession(userId: String, username: String, deviceInfo: String, ipAddress: String): String {
    _checkInitialized();
    
    // 检查用户会话数是否超过限制
    if (state.userSessionMap.hasKey(userId) && state.userSessionMap[userId].length >= config.maxSessionsPerUser) {
        return "";
    }
    
    // 生成会话ID
    let sessionId = _generateId();
    
    // 创建用户会话
    let session = UserSession {
        userId: userId,
        username: username,
        status: UserStatus.ONLINE,
        lastActivity: DateTime.now(),
        ipAddress: ipAddress,
        deviceInfo: deviceInfo,
        location: "",
        activeResources: []
    };
    
    // 保存会话
    state.userSessions[sessionId] = session;
    
    // 更新用户到会话的映射
    if (!state.userSessionMap.hasKey(userId)) {
        state.userSessionMap[userId] = [];
    }
    state.userSessionMap[userId].push(sessionId);
    
    // 触发用户状态事件
    _triggerEvent("userStatus", {
        userId: userId,
        username: username,
        status: UserStatus.ONLINE,
        sessionId: sessionId,
        action: "login"
    });
    
    return sessionId;
}

// 更新用户会话
function updateUserSession(sessionId: String, updates: Object): Bool {
    _checkInitialized();
    
    // 检查会话是否存在
    if (!state.userSessions.hasKey(sessionId)) {
        return false;
    }
    
    let session = state.userSessions[sessionId];
    let statusChanged = false;
    let oldStatus = session.status;
    
    // 应用更新
    if (updates.hasKey("status")) {
        statusChanged = session.status != updates.status;
        session.status = updates.status;
    }
    
    // 更新最后活动时间
    session.lastActivity = DateTime.now();
    
    // 应用其他更新
    if (updates.hasKey("location")) {
        session.location = updates.location;
    }
    
    // 保存会话
    state.userSessions[sessionId] = session;
    
    // 如果状态已更改，触发事件
    if (statusChanged) {
        _triggerEvent("userStatus", {
            userId: session.userId,
            username: session.username,
            status: session.status,
            previousStatus: oldStatus,
            sessionId: sessionId,
            action: "statusChanged"
        });
    }
    
    return true;
}

// 结束用户会话
function endUserSession(sessionId: String): Bool {
    _checkInitialized();
    
    // 检查会话是否存在
    if (!state.userSessions.hasKey(sessionId)) {
        return false;
    }
    
    let session = state.userSessions[sessionId];
    
    // 释放此会话持有的所有锁
    _releaseAllUserLocks(session.userId, sessionId);
    
    // 从会话映射中移除
    if (state.userSessionMap.hasKey(session.userId)) {
        state.userSessionMap[session.userId] = state.userSessionMap[session.userId].filter(id => id != sessionId);
    }
    
    // 移除会话
    state.userSessions.remove(sessionId);
    
    // 触发用户状态事件
    _triggerEvent("userStatus", {
        userId: session.userId,
        username: session.username,
        status: UserStatus.OFFLINE,
        sessionId: sessionId,
        action: "logout"
    });
    
    return true;
}

// 获取用户会话
function getUserSession(sessionId: String): UserSession {
    _checkInitialized();
    
    if (!state.userSessions.hasKey(sessionId)) {
        return null;
    }
    
    return state.userSessions[sessionId];
}

// 获取用户所有会话
function getUserSessions(userId: String): List<UserSession> {
    _checkInitialized();
    
    let sessions = [];
    
    if (!state.userSessionMap.hasKey(userId)) {
        return sessions;
    }
    
    let sessionIds = state.userSessionMap[userId];
    for (let i = 0; i < sessionIds.length; i++) {
        if (state.userSessions.hasKey(sessionIds[i])) {
            sessions.push(state.userSessions[sessionIds[i]]);
        }
    }
    
    return sessions;
}

// 心跳更新
function heartbeat(sessionId: String): Bool {
    _checkInitialized();
    
    // 检查会话是否存在
    if (!state.userSessions.hasKey(sessionId)) {
        return false;
    }
    
    // 更新最后活动时间
    let session = state.userSessions[sessionId];
    session.lastActivity = DateTime.now();
    state.userSessions[sessionId] = session;
    
    return true;
}

// 资源锁管理
// 请求资源锁
function requestLock(resourceId: String, userId: String, lockType: ResourceLockType, comment: String = "", timeoutMinutes: Int = null): Bool {
    _checkInitialized();
    
    // 检查用户锁数是否超过限制
    if (state.userLocks.hasKey(userId) && state.userLocks[userId].length >= config.maxLocksPerUser) {
        return false;
    }
    
    // 检查资源是否已被锁定
    if (state.resourceLocks.hasKey(resourceId)) {
        let existingLock = state.resourceLocks[resourceId];
        
        // 如果是同一用户请求相同或更低级别的锁，允许
        if (existingLock.userId == userId) {
            // 如果请求的锁级别高于现有锁，则升级锁
            if (_getLockPriority(lockType) > _getLockPriority(existingLock.lockType)) {
                existingLock.lockType = lockType;
                existingLock.comment = comment;
                existingLock.acquiredAt = DateTime.now();
                existingLock.expiresAt = DateTime.now().addMinutes(timeoutMinutes || config.defaultLockTimeout);
                state.resourceLocks[resourceId] = existingLock;
                
                // 触发锁事件
                _triggerEvent("lock", {
                    resourceId: resourceId,
                    userId: userId,
                    lockType: lockType,
                    action: "upgrade"
                });
            }
            return true;
        }
        
        // 如果资源已被其他用户锁定为独占或写锁，拒绝请求
        if (existingLock.lockType == ResourceLockType.EXCLUSIVE || 
            (existingLock.lockType == ResourceLockType.WRITE && lockType != ResourceLockType.READ)) {
            return false;
        }
        
        // 如果是读锁请求与现有读锁共存
        if (lockType == ResourceLockType.READ && existingLock.lockType == ResourceLockType.READ) {
            // 允许多个读锁
        } else {
            // 其他情况不允许锁定
            return false;
        }
    }
    
    // 创建锁
    let lock = ResourceLock {
        resourceId: resourceId,
        resourceType: _getResourceType(resourceId),
        lockType: lockType,
        userId: userId,
        acquiredAt: DateTime.now(),
        expiresAt: DateTime.now().addMinutes(timeoutMinutes || config.defaultLockTimeout),
        comment: comment
    };
    
    // 保存锁
    state.resourceLocks[resourceId] = lock;
    
    // 更新用户锁映射
    if (!state.userLocks.hasKey(userId)) {
        state.userLocks[userId] = [];
    }
    if (!state.userLocks[userId].contains(resourceId)) {
        state.userLocks[userId].push(resourceId);
    }
    
    // 触发锁事件
    _triggerEvent("lock", {
        resourceId: resourceId,
        userId: userId,
        lockType: lockType,
        action: "acquire"
    });
    
    return true;
}

// 释放资源锁
function releaseLock(resourceId: String, userId: String): Bool {
    _checkInitialized();
    
    // 检查资源是否已被锁定
    if (!state.resourceLocks.hasKey(resourceId)) {
        return true; // 已经没有锁
    }
    
    // 检查是否是锁定用户
    let lock = state.resourceLocks[resourceId];
    if (lock.userId != userId) {
        return false; // 不是锁定用户
    }
    
    // 移除锁
    state.resourceLocks.remove(resourceId);
    
    // 更新用户锁映射
    if (state.userLocks.hasKey(userId)) {
        state.userLocks[userId] = state.userLocks[userId].filter(id => id != resourceId);
    }
    
    // 触发锁事件
    _triggerEvent("lock", {
        resourceId: resourceId,
        userId: userId,
        lockType: lock.lockType,
        action: "release"
    });
    
    return true;
}

// 检查资源锁状态
function checkLock(resourceId: String): ResourceLock {
    _checkInitialized();
    
    if (!state.resourceLocks.hasKey(resourceId)) {
        return null;
    }
    
    return state.resourceLocks[resourceId];
}

// 获取用户所有锁
function getUserLocks(userId: String): List<ResourceLock> {
    _checkInitialized();
    
    let locks = [];
    
    if (!state.userLocks.hasKey(userId)) {
        return locks;
    }
    
    let resourceIds = state.userLocks[userId];
    for (let i = 0; i < resourceIds.length; i++) {
        if (state.resourceLocks.hasKey(resourceIds[i])) {
            locks.push(state.resourceLocks[resourceIds[i]]);
        }
    }
    
    return locks;
}

// 协作区管理
// 创建协作区
function createCollaborationZone(name: String, description: String, resources: List<String>, participants: List<String>, createdBy: String): String {
    _checkInitialized();
    
    // 生成协作区ID
    let zoneId = _generateId();
    
    // 创建协作区
    let zone = CollaborationZone {
        zoneId: zoneId,
        name: name,
        description: description,
        resources: resources,
        participants: participants,
        createdAt: DateTime.now(),
        createdBy: createdBy,
        isActive: true
    };
    
    // 保存协作区
    state.collaborationZones[zoneId] = zone;
    
    // 更新用户到协作区的映射
    for (let i = 0; i < participants.length; i++) {
        let userId = participants[i];
        if (!state.userZones.hasKey(userId)) {
            state.userZones[userId] = [];
        }
        state.userZones[userId].push(zoneId);
    }
    
    // 触发协作区事件
    _triggerEvent("zone", {
        zoneId: zoneId,
        name: name,
        createdBy: createdBy,
        action: "create"
    });
    
    return zoneId;
}

// 更新协作区
function updateCollaborationZone(zoneId: String, updates: Object): Bool {
    _checkInitialized();
    
    // 检查协作区是否存在
    if (!state.collaborationZones.hasKey(zoneId)) {
        return false;
    }
    
    let zone = state.collaborationZones[zoneId];
    
    // 应用更新
    if (updates.hasKey("name")) {
        zone.name = updates.name;
    }
    
    if (updates.hasKey("description")) {
        zone.description = updates.description;
    }
    
    if (updates.hasKey("isActive")) {
        zone.isActive = updates.isActive;
    }
    
    if (updates.hasKey("resources")) {
        zone.resources = updates.resources;
    }
    
    // 更新参与者
    if (updates.hasKey("participants")) {
        // 获取要删除和添加的参与者
        let oldParticipants = zone.participants;
        let newParticipants = updates.participants;
        
        // 移除映射
        for (let i = 0; i < oldParticipants.length; i++) {
            let userId = oldParticipants[i];
            if (!newParticipants.contains(userId) && state.userZones.hasKey(userId)) {
                state.userZones[userId] = state.userZones[userId].filter(id => id != zoneId);
            }
        }
        
        // 添加映射
        for (let i = 0; i < newParticipants.length; i++) {
            let userId = newParticipants[i];
            if (!oldParticipants.contains(userId)) {
                if (!state.userZones.hasKey(userId)) {
                    state.userZones[userId] = [];
                }
                state.userZones[userId].push(zoneId);
            }
        }
        
        zone.participants = newParticipants;
    }
    
    // 保存协作区
    state.collaborationZones[zoneId] = zone;
    
    // 触发协作区事件
    _triggerEvent("zone", {
        zoneId: zoneId,
        action: "update"
    });
    
    return true;
}

// 删除协作区
function deleteCollaborationZone(zoneId: String): Bool {
    _checkInitialized();
    
    // 检查协作区是否存在
    if (!state.collaborationZones.hasKey(zoneId)) {
        return false;
    }
    
    let zone = state.collaborationZones[zoneId];
    
    // 移除用户到协作区的映射
    for (let i = 0; i < zone.participants.length; i++) {
        let userId = zone.participants[i];
        if (state.userZones.hasKey(userId)) {
            state.userZones[userId] = state.userZones[userId].filter(id => id != zoneId);
        }
    }
    
    // 移除协作区
    state.collaborationZones.remove(zoneId);
    
    // 触发协作区事件
    _triggerEvent("zone", {
        zoneId: zoneId,
        action: "delete"
    });
    
    return true;
}

// 获取协作区
function getCollaborationZone(zoneId: String): CollaborationZone {
    _checkInitialized();
    
    if (!state.collaborationZones.hasKey(zoneId)) {
        return null;
    }
    
    return state.collaborationZones[zoneId];
}

// 获取用户协作区
function getUserCollaborationZones(userId: String): List<CollaborationZone> {
    _checkInitialized();
    
    let zones = [];
    
    if (!state.userZones.hasKey(userId)) {
        return zones;
    }
    
    let zoneIds = state.userZones[userId];
    for (let i = 0; i < zoneIds.length; i++) {
        if (state.collaborationZones.hasKey(zoneIds[i])) {
            zones.push(state.collaborationZones[zoneIds[i]]);
        }
    }
    
    return zones;
}

// 资源变更管理
// 记录资源变更
function recordResourceChange(op: ChangeOperation): Bool {
    _checkInitialized();
    
    // 如果未启用操作历史，不记录
    if (!config.operationHistory) {
        return true;
    }
    
    // 检查写操作是否需要锁定
    if (config.requireLockOnWrite && (op.operationType == "update" || op.operationType == "delete")) {
        // 检查资源锁
        if (state.resourceLocks.hasKey(op.resourceId)) {
            let lock = state.resourceLocks[op.resourceId];
            // 检查是否是同一用户
            if (lock.userId != op.userId) {
                return false;
            }
            // 检查锁类型
            if (lock.lockType == ResourceLockType.READ) {
                return false;
            }
        } else {
            return false;
        }
    }
    
    // 记录操作
    state.operationHistory.push(op);
    
    // 如果超过最大历史数，移除最早的记录
    if (state.operationHistory.length > config.maxOperationHistory) {
        state.operationHistory.shift();
    }
    
    // 触发资源变更事件
    if (config.notifyResourceChanges) {
        _triggerEvent("resourceChange", {
            resourceId: op.resourceId,
            userId: op.userId,
            operationType: op.operationType,
            timestamp: op.timestamp
        });
    }
    
    return true;
}

// 获取资源操作历史
function getResourceChangeHistory(resourceId: String, limit: Int = 10): List<ChangeOperation> {
    _checkInitialized();
    
    // 如果未启用操作历史，返回空列表
    if (!config.operationHistory) {
        return [];
    }
    
    // 过滤并排序历史记录
    let history = state.operationHistory.filter(op => op.resourceId == resourceId);
    
    // 按时间戳倒序排序
    history.sort((a, b) => b.timestamp.toEpochMillis() - a.timestamp.toEpochMillis());
    
    // 限制数量
    if (history.length > limit) {
        history = history.slice(0, limit);
    }
    
    return history;
}

// 解决冲突
function resolveConflict(resourceId: String, operations: List<ChangeOperation>): ChangeOperation {
    _checkInitialized();
    
    if (operations.length == 0) {
        return null;
    }
    
    if (operations.length == 1) {
        return operations[0];
    }
    
    // 根据配置的冲突解决策略解决冲突
    if (config.conflictResolutionStrategy == "last-write-wins") {
        // 按时间戳倒序排序
        operations.sort((a, b) => b.timestamp.toEpochMillis() - a.timestamp.toEpochMillis());
        return operations[0];
    } else if (config.conflictResolutionStrategy == "first-write-wins") {
        // 按时间戳正序排序
        operations.sort((a, b) => a.timestamp.toEpochMillis() - b.timestamp.toEpochMillis());
        return operations[0];
    }
    
    // 默认返回最后一个操作
    return operations[operations.length - 1];
}

// 添加事件监听器
function addEventListener(eventName: String, callback: Function): String {
    _checkInitialized();
    
    let listenerId = _generateId();
    
    // 根据事件类型添加监听器
    switch (eventName) {
        case "userStatus":
            state.onUserStatusListeners.push({id: listenerId, callback: callback});
            break;
        case "resourceChange":
            state.onResourceChangeListeners.push({id: listenerId, callback: callback});
            break;
        case "lock":
            state.onLockListeners.push({id: listenerId, callback: callback});
            break;
        case "zone":
            state.onZoneListeners.push({id: listenerId, callback: callback});
            break;
        default:
            return "";
    }
    
    return listenerId;
}

// 移除事件监听器
function removeEventListener(eventName: String, listenerId: String): Bool {
    _checkInitialized();
    
    // 根据事件类型移除监听器
    switch (eventName) {
        case "userStatus":
            state.onUserStatusListeners = state.onUserStatusListeners.filter(listener => listener.id != listenerId);
            break;
        case "resourceChange":
            state.onResourceChangeListeners = state.onResourceChangeListeners.filter(listener => listener.id != listenerId);
            break;
        case "lock":
            state.onLockListeners = state.onLockListeners.filter(listener => listener.id != listenerId);
            break;
        case "zone":
            state.onZoneListeners = state.onZoneListeners.filter(listener => listener.id != listenerId);
            break;
        default:
            return false;
    }
    
    return true;
}

// 内部函数

// 检查服务是否已初始化
function _checkInitialized() {
    if (!state.initialized) {
        throw "多用户协调服务尚未初始化";
    }
}

// 合并配置
function _mergeConfigs(baseConfig: Object, customConfig: Object): Object {
    // 简单合并对象
    let result = baseConfig.clone();
    
    for (let key in customConfig) {
        if (result.hasKey(key)) {
            if (typeof result[key] == "object" && typeof customConfig[key] == "object") {
                result[key] = _mergeConfigs(result[key], customConfig[key]);
            } else {
                result[key] = customConfig[key];
            }
        }
    }
    
    return result;
}

// 初始化量子同步
function _initializeQuantumSync() {
    // 初始化量子同步功能
    // 实际实现会与量子处理模块交互
}

// 启动锁清理任务
function _startLockCleanupTask() {
    // 启动定期清理过期锁的任务
    // 实际实现会创建一个定时任务
}

// 释放所有用户锁
function _releaseAllUserLocks(userId: String, sessionId: String = null) {
    // 没有锁则直接返回
    if (!state.userLocks.hasKey(userId) || state.userLocks[userId].length == 0) {
        return;
    }
    
    // 获取用户的所有锁
    let resourceIds = state.userLocks[userId].slice();
    
    // 释放每个锁
    for (let i = 0; i < resourceIds.length; i++) {
        releaseLock(resourceIds[i], userId);
    }
}

// 获取锁优先级
function _getLockPriority(lockType: ResourceLockType): Int {
    switch (lockType) {
        case ResourceLockType.READ:
            return 1;
        case ResourceLockType.WRITE:
            return 2;
        case ResourceLockType.EXCLUSIVE:
            return 3;
        default:
            return 0;
    }
}

// 根据资源ID获取资源类型
function _getResourceType(resourceId: String): String {
    // 从资源ID解析资源类型
    // 实际实现可能会更复杂
    let parts = resourceId.split(":");
    if (parts.length > 1) {
        return parts[0];
    }
    return "default";
}

// 触发事件
function _triggerEvent(eventName: String, eventData: Object) {
    // 根据事件类型触发相应的事件
    let listeners = [];
    
    switch (eventName) {
        case "userStatus":
            listeners = state.onUserStatusListeners;
            break;
        case "resourceChange":
            listeners = state.onResourceChangeListeners;
            break;
        case "lock":
            listeners = state.onLockListeners;
            break;
        case "zone":
            listeners = state.onZoneListeners;
            break;
    }
    
    // 调用所有监听器
    for (let i = 0; i < listeners.length; i++) {
        try {
            listeners[i].callback(eventData);
        } catch (e) {
            // 记录错误但不中断执行
        }
    }
}

// 生成随机ID
function _generateId(): String {
    return "id_" + DateTime.now().toEpochMillis() + "_" + Math.random().toString(36).substring(2, 15);
} 