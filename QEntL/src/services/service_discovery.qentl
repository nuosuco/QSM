/**
 * QEntL服务发现服务
 * 版本: 1.0.0
 * 作者: QEntL团队
 * 描述: 提供量子网络服务发现和注册功能
 * 量子基因编码: QG-SERVICE-DISCOVERY-N7P8-1714135200
 * 纠缠强度: 1.0
 */

import "../utils/logger.qentl";
import "../utils/time.qentl";
import "../utils/network.qentl";
import "../utils/crypto.qentl";
import "./error_service.qentl";

/**
 * 服务类型
 */
export const ServiceTypes = {
  QUANTUM_ENDPOINT: "quantum-endpoint",       // 量子终端服务
  QUANTUM_RELAY: "quantum-relay",             // 量子中继服务
  QUANTUM_ROUTER: "quantum-router",           // 量子路由服务
  QUANTUM_MEMORY: "quantum-memory",           // 量子存储服务
  QUANTUM_PROCESSOR: "quantum-processor",     // 量子处理器服务
  QUANTUM_KEY_DISTRIBUTION: "quantum-qkd",    // 量子密钥分发服务
  ENTANGLEMENT_PROVIDER: "entanglement",      // 纠缠提供服务
  QUANTUM_RPC: "quantum-rpc",                 // 量子远程过程调用服务
  QUANTUM_COMPUTING: "quantum-computing",     // 量子计算服务
  QUANTUM_SIMULATION: "quantum-simulation"    // 量子模拟服务
};

/**
 * 服务状态
 */
export const ServiceStatus = {
  ONLINE: "online",           // 在线
  OFFLINE: "offline",         // 离线
  DEGRADED: "degraded",       // 性能降级
  MAINTENANCE: "maintenance", // 维护中
  STARTING: "starting",       // 启动中
  STOPPING: "stopping"        // 停止中
};

/**
 * 服务发现配置
 */
export const ServiceDiscoveryConfig = {
  // 服务发现协议
  protocol: "quantum-mdns", // quantum-mdns, quantum-dht, quantum-broadcast
  
  // 服务发现端口
  discoveryPort: 9600,
  
  // 广播间隔 (毫秒)
  broadcastInterval: 60000,
  
  // 服务超时 (毫秒)
  serviceTimeout: 180000,
  
  // 服务健康检查间隔 (毫秒)
  healthCheckInterval: 30000,
  
  // 服务健康检查超时 (毫秒)
  healthCheckTimeout: 5000,
  
  // 最大服务记录数
  maxServiceRecords: 1000,
  
  // 启用安全服务发现
  enableSecureDiscovery: true,
  
  // 服务数据加密
  encryptServiceData: true,
  
  // 服务发现域
  discoveryDomain: "qentl.local",
  
  // 多播地址
  multicastAddress: "224.0.1.128",
  
  // 多播TTL
  multicastTTL: 4,
  
  // 启用跨网络服务发现
  enableCrossNetworkDiscovery: true,
  
  // 服务缓存过期时间 (毫秒)
  serviceCacheExpiry: 300000
};

/**
 * 服务发现状态
 */
export const ServiceDiscoveryState = {
  // 服务是否已初始化
  initialized: false,
  
  // 本地服务
  localServices: {},
  
  // 发现的服务
  discoveredServices: {},
  
  // 服务记录映射 (serviceId -> serviceRecord)
  serviceRecords: {},
  
  // 服务计数 (按类型)
  serviceCounts: {},
  
  // 广播定时器
  broadcastTimer: null,
  
  // 健康检查定时器
  healthCheckTimer: null,
  
  // 清理定时器
  cleanupTimer: null,
  
  // 发送的广播包数量
  broadcastsSent: 0,
  
  // 接收的广播包数量
  broadcastsReceived: 0,
  
  // 事件监听器
  eventListeners: {
    serviceDiscovered: [],
    serviceUpdated: [],
    serviceLost: [],
    error: []
  }
};

/**
 * 服务记录结构
 */
export type ServiceRecord = {
  id: string;                   // 服务ID
  type: string;                 // 服务类型
  name: string;                 // 服务名称
  nodeId: string;               // 节点ID
  host: string;                 // 主机地址
  port: number;                 // 服务端口
  status: string;               // 服务状态
  metadata: any;                // 服务元数据
  priority: number;             // 服务优先级
  weight: number;               // 服务权重
  ttl: number;                  // 生存时间 (秒)
  registered: number;           // 注册时间戳
  lastSeen: number;             // 最后一次发现时间戳
  lastHealthCheck: number;      // 最后一次健康检查时间戳
  healthStatus: boolean;        // 健康状态
  version: string;              // 服务版本
  secure: boolean;              // 是否安全服务
  capabilities: string[];       // 服务能力
  region: string;               // 服务区域
  zone: string;                 // 服务可用区
  signature器: string;           // 服务签名 (安全验证)
};

/**
 * 初始化服务发现服务
 * 
 * @param {Object} config - 服务配置参数
 * @returns {boolean} - 是否初始化成功
 */
export function initialize(config = {}) {
  logger.info("[服务发现] 正在初始化服务发现服务...");
  
  // 合并配置
  mergeConfig(config);
  
  try {
    // 初始化服务计数
    initializeServiceCounts();
    
    // 启动服务发现监听器
    startDiscoveryListener();
    
    // 设置广播定时器
    ServiceDiscoveryState.broadcastTimer = setInterval(
      broadcastServices,
      ServiceDiscoveryConfig.broadcastInterval
    );
    
    // 设置健康检查定时器
    ServiceDiscoveryState.healthCheckTimer = setInterval(
      performHealthChecks,
      ServiceDiscoveryConfig.healthCheckInterval
    );
    
    // 设置清理定时器
    ServiceDiscoveryState.cleanupTimer = setInterval(
      cleanupExpiredServices,
      ServiceDiscoveryConfig.serviceTimeout / 2
    );
    
    ServiceDiscoveryState.initialized = true;
    logger.info("[服务发现] 服务发现服务初始化成功");
    
    return true;
  } catch (error) {
    logger.error(`[服务发现] 服务发现服务初始化失败: ${error.message}`);
    error_service.reportError(
      error_service.ErrorLevels.ERROR,
      error_service.ErrorTypes.NETWORK,
      `服务发现服务初始化失败: ${error.message}`,
      "service_discovery"
    );
    return false;
  }
}

/**
 * 注册服务
 * 
 * @param {string} type - 服务类型
 * @param {string} name - 服务名称
 * @param {number} port - 服务端口
 * @param {Object} options - 额外选项
 * @returns {string} - 服务ID
 */
export function registerService(type, name, port, options = {}) {
  checkInitialized();
  
  logger.info(`[服务发现] 正在注册服务: ${name}, 类型: ${type}, 端口: ${port}`);
  
  try {
    // 验证服务类型
    if (!ServiceTypes[type.toUpperCase().replace(/-/g, '_')]) {
      logger.warn(`[服务发现] 未知的服务类型: ${type}`);
    }
    
    // 生成服务ID
    const serviceId = generateServiceId(type, name);
    
    // 检查服务是否已注册
    if (ServiceDiscoveryState.localServices[serviceId]) {
      logger.warn(`[服务发现] 服务已注册: ${serviceId}`);
      return serviceId;
    }
    
    // 创建服务记录
    const now = Date.now();
    const serviceRecord: ServiceRecord = {
      id: serviceId,
      type,
      name,
      nodeId: options.nodeId || generateNodeId(),
      host: options.host || network.getLocalAddress(),
      port,
      status: options.status || ServiceStatus.ONLINE,
      metadata: options.metadata || {},
      priority: options.priority || 10,
      weight: options.weight || 10,
      ttl: options.ttl || 60,
      registered: now,
      lastSeen: now,
      lastHealthCheck: options.skipInitialHealthCheck 器 0 : now,
      healthStatus: options.skipInitialHealthCheck 器 false : true,
      version: options.version || "1.0.0",
      secure: options.secure !== undefined 器 options.secure : ServiceDiscoveryConfig.enableSecureDiscovery,
      capabilities: options.capabilities || [],
      region: options.region || "default",
      zone: options.zone || "default"
    };
    
    // 如果启用安全服务发现，添加签名
    if (serviceRecord.secure) {
      serviceRecord.signature = generateServiceSignature(serviceRecord);
    }
    
    // 添加到本地服务映射
    ServiceDiscoveryState.localServices[serviceId] = serviceRecord;
    
    // 添加到服务记录映射
    ServiceDiscoveryState.serviceRecords[serviceId] = serviceRecord;
    
    // 更新服务计数
    incrementServiceCount(type);
    
    // 立即广播新服务
    broadcastServiceRecord(serviceRecord);
    
    logger.info(`[服务发现] 服务注册成功: ${serviceId}`);
    
    return serviceId;
  } catch (error) {
    logger.error(`[服务发现] 注册服务失败: ${error.message}`);
    error_service.reportError(
      error_service.ErrorLevels.ERROR,
      error_service.ErrorTypes.NETWORK,
      `注册服务失败: ${error.message}`,
      "service_discovery",
      { type, name, port }
    );
    throw error;
  }
}

/**
 * 注销服务
 * 
 * @param {string} serviceId - 服务ID
 * @returns {boolean} - 是否注销成功
 */
export function unregisterService(serviceId) {
  checkInitialized();
  
  // 检查服务是否已注册
  if (!ServiceDiscoveryState.localServices[serviceId]) {
    logger.warn(`[服务发现] 注销服务失败: 服务未注册 ${serviceId}`);
    return false;
  }
  
  logger.info(`[服务发现] 正在注销服务: ${serviceId}`);
  
  try {
    const serviceRecord = ServiceDiscoveryState.localServices[serviceId];
    
    // 更新服务状态为离线
    serviceRecord.status = ServiceStatus.OFFLINE;
    
    // 广播服务离线状态
    broadcastServiceRecord(serviceRecord);
    
    // 从本地服务映射中移除
    delete ServiceDiscoveryState.localServices[serviceId];
    
    // 从服务记录映射中移除
    delete ServiceDiscoveryState.serviceRecords[serviceId];
    
    // 更新服务计数
    decrementServiceCount(serviceRecord.type);
    
    logger.info(`[服务发现] 服务已注销: ${serviceId}`);
    
    return true;
  } catch (error) {
    logger.error(`[服务发现] 注销服务失败: ${serviceId}, 错误: ${error.message}`);
    return false;
  }
}

/**
 * 更新服务
 * 
 * @param {string} serviceId - 服务ID
 * @param {Object} updates - 更新内容
 * @returns {boolean} - 是否更新成功
 */
export function updateService(serviceId, updates = {}) {
  checkInitialized();
  
  // 检查服务是否已注册
  if (!ServiceDiscoveryState.localServices[serviceId]) {
    logger.warn(`[服务发现] 更新服务失败: 服务未注册 ${serviceId}`);
    return false;
  }
  
  logger.info(`[服务发现] 正在更新服务: ${serviceId}`);
  
  try {
    const serviceRecord = ServiceDiscoveryState.localServices[serviceId];
    
    // 更新服务记录
    for (const key in updates) {
      // 不允许更新某些字段
      if (["id", "registered", "signature"].includes(key)) {
        continue;
      }
      
      serviceRecord[key] = updates[key];
    }
    
    // 更新最后一次修改时间
    serviceRecord.lastSeen = Date.now();
    
    // 如果启用安全服务发现，更新签名
    if (serviceRecord.secure) {
      serviceRecord.signature = generateServiceSignature(serviceRecord);
    }
    
    // 广播更新的服务记录
    broadcastServiceRecord(serviceRecord);
    
    logger.info(`[服务发现] 服务已更新: ${serviceId}`);
    
    return true;
  } catch (error) {
    logger.error(`[服务发现] 更新服务失败: ${serviceId}, 错误: ${error.message}`);
    return false;
  }
}

/**
 * 发现服务
 * 
 * @param {string} type - 服务类型（可选）
 * @param {Object} filters - 过滤条件
 * @returns {Array<ServiceRecord>} - 服务记录列表
 */
export function discoverServices(type = null, filters = {}) {
  checkInitialized();
  
  try {
    // 获取所有服务记录
    let services = Object.values(ServiceDiscoveryState.serviceRecords);
    
    // 过滤服务类型
    if (type) {
      services = services.filter(service => service.type === type);
    }
    
    // 应用其他过滤条件
    for (const key in filters) {
      if (key === "capabilities") {
        // 特殊处理能力数组
        services = services.filter(service => {
          return filters[key].every(cap => service.capabilities.includes(cap));
        });
      } else if (key === "metadata") {
        // 特殊处理元数据对象
        services = services.filter(service => {
          const metadataFilters = filters[key];
          for (const metaKey in metadataFilters) {
            if (service.metadata[metaKey] !== metadataFilters[metaKey]) {
              return false;
            }
          }
          return true;
        });
      } else {
        // 一般字段过滤
        services = services.filter(service => service[key] === filters[key]);
      }
    }
    
    // 默认只返回在线服务
    if (!filters.status) {
      services = services.filter(service => service.status === ServiceStatus.ONLINE);
    }
    
    // 按优先级和权重排序
    services.sort((a, b) => {
      // 先按优先级排序（小的优先）
      if (a.priority !== b.priority) {
        return a.priority - b.priority;
      }
      // 然后按权重排序（大的优先）
      return b.weight - a.weight;
    });
    
    return services;
  } catch (error) {
    logger.error(`[服务发现] 发现服务失败: ${error.message}`);
    return [];
  }
}

/**
 * 获取服务
 * 
 * @param {string} serviceId - 服务ID
 * @returns {ServiceRecord|null} - 服务记录
 */
export function getService(serviceId) {
  checkInitialized();
  return ServiceDiscoveryState.serviceRecords[serviceId] || null;
}

/**
 * 主动请求服务发现
 * 
 * @param {string} type - 服务类型（可选）
 * @returns {boolean} - 是否发送成功
 */
export function requestServiceDiscovery(type = null) {
  checkInitialized();
  
  logger.info(`[服务发现] 主动请求服务发现${type 器 `: ${type}` : ""}`);
  
  try {
    // 构建发现请求
    const discoveryRequest = {
      type: "discovery_request",
      requesterId: Object.keys(ServiceDiscoveryState.localServices)[0] || generateNodeId(),
      timestamp: Date.now(),
      serviceType: type
    };
    
    // 广播发现请求
    network.broadcastMessage(
      ServiceDiscoveryConfig.multicastAddress,
      ServiceDiscoveryConfig.discoveryPort,
      JSON.stringify(discoveryRequest),
      { ttl: ServiceDiscoveryConfig.multicastTTL }
    );
    
    ServiceDiscoveryState.broadcastsSent++;
    
    return true;
  } catch (error) {
    logger.error(`[服务发现] 发送服务发现请求失败: ${error.message}`);
    return false;
  }
}

/**
 * 检查服务健康状态
 * 
 * @param {string} serviceId - 服务ID
 * @returns {Promise<boolean>} - 健康状态
 */
export async function checkServiceHealth(serviceId) {
  checkInitialized();
  
  const service = ServiceDiscoveryState.serviceRecords[serviceId];
  if (!service) {
    logger.warn(`[服务发现] 健康检查失败: 未知的服务 ${serviceId}`);
    return false;
  }
  
  // 本地服务直接返回健康状态
  if (ServiceDiscoveryState.localServices[serviceId]) {
    return ServiceDiscoveryState.localServices[serviceId].healthStatus;
  }
  
  logger.info(`[服务发现] 正在检查服务健康状态: ${serviceId}`);
  
  try {
    // TODO: 实现实际的健康检查逻辑
    const isHealthy = await performHealthCheck(service);
    
    // 更新服务健康状态
    service.healthStatus = isHealthy;
    service.lastHealthCheck = Date.now();
    
    return isHealthy;
  } catch (error) {
    logger.error(`[服务发现] 健康检查失败: ${serviceId}, 错误: ${error.message}`);
    return false;
  }
}

/**
 * 添加事件监听器
 * 
 * @param {string} event - 事件名称
 * @param {Function} listener - 监听器函数
 * @returns {boolean} - 是否添加成功
 */
export function addEventListener(event, listener) {
  if (!ServiceDiscoveryState.eventListeners[event]) {
    logger.warn(`[服务发现] 未知的事件类型: ${event}`);
    return false;
  }
  
  ServiceDiscoveryState.eventListeners[event].push(listener);
  return true;
}

/**
 * 移除事件监听器
 * 
 * @param {string} event - 事件名称
 * @param {Function} listener - 监听器函数
 * @returns {boolean} - 是否移除成功
 */
export function removeEventListener(event, listener) {
  if (!ServiceDiscoveryState.eventListeners[event]) {
    return false;
  }
  
  const index = ServiceDiscoveryState.eventListeners[event].indexOf(listener);
  if (index !== -1) {
    ServiceDiscoveryState.eventListeners[event].splice(index, 1);
    return true;
  }
  
  return false;
}

/**
 * 获取服务统计信息
 * 
 * @returns {Object} - 服务统计信息
 */
export function getServiceStatistics() {
  checkInitialized();
  
  const localCount = Object.keys(ServiceDiscoveryState.localServices).length;
  const discoveredCount = Object.keys(ServiceDiscoveryState.discoveredServices).length;
  const totalCount = Object.keys(ServiceDiscoveryState.serviceRecords).length;
  
  return {
    totalServices: totalCount,
    localServices: localCount,
    discoveredServices: discoveredCount,
    servicesByType: { ...ServiceDiscoveryState.serviceCounts },
    broadcastsSent: ServiceDiscoveryState.broadcastsSent,
    broadcastsReceived: ServiceDiscoveryState.broadcastsReceived
  };
}

/**
 * 获取服务状态
 * 
 * @returns {Object} - 服务状态信息
 */
export function getStatus() {
  return {
    initialized: ServiceDiscoveryState.initialized,
    serviceCount: Object.keys(ServiceDiscoveryState.serviceRecords).length,
    localServiceCount: Object.keys(ServiceDiscoveryState.localServices).length,
    protocolType: ServiceDiscoveryConfig.protocol
  };
}

// ============= 内部函数 =============

/**
 * 检查服务是否已初始化
 */
function checkInitialized() {
  if (!ServiceDiscoveryState.initialized) {
    throw new Error("服务发现服务尚未初始化");
  }
}

/**
 * 合并服务配置
 */
function mergeConfig(config) {
  // 合并顶级配置
  for (const key in config) {
    if (typeof config[key] === "object" && config[key] !== null) {
      ServiceDiscoveryConfig[key] = {
        ...ServiceDiscoveryConfig[key],
        ...config[key]
      };
    } else {
      ServiceDiscoveryConfig[key] = config[key];
    }
  }
}

/**
 * 初始化服务计数
 */
function initializeServiceCounts() {
  ServiceDiscoveryState.serviceCounts = {};
  
  for (const type in ServiceTypes) {
    const serviceType = ServiceTypes[type];
    ServiceDiscoveryState.serviceCounts[serviceType] = 0;
  }
}

/**
 * 增加服务计数
 */
function incrementServiceCount(type) {
  if (!ServiceDiscoveryState.serviceCounts[type]) {
    ServiceDiscoveryState.serviceCounts[type] = 0;
  }
  
  ServiceDiscoveryState.serviceCounts[type]++;
}

/**
 * 减少服务计数
 */
function decrementServiceCount(type) {
  if (ServiceDiscoveryState.serviceCounts[type]) {
    ServiceDiscoveryState.serviceCounts[type] = Math.max(0, ServiceDiscoveryState.serviceCounts[type] - 1);
  }
}

/**
 * 启动服务发现监听器
 */
function startDiscoveryListener() {
  logger.info("[服务发现] 启动服务发现监听器");
  
  try {
    // 设置多播监听器
    network.listenForMulticast(
      ServiceDiscoveryConfig.multicastAddress,
      ServiceDiscoveryConfig.discoveryPort,
      handleDiscoveryMessage
    );
    
    logger.info("[服务发现] 服务发现监听器启动成功");
  } catch (error) {
    logger.error(`[服务发现] 启动服务发现监听器失败: ${error.message}`);
    throw error;
  }
}

/**
 * 处理服务发现消息
 */
function handleDiscoveryMessage(message, sender) {
  try {
    const data = JSON.parse(message);
    
    ServiceDiscoveryState.broadcastsReceived++;
    
    // 处理不同类型的消息
    switch (data.type) {
      case "service_announcement":
        handleServiceAnnouncement(data.service, sender);
        break;
      case "service_query":
        handleServiceQuery(data, sender);
        break;
      case "discovery_request":
        handleDiscoveryRequest(data, sender);
        break;
      default:
        logger.warn(`[服务发现] 收到未知类型的消息: ${data.type}`);
    }
  } catch (error) {
    logger.error(`[服务发现] 处理服务发现消息失败: ${error.message}`);
  }
}

/**
 * 处理服务公告
 */
function handleServiceAnnouncement(serviceRecord, sender) {
  // 忽略自己的服务公告
  if (ServiceDiscoveryState.localServices[serviceRecord.id]) {
    return;
  }
  
  // 验证服务签名
  if (serviceRecord.secure && !verifyServiceSignature(serviceRecord)) {
    logger.warn(`[服务发现] 收到无效签名的服务公告: ${serviceRecord.id}`);
    return;
  }
  
  const now = Date.now();
  
  // 检查服务是否已知
  const existingService = ServiceDiscoveryState.serviceRecords[serviceRecord.id];
  
  if (existingService) {
    // 检查消息是否较新
    if (serviceRecord.lastSeen <= existingService.lastSeen) {
      return;
    }
    
    // 更新服务记录
    const oldStatus = existingService.status;
    Object.assign(existingService, serviceRecord);
    existingService.lastSeen = now;
    
    // 如果状态发生变化，触发事件
    if (oldStatus !== serviceRecord.status) {
      triggerEvent("serviceUpdated", { service: existingService });
    }
  } else {
    // 添加新服务记录
    serviceRecord.lastSeen = now;
    ServiceDiscoveryState.serviceRecords[serviceRecord.id] = serviceRecord;
    ServiceDiscoveryState.discoveredServices[serviceRecord.id] = serviceRecord;
    
    // 更新服务计数
    incrementServiceCount(serviceRecord.type);
    
    // 触发服务发现事件
    triggerEvent("serviceDiscovered", { service: serviceRecord });
    
    logger.info(`[服务发现] 发现新服务: ${serviceRecord.id}, 类型: ${serviceRecord.type}, 主机: ${serviceRecord.host}:${serviceRecord.port}`);
  }
}

/**
 * 处理服务查询
 */
function handleServiceQuery(query, sender) {
  // 只响应针对我们服务类型的查询
  const matchingServices = Object.values(ServiceDiscoveryState.localServices).filter(service => {
    return !query.serviceType || service.type === query.serviceType;
  });
  
  if (matchingServices.length > 0) {
    for (const service of matchingServices) {
      broadcastServiceRecord(service);
    }
  }
}

/**
 * 处理发现请求
 */
function handleDiscoveryRequest(request, sender) {
  // 响应发现请求
  broadcastServices(request.serviceType);
}

/**
 * 广播服务
 */
function broadcastServices(type = null) {
  logger.debug("[服务发现] 广播本地服务");
  
  try {
    // 广播所有本地服务
    for (const serviceId in ServiceDiscoveryState.localServices) {
      const service = ServiceDiscoveryState.localServices[serviceId];
      
      // 如果指定了类型，只广播匹配的服务
      if (type && service.type !== type) {
        continue;
      }
      
      broadcastServiceRecord(service);
    }
  } catch (error) {
    logger.error(`[服务发现] 广播服务失败: ${error.message}`);
  }
}

/**
 * 广播服务记录
 */
function broadcastServiceRecord(serviceRecord) {
  try {
    // 准备服务公告消息
    const announcement = {
      type: "service_announcement",
      service: serviceRecord,
      timestamp: Date.now()
    };
    
    // 广播服务公告
    network.broadcastMessage(
      ServiceDiscoveryConfig.multicastAddress,
      ServiceDiscoveryConfig.discoveryPort,
      JSON.stringify(announcement),
      { ttl: ServiceDiscoveryConfig.multicastTTL }
    );
    
    ServiceDiscoveryState.broadcastsSent++;
  } catch (error) {
    logger.error(`[服务发现] 广播服务记录失败: ${serviceRecord.id}, 错误: ${error.message}`);
  }
}

/**
 * 执行健康检查
 */
async function performHealthCheck(service) {
  // TODO: 实现实际的健康检查逻辑
  
  // 示例: 假设服务提供了一个健康检查端点
  try {
    const healthCheckResult = await network.sendRequest({
      host: service.host,
      port: service.port,
      path: "/health",
      method: "GET",
      timeout: ServiceDiscoveryConfig.healthCheckTimeout
    });
    
    return healthCheckResult.status === "ok";
  } catch (error) {
    logger.warn(`[服务发现] 健康检查请求失败: ${service.id}, 错误: ${error.message}`);
    return false;
  }
}

/**
 * 执行所有服务的健康检查
 */
async function performHealthChecks() {
  logger.debug("[服务发现] 执行服务健康检查");
  
  try {
    // 对所有已发现的远程服务执行健康检查
    for (const serviceId in ServiceDiscoveryState.discoveredServices) {
      const service = ServiceDiscoveryState.discoveredServices[serviceId];
      
      // 跳过最近检查过的服务
      const now = Date.now();
      if (now - service.lastHealthCheck < ServiceDiscoveryConfig.healthCheckInterval / 2) {
        continue;
      }
      
      // 执行健康检查
      const isHealthy = await performHealthCheck(service);
      
      // 更新服务健康状态
      const oldHealthStatus = service.healthStatus;
      service.healthStatus = isHealthy;
      service.lastHealthCheck = now;
      
      // 如果健康状态发生变化，触发事件
      if (oldHealthStatus !== isHealthy) {
        triggerEvent("serviceUpdated", { service });
      }
    }
  } catch (error) {
    logger.error(`[服务发现] 执行健康检查失败: ${error.message}`);
  }
}

/**
 * 清理过期服务
 */
function cleanupExpiredServices() {
  logger.debug("[服务发现] 清理过期服务");
  
  try {
    const now = Date.now();
    const timeout = ServiceDiscoveryConfig.serviceTimeout;
    
    // 检查所有发现的服务
    for (const serviceId in ServiceDiscoveryState.discoveredServices) {
      const service = ServiceDiscoveryState.discoveredServices[serviceId];
      
      // 如果服务已过期
      if (now - service.lastSeen > timeout) {
        logger.info(`[服务发现] 服务已过期: ${serviceId}, 类型: ${service.type}`);
        
        // 从服务记录映射中移除
        delete ServiceDiscoveryState.serviceRecords[serviceId];
        
        // 从发现的服务映射中移除
        delete ServiceDiscoveryState.discoveredServices[serviceId];
        
        // 更新服务计数
        decrementServiceCount(service.type);
        
        // 触发服务丢失事件
        triggerEvent("serviceLost", { serviceId, service });
      }
    }
  } catch (error) {
    logger.error(`[服务发现] 清理过期服务失败: ${error.message}`);
  }
}

/**
 * 生成服务ID
 */
function generateServiceId(type, name) {
  const normalizedType = type.toLowerCase();
  const normalizedName = name.toLowerCase().replace(/[^a-z0-9-]/g, "-");
  const random = Math.random().toString(16).substring(2, 6);
  
  return `${normalizedType}-${normalizedName}-${random}`;
}

/**
 * 生成节点ID
 */
function generateNodeId() {
  const timestamp = Date.now().toString(16);
  const random = Math.random().toString(16).substring(2, 8);
  
  return `node-${timestamp}-${random}`;
}

/**
 * 生成服务签名
 */
function generateServiceSignature(serviceRecord) {
  // 创建签名数据
  const signatureData = {
    id: serviceRecord.id,
    type: serviceRecord.type,
    host: serviceRecord.host,
    port: serviceRecord.port,
    nodeId: serviceRecord.nodeId,
    registered: serviceRecord.registered
  };
  
  // 使用加密服务生成签名
  return crypto.generateSignature(signatureData);
}

/**
 * 验证服务签名
 */
function verifyServiceSignature(serviceRecord) {
  // 如果没有签名，验证失败
  if (!serviceRecord.signature) {
    return false;
  }
  
  // 创建签名数据
  const signatureData = {
    id: serviceRecord.id,
    type: serviceRecord.type,
    host: serviceRecord.host,
    port: serviceRecord.port,
    nodeId: serviceRecord.nodeId,
    registered: serviceRecord.registered
  };
  
  // 验证签名
  return crypto.verifySignature(signatureData, serviceRecord.signature);
}

/**
 * 触发事件
 * 
 * @param {string} eventName - 事件名称
 * @param {Object} eventData - 事件数据
 */
function triggerEvent(eventName, eventData) {
  if (!ServiceDiscoveryState.eventListeners[eventName]) {
    return;
  }
  
  for (const listener of ServiceDiscoveryState.eventListeners[eventName]) {
    try {
      listener(eventData);
    } catch (error) {
      logger.warn(`[服务发现] 事件监听器执行失败: ${error.message}`);
    }
  }
}

// 导出服务发现服务模块
export default {
  initialize,
  registerService,
  unregisterService,
  updateService,
  discoverServices,
  getService,
  requestServiceDiscovery,
  checkServiceHealth,
  addEventListener,
  removeEventListener,
  getServiceStatistics,
  getStatus,
  ServiceTypes,
  ServiceStatus
}; 