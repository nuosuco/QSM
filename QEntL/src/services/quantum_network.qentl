/**
 * QEntL量子网络服务
 * 版本: 1.0.0
 * 作者: QEntL团队
 * 描述: 提供量子网络通信和资源管理功能
 * 量子基因编码: QG-QUANTUM-NETWORK-N5P6-1714135100
 * 纠缠强度: 1.0
 */

import "../utils/logger.qentl";
import "../utils/time.qentl";
import "../utils/quantum_entanglement.qentl";
import "../utils/crypto.qentl";
import "./error_service.qentl";
import "./resource_service.qentl";

/**
 * 网络节点类型
 */
export const NodeTypes = {
  RELAY: "relay",           // 中继节点
  ENDPOINT: "endpoint",     // 终端节点
  CONTROLLER: "controller", // 控制器节点
  REPEATER: "repeater",     // 中继放大器
  ROUTER: "router",         // 量子路由器
  BRIDGE: "bridge"          // 量子桥接器
};

/**
 * 节点状态
 */
export const NodeStatus = {
  ONLINE: "online",       // 在线
  OFFLINE: "offline",     // 离线
  CONNECTING: "connecting", // 连接中
  DEGRADED: "degraded",   // 性能降级
  ERROR: "error"          // 错误状态
};

/**
 * 量子网络服务配置
 */
export const QuantumNetworkConfig = {
  // 本地节点配置
  localNode: {
    id: "",                // 节点ID，启动时自动生成
    type: NodeTypes.ENDPOINT,
    name: "QEntL-Node",
    description: "QEntL量子网络节点",
    maxConnections: 64,
    maxQubits: 1024,
    maxEntanglements: 512
  },
  
  // 网络配置
  network: {
    domain: "qentl.network",
    discoveryPort: 9600,
    dataPort: 9601,
    controlPort: 9602,
    useTLS: true,
    enableQuantumEncryption: true
  },
  
  // 连接配置
  connection: {
    connectionTimeout: 30000,      // 连接超时 (毫秒)
    reconnectInterval: 5000,       // 重连间隔 (毫秒)
    maxReconnectAttempts: 10,      // 最大重连尝试次数
    pingInterval: 10000,           // 心跳间隔 (毫秒)
    pingTimeout: 5000              // 心跳超时 (毫秒)
  },
  
  // 纠缠资源配置
  entanglement: {
    minFidelity: 0.90,             // 最小纠缠保真度
    purificationThreshold: 0.95,   // 纠缠净化阈值
    maxPurificationRounds: 3,      // 最大纠缠净化轮次
    entanglementTimeout: 60000,    // 纠缠超时 (毫秒)
    reserveBuffer: 0.2             // 预留纠缠缓冲区 (20%)
  },
  
  // 路由配置
  routing: {
    pathSelectionAlgorithm: "fidelity", // 路径选择算法 (fidelity, latency, hybrid)
    maxHops: 10,                   // 最大跳数
    routeRefreshInterval: 60000,   // 路由刷新间隔 (毫秒)
    enableLoadBalancing: true,     // 启用负载均衡
    routeCacheTime: 300000         // 路由缓存时间 (毫秒)
  }
};

/**
 * 量子网络服务状态
 */
export const QuantumNetworkState = {
  // 服务是否已初始化
  initialized: false,
  
  // 本地节点信息
  localNode: {
    id: "",
    type: "",
    status: NodeStatus.OFFLINE,
    connections: 0,
    qubits: {
      total: 0,
      available: 0,
      entangled: 0
    },
    startTime: 0
  },
  
  // 远程节点映射 (nodeId -> nodeInfo)
  remoteNodes: {},
  
  // 活动连接 (connectionId -> connectionInfo)
  activeConnections: {},
  
  // 纠缠对 (entanglementId -> entanglementInfo)
  entanglements: {},
  
  // 路由表 (目标节点ID -> 路由信息)
  routingTable: {},
  
  // 网络拓扑图
  networkTopology: {
    nodes: [],
    links: []
  },
  
  // 事件监听器
  eventListeners: {
    nodeDiscovered: [],
    nodeStatusChanged: [],
    connectionEstablished: [],
    connectionClosed: [],
    entanglementCreated: [],
    entanglementConsumed: [],
    messageReceived: [],
    error: []
  }
};

/**
 * 初始化量子网络服务
 * 
 * @param {Object} config - 服务配置参数
 * @returns {boolean} - 是否初始化成功
 */
export function initialize(config = {}) {
  logger.info("[量子网络] 正在初始化量子网络服务...");
  
  // 合并配置
  mergeConfig(config);
  
  try {
    // 生成本地节点ID（如果未指定）
    if (!QuantumNetworkConfig.localNode.id) {
      QuantumNetworkConfig.localNode.id = generateNodeId();
    }
    
    // 初始化本地节点状态
    initializeLocalNodeState();
    
    // 保留量子资源
    reserveQuantumResources();
    
    // 初始化网络连接
    initializeNetworkConnections();
    
    // 启动服务发现
    startServiceDiscovery();
    
    QuantumNetworkState.initialized = true;
    logger.info(`[量子网络] 量子网络服务初始化成功，节点ID: ${QuantumNetworkState.localNode.id}`);
    
    return true;
  } catch (error) {
    logger.error(`[量子网络] 量子网络服务初始化失败: ${error.message}`);
    error_service.reportError(
      error_service.ErrorLevels.ERROR,
      error_service.ErrorTypes.NETWORK,
      `量子网络服务初始化失败: ${error.message}`,
      "quantum_network"
    );
    return false;
  }
}

/**
 * 连接到远程节点
 * 
 * @param {string} nodeId - 远程节点ID
 * @param {Object} options - 连接选项
 * @returns {Promise<string>} - 连接ID
 */
export async function connectToNode(nodeId, options = {}) {
  checkInitialized();
  
  // 检查节点是否存在
  if (!QuantumNetworkState.remoteNodes[nodeId]) {
    throw new Error(`未知的远程节点: ${nodeId}`);
  }
  
  // 检查是否已连接
  const existingConnection = findConnectionByNodeId(nodeId);
  if (existingConnection) {
    return existingConnection.id;
  }
  
  logger.info(`[量子网络] 正在连接到节点: ${nodeId}`);
  
  try {
    // 创建连接
    const connectionId = await createConnection(nodeId, options);
    
    // 建立纠缠
    await establishEntanglement(connectionId);
    
    logger.info(`[量子网络] 已连接到节点: ${nodeId}, 连接ID: ${connectionId}`);
    return connectionId;
  } catch (error) {
    logger.error(`[量子网络] 连接到节点失败: ${nodeId}, 错误: ${error.message}`);
    error_service.reportError(
      error_service.ErrorLevels.ERROR,
      error_service.ErrorTypes.NETWORK,
      `连接到节点失败: ${error.message}`,
      "quantum_network",
      { nodeId }
    );
    throw error;
  }
}

/**
 * 断开与远程节点的连接
 * 
 * @param {string} connectionId - 连接ID
 * @returns {boolean} - 是否断开成功
 */
export function disconnectFromNode(connectionId) {
  checkInitialized();
  
  // 检查连接是否存在
  const connection = QuantumNetworkState.activeConnections[connectionId];
  if (!connection) {
    logger.warn(`[量子网络] 断开连接失败: 连接不存在 ${connectionId}`);
    return false;
  }
  
  logger.info(`[量子网络] 正在断开连接: ${connectionId}, 节点: ${connection.remoteNodeId}`);
  
  try {
    // 释放所有相关的纠缠
    releaseEntanglements(connectionId);
    
    // 关闭连接
    closeConnection(connectionId);
    
    // 从活动连接中移除
    delete QuantumNetworkState.activeConnections[connectionId];
    
    // 更新本地节点状态
    QuantumNetworkState.localNode.connections--;
    
    // 触发连接关闭事件
    triggerEvent("connectionClosed", { connectionId, remoteNodeId: connection.remoteNodeId });
    
    logger.info(`[量子网络] 已断开连接: ${connectionId}`);
    return true;
  } catch (error) {
    logger.error(`[量子网络] 断开连接失败: ${connectionId}, 错误: ${error.message}`);
    return false;
  }
}

/**
 * 发送量子态
 * 
 * @param {string} destinationNodeId - 目标节点ID
 * @param {Object} quantumState - 量子态数据
 * @param {Object} options - 发送选项
 * @returns {Promise<string>} - 发送操作ID
 */
export async function sendQuantumState(destinationNodeId, quantumState, options = {}) {
  checkInitialized();
  
  logger.info(`[量子网络] 正在发送量子态到节点: ${destinationNodeId}`);
  
  try {
    // 找到或建立到目标节点的路径
    const path = await findPathToNode(destinationNodeId);
    
    if (!path || path.length === 0) {
      throw new Error(`无法找到到节点 ${destinationNodeId} 的路径`);
    }
    
    // 获取或创建纠缠对
    const entanglementId = await getOrCreateEntanglement(path);
    
    // 使用量子隐形传态传输量子态
    const operationId = await quantumTeleport(entanglementId, quantumState, options);
    
    logger.info(`[量子网络] 量子态发送成功: ${operationId}`);
    return operationId;
  } catch (error) {
    logger.error(`[量子网络] 发送量子态失败: ${error.message}`);
    error_service.reportError(
      error_service.ErrorLevels.ERROR,
      error_service.ErrorTypes.NETWORK,
      `发送量子态失败: ${error.message}`,
      "quantum_network",
      { destinationNodeId }
    );
    throw error;
  }
}

/**
 * 接收量子态
 * 
 * @param {string} operationId - 接收操作ID
 * @param {number} timeout - 超时时间 (毫秒)
 * @returns {Promise<Object>} - 接收到的量子态
 */
export async function receiveQuantumState(operationId, timeout = 30000) {
  checkInitialized();
  
  logger.info(`[量子网络] 正在接收量子态: ${operationId}`);
  
  return new Promise((resolve, reject) => {
    // 设置超时
    const timeoutId = setTimeout(() => {
      reject(new Error(`接收量子态超时: ${operationId}`));
    }, timeout);
    
    // 监听接收事件
    const listener = (data) => {
      if (data.operationId === operationId) {
        clearTimeout(timeoutId);
        removeEventListener("messageReceived", listener);
        resolve(data.quantumState);
      }
    };
    
    addEventListener("messageReceived", listener);
  });
}

/**
 * 创建纠缠对
 * 
 * @param {string} remoteNodeId - 远程节点ID
 * @param {Object} options - 纠缠选项
 * @returns {Promise<string>} - 纠缠ID
 */
export async function createEntanglement(remoteNodeId, options = {}) {
  checkInitialized();
  
  // 查找或建立连接
  let connectionId = findConnectionByNodeId(remoteNodeId);
  if (!connectionId) {
    connectionId = await connectToNode(remoteNodeId);
  }
  
  const connection = QuantumNetworkState.activeConnections[connectionId];
  if (!connection) {
    throw new Error(`无效的连接: ${connectionId}`);
  }
  
  logger.info(`[量子网络] 正在创建与节点 ${remoteNodeId} 的纠缠对`);
  
  try {
    // 生成纠缠ID
    const entanglementId = generateEntanglementId();
    
    // 纠缠选项
    const entanglementOptions = {
      fidelityTarget: options.fidelity || QuantumNetworkConfig.entanglement.minFidelity,
      timeout: options.timeout || QuantumNetworkConfig.entanglement.entanglementTimeout,
      purification: options.purification !== false
    };
    
    // 请求纠缠资源
    const qubitPair = await quantum_entanglement.createEntangledPair(entanglementOptions);
    
    // 注册纠缠
    QuantumNetworkState.entanglements[entanglementId] = {
      id: entanglementId,
      connectionId,
      remoteNodeId,
      localQubitId: qubitPair.localQubitId,
      remoteQubitId: qubitPair.remoteQubitId,
      fidelity: qubitPair.fidelity,
      createdAt: Date.now(),
      expiresAt: Date.now() + entanglementOptions.timeout,
      state: "active"
    };
    
    // 更新资源计数
    QuantumNetworkState.localNode.qubits.entangled++;
    QuantumNetworkState.localNode.qubits.available--;
    
    // 触发纠缠创建事件
    triggerEvent("entanglementCreated", { 
      entanglementId, 
      remoteNodeId, 
      fidelity: qubitPair.fidelity 
    });
    
    logger.info(`[量子网络] 纠缠对创建成功: ${entanglementId}, 保真度: ${qubitPair.fidelity}`);
    return entanglementId;
  } catch (error) {
    logger.error(`[量子网络] 创建纠缠对失败: ${error.message}`);
    error_service.reportError(
      error_service.ErrorLevels.ERROR,
      error_service.ErrorTypes.QUANTUM,
      `创建纠缠对失败: ${error.message}`,
      "quantum_network",
      { remoteNodeId }
    );
    throw error;
  }
}

/**
 * 释放纠缠对
 * 
 * @param {string} entanglementId - 纠缠ID
 * @returns {boolean} - 是否释放成功
 */
export function releaseEntanglement(entanglementId) {
  checkInitialized();
  
  const entanglement = QuantumNetworkState.entanglements[entanglementId];
  if (!entanglement) {
    logger.warn(`[量子网络] 释放纠缠失败: 纠缠不存在 ${entanglementId}`);
    return false;
  }
  
  logger.info(`[量子网络] 正在释放纠缠对: ${entanglementId}`);
  
  try {
    // 释放量子比特
    quantum_entanglement.releaseEntangledPair({
      localQubitId: entanglement.localQubitId,
      remoteQubitId: entanglement.remoteQubitId
    });
    
    // 更新状态
    entanglement.state = "released";
    
    // 更新资源计数
    QuantumNetworkState.localNode.qubits.entangled--;
    QuantumNetworkState.localNode.qubits.available++;
    
    // 触发纠缠消耗事件
    triggerEvent("entanglementConsumed", { 
      entanglementId, 
      remoteNodeId: entanglement.remoteNodeId 
    });
    
    // 从纠缠列表中移除
    delete QuantumNetworkState.entanglements[entanglementId];
    
    logger.info(`[量子网络] 纠缠对已释放: ${entanglementId}`);
    return true;
  } catch (error) {
    logger.error(`[量子网络] 释放纠缠对失败: ${entanglementId}, 错误: ${error.message}`);
    return false;
  }
}

/**
 * 获取网络拓扑信息
 * 
 * @param {boolean} detailed - 是否返回详细信息
 * @returns {Object} - 网络拓扑信息
 */
export function getNetworkTopology(detailed = false) {
  checkInitialized();
  
  if (detailed) {
    return { ...QuantumNetworkState.networkTopology };
  }
  
  // 简化版本
  return {
    nodes: QuantumNetworkState.networkTopology.nodes.map(node => ({
      id: node.id,
      type: node.type,
      status: node.status
    })),
    links: QuantumNetworkState.networkTopology.links.map(link => ({
      source: link.source,
      target: link.target
    }))
  };
}

/**
 * 获取本地节点信息
 * 
 * @returns {Object} - 本地节点信息
 */
export function getLocalNodeInfo() {
  checkInitialized();
  return { ...QuantumNetworkState.localNode };
}

/**
 * 获取远程节点信息
 * 
 * @param {string} nodeId - 节点ID
 * @returns {Object|null} - 远程节点信息
 */
export function getRemoteNodeInfo(nodeId) {
  checkInitialized();
  return QuantumNetworkState.remoteNodes[nodeId] || null;
}

/**
 * 获取活动连接列表
 * 
 * @returns {Array} - 活动连接列表
 */
export function getActiveConnections() {
  checkInitialized();
  return Object.values(QuantumNetworkState.activeConnections);
}

/**
 * 添加事件监听器
 * 
 * @param {string} event - 事件名称
 * @param {Function} listener - 监听器函数
 * @returns {boolean} - 是否添加成功
 */
export function addEventListener(event, listener) {
  if (!QuantumNetworkState.eventListeners[event]) {
    logger.warn(`[量子网络] 未知的事件类型: ${event}`);
    return false;
  }
  
  QuantumNetworkState.eventListeners[event].push(listener);
  return true;
}

/**
 * 移除事件监听器
 * 
 * @param {string} event - 事件名称
 * @param {Function} listener - 监听器函数
 * @returns {boolean} - 是否移除成功
 */
export function removeEventListener(event, listener) {
  if (!QuantumNetworkState.eventListeners[event]) {
    return false;
  }
  
  const index = QuantumNetworkState.eventListeners[event].indexOf(listener);
  if (index !== -1) {
    QuantumNetworkState.eventListeners[event].splice(index, 1);
    return true;
  }
  
  return false;
}

/**
 * 获取服务状态
 * 
 * @returns {Object} - 服务状态信息
 */
export function getStatus() {
  return {
    initialized: QuantumNetworkState.initialized,
    localNodeId: QuantumNetworkState.localNode.id,
    nodeStatus: QuantumNetworkState.localNode.status,
    connections: QuantumNetworkState.localNode.connections,
    entanglements: Object.keys(QuantumNetworkState.entanglements).length,
    knownNodes: Object.keys(QuantumNetworkState.remoteNodes).length,
    qubitsAvailable: QuantumNetworkState.localNode.qubits.available,
    qubitsEntangled: QuantumNetworkState.localNode.qubits.entangled
  };
}

// ============= 内部函数 =============

/**
 * 检查服务是否已初始化
 */
function checkInitialized() {
  if (!QuantumNetworkState.initialized) {
    throw new Error("量子网络服务尚未初始化");
  }
}

/**
 * 合并服务配置
 */
function mergeConfig(config) {
  // 合并顶级配置
  for (const key in config) {
    if (typeof config[key] === "object" && config[key] !== null) {
      QuantumNetworkConfig[key] = {
        ...QuantumNetworkConfig[key],
        ...config[key]
      };
    } else {
      QuantumNetworkConfig[key] = config[key];
    }
  }
}

/**
 * 初始化本地节点状态
 */
function initializeLocalNodeState() {
  const config = QuantumNetworkConfig.localNode;
  
  QuantumNetworkState.localNode = {
    id: config.id,
    type: config.type,
    status: NodeStatus.CONNECTING,
    connections: 0,
    qubits: {
      total: config.maxQubits,
      available: config.maxQubits,
      entangled: 0
    },
    startTime: Date.now()
  };
  
  // 添加本地节点到网络拓扑
  QuantumNetworkState.networkTopology.nodes.push({
    id: config.id,
    type: config.type,
    name: config.name,
    status: NodeStatus.CONNECTING
  });
  
  logger.info(`[量子网络] 本地节点初始化: ${config.id}, 类型: ${config.type}`);
}

/**
 * 保留量子资源
 */
function reserveQuantumResources() {
  const resources = {
    qubits: QuantumNetworkConfig.localNode.maxQubits
  };
  
  const reservationId = resource_service.reserveResources(
    "quantum_network",
    resources
  );
  
  if (!reservationId) {
    throw new Error("无法保留量子资源");
  }
  
  logger.info(`[量子网络] 已保留量子资源，预留ID: ${reservationId}`);
}

/**
 * 初始化网络连接
 */
function initializeNetworkConnections() {
  // 初始化网络监听器
  // TODO: 实现具体的网络监听逻辑
  
  // 更新节点状态为在线
  QuantumNetworkState.localNode.status = NodeStatus.ONLINE;
  updateTopologyNodeStatus(QuantumNetworkState.localNode.id, NodeStatus.ONLINE);
  
  logger.info("[量子网络] 网络连接初始化完成");
}

/**
 * 启动服务发现
 */
function startServiceDiscovery() {
  // TODO: 实现服务发现逻辑
  logger.info("[量子网络] 服务发现启动");
}

/**
 * 生成节点ID
 */
function generateNodeId() {
  const timestamp = Date.now().toString(16);
  const random = Math.random().toString(16).substring(2, 8);
  const nodeType = QuantumNetworkConfig.localNode.type.substring(0, 2).toUpperCase();
  
  return `QN-${nodeType}-${timestamp}-${random}`;
}

/**
 * 生成连接ID
 */
function generateConnectionId() {
  const timestamp = Date.now().toString(16);
  const random = Math.random().toString(16).substring(2, 8);
  
  return `CONN-${timestamp}-${random}`;
}

/**
 * 生成纠缠ID
 */
function generateEntanglementId() {
  const timestamp = Date.now().toString(16);
  const random = Math.random().toString(16).substring(2, 8);
  
  return `ENT-${timestamp}-${random}`;
}

/**
 * 触发事件
 * 
 * @param {string} eventName - 事件名称
 * @param {Object} eventData - 事件数据
 */
function triggerEvent(eventName, eventData) {
  if (!QuantumNetworkState.eventListeners[eventName]) {
    return;
  }
  
  for (const listener of QuantumNetworkState.eventListeners[eventName]) {
    try {
      listener(eventData);
    } catch (e) {
      logger.warn(`[量子网络] 事件监听器执行失败: ${e.message}`);
    }
  }
}

/**
 * 更新拓扑中节点状态
 */
function updateTopologyNodeStatus(nodeId, status) {
  const node = QuantumNetworkState.networkTopology.nodes.find(n => n.id === nodeId);
  if (node) {
    node.status = status;
  }
}

/**
 * 查找与特定节点的连接
 */
function findConnectionByNodeId(nodeId) {
  for (const connId in QuantumNetworkState.activeConnections) {
    if (QuantumNetworkState.activeConnections[connId].remoteNodeId === nodeId) {
      return connId;
    }
  }
  return null;
}

/**
 * 创建连接（内部实现）
 */
async function createConnection(nodeId, options) {
  // 生成连接ID
  const connectionId = generateConnectionId();
  
  // TODO: 实现实际的连接建立逻辑
  
  // 模拟连接成功
  QuantumNetworkState.activeConnections[connectionId] = {
    id: connectionId,
    remoteNodeId: nodeId,
    status: "connected",
    establishedAt: Date.now(),
    lastActivity: Date.now(),
    statistics: {
      sentPackets: 0,
      receivedPackets: 0,
      sentBytes: 0,
      receivedBytes: 0
    }
  };
  
  // 更新本地节点状态
  QuantumNetworkState.localNode.connections++;
  
  // 触发连接建立事件
  triggerEvent("connectionEstablished", { connectionId, remoteNodeId: nodeId });
  
  return connectionId;
}

/**
 * 关闭连接（内部实现）
 */
function closeConnection(connectionId) {
  // TODO: 实现实际的连接关闭逻辑
  return true;
}

/**
 * 找到到达目标节点的路径
 */
async function findPathToNode(destinationNodeId) {
  // 检查直接连接
  const directConnection = findConnectionByNodeId(destinationNodeId);
  if (directConnection) {
    return [directConnection];
  }
  
  // 检查路由表中是否有缓存的路径
  if (QuantumNetworkState.routingTable[destinationNodeId]) {
    const route = QuantumNetworkState.routingTable[destinationNodeId];
    // 检查路由是否过期
    if (route.timestamp + QuantumNetworkConfig.routing.routeCacheTime > Date.now()) {
      return route.path;
    }
  }
  
  // TODO: 实现实际的路径发现逻辑
  
  // 暂时返回空路径
  return [];
}

/**
 * 获取或创建纠缠对
 */
async function getOrCreateEntanglement(path) {
  // 对于直接连接，创建纠缠对
  if (path.length === 1) {
    const connection = QuantumNetworkState.activeConnections[path[0]];
    return await createEntanglement(connection.remoteNodeId);
  }
  
  // TODO: 实现多跳纠缠交换逻辑
  
  throw new Error("多跳纠缠交换尚未实现");
}

/**
 * 执行量子隐形传态
 */
async function quantumTeleport(entanglementId, quantumState, options) {
  const entanglement = QuantumNetworkState.entanglements[entanglementId];
  if (!entanglement) {
    throw new Error(`无效的纠缠ID: ${entanglementId}`);
  }
  
  // TODO: 实现实际的量子隐形传态逻辑
  
  // 生成操作ID
  const operationId = `QT-${Date.now()}-${Math.random().toString(16).substring(2, 6)}`;
  
  // 消耗纠缠
  releaseEntanglement(entanglementId);
  
  return operationId;
}

/**
 * 释放与特定连接相关的所有纠缠
 */
function releaseEntanglements(connectionId) {
  const relatedEntanglements = Object.keys(QuantumNetworkState.entanglements).filter(
    entId => QuantumNetworkState.entanglements[entId].connectionId === connectionId
  );
  
  for (const entanglementId of relatedEntanglements) {
    releaseEntanglement(entanglementId);
  }
  
  return relatedEntanglements.length;
}

/**
 * 建立纠缠（在连接成功后）
 */
async function establishEntanglement(connectionId) {
  const connection = QuantumNetworkState.activeConnections[connectionId];
  if (!connection) {
    throw new Error(`无效的连接ID: ${connectionId}`);
  }
  
  // 创建初始纠缠对
  return await createEntanglement(connection.remoteNodeId);
}

// 导出量子网络服务模块
export default {
  initialize,
  connectToNode,
  disconnectFromNode,
  sendQuantumState,
  receiveQuantumState,
  createEntanglement,
  releaseEntanglement,
  getNetworkTopology,
  getLocalNodeInfo,
  getRemoteNodeInfo,
  getActiveConnections,
  addEventListener,
  removeEventListener,
  getStatus,
  NodeTypes,
  NodeStatus
}; 