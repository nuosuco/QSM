// QEntL元数据管理器
// 版本: 1.0.0
// 描述: 管理文件系统元数据，提供高效的元数据索引与查询功能
// 作者: QEntL开发团队
// 量子基因: 0xA9C167
// 纠缠强度: 0.91

导入 "./multidimensional_index.qentl" 作为 索引

配置 {
    // 基础配置
    元数据缓存大小: 10000,
    缓存过期时间: 3600,  // 秒
    最大标签数: 50,
    最大自定义属性: 100,
    
    // 索引配置
    标签索引: true,
    时间索引: true,
    类型索引: true,
    自定义索引字段: ["作者", "项目", "版本", "状态"],
    
    // 高级配置
    启用自动分类: true,
    自动分类阈值: 0.75,
    元数据存储方式: "嵌入式",  // 嵌入式、单独文件、数据库
    
    // 性能配置
    异步更新: true,
    批量更新大小: 50,
    压缩元数据: true
}

类型 文件元数据 {
    路径: 字符串,
    名称: 字符串,
    扩展名: 字符串,
    类型: 字符串,          // 文件、目录、链接、特殊文件
    大小: 整数,
    创建时间: 时间戳,
    修改时间: 时间戳,
    访问时间: 时间戳,
    版本: 整数,
    标签: [字符串],
    拥有者: 字符串,
    权限: 整数,
    校验和: 字符串,
    MIME类型: 字符串,
    参考次数: 整数,        // 被其他文件引用的次数
    元数据版本: 整数,
    自定义属性: 映射<字符串, 任意>
}

类型 目录元数据 {
    路径: 字符串,
    名称: 字符串,
    类型: 字符串,          // 总是 "目录"
    创建时间: 时间戳,
    修改时间: 时间戳,
    访问时间: 时间戳,
    版本: 整数,
    标签: [字符串],
    拥有者: 字符串,
    权限: 整数,
    子项数: 整数,
    元数据版本: 整数,
    自定义属性: 映射<字符串, 任意>
}

类型 元数据查询 {
    路径前缀器: 字符串,
    类型器: 字符串,
    标签器: [字符串],
    时间范围器: {
        字段: 字符串,      // 创建时间、修改时间、访问时间
        开始: 时间戳,
        结束: 时间戳
    },
    大小范围器: {
        最小: 整数,
        最大: 整数
    },
    自定义条件器: [{
        字段: 字符串,
        操作符: 字符串,    // 等于、不等于、大于、小于、包含、不包含
        值: 任意
    }],
    排序器: {
        字段: 字符串,
        顺序: 字符串       // 升序、降序
    },
    限制器: 整数,
    偏移器: 整数
}

类型 元数据更新 {
    路径: 字符串,
    更新字段: 映射<字符串, 任意>,
    增加标签器: [字符串],
    移除标签器: [字符串],
    增加自定义属性器: 映射<字符串, 任意>,
    移除自定义属性器: [字符串],
    版本检查器: 整数        // 乐观锁，确保更新基于最新版本
}

类型 元数据统计 {
    文件计数: 整数,
    目录计数: 整数,
    总大小: 整数,
    平均文件大小: 浮点数,
    最大文件大小: 整数,
    标签分布: 映射<字符串, 整数>,
    类型分布: 映射<字符串, 整数>,
    文件扩展名分布: 映射<字符串, 整数>
}

状态 {
    已初始化: 布尔,
    元数据缓存: 映射<字符串, {
        数据: 文件元数据|目录元数据,
        过期时间: 时间戳
    }>,
    暂存更新: [{
        路径: 字符串,
        更新: 元数据更新
    }],
    更新计时器ID: 整数,
    统计: {
        缓存命中: 整数,
        缓存未命中: 整数,
        更新操作: 整数
    }
}

// 初始化元数据管理器
函数 初始化() -> 布尔 {
    日志("初始化元数据管理器...")
    
    状态.已初始化 = true
    状态.元数据缓存 = {}
    状态.暂存更新 = []
    状态.统计 = {
        缓存命中: 0,
        缓存未命中: 0,
        更新操作: 0
    }
    
    如果 (配置.异步更新) {
        状态.更新计时器ID = 设置定时器(1000, () => {
            处理暂存更新()
        }, true)
    }
    
    日志("元数据管理器初始化完成")
    返回 true
}

// 获取文件元数据
函数 获取文件元数据(路径: 字符串) -> {元数据器: 文件元数据, 成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    // 检查缓存
    如果 (状态.元数据缓存[路径]) {
        缓存项 = 状态.元数据缓存[路径]
        当前时间 = 获取当前时间()
        
        如果 (当前时间 < 缓存项.过期时间) {
            状态.统计.缓存命中++
            如果 (缓存项.数据.类型 === "目录") {
                返回 {
                    成功: false,
                    错误信息: "路径是目录，不是文件"
                }
            }
            返回 {
                元数据: 缓存项.数据 作为 文件元数据,
                成功: true
            }
        }
    }
    
    状态.统计.缓存未命中++
    
    尝试 {
        是目录 = 检查是否目录(路径)
        
        如果 (是目录) {
            返回 {
                成功: false,
                错误信息: "路径是目录，不是文件"
            }
        }
        
        存在 = 检查路径存在(路径)
        
        如果 (!存在) {
            返回 {
                成功: false,
                错误信息: "文件不存在"
            }
        }
        
        元数据 = 读取文件元数据信息(路径)
        
        // 更新缓存
        状态.元数据缓存[路径] = {
            数据: 元数据,
            过期时间: 获取当前时间() + 配置.缓存过期时间
        }
        
        返回 {
            元数据: 元数据,
            成功: true
        }
    } 捕获 (错误) {
        返回 {
            成功: false,
            错误信息: 错误.消息
        }
    }
}

// 获取目录元数据
函数 获取目录元数据(路径: 字符串) -> {元数据器: 目录元数据, 成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    // 检查缓存
    如果 (状态.元数据缓存[路径]) {
        缓存项 = 状态.元数据缓存[路径]
        当前时间 = 获取当前时间()
        
        如果 (当前时间 < 缓存项.过期时间) {
            状态.统计.缓存命中++
            如果 (缓存项.数据.类型 !== "目录") {
                返回 {
                    成功: false,
                    错误信息: "路径是文件，不是目录"
                }
            }
            返回 {
                元数据: 缓存项.数据 作为 目录元数据,
                成功: true
            }
        }
    }
    
    状态.统计.缓存未命中++
    
    尝试 {
        是目录 = 检查是否目录(路径)
        
        如果 (!是目录) {
            返回 {
                成功: false,
                错误信息: "路径是文件，不是目录"
            }
        }
        
        存在 = 检查路径存在(路径)
        
        如果 (!存在) {
            返回 {
                成功: false,
                错误信息: "目录不存在"
            }
        }
        
        元数据 = 读取目录元数据信息(路径)
        
        // 更新缓存
        状态.元数据缓存[路径] = {
            数据: 元数据,
            过期时间: 获取当前时间() + 配置.缓存过期时间
        }
        
        返回 {
            元数据: 元数据,
            成功: true
        }
    } 捕获 (错误) {
        返回 {
            成功: false,
            错误信息: 错误.消息
        }
    }
}

// 更新文件元数据
函数 更新文件元数据(更新: 元数据更新) -> {成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    如果 (配置.异步更新) {
        // 添加到暂存更新列表
        状态.暂存更新.推入({
            路径: 更新.路径,
            更新: 更新
        })
        
        状态.统计.更新操作++
        
        如果 (状态.暂存更新.长度 >= 配置.批量更新大小) {
            处理暂存更新()
        }
        
        返回 {
            成功: true
        }
    } 否则 {
        // 立即更新
        返回 执行元数据更新(更新)
    }
}

// 搜索元数据
函数 搜索元数据(查询: 元数据查询) -> {结果: [文件元数据|目录元数据], 总数: 整数, 成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    尝试 {
        索引查询 = 构建索引查询(查询)
        索引结果 = 索引.搜索(索引查询)
        
        结果数量 = 索引结果.总数
        
        // 加载实际元数据
        元数据结果 = []
        对于 (项目 在 索引结果.条目) {
            路径 = 项目.ID
            是目录 = 检查是否目录(路径)
            
            元数据结果项 = 是目录 器 
                获取目录元数据(路径).元数据 : 
                获取文件元数据(路径).元数据
                
            如果 (元数据结果项) {
                元数据结果.推入(元数据结果项)
            }
        }
        
        返回 {
            结果: 元数据结果,
            总数: 结果数量,
            成功: true
        }
    } 捕获 (错误) {
        返回 {
            结果: [],
            总数: 0,
            成功: false,
            错误信息: 错误.消息
        }
    }
}

// 添加标签
函数 添加标签(路径: 字符串, 标签: [字符串]) -> {成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    是目录 = 检查是否目录(路径)
    结果 = 是目录 器 获取目录元数据(路径) : 获取文件元数据(路径)
    
    如果 (!结果.成功) {
        返回 结果
    }
    
    元数据 = 结果.元数据
    
    如果 (元数据.标签.长度 + 标签.长度 > 配置.最大标签数) {
        返回 {
            成功: false,
            错误信息: `标签数量超过限制 (${配置.最大标签数})`
        }
    }
    
    // 过滤掉已存在的标签
    新标签 = 标签.过滤(标签 => !元数据.标签.包含(标签))
    
    如果 (新标签.长度 === 0) {
        返回 {
            成功: true
        }
    }
    
    更新 = {
        路径: 路径,
        更新字段: {},
        增加标签: 新标签
    }
    
    返回 更新文件元数据(更新)
}

// 移除标签
函数 移除标签(路径: 字符串, 标签: [字符串]) -> {成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    更新 = {
        路径: 路径,
        更新字段: {},
        移除标签: 标签
    }
    
    返回 更新文件元数据(更新)
}

// 计算元数据统计
函数 计算统计(路径前缀: 字符串 = "") -> {统计: 元数据统计, 成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    尝试 {
        // 查询所有文件和目录
        查询 = {
            路径前缀: 路径前缀
        }
        
        搜索结果 = 搜索元数据(查询)
        
        如果 (!搜索结果.成功) {
            返回 {
                统计: 空统计(),
                成功: false,
                错误信息: 搜索结果.错误信息
            }
        }
        
        文件列表 = 搜索结果.结果.过滤(项 => 项.类型 !== "目录")
        目录列表 = 搜索结果.结果.过滤(项 => 项.类型 === "目录")
        
        // 计算统计数据
        总大小 = 文件列表.减少((总和, 文件) => 总和 + 文件.大小, 0)
        最大文件大小 = 文件列表.长度 > 0 器 
            文件列表.减少((最大值, 文件) => 最大(最大值, 文件.大小), 0) : 0
        平均文件大小 = 文件列表.长度 > 0 器 总大小 / 文件列表.长度 : 0
        
        // 计算标签分布
        标签分布 = {}
        对于 (项 在 搜索结果.结果) {
            对于 (标签 在 项.标签) {
                标签分布[标签] = (标签分布[标签] || 0) + 1
            }
        }
        
        // 计算类型分布
        类型分布 = {}
        对于 (项 在 搜索结果.结果) {
            类型分布[项.类型] = (类型分布[项.类型] || 0) + 1
        }
        
        // 计算文件扩展名分布
        扩展名分布 = {}
        对于 (文件 在 文件列表) {
            如果 (文件.扩展名) {
                扩展名分布[文件.扩展名] = (扩展名分布[文件.扩展名] || 0) + 1
            }
        }
        
        统计 = {
            文件计数: 文件列表.长度,
            目录计数: 目录列表.长度,
            总大小: 总大小,
            平均文件大小: 平均文件大小,
            最大文件大小: 最大文件大小,
            标签分布: 标签分布,
            类型分布: 类型分布,
            文件扩展名分布: 扩展名分布
        }
        
        返回 {
            统计: 统计,
            成功: true
        }
    } 捕获 (错误) {
        返回 {
            统计: 空统计(),
            成功: false,
            错误信息: 错误.消息
        }
    }
}

// 删除元数据
函数 删除元数据(路径: 字符串) -> {成功: 布尔, 错误信息器: 字符串} {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    尝试 {
        // 从索引中移除
        索引.移除条目(路径)
        
        // 从缓存中移除
        如果 (状态.元数据缓存[路径]) {
            删除 状态.元数据缓存[路径]
        }
        
        // 从文件系统中删除元数据文件（如果配置为单独文件）
        如果 (配置.元数据存储方式 === "单独文件") {
            元数据文件路径 = 获取元数据文件路径(路径)
            删除文件(元数据文件路径)
        }
        
        返回 {
            成功: true
        }
    } 捕获 (错误) {
        返回 {
            成功: false,
            错误信息: 错误.消息
        }
    }
}

// 内部函数：处理暂存更新
内部函数 处理暂存更新() {
    如果 (状态.暂存更新.长度 === 0) {
        返回
    }
    
    更新列表 = [...状态.暂存更新]
    状态.暂存更新 = []
    
    对于 (项 在 更新列表) {
        执行元数据更新(项.更新)
    }
}

// 内部函数：执行元数据更新
内部函数 执行元数据更新(更新: 元数据更新) -> {成功: 布尔, 错误信息器: 字符串} {
    路径 = 更新.路径
    
    尝试 {
        是目录 = 检查是否目录(路径)
        
        // 获取当前元数据
        结果 = 是目录 器 获取目录元数据(路径) : 获取文件元数据(路径)
        
        如果 (!结果.成功) {
            返回 结果
        }
        
        当前元数据 = 结果.元数据
        
        // 版本检查（乐观锁）
        如果 (更新.版本检查 !== undefined && 当前元数据.版本 !== 更新.版本检查) {
            返回 {
                成功: false,
                错误信息: `版本冲突: 当前版本 ${当前元数据.版本}, 预期版本 ${更新.版本检查}`
            }
        }
        
        // 应用更新
        对于 (字段 在 对象键(更新.更新字段)) {
            当前元数据[字段] = 更新.更新字段[字段]
        }
        
        // 增加标签
        如果 (更新.增加标签) {
            对于 (标签 在 更新.增加标签) {
                如果 (!当前元数据.标签.包含(标签)) {
                    当前元数据.标签.推入(标签)
                }
            }
        }
        
        // 移除标签
        如果 (更新.移除标签) {
            当前元数据.标签 = 当前元数据.标签.过滤(标签 => !更新.移除标签.包含(标签))
        }
        
        // 增加自定义属性
        如果 (更新.增加自定义属性) {
            对于 (键 在 对象键(更新.增加自定义属性)) {
                当前元数据.自定义属性[键] = 更新.增加自定义属性[键]
            }
        }
        
        // 移除自定义属性
        如果 (更新.移除自定义属性) {
            对于 (键 在 更新.移除自定义属性) {
                删除 当前元数据.自定义属性[键]
            }
        }
        
        // 更新版本和修改时间
        当前元数据.版本++
        当前元数据.修改时间 = 获取当前时间()
        
        // 保存元数据
        保存结果 = 保存元数据信息(路径, 当前元数据)
        
        如果 (!保存结果) {
            返回 {
                成功: false,
                错误信息: "保存元数据失败"
            }
        }
        
        // 更新缓存
        状态.元数据缓存[路径] = {
            数据: 当前元数据,
            过期时间: 获取当前时间() + 配置.缓存过期时间
        }
        
        // 更新索引
        索引.更新条目(构建索引条目(当前元数据))
        
        返回 {
            成功: true
        }
    } 捕获 (错误) {
        返回 {
            成功: false,
            错误信息: 错误.消息
        }
    }
}

// 内部函数：构建索引查询
内部函数 构建索引查询(查询: 元数据查询) {
    索引查询 = {
        条件: []
    }
    
    如果 (查询.路径前缀) {
        索引查询.条件.推入({
            字段: "路径",
            操作: "前缀",
            值: 查询.路径前缀
        })
    }
    
    如果 (查询.类型) {
        索引查询.条件.推入({
            字段: "类型",
            操作: "等于",
            值: 查询.类型
        })
    }
    
    如果 (查询.标签 && 查询.标签.长度 > 0) {
        对于 (标签 在 查询.标签) {
            索引查询.条件.推入({
                字段: "标签",
                操作: "包含",
                值: 标签
            })
        }
    }
    
    如果 (查询.时间范围) {
        索引查询.条件.推入({
            字段: 查询.时间范围.字段,
            操作: "范围",
            最小值: 查询.时间范围.开始,
            最大值: 查询.时间范围.结束
        })
    }
    
    如果 (查询.大小范围) {
        索引查询.条件.推入({
            字段: "大小",
            操作: "范围",
            最小值: 查询.大小范围.最小,
            最大值: 查询.大小范围.最大
        })
    }
    
    如果 (查询.自定义条件) {
        对于 (条件 在 查询.自定义条件) {
            索引查询.条件.推入({
                字段: 条件.字段,
                操作: 映射操作符(条件.操作符),
                值: 条件.值
            })
        }
    }
    
    如果 (查询.排序) {
        索引查询.排序 = {
            字段: 查询.排序.字段,
            方向: 查询.排序.顺序 === "升序" 器 "升序" : "降序"
        }
    }
    
    如果 (查询.限制) {
        索引查询.限制 = 查询.限制
    }
    
    如果 (查询.偏移) {
        索引查询.偏移 = 查询.偏移
    }
    
    返回 索引查询
}

// 内部函数：映射操作符
内部函数 映射操作符(操作符: 字符串) -> 字符串 {
    切换 (操作符) {
        情况 "等于":
            返回 "等于"
        情况 "不等于":
            返回 "不等于"
        情况 "大于":
            返回 "大于"
        情况 "小于":
            返回 "小于"
        情况 "包含":
            返回 "包含"
        情况 "不包含":
            返回 "不包含"
        默认:
            返回 "等于"
    }
}

// 内部函数：构建索引条目
内部函数 构建索引条目(元数据: 文件元数据|目录元数据) {
    条目 = {
        ID: 元数据.路径,
        字段: {
            路径: 元数据.路径,
            名称: 元数据.名称,
            类型: 元数据.类型,
            创建时间: 元数据.创建时间,
            修改时间: 元数据.修改时间,
            访问时间: 元数据.访问时间,
            标签: 元数据.标签
        }
    }
    
    如果 (元数据.类型 !== "目录") {
        文件元数据 = 元数据 作为 文件元数据
        条目.字段.大小 = 文件元数据.大小
        条目.字段.扩展名 = 文件元数据.扩展名
        条目.字段.MIME类型 = 文件元数据.MIME类型
    } 否则 {
        目录元数据 = 元数据 作为 目录元数据
        条目.字段.子项数 = 目录元数据.子项数
    }
    
    // 添加自定义属性到索引
    对于 (配置.自定义索引字段 中的 字段) {
        如果 (元数据.自定义属性[字段] !== undefined) {
            条目.字段[字段] = 元数据.自定义属性[字段]
        }
    }
    
    返回 条目
}

// 内部函数：空统计
内部函数 空统计() -> 元数据统计 {
    返回 {
        文件计数: 0,
        目录计数: 0,
        总大小: 0,
        平均文件大小: 0,
        最大文件大小: 0,
        标签分布: {},
        类型分布: {},
        文件扩展名分布: {}
    }
}

// 清除元数据缓存
函数 清除缓存() -> 布尔 {
    如果 (!状态.已初始化) 抛出 新错误("元数据管理器未初始化")
    
    状态.元数据缓存 = {}
    返回 true
}

// 获取缓存统计
函数 获取缓存统计() -> {缓存项数: 整数, 缓存命中: 整数, 缓存未命中: 整数, 缓存命中率: 浮点数} {
    总访问 = 状态.统计.缓存命中 + 状态.统计.缓存未命中
    命中率 = 总访问 > 0 器 状态.统计.缓存命中 / 总访问 : 0
    
    返回 {
        缓存项数: 对象键(状态.元数据缓存).长度,
        缓存命中: 状态.统计.缓存命中,
        缓存未命中: 状态.统计.缓存未命中,
        缓存命中率: 命中率
    }
} 