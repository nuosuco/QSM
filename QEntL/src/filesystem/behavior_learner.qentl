// 行为学习器 - 用户行为分析和模式学习
// 版本: 1.0.0
// 作者: QEntL团队
// 描述: 分析用户与文件系统的交互行为，学习使用模式，优化访问体验

// 导入依赖
import "../utils/logger.qentl";
import "../utils/statistics.qentl";
import "../database/time_series_db.qentl";
import "./auto_classifier.qentl";

// 配置
config BehaviorLearnerConfig {
    最大行为模式数: 500,            // 最多存储的行为模式数
    最小置信度: 0.70,               // 模式识别的最小置信度
    行为序列最大长度: 20,            // 单个行为序列的最大长度
    历史数据保留天数: 90,            // 保留历史行为数据的天数
    学习周期: 3600,                 // 学习周期，单位为秒
    启用预测: true,                 // 是否启用行为预测
    预测深度: 3,                    // 预测未来行为的步数
    并行学习: true                  // 是否启用并行学习过程
}

// 数据类型
type 用户行为 {
    用户ID: string,
    行为类型: string,               // 例如：打开、关闭、编辑、删除等
    资源路径: string,               // 操作的文件或目录路径
    时间戳: datetime,
    访问方式: string,               // 例如：直接访问、搜索结果、推荐等
    停留时间: number,               // 单位为秒
    操作结果: string,               // 成功、失败、取消等
    设备信息: string,
    上下文信息: map<string, any>     // 额外上下文
}

type 行为序列 {
    序列ID: string,
    用户ID: string,
    行为列表: array<用户行为>,
    开始时间: datetime,
    结束时间: datetime,
    访问路径集合: array<string>,
    标签: array<string>
}

type 行为模式 {
    模式ID: string,
    模式描述: string,
    行为序列模板: array<用户行为>,
    关联标签: array<string>,
    适用用户: array<string>,        // 空数组表示适用所有用户
    发现时间: datetime,
    最近匹配时间: datetime,
    匹配次数: number,
    置信度: number,
    相关推荐: array<string>         // 相关资源推荐
}

type 用户配置文件 {
    用户ID: string,
    首选路径: array<string>,
    常用文件类型: map<string, number>,
    活跃时段: map<string, number>,  // 小时 -> 活跃度
    访问频率: map<string, number>,  // 路径 -> 频率
    用户标签: array<string>,
    最后更新时间: datetime
}

// 状态
state {
    行为数据库: TimeSeriesDB,
    活跃序列: map<string, 行为序列>,    // 用户ID -> 当前活跃序列
    识别模式: map<string, 行为模式>,    // 模式ID -> 模式
    用户配置: map<string, 用户配置文件>, // 用户ID -> 配置文件
    学习状态: string
}

// 函数
function 初始化(配置: BehaviorLearnerConfig) {
    log.info("初始化文件系统行为学习器");
    state.行为数据库 = new TimeSeriesDB("user_behaviors");
    state.活跃序列 = {};
    state.识别模式 = {};
    state.用户配置 = {};
    state.学习状态 = "就绪";
    
    // 加载已有模式
    _加载已存模式();
    
    // 设置定期学习
    _设置定期学习(配置.学习周期);
    
    log.info("文件系统行为学习器初始化完成");
}

function 记录行为(行为: 用户行为) {
    // 存储行为到数据库
    state.行为数据库.存储(行为.用户ID, 行为);
    
    // 更新当前活跃序列
    _更新活跃序列(行为);
    
    // 尝试识别模式
    if (config.启用预测) {
        _尝试识别模式(行为.用户ID);
    }
    
    // 更新用户配置文件
    _更新用户配置(行为);
}

function 获取用户行为历史(用户ID: string, 开始时间: datetime, 结束时间: datetime): array<用户行为> {
    return state.行为数据库.查询(用户ID, 开始时间, 结束时间);
}

function 预测下一步行为(用户ID: string): array<用户行为> {
    if (!config.启用预测) {
        return [];
    }
    
    // 获取当前活跃序列
    let 当前序列 = state.活跃序列[用户ID];
    if (!当前序列 || 当前序列.行为列表.length < 2) {
        return []; // 数据不足，无法预测
    }
    
    // 查找匹配的模式
    let 最佳匹配 = _查找最佳匹配模式(当前序列);
    if (!最佳匹配) {
        return []; // 没有匹配的模式
    }
    
    // 生成预测
    let 预测结果 = [];
    let 当前长度 = 当前序列.行为列表.length;
    let 模板长度 = 最佳匹配.行为序列模板.length;
    
    // 从模板中提取未来的步骤
    for (let i = 0; i < config.预测深度 && 当前长度 + i < 模板长度; i++) {
        let 预测行为 = 最佳匹配.行为序列模板[当前长度 + i];
        预测结果.push(预测行为);
    }
    
    return 预测结果;
}

function 获取推荐资源(用户ID: string, 当前路径: string): array<string> {
    // 基于用户行为和当前位置生成推荐
    let 推荐列表 = [];
    let 用户配置 = state.用户配置[用户ID];
    
    if (!用户配置) {
        return 推荐列表;
    }
    
    // 添加基于频率的推荐
    for (let 路径 in 用户配置.访问频率) {
        if (路径.startsWith(当前路径) && 路径 !== 当前路径) {
            推荐列表.push(路径);
        }
    }
    
    // 按频率排序
    推荐列表.sort((a, b) => 用户配置.访问频率[b] - 用户配置.访问频率[a]);
    
    // 添加基于模式的推荐
    let 当前序列 = state.活跃序列[用户ID];
    if (当前序列) {
        let 最佳匹配 = _查找最佳匹配模式(当前序列);
        if (最佳匹配 && 最佳匹配.相关推荐.length > 0) {
            // 将模式推荐与频率推荐合并，避免重复
            for (let 推荐 of 最佳匹配.相关推荐) {
                if (!推荐列表.includes(推荐)) {
                    推荐列表.push(推荐);
                }
            }
        }
    }
    
    // 限制推荐数量
    return 推荐列表.slice(0, 10);
}

function 获取用户配置(用户ID: string): 用户配置文件 {
    return state.用户配置[用户ID] || null;
}

function 获取行为统计(用户ID: string, 开始时间: datetime, 结束时间: datetime): any {
    let 行为数据 = 获取用户行为历史(用户ID, 开始时间, 结束时间);
    
    // 使用统计工具生成摘要
    return statistics.计算行为统计(行为数据);
}

function 开始学习过程() {
    if (state.学习状态 === "学习中") {
        log.warn("学习过程已在进行中");
        return false;
    }
    
    state.学习状态 = "学习中";
    log.info("开始学习用户行为模式");
    
    // 获取最近的行为数据
    let 一个月前 = new Date();
    一个月前.setDate(一个月前.getDate() - 30);
    
    let 用户行为数据 = {};
    let 所有用户 = state.行为数据库.获取所有用户();
    
    for (let 用户ID of 所有用户) {
        用户行为数据[用户ID] = 获取用户行为历史(用户ID, 一个月前, new Date());
    }
    
    // 开始学习过程
    if (config.并行学习) {
        parallel.forEach(Object.keys(用户行为数据), (用户ID) => {
            _学习用户模式(用户ID, 用户行为数据[用户ID]);
        });
    } else {
        for (let 用户ID in 用户行为数据) {
            _学习用户模式(用户ID, 用户行为数据[用户ID]);
        }
    }
    
    // 清理旧数据
    _清理过期数据();
    
    // 保存学习结果
    _保存学习结果();
    
    state.学习状态 = "就绪";
    log.info("行为模式学习完成");
    
    return true;
}

function 导出学习结果(): string {
    // 导出模式和用户配置文件为JSON
    let 导出数据 = {
        识别模式: state.识别模式,
        用户配置: state.用户配置,
        导出时间: new Date()
    };
    
    return JSON.stringify(导出数据);
}

function 导入学习结果(数据: string): boolean {
    try {
        let 导入数据 = JSON.parse(数据);
        
        if (!导入数据.识别模式 || !导入数据.用户配置) {
            log.error("导入数据格式无效");
            return false;
        }
        
        // 合并模式，保留重复项中置信度较高的
        for (let 模式ID in 导入数据.识别模式) {
            let 导入模式 = 导入数据.识别模式[模式ID];
            let 现有模式 = state.识别模式[模式ID];
            
            if (!现有模式 || 导入模式.置信度 > 现有模式.置信度) {
                state.识别模式[模式ID] = 导入模式;
            }
        }
        
        // 合并用户配置
        for (let 用户ID in 导入数据.用户配置) {
            let 导入配置 = 导入数据.用户配置[用户ID];
            let 现有配置 = state.用户配置[用户ID];
            
            if (!现有配置 || 导入配置.最后更新时间 > 现有配置.最后更新时间) {
                state.用户配置[用户ID] = 导入配置;
            }
        }
        
        log.info("成功导入学习结果");
        return true;
    } catch (错误) {
        log.error(`导入学习结果失败: ${错误.message}`);
        return false;
    }
}

// 内部功能函数
function _更新活跃序列(行为: 用户行为) {
    let 用户ID = 行为.用户ID;
    
    // 如果用户没有活跃序列，则创建
    if (!state.活跃序列[用户ID]) {
        state.活跃序列[用户ID] = {
            序列ID: `${用户ID}_${Date.now()}`,
            用户ID: 用户ID,
            行为列表: [],
            开始时间: 行为.时间戳,
            结束时间: 行为.时间戳,
            访问路径集合: [],
            标签: []
        };
    }
    
    let 序列 = state.活跃序列[用户ID];
    
    // 检查时间间隔，如果超过30分钟，则创建新序列
    let 时间间隔 = (行为.时间戳.getTime() - 序列.结束时间.getTime()) / 1000 / 60;
    if (时间间隔 > 30) {
        // 保存旧序列以供学习
        let 旧序列 = 序列;
        
        // 创建新序列
        state.活跃序列[用户ID] = {
            序列ID: `${用户ID}_${Date.now()}`,
            用户ID: 用户ID,
            行为列表: [],
            开始时间: 行为.时间戳,
            结束时间: 行为.时间戳,
            访问路径集合: [],
            标签: []
        };
        
        序列 = state.活跃序列[用户ID];
        
        // 处理旧序列
        _处理完成序列(旧序列);
    }
    
    // 添加行为到序列
    序列.行为列表.push(行为);
    序列.结束时间 = 行为.时间戳;
    
    // 更新路径集合
    if (!序列.访问路径集合.includes(行为.资源路径)) {
        序列.访问路径集合.push(行为.资源路径);
    }
    
    // 限制序列长度
    if (序列.行为列表.length > config.行为序列最大长度) {
        序列.行为列表.shift();
        序列.开始时间 = 序列.行为列表[0].时间戳;
    }
}

function _处理完成序列(序列: 行为序列) {
    // 序列太短则忽略
    if (序列.行为列表.length < 3) {
        return;
    }
    
    // 尝试从序列中提取标签
    序列.标签 = _提取序列标签(序列);
    
    // 保存序列用于后续学习
    state.行为数据库.保存元数据(`序列_${序列.序列ID}`, 序列);
}

function _提取序列标签(序列: 行为序列): array<string> {
    let 标签集合 = new Set<string>();
    
    // 获取文件类型标签
    for (let 行为 of 序列.行为列表) {
        if (行为.资源路径) {
            let 文件分类 = auto_classifier.获取文件分类(行为.资源路径);
            if (文件分类 && 文件分类.分类结果.length > 0) {
                let 顶级分类 = 文件分类.分类结果[0];
                标签集合.add(顶级分类.类别名称);
            }
        }
        
        // 从行为类型获取标签
        标签集合.add(行为.行为类型);
        
        // 从上下文获取标签
        if (行为.上下文信息 && 行为.上下文信息.标签) {
            let 上下文标签 = 行为.上下文信息.标签;
            if (Array.isArray(上下文标签)) {
                上下文标签.forEach(标签 => 标签集合.add(标签));
            }
        }
    }
    
    return Array.from(标签集合);
}

function _更新用户配置(行为: 用户行为) {
    let 用户ID = 行为.用户ID;
    
    // 如果用户配置不存在，则创建
    if (!state.用户配置[用户ID]) {
        state.用户配置[用户ID] = {
            用户ID: 用户ID,
            首选路径: [],
            常用文件类型: {},
            活跃时段: {},
            访问频率: {},
            用户标签: [],
            最后更新时间: new Date()
        };
    }
    
    let 配置 = state.用户配置[用户ID];
    
    // 更新访问频率
    let 路径 = 行为.资源路径;
    配置.访问频率[路径] = (配置.访问频率[路径] || 0) + 1;
    
    // 更新首选路径（保持按访问频率排序的前10个路径）
    let 路径列表 = Object.keys(配置.访问频率);
    路径列表.sort((a, b) => 配置.访问频率[b] - 配置.访问频率[a]);
    配置.首选路径 = 路径列表.slice(0, 10);
    
    // 更新活跃时段
    let 小时 = 行为.时间戳.getHours().toString();
    配置.活跃时段[小时] = (配置.活跃时段[小时] || 0) + 1;
    
    // 更新文件类型频率
    if (路径) {
        let 后缀 = path.extname(路径);
        if (后缀) {
            配置.常用文件类型[后缀] = (配置.常用文件类型[后缀] || 0) + 1;
        }
    }
    
    // 更新时间戳
    配置.最后更新时间 = new Date();
}

function _尝试识别模式(用户ID: string) {
    let 序列 = state.活跃序列[用户ID];
    if (!序列 || 序列.行为列表.length < 3) {
        return; // 数据不足，无法识别
    }
    
    // 查找最佳匹配模式
    let 最佳匹配 = _查找最佳匹配模式(序列);
    
    // 如果有匹配的模式，更新统计
    if (最佳匹配) {
        最佳匹配.最近匹配时间 = new Date();
        最佳匹配.匹配次数++;
    }
}

function _查找最佳匹配模式(序列: 行为序列): 行为模式 {
    let 最佳匹配 = null;
    let 最高匹配分 = 0;
    
    for (let 模式ID in state.识别模式) {
        let 模式 = state.识别模式[模式ID];
        
        // 检查用户匹配
        if (模式.适用用户.length > 0 && !模式.适用用户.includes(序列.用户ID)) {
            continue; // 不适用于此用户
        }
        
        // 计算匹配分数
        let 匹配分 = _计算序列匹配分数(序列, 模式);
        
        // 更新最佳匹配
        if (匹配分 > 最高匹配分 && 匹配分 >= config.最小置信度) {
            最高匹配分 = 匹配分;
            最佳匹配 = 模式;
        }
    }
    
    return 最佳匹配;
}

function _计算序列匹配分数(序列: 行为序列, 模式: 行为模式): number {
    // 序列太短或模式太短
    if (序列.行为列表.length < 2 || 模式.行为序列模板.length < 2) {
        return 0;
    }
    
    // 计算行为类型匹配
    let 匹配行为数 = 0;
    let 最大匹配数 = Math.min(序列.行为列表.length, 模式.行为序列模板.length);
    
    for (let i = 0; i < 序列.行为列表.length; i++) {
        if (i >= 模式.行为序列模板.length) break;
        
        let 序列行为 = 序列.行为列表[i];
        let 模式行为 = 模式.行为序列模板[i];
        
        // 比较行为类型和资源路径模式
        if (序列行为.行为类型 === 模式行为.行为类型) {
            匹配行为数++;
            
            // 检查路径匹配
            if (_比较路径(序列行为.资源路径, 模式行为.资源路径)) {
                匹配行为数 += 0.5; // 额外加分
            }
        }
    }
    
    // 基本匹配分
    let 匹配分 = 匹配行为数 / 最大匹配数;
    
    // 检查标签匹配
    let 标签匹配数 = 0;
    for (let 标签 of 序列.标签) {
        if (模式.关联标签.includes(标签)) {
            标签匹配数++;
        }
    }
    
    // 标签匹配加分
    if (模式.关联标签.length > 0 && 序列.标签.length > 0) {
        let 标签匹配分 = 标签匹配数 / Math.max(模式.关联标签.length, 序列.标签.length);
        匹配分 = 匹配分 * 0.8 + 标签匹配分 * 0.2; // 标签占20%权重
    }
    
    return 匹配分;
}

function _比较路径(路径1: string, 路径2: string): boolean {
    // 完全匹配
    if (路径1 === 路径2) {
        return true;
    }
    
    // 比较目录
    let 目录1 = path.dirname(路径1);
    let 目录2 = path.dirname(路径2);
    
    // 同一目录
    if (目录1 === 目录2) {
        return true;
    }
    
    // 比较文件类型
    let 扩展名1 = path.extname(路径1);
    let 扩展名2 = path.extname(路径2);
    
    return 扩展名1 !== "" && 扩展名1 === 扩展名2;
}

function _学习用户模式(用户ID: string, 行为数据: array<用户行为>) {
    if (行为数据.length < 10) {
        return; // 数据太少，无法学习
    }
    
    // 将行为按序列分组
    let 序列列表 = _分割行为序列(行为数据);
    
    // 对每个序列进行模式提取
    for (let 序列 of 序列列表) {
        if (序列.行为列表.length >= 3) {
            _从序列提取模式(序列);
        }
    }
}

function _分割行为序列(行为数据: array<用户行为>): array<行为序列> {
    let 序列列表 = [];
    let 当前序列 = null;
    
    // 按时间排序
    行为数据.sort((a, b) => a.时间戳.getTime() - b.时间戳.getTime());
    
    for (let 行为 of 行为数据) {
        // 如果当前没有序列或时间间隔超过30分钟，则创建新序列
        if (!当前序列 || (行为.时间戳.getTime() - 当前序列.结束时间.getTime()) > 30 * 60 * 1000) {
            // 保存前一个序列
            if (当前序列 && 当前序列.行为列表.length >= 3) {
                当前序列.标签 = _提取序列标签(当前序列);
                序列列表.push(当前序列);
            }
            
            // 创建新序列
            当前序列 = {
                序列ID: `${行为.用户ID}_${Date.now()}_${序列列表.length}`,
                用户ID: 行为.用户ID,
                行为列表: [],
                开始时间: 行为.时间戳,
                结束时间: 行为.时间戳,
                访问路径集合: [],
                标签: []
            };
        }
        
        // 添加行为到当前序列
        当前序列.行为列表.push(行为);
        当前序列.结束时间 = 行为.时间戳;
        
        // 更新访问路径集合
        if (!当前序列.访问路径集合.includes(行为.资源路径)) {
            当前序列.访问路径集合.push(行为.资源路径);
        }
    }
    
    // 添加最后一个序列
    if (当前序列 && 当前序列.行为列表.length >= 3) {
        当前序列.标签 = _提取序列标签(当前序列);
        序列列表.push(当前序列);
    }
    
    return 序列列表;
}

function _从序列提取模式(序列: 行为序列) {
    // 生成模式ID，基于序列特征
    let 特征字符串 = 序列.行为列表.map(行为 => `${行为.行为类型}:${path.extname(行为.资源路径)}`).join("-");
    let 模式ID = `模式_${特征字符串.hashCode()}`; // 假设有hashCode方法
    
    // 检查是否已存在类似模式
    let 现有模式 = state.识别模式[模式ID];
    
    if (现有模式) {
        // 更新已有模式
        现有模式.匹配次数++;
        现有模式.最近匹配时间 = new Date();
        
        // 合并标签
        序列.标签.forEach(标签 => {
            if (!现有模式.关联标签.includes(标签)) {
                现有模式.关联标签.push(标签);
            }
        });
        
        // 如果序列用户不在适用用户列表中，添加
        if (!现有模式.适用用户.includes(序列.用户ID) && 现有模式.适用用户.length > 0) {
            现有模式.适用用户.push(序列.用户ID);
        }
        
        // 提高置信度
        现有模式.置信度 = Math.min(1.0, 现有模式.置信度 + 0.05);
    } else {
        // 创建新模式
        let 新模式: 行为模式 = {
            模式ID: 模式ID,
            模式描述: _生成模式描述(序列),
            行为序列模板: [...序列.行为列表],
            关联标签: [...序列.标签],
            适用用户: [序列.用户ID],
            发现时间: new Date(),
            最近匹配时间: new Date(),
            匹配次数: 1,
            置信度: 0.7, // 初始置信度
            相关推荐: [] // 将在后续更新
        };
        
        // 生成推荐
        新模式.相关推荐 = _生成相关推荐(序列);
        
        // 保存新模式
        state.识别模式[模式ID] = 新模式;
        
        // 如果模式数量超过限制，删除最不常用的
        if (Object.keys(state.识别模式).length > config.最大行为模式数) {
            _清理不常用模式();
        }
    }
}

function _生成模式描述(序列: 行为序列): string {
    let 行为类型集合 = new Set(序列.行为列表.map(行为 => 行为.行为类型));
    let 行为类型列表 = Array.from(行为类型集合);
    
    let 文件类型集合 = new Set(序列.行为列表
        .map(行为 => path.extname(行为.资源路径))
        .filter(ext => ext !== ""));
    let 文件类型列表 = Array.from(文件类型集合);
    
    // 生成描述
    return `用户${序列.用户ID}的${行为类型列表.join("、")}操作序列，涉及${文件类型列表.join("、")}文件`;
}

function _生成相关推荐(序列: 行为序列): array<string> {
    let 推荐集合 = new Set<string>();
    
    // 从序列中提取推荐路径
    for (let 行为 of 序列.行为列表) {
        let 路径 = 行为.资源路径;
        if (路径) {
            // 添加同目录下的其他文件
            let 目录 = path.dirname(路径);
            let 文件名 = path.basename(路径);
            let 扩展名 = path.extname(路径);
            
            // 同扩展名文件推荐
            if (扩展名) {
                let 同类文件 = _查找同类型文件(目录, 扩展名, 文件名);
                同类文件.forEach(文件 => 推荐集合.add(文件));
            }
            
            // 添加父目录
            推荐集合.add(目录);
        }
    }
    
    return Array.from(推荐集合);
}

function _查找同类型文件(目录: string, 扩展名: string, 排除文件名: string): array<string> {
    // 此处简化实现，实际应查询文件系统
    // 返回同类型文件路径
    return [];
}

function _清理不常用模式() {
    // 获取所有模式
    let 所有模式 = Object.values(state.识别模式);
    
    // 按匹配次数和最近使用时间排序
    所有模式.sort((a, b) => {
        // 首先按匹配次数
        if (a.匹配次数 !== b.匹配次数) {
            return a.匹配次数 - b.匹配次数;
        }
        // 然后按最近匹配时间
        return a.最近匹配时间.getTime() - b.最近匹配时间.getTime();
    });
    
    // 移除最不常用的模式，保留在配置限制内
    let 要删除的数量 = 所有模式.length - config.最大行为模式数;
    for (let i = 0; i < 要删除的数量; i++) {
        delete state.识别模式[所有模式[i].模式ID];
    }
}

function _设置定期学习(间隔秒数: number) {
    // 设置定期学习任务
    scheduler.设置定期任务("行为学习", () => {
        if (state.学习状态 !== "学习中") {
            开始学习过程();
        }
    }, 间隔秒数);
    
    log.info(`已设置定期学习，间隔: ${间隔秒数}秒`);
}

function _清理过期数据() {
    // 计算截止日期
    let 截止日期 = new Date();
    截止日期.setDate(截止日期.getDate() - config.历史数据保留天数);
    
    // 清理行为数据
    state.行为数据库.清理数据(截止日期);
    
    // 清理不再活跃的模式
    Object.keys(state.识别模式).forEach(模式ID => {
        let 模式 = state.识别模式[模式ID];
        if (模式.最近匹配时间 < 截止日期) {
            delete state.识别模式[模式ID];
        }
    });
    
    log.info(`已清理过期数据（${config.历史数据保留天数}天前）`);
}

function _加载已存模式() {
    // 从持久存储加载模式
    let 已存模式 = state.行为数据库.获取元数据("behavior_patterns");
    if (已存模式) {
        state.识别模式 = 已存模式;
        log.info(`已加载${Object.keys(已存模式).length}个行为模式`);
    }
}

function _保存学习结果() {
    // 保存模式到持久存储
    state.行为数据库.保存元数据("behavior_patterns", state.识别模式);
    log.info(`已保存${Object.keys(state.识别模式).length}个行为模式`);
}

// 导出接口
export {
    初始化,
    记录行为,
    获取用户行为历史,
    预测下一步行为,
    获取推荐资源,
    获取用户配置,
    获取行为统计,
    开始学习过程,
    导出学习结果,
    导入学习结果
} 