// 自动分类器 - 文件自动分类系统
// 版本: 1.0.0
// 作者: QEntL团队
// 描述: 智能分析文件内容和元数据，自动归类到适当的类别中

// 导入依赖
import "../utils/file_analyzer.qentl";
import "../semantic/content_extractor.qentl";
import "../database/category_db.qentl";
import "../utils/logger.qentl";

// 配置
config ClassifierConfig {
    最大类别数: 100,               // 最大支持的类别数量
    最小置信度: 0.65,              // 分类的最小置信度阈值
    启用学习: true,                // 是否启用自我学习
    学习速率: 0.05,                // 学习速率
    自动创建类别: true,            // 是否允许自动创建新类别
    最小类别样本数: 5,             // 创建新类别所需的最小样本数
    并行处理: true,                // 是否启用并行处理
    量子增强: true,                // 是否启用量子计算增强
    最大处理文件大小: 104857600,   // 最大处理文件大小(100MB)
    保留未分类文件: true           // 是否保留无法分类的文件
}

// 数据类型
type 文件分类 {
    文件路径: string,
    文件类型: string,
    文件大小: number,
    创建时间: datetime,
    修改时间: datetime,
    分类结果: array<分类结果>,
    分类时间: datetime,
    元数据: map<string, any>
}

type 分类结果 {
    类别ID: string,
    类别名称: string,
    置信度: number,
    分类依据: array<string>
}

type 类别定义 {
    类别ID: string,
    类别名称: string,
    父类别ID: string,
    描述: string,
    关键词: array<string>,
    文件类型: array<string>,
    分类规则: array<string>,
    样本文件: array<string>,
    创建时间: datetime,
    修改时间: datetime,
    手动定义: boolean,
    使用频率: number
}

type 分类统计 {
    总文件数: number,
    已分类文件数: number,
    未分类文件数: number,
    类别统计: map<string, number>,
    平均置信度: number,
    最近更新时间: datetime
}

// 状态
state {
    类别数据库: CategoryDB,
    缓存: map<string, 文件分类>,
    分类统计: 分类统计,
    最近分类: array<文件分类>,
    学习状态: string
}

// 函数
function 初始化(配置: ClassifierConfig) {
    log.info("初始化自动分类器");
    state.类别数据库 = new CategoryDB("categories");
    state.缓存 = {};
    state.最近分类 = [];
    state.学习状态 = "就绪";
    
    // 初始化分类统计
    state.分类统计 = {
        总文件数: 0,
        已分类文件数: 0,
        未分类文件数: 0,
        类别统计: {},
        平均置信度: 0,
        最近更新时间: new Date()
    };
    
    // 加载已有类别
    _加载类别定义();
}

function 分类文件(文件路径: string, 选项: map<string, any> = {}): 文件分类 {
    // 获取文件信息
    let 文件信息 = file_analyzer.分析文件(文件路径);
    if (!文件信息) {
        log.error(`无法访问文件: ${文件路径}`);
        return null;
    }
    
    // 检查文件大小限制
    if (文件信息.文件大小 > config.最大处理文件大小) {
        log.warn(`文件过大，跳过分类: ${文件路径} (${文件信息.文件大小} 字节)`);
        return null;
    }
    
    // 检查缓存
    if (state.缓存[文件路径] && !选项.强制更新) {
        // 检查文件是否有更新
        if (state.缓存[文件路径].修改时间>= 文件信息.修改时间) {
            return state.缓存[文件路径];
        }
    }
    
    // 提取文件内容特征
    let 内容特征 = content_extractor.提取特征(文件路径, 文件信息.文件类型);
    
    // 获取所有类别
    let 所有类别 = state.类别数据库.获取所有类别();
    
    // 计算类别匹配度
    let 分类结果列表 = [];
    
    for (let 类别 of 所有类别) {
        let 匹配度 = _计算匹配度(类别, 文件信息, 内容特征);
        
        if (匹配度.置信度 >= config.最小置信度) {
            分类结果列表.push({
                类别ID: 类别.类别ID,
                类别名称: 类别.类别名称,
                置信度: 匹配度.置信度,
                分类依据: 匹配度.分类依据
            });
        }
    }
    
    // 按置信度排序
    分类结果列表.sort((a, b) => b.置信度 - a.置信度);
    
    // 创建文件分类结果
    let 分类结果 = {
        文件路径: 文件路径,
        文件类型: 文件信息.文件类型,
        文件大小: 文件信息.文件大小,
        创建时间: 文件信息.创建时间,
        修改时间: 文件信息.修改时间,
        分类结果: 分类结果列表,
        分类时间: new Date(),
        元数据: 文件信息.元数据
    };
    
    // 缓存结果
    state.缓存[文件路径] = 分类结果;
    
    // 添加到最近分类
    state.最近分类.unshift(分类结果);
    if (state.最近分类.length > 50) {
        state.最近分类.pop();
    }
    
    // 更新统计
    _更新分类统计(分类结果);
    
    // 学习
    if (config.启用学习 && 分类结果列表.length > 0) {
        _学习(分类结果);
    } else if (config.启用学习 && config.自动创建类别 && 分类结果列表.length === 0) {
        // 尝试创建新类别
        _考虑创建新类别(文件路径, 文件信息, 内容特征);
    }
    
    return 分类结果;
}

function 批量分类文件(文件路径列表: array<string>, 选项: map<string, any> = {}): array<文件分类> {
    log.info(`开始批量分类 ${文件路径列表.length} 个文件`);
    let 结果列表 = [];
    
    if (config.并行处理) {
        // 并行处理
        parallel.forEach(文件路径列表, (文件路径) => {
            let 结果 = 分类文件(文件路径, 选项);
            if (结果) {
                结果列表.push(结果);
            }
        });
    } else {
        // 串行处理
        for (let 文件路径 of 文件路径列表) {
            let 结果 = 分类文件(文件路径, 选项);
            if (结果) {
                结果列表.push(结果);
            }
        }
    }
    
    log.info(`批量分类完成，成功分类 ${结果列表.length} 个文件`);
    return 结果列表;
}

function 创建类别(类别定义: 类别定义): boolean {
    if (!类别定义.类别ID || !类别定义.类别名称) {
        log.error("类别ID和名称不能为空");
        return false;
    }
    
    // 检查是否已存在
    if (state.类别数据库.类别是否存在(类别定义.类别ID)) {
        log.error(`类别已存在: ${类别定义.类别ID}`);
        return false;
    }
    
    // 设置创建时间和修改时间
    类别定义.创建时间 = new Date();
    类别定义.修改时间 = new Date();
    类别定义.手动定义 = true;
    类别定义.使用频率 = 0;
    
    // 保存到数据库
    let 结果 = state.类别数据库.添加类别(类别定义);
    if (结果) {
        log.info(`创建类别成功: ${类别定义.类别名称} (${类别定义.类别ID})`);
    }
    
    return 结果;
}

function 更新类别(类别ID: string, 更新字段: map<string, any>): boolean {
    // 检查类别是否存在
    if (!state.类别数据库.类别是否存在(类别ID)) {
        log.error(`类别不存在: ${类别ID}`);
        return false;
    }
    
    // 获取当前类别
    let 当前类别 = state.类别数据库.获取类别(类别ID);
    
    // 更新字段
    for (let 字段 in 更新字段) {
        if (字段 !== "类别ID" && 字段 !== "创建时间") {
            当前类别[字段] = 更新字段[字段];
        }
    }
    
    // 更新修改时间
    当前类别.修改时间 = new Date();
    
    // 保存到数据库
    let 结果 = state.类别数据库.更新类别(类别ID, 当前类别);
    if (结果) {
        log.info(`更新类别成功: ${当前类别.类别名称} (${类别ID})`);
    }
    
    return 结果;
}

function 删除类别(类别ID: string): boolean {
    // 检查类别是否存在
    if (!state.类别数据库.类别是否存在(类别ID)) {
        log.error(`类别不存在: ${类别ID}`);
        return false;
    }
    
    // 从数据库删除
    let 结果 = state.类别数据库.删除类别(类别ID);
    if (结果) {
        log.info(`删除类别成功: ${类别ID}`);
        
        // 更新统计
        if (state.分类统计.类别统计[类别ID]) {
            delete state.分类统计.类别统计[类别ID];
        }
    }
    
    return 结果;
}

function 获取类别(类别ID: string): 类别定义 {
    return state.类别数据库.获取类别(类别ID);
}

function 获取所有类别(): array<类别定义> {
    return state.类别数据库.获取所有类别();
}

function 获取文件分类(文件路径: string): 文件分类 {
    if (state.缓存[文件路径]) {
        return state.缓存[文件路径];
    }
    
    return null;
}

function 获取分类统计(): 分类统计 {
    return state.分类统计;
}

function 清除缓存() {
    state.缓存 = {};
    log.info("已清除分类缓存");
}

function 重新训练分类器() {
    state.学习状态 = "训练中";
    log.info("开始重新训练分类器");
    
    // 获取所有类别
    let 所有类别 = state.类别数据库.获取所有类别();
    
    for (let 类别 of 所有类别) {
        if (类别.样本文件 && 类别.样本文件.length > 0) {
            // 重新分析样本文件，更新关键词和规则
            _从样本更新类别(类别);
        }
    }
    
    state.学习状态 = "就绪";
    log.info("分类器训练完成");
}

// 内部函数
function _计算匹配度(类别: 类别定义, 文件信息: any, 内容特征: any): any {
    let 匹配点 = [];
    let 总分 = 0;
    let 总权重 = 0;
    
    // 检查文件类型匹配
    if (类别.文件类型 && 类别.文件类型.length > 0) {
        let 文件类型权重 = 0.15;
        总权重 += 文件类型权重;
        
        if (类别.文件类型.includes(文件信息.文件类型)) {
            总分 += 文件类型权重;
            匹配点.push(`文件类型匹配: ${文件信息.文件类型}`);
        }
    }
    
    // 检查关键词匹配
    if (类别.关键词 && 类别.关键词.length > 0) {
        let 关键词权重 = 0.4;
        总权重 += 关键词权重;
        
        let 匹配关键词 = [];
        for (let 关键词 of 类别.关键词) {
            if (内容特征.文本内容 && 内容特征.文本内容.toLowerCase().includes(关键词.toLowerCase())) {
                匹配关键词.push(关键词);
            }
        }
        
        if (匹配关键词.length > 0) {
            let 关键词得分 = (匹配关键词.length / 类别.关键词.length) * 关键词权重;
            总分 += 关键词得分;
            匹配点.push(`关键词匹配: ${匹配关键词.join(", ")}`);
        }
    }
    
    // 检查分类规则匹配
    if (类别.分类规则 && 类别.分类规则.length > 0) {
        let 规则权重 = 0.35;
        总权重 += 规则权重;
        
        let 匹配规则数 = 0;
        for (let 规则 of 类别.分类规则) {
            // 解析规则
            let 规则部分 = 规则.split(":");
            if (规则部分.length !== 2) continue;
            
            let [规则类型, 规则值] = 规则部分;
            
            switch (规则类型) {
                case "文件名包含":
                    if (path.basename(文件信息.文件路径).toLowerCase().includes(规则值.toLowerCase())) {
                        匹配规则数++;
                    }
                    break;
                case "大小大于":
                    if (文件信息.文件大小 > parseInt(规则值)) {
                        匹配规则数++;
                    }
                    break;
                case "大小小于":
                    if (文件信息.文件大小 < parseInt(规则值)) {
                        匹配规则数++;
                    }
                    break;
                case "包含元数据":
                    let [元数据键, 元数据值] = 规则值.split("=");
                    if (文件信息.元数据[元数据键] && 文件信息.元数据[元数据键].toString() === 元数据值) {
                        匹配规则数++;
                    }
                    break;
                case "内容特征":
                    if (内容特征.特征 && 内容特征.特征[规则值]) {
                        匹配规则数++;
                    }
                    break;
            }
        }
        
        if (匹配规则数 > 0) {
            let 规则得分 = (匹配规则数 / 类别.分类规则.length) * 规则权重;
            总分 += 规则得分;
            匹配点.push(`匹配 ${匹配规则数} 条分类规则`);
        }
    }
    
    // 检查语义相似度（如果有样本文件）
    if (类别.样本文件 && 类别.样本文件.length > 0 && 内容特征.语义向量) {
        let 语义权重 = 0.3;
        总权重 += 语义权重;
        
        // 假设我们已经有类别的语义向量
        if (类别.语义向量) {
            let 相似度 = content_extractor.计算向量相似度(内容特征.语义向量, 类别.语义向量);
            
            if (相似度 > 0.7) {
                let 语义得分 = 相似度 * 语义权重;
                总分 += 语义得分;
                匹配点.push(`语义相似度: ${(相似度 * 100).toFixed(2)}%`);
            }
        }
    }
    
    // 计算总置信度
    let 置信度 = 总权重 > 0 器 总分 / 总权重 : 0;
    
    return {
        置信度: 置信度,
        分类依据: 匹配点
    };
}

function _学习(分类结果: 文件分类) {
    if (!config.启用学习 || 分类结果.分类结果.length === 0) {
        return;
    }
    
    // 获取最高置信度的分类
    let 最佳分类 = 分类结果.分类结果[0];
    let 类别ID = 最佳分类.类别ID;
    
    // 获取类别
    let 类别 = state.类别数据库.获取类别(类别ID);
    if (!类别) return;
    
    // 更新使用频率
    类别.使用频率++;
    
    // 如果置信度高，将该文件添加为样本
    if (最佳分类.置信度 > 0.85 && !类别.样本文件.includes(分类结果.文件路径)) {
        // 限制样本数量
        if (类别.样本文件.length >= 20) {
            类别.样本文件.shift(); // 移除最旧的样本
        }
        类别.样本文件.push(分类结果.文件路径);
        log.debug(`添加高置信度样本到类别 ${类别.类别名称}: ${分类结果.文件路径}`);
    }
    
    // 更新类别
    state.类别数据库.更新类别(类别ID, 类别);
}

function _考虑创建新类别(文件路径: string, 文件信息: any, 内容特征: any) {
    // 检查是否有足够的未分类文件来创建新类别
    let 相似文件 = _查找相似文件(文件路径, 内容特征);
    
    if (相似文件.length >= config.最小类别样本数) {
        // 可以考虑创建新类别
        let 类别ID = "auto_" + Date.now();
        let 推荐名称 = _生成类别名称(相似文件, 内容特征);
        
        let 新类别 = {
            类别ID: 类别ID,
            类别名称: 推荐名称,
            父类别ID: "",
            描述: `自动创建的类别，基于 ${相似文件.length} 个相似文件`,
            关键词: _提取共同关键词(相似文件, 内容特征),
            文件类型: [文件信息.文件类型],
            分类规则: [],
            样本文件: [文件路径, ...相似文件],
            创建时间: new Date(),
            修改时间: new Date(),
            手动定义: false,
            使用频率: 0
        };
        
        // 尝试生成规则
        新类别.分类规则 = _生成分类规则(相似文件, 文件信息);
        
        // 保存新类别
        state.类别数据库.添加类别(新类别);
        log.info(`自动创建新类别: ${推荐名称} (${类别ID}), 包含 ${相似文件.length + 1} 个样本文件`);
        
        // 从样本更新类别信息
        _从样本更新类别(新类别);
    }
}

function _查找相似文件(文件路径: string, 内容特征: any): array<string> {
    let 相似文件 = [];
    
    // 检查最近未能分类的文件
    for (let 缓存文件路径 in state.缓存) {
        if (缓存文件路径 === 文件路径) continue;
        
        let 缓存项 = state.缓存[缓存文件路径];
        
        // 如果该文件未被分类
        if (缓存项.分类结果.length === 0) {
            // 检查文件类型是否相同
            if (缓存项.文件类型 === 内容特征.文件类型) {
                // 如果有语义向量，计算相似度
                if (内容特征.语义向量) {
                    let 缓存文件特征 = content_extractor.提取特征(缓存文件路径, 缓存项.文件类型);
                    if (缓存文件特征.语义向量) {
                        let 相似度 = content_extractor.计算向量相似度(内容特征.语义向量, 缓存文件特征.语义向量);
                        if (相似度 > 0.8) {
                            相似文件.push(缓存文件路径);
                        }
                    }
                } else {
                    // 没有语义向量，使用其他方式判断相似性
                    // 例如文件名模式、大小范围等
                    let 文件名相似 = path.basename(文件路径).substr(0, 5) === path.basename(缓存文件路径).substr(0, 5);
                    let 大小相似 = Math.abs(缓存项.文件大小 - 内容特征.文件大小) / 内容特征.文件大小 < 0.2;
                    
                    if (文件名相似 && 大小相似) {
                        相似文件.push(缓存文件路径);
                    }
                }
            }
        }
    }
    
    return 相似文件;
}

function _生成类别名称(相似文件: array<string>, 内容特征: any): string {
    // 尝试从内容中提取有意义的名称
    if (内容特征.主题) {
        return 内容特征.主题;
    }
    
    // 从文件名中获取共同部分
    let 文件名列表 = [path.basename(内容特征.文件路径), ...相似文件.map(f => path.basename(f))];
    let 共同前缀 = _查找共同前缀(文件名列表);
    
    if (共同前缀 && 共同前缀.length > 3) {
        return 共同前缀.trim();
    }
    
    // 使用文件类型
    return `${内容特征.文件类型}文件集合`;
}

function _查找共同前缀(字符串列表: array<string>): string {
    if (字符串列表.length === 0) return "";
    
    let 最短字符串 = 字符串列表.reduce((a, b) => a.length <= b.length 器 a : b);
    let 共同前缀长度 = 0;
    
    for (let i = 0; i < 最短字符串.length; i++) {
        let 当前字符 = 最短字符串[i];
        let 所有匹配 = true;
        
        for (let 字符串 of 字符串列表) {
            if (字符串[i] !== 当前字符) {
                所有匹配 = false;
                break;
            }
        }
        
        if (所有匹配) {
            共同前缀长度++;
        } else {
            break;
        }
    }
    
    return 最短字符串.substring(0, 共同前缀长度);
}

function _提取共同关键词(相似文件: array<string>, 内容特征: any): array<string> {
    let 关键词集合 = new Set<string>();
    
    // 从当前文件添加关键词
    if (内容特征.关键词) {
        内容特征.关键词.forEach(词 => 关键词集合.add(词));
    }
    
    // 从相似文件中提取关键词
    for (let 文件路径 of 相似文件) {
        let 文件特征 = content_extractor.提取特征(文件路径);
        if (文件特征.关键词) {
            文件特征.关键词.forEach(词 => 关键词集合.add(词));
        }
    }
    
    return Array.from(关键词集合);
}

function _生成分类规则(相似文件: array<string>, 文件信息: any): array<string> {
    let 规则集合 = new Set<string>();
    
    // 文件名规则
    let 文件名 = path.basename(文件信息.文件路径);
    let 文件名前缀 = 文件名.substr(0, 3);
    if (文件名前缀.length >= 3) {
        规则集合.add(`文件名包含:${文件名前缀}`);
    }
    
    // 文件大小规则
    let 最小大小 = 文件信息.文件大小;
    let 最大大小 = 文件信息.文件大小;
    
    相似文件.forEach(文件路径 => {
        let 大小 = file_analyzer.获取文件大小(文件路径);
        最小大小 = Math.min(最小大小, 大小);
        最大大小 = Math.max(最大大小, 大小);
    });
    
    // 添加大小范围规则（如果范围不是太大）
    if (最大大小 / 最小大小 < 5) {
        规则集合.add(`大小大于:${Math.floor(最小大小 * 0.9)}`);
        规则集合.add(`大小小于:${Math.ceil(最大大小 * 1.1)}`);
    }
    
    // 内容特征规则
    if (文件信息.元数据 && Object.keys(文件信息.元数据).length > 0) {
        for (let 键 in 文件信息.元数据) {
            let 值 = 文件信息.元数据[键];
            if (typeof 值 === "string" || typeof 值 === "number") {
                规则集合.add(`包含元数据:${键}=${值}`);
            }
        }
    }
    
    return Array.from(规则集合);
}

function _从样本更新类别(类别: 类别定义) {
    if (!类别.样本文件 || 类别.样本文件.length === 0) {
        return;
    }
    
    // 收集所有样本的特征
    let 特征集合 = [];
    let 有效样本 = [];
    
    for (let 文件路径 of 类别.样本文件) {
        try {
            let 文件信息 = file_analyzer.分析文件(文件路径);
            if (!文件信息) continue;
            
            let 特征 = content_extractor.提取特征(文件路径, 文件信息.文件类型);
            if (特征) {
                特征集合.push(特征);
                有效样本.push(文件路径);
            }
        } catch (错误) {
            log.warn(`处理样本文件时出错: ${文件路径}, ${错误.message}`);
        }
    }
    
    // 更新样本文件列表为有效的样本
    类别.样本文件 = 有效样本;
    
    // 如果没有有效样本，返回
    if (特征集合.length === 0) {
        return;
    }
    
    // 更新文件类型
    let 文件类型集合 = new Set<string>();
    特征集合.forEach(特征 => {
        if (特征.文件类型) {
            文件类型集合.add(特征.文件类型);
        }
    });
    类别.文件类型 = Array.from(文件类型集合);
    
    // 更新关键词
    let 关键词频率 = {};
    特征集合.forEach(特征 => {
        if (特征.关键词) {
            特征.关键词.forEach(词 => {
                关键词频率[词] = (关键词频率[词] || 0) + 1;
            });
        }
    });
    
    // 选择出现在至少30%样本中的关键词
    let 最小出现次数 = Math.max(1, Math.ceil(特征集合.length * 0.3));
    类别.关键词 = Object.keys(关键词频率).filter(词 => 关键词频率[词] >= 最小出现次数);
    
    // 更新语义向量（如果支持）
    if (特征集合.some(特征 => 特征.语义向量)) {
        // 计算平均语义向量
        类别.语义向量 = content_extractor.计算平均向量(
            特征集合.filter(特征 => 特征.语义向量).map(特征 => 特征.语义向量)
        );
    }
    
    // 更新修改时间
    类别.修改时间 = new Date();
    
    // 保存更新后的类别
    state.类别数据库.更新类别(类别.类别ID, 类别);
    log.info(`从 ${有效样本.length} 个样本更新类别 ${类别.类别名称}`);
}

function _更新分类统计(分类结果: 文件分类) {
    // 更新总文件数
    state.分类统计.总文件数++;
    
    // 更新已分类/未分类数
    if (分类结果.分类结果.length > 0) {
        state.分类统计.已分类文件数++;
        
        // 更新类别统计
        let 顶级分类 = 分类结果.分类结果[0];
        let 类别ID = 顶级分类.类别ID;
        
        state.分类统计.类别统计[类别ID] = (state.分类统计.类别统计[类别ID] || 0) + 1;
        
        // 更新平均置信度
        let 当前总置信度 = state.分类统计.平均置信度 * (state.分类统计.已分类文件数 - 1);
        当前总置信度 += 顶级分类.置信度;
        state.分类统计.平均置信度 = 当前总置信度 / state.分类统计.已分类文件数;
    } else {
        state.分类统计.未分类文件数++;
    }
    
    // 更新时间
    state.分类统计.最近更新时间 = new Date();
}

function _加载类别定义() {
    // 从数据库加载所有类别
    let 类别列表 = state.类别数据库.获取所有类别();
    log.info(`已加载 ${类别列表.length} 个分类类别`);
    
    // 初始化类别统计
    类别列表.forEach(类别 => {
        state.分类统计.类别统计[类别.类别ID] = 0;
    });
}

// 导出模块
export {
    初始化,
    分类文件,
    批量分类文件,
    创建类别,
    更新类别,
    删除类别,
    获取类别,
    获取所有类别,
    获取文件分类,
    获取分类统计,
    清除缓存,
    重新训练分类器
} 