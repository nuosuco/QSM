// 关联引擎 - 文件系统情境感知导航组件
// 版本: 1.0.0
// 作者: QEntL团队
// 描述: 计算和管理文件之间的语义关联性，支持相关性搜索和推荐

// 导入依赖
import "../utils/logger.qentl";
import "../utils/statistics.qentl";
import "./context_analyzer.qentl";
import "./auto_classifier.qentl";
import "./semantic_analyzer.qentl";
import "./semantic_extractor.qentl";

// 配置
config RelevanceConfig {
    最大关联项数量: 200,            // 每个文件的最大关联项数量
    最小关联阈值: 0.35,             // 最小关联强度阈值(0-1)
    关联计算深度: 3,                // 关联计算的递归深度
    关联强度衰减: 0.7,              // 间接关联的强度衰减因子
    语义关联权重: 0.5,              // 语义关联在总关联计算中的权重
    结构关联权重: 0.3,              // 结构关联在总关联计算中的权重
    访问模式权重: 0.2,              // 访问模式关联在总关联计算中的权重
    启用关系图存储: true,           // 是否启用关系图存储
    启用自动更新: true,             // 是否自动更新关联关系
    更新间隔: 3600,                 // 关联关系更新间隔(秒)
    启用记忆化: true                // 是否启用关联计算结果记忆化
}

// 数据类型
type 关联信息 {
    源文件: string,
    目标文件: string,
    关联强度: number,                // 0-1之间的值
    关联类型: array<string>,         // 如"语义"、"结构"、"时序"等
    最后计算时间: datetime,
    置信度: number
}

type 关联搜索结果 {
    文件路径: string,
    关联强度: number,
    关联类型: array<string>,
    匹配原因: string
}

type 关系图 {
    节点: array<string>,
    边: array<关联信息>,
    最后更新时间: datetime
}

type 关联统计 {
    文件总数: number,
    关联总数: number,
    平均关联数: number,
    最高关联强度: number,
    关联类型分布: map<string, number>
}

// 状态
state {
    文件关联映射: map<string, array<关联信息>>,  // 文件路径到其关联信息的映射
    关系图存储: map<string, 关系图>,             // 存储不同上下文的关系图
    计算缓存: map<string, 关联信息>,             // 关联计算的缓存
    上次更新时间: datetime,
    更新锁: boolean
}

// 函数
function 初始化(配置: RelevanceConfig) {
    log.info("初始化关联引擎");
    
    state.文件关联映射 = {};
    state.关系图存储 = {};
    state.计算缓存 = {};
    state.上次更新时间 = new Date();
    state.更新锁 = false;
    
    // 设置定期更新
    if (配置.启用自动更新) {
        _设置定期更新(配置.更新间隔);
    }
    
    log.info("关联引擎初始化完成");
}

function 计算文件关联(文件路径: string, 上下文ID: string = ""): array<关联信息> {
    // 检查缓存
    if (state.文件关联映射[文件路径]) {
        return state.文件关联映射[文件路径];
    }
    
    log.info(`计算文件关联: ${文件路径}`);
    
    // 获取文件的语义特征
    let 文件特征 = semantic_extractor.提取语义特征(文件路径);
    if (!文件特征) {
        log.warn(`无法提取文件特征: ${文件路径}`);
        return [];
    }
    
    // 获取当前情境中的相关文件作为候选
    let 候选文件 = [];
    if (上下文ID) {
        let 情境 = context_analyzer.获取情境(上下文ID);
        if (情境) {
            候选文件 = 情境.相关文件.map(文件 => 文件.文件路径);
        }
    }
    
    // 如果情境中没有足够的候选文件，获取分类相似的文件
    if (候选文件.length < 10) {
        let 分类结果 = auto_classifier.获取文件分类(文件路径);
        if (分类结果 && 分类结果.分类结果.length > 0) {
            let 主类别 = 分类结果.分类结果[0].类别ID;
            let 类别文件 = auto_classifier.获取类别文件(主类别, 20);
            候选文件 = [...新集合(候选文件, 类别文件)];
        }
    }
    
    // 计算与每个候选文件的关联
    let 关联列表 = [];
    
    for (let 目标文件 of 候选文件) {
        if (目标文件 === 文件路径) continue;
        
        // 计算关联强度
        let 关联信息 = _计算两文件关联(文件路径, 目标文件);
        if (关联信息.关联强度 >= config.最小关联阈值) {
            关联列表.push(关联信息);
        }
    }
    
    // 扩展关联计算，寻找潜在的二级关联
    if (config.关联计算深度 > 1) {
        关联列表 = _计算深度关联(文件路径, 关联列表, config.关联计算深度);
    }
    
    // 按关联强度排序
    关联列表.sort((a, b) => b.关联强度 - a.关联强度);
    
    // 限制数量
    关联列表 = 关联列表.slice(0, config.最大关联项数量);
    
    // 保存到缓存
    state.文件关联映射[文件路径] = 关联列表;
    
    // 更新关系图
    if (config.启用关系图存储) {
        _更新关系图(文件路径, 关联列表, 上下文ID);
    }
    
    return 关联列表;
}

function 获取文件关联(文件路径: string, 最小强度: number = 0, 最大数量: number = 10): array<关联信息> {
    // 检查是否需要计算关联
    if (!state.文件关联映射[文件路径]) {
        计算文件关联(文件路径);
    }
    
    let 关联列表 = state.文件关联映射[文件路径] || [];
    
    // 过滤最小强度
    if (最小强度 > 0) {
        关联列表 = 关联列表.filter(项 => 项.关联强度 >= 最小强度);
    }
    
    // 限制数量
    return 关联列表.slice(0, 最大数量);
}

function 搜索相关文件(查询: string, 上下文ID: string = "", 最大结果: number = 20): array<关联搜索结果> {
    log.info(`搜索相关文件: ${查询}`);
    
    // 提取查询的语义特征
    let 查询特征 = semantic_analyzer.分析文本(查询);
    
    // 获取候选文件
    let 候选文件 = [];
    
    // 如果有上下文，优先使用上下文中的文件
    if (上下文ID) {
        let 情境 = context_analyzer.获取情境(上下文ID);
        if (情境) {
            候选文件 = 情境.相关文件.map(文件 => 文件.文件路径);
        }
    }
    
    // 如果候选文件不足，使用自动分类器获取更多候选
    if (候选文件.length < 50) {
        let 类别候选文件 = auto_classifier.搜索文件(查询, 50 - 候选文件.length);
        候选文件 = [...新集合(候选文件, 类别候选文件)];
    }
    
    // 计算每个候选文件与查询的相关性
    let 结果列表 = [];
    
    for (let 文件路径 of 候选文件) {
        // 提取文件的语义特征
        let 文件特征 = semantic_extractor.提取语义特征(文件路径);
        if (!文件特征) continue;
        
        // 计算语义相似度
        let 语义相似度 = semantic_analyzer.计算相似度(查询特征, 文件特征);
        
        // 获取文件的分类信息
        let 分类结果 = auto_classifier.获取文件分类(文件路径);
        let 匹配原因 = "";
        
        if (分类结果 && 分类结果.分类结果.length > 0) {
            匹配原因 = `匹配类别: ${分类结果.分类结果[0].类别名称}`;
        } else {
            匹配原因 = "语义相似";
        }
        
        // 如果相似度超过阈值，添加到结果
        if (语义相似度 >= config.最小关联阈值) {
            结果列表.push({
                文件路径: 文件路径,
                关联强度: 语义相似度,
                关联类型: ["语义"],
                匹配原因: 匹配原因
            });
        }
    }
    
    // 按关联强度排序
    结果列表.sort((a, b) => b.关联强度 - a.关联强度);
    
    // 限制结果数量
    return 结果列表.slice(0, 最大结果);
}

function 根据情境推荐文件(情境ID: string, 文件路径: string = "", 最大结果: number = 10): array<关联搜索结果> {
    // 获取情境
    let 情境 = context_analyzer.获取情境(情境ID);
    if (!情境) {
        log.error(`无法找到情境: ${情境ID}`);
        return [];
    }
    
    // 结果集
    let 结果列表 = [];
    
    // 如果指定了文件路径，查找与该文件相关的文件
    if (文件路径) {
        let 关联文件 = 获取文件关联(文件路径, config.最小关联阈值, 最大结果);
        
        // 转换为搜索结果格式
        for (let 关联 of 关联文件) {
            结果列表.push({
                文件路径: 关联.目标文件,
                关联强度: 关联.关联强度,
                关联类型: 关联.关联类型,
                匹配原因: `与${_获取文件名(文件路径)}相关`
            });
        }
    } else {
        // 如果没有指定文件，从情境中获取相关文件
        let 情境文件 = 情境.相关文件;
        
        // 排序并转换为搜索结果格式
        情境文件.sort((a, b) => b.关联强度 - a.关联强度);
        
        for (let 文件 of 情境文件.slice(0, 最大结果)) {
            结果列表.push({
                文件路径: 文件.文件路径,
                关联强度: 文件.关联强度,
                关联类型: ["情境"],
                匹配原因: `与当前情境"${情境.情境名称}"相关`
            });
        }
    }
    
    return 结果列表;
}

function 获取两文件关联(文件A: string, 文件B: string): 关联信息 {
    // 检查缓存
    let 缓存键 = `${文件A}|${文件B}`;
    
    if (config.启用记忆化 && state.计算缓存[缓存键]) {
        return state.计算缓存[缓存键];
    }
    
    // 计算关联
    let 关联信息 = _计算两文件关联(文件A, 文件B);
    
    // 更新缓存
    if (config.启用记忆化) {
        state.计算缓存[缓存键] = 关联信息;
    }
    
    return 关联信息;
}

function 获取关系图(上下文ID: string = "全局"): 关系图 {
    // 如果没有指定上下文，返回全局关系图
    let 图ID = 上下文ID || "全局";
    
    if (!state.关系图存储[图ID]) {
        // 初始化空关系图
        state.关系图存储[图ID] = {
            节点: [],
            边: [],
            最后更新时间: new Date()
        };
    }
    
    return state.关系图存储[图ID];
}

function 更新所有关联(): boolean {
    if (state.更新锁) {
        log.warn("关联更新正在进行中");
        return false;
    }
    
    state.更新锁 = true;
    log.info("开始更新所有文件关联");
    
    // 清空缓存
    state.文件关联映射 = {};
    state.计算缓存 = {};
    
    // 获取所有需要计算关联的文件
    let 所有情境 = context_analyzer.获取所有情境();
    let 活跃文件集 = new Set<string>();
    
    // 收集所有情境中的活跃文件
    for (let 情境 of 所有情境) {
        for (let 文件 of 情境.相关文件) {
            活跃文件集.add(文件.文件路径);
        }
    }
    
    let 活跃文件列表 = Array.from(活跃文件集);
    
    // 计算每个文件的关联
    for (let 文件路径 of 活跃文件列表) {
        计算文件关联(文件路径);
    }
    
    // 更新全局关系图
    _构建全局关系图();
    
    state.上次更新时间 = new Date();
    state.更新锁 = false;
    
    log.info(`完成文件关联更新，处理了 ${活跃文件列表.length} 个文件`);
    return true;
}

function 获取关联统计(): 关联统计 {
    let 文件总数 = Object.keys(state.文件关联映射).length;
    let 关联总数 = 0;
    let 最高关联强度 = 0;
    let 关联类型计数 = {};
    
    // 统计各类关联
    for (let 文件路径 in state.文件关联映射) {
        let 关联列表 = state.文件关联映射[文件路径];
        关联总数 += 关联列表.length;
        
        for (let 关联 of 关联列表) {
            if (关联.关联强度 > 最高关联强度) {
                最高关联强度 = 关联.关联强度;
            }
            
            for (let 类型 of 关联.关联类型) {
                关联类型计数[类型] = (关联类型计数[类型] || 0) + 1;
            }
        }
    }
    
    let 平均关联数 = 文件总数 > 0 器 关联总数 / 文件总数 : 0;
    
    return {
        文件总数: 文件总数,
        关联总数: 关联总数,
        平均关联数: 平均关联数,
        最高关联强度: 最高关联强度,
        关联类型分布: 关联类型计数
    };
}

// 内部函数
function _计算两文件关联(文件A: string, 文件B: string): 关联信息 {
    // 提取两个文件的特征
    let 特征A = semantic_extractor.提取语义特征(文件A);
    let 特征B = semantic_extractor.提取语义特征(文件B);
    
    if (!特征A || !特征B) {
        return {
            源文件: 文件A,
            目标文件: 文件B,
            关联强度: 0,
            关联类型: [],
            最后计算时间: new Date(),
            置信度: 0
        };
    }
    
    // 计算语义相似度
    let 语义相似度 = semantic_analyzer.计算相似度(特征A, 特征B);
    let 关联类型 = [];
    
    if (语义相似度 >= config.最小关联阈值) {
        关联类型.push("语义");
    }
    
    // 计算结构相似度（如文件类型、位置等）
    let 结构相似度 = _计算结构相似度(文件A, 文件B);
    if (结构相似度 >= config.最小关联阈值) {
        关联类型.push("结构");
    }
    
    // 检查访问模式相关性
    let 访问相关性 = _计算访问相关性(文件A, 文件B);
    if (访问相关性 >= config.最小关联阈值) {
        关联类型.push("访问");
    }
    
    // 计算综合关联强度
    let 关联强度 = 语义相似度 * config.语义关联权重 +
                结构相似度 * config.结构关联权重 +
                访问相关性 * config.访问模式权重;
    
    // 计算置信度
    let 置信度 = 关联类型.length > 0 器 0.6 + 0.1 * 关联类型.length : 0.5;
    
    return {
        源文件: 文件A,
        目标文件: 文件B,
        关联强度: 关联强度,
        关联类型: 关联类型,
        最后计算时间: new Date(),
        置信度: 置信度
    };
}

function _计算结构相似度(文件A: string, 文件B: string): number {
    // 获取文件分类
    let 分类A = auto_classifier.获取文件分类(文件A);
    let 分类B = auto_classifier.获取文件分类(文件B);
    
    if (!分类A || !分类B) {
        return 0;
    }
    
    let 相似度 = 0;
    
    // 比较文件类型
    if (分类A.文件类型 === 分类B.文件类型) {
        相似度 += 0.3;
    }
    
    // 比较分类结果
    if (分类A.分类结果 && 分类B.分类结果 && 
        分类A.分类结果.length > 0 && 分类B.分类结果.length > 0) {
        
        let 类别A = 分类A.分类结果[0].类别ID;
        let 类别B = 分类B.分类结果[0].类别ID;
        
        if (类别A === 类别B) {
            相似度 += 0.5;
        } else {
            // 检查类别相似性
            let 类别相似度 = auto_classifier.计算类别相似度(类别A, 类别B);
            相似度 += 类别相似度 * 0.4;
        }
    }
    
    // 比较文件路径相似性
    let 路径相似度 = _计算路径相似度(文件A, 文件B);
    相似度 += 路径相似度 * 0.2;
    
    return Math.min(1, 相似度);
}

function _计算访问相关性(文件A: string, 文件B: string): number {
    // 检查这两个文件是否经常在同一个会话中被访问
    let 用户行为 = context_analyzer.获取用户操作模式();
    
    // 简化实现：如果用户行为数据不可用，返回0
    if (!用户行为) {
        return 0;
    }
    
    // 检查两个文件的访问模式
    let 共同访问次数 = 用户行为.计算共同访问(文件A, 文件B);
    let 总访问次数A = 用户行为.获取访问次数(文件A);
    let 总访问次数B = 用户行为.获取访问次数(文件B);
    
    // 如果没有足够的访问数据，返回0
    if (总访问次数A < 3 || 总访问次数B < 3) {
        return 0;
    }
    
    // 计算两个文件的共现概率
    let 共现概率 = 共同访问次数 / Math.sqrt(总访问次数A * 总访问次数B);
    
    return Math.min(1, 共现概率);
}

function _计算路径相似度(路径A: string, 路径B: string): number {
    // 简单实现：基于目录深度和共同路径计算相似度
    let 目录A = 路径A.substring(0, 路径A.lastIndexOf("/"));
    let 目录B = 路径B.substring(0, 路径B.lastIndexOf("/"));
    
    if (目录A === 目录B) {
        return 1.0; // 相同目录
    }
    
    // 计算最长公共前缀
    let i = 0;
    while (i < 目录A.length && i < 目录B.length && 目录A[i] === 目录B[i]) {
        i++;
    }
    
    let 公共前缀 = 目录A.substring(0, i);
    let 公共深度 = 公共前缀.split("/").length - 1;
    let 深度A = 目录A.split("/").length - 1;
    let 深度B = 目录B.split("/").length - 1;
    let 最大深度 = Math.max(深度A, 深度B);
    
    if (最大深度 === 0) {
        return 0;
    }
    
    return 公共深度 / 最大深度;
}

function _计算深度关联(源文件: string, 一级关联: array<关联信息>, 最大深度: number): array<关联信息> {
    if (最大深度<= 1 || 一级关联.length === 0) {
        return 一级关联;
    }
    
    let 所有关联 = [...一级关联];
    let 已处理文件 = new Set<string>([源文件, ...一级关联.map(关联 => 关联.目标文件)]);
    
    // 扩展到更深层次
    let 当前层关联 = 一级关联;
    
    for (let 深度 = 2; 深度 <= 最大深度; 深度++) {
        let 下一层关联 = [];
        
        for (let 关联 of 当前层关联) {
            let 中间文件 = 关联.目标文件;
            
            // 获取该中间文件的关联
            let 中间文件关联 = 获取文件关联(中间文件, config.最小关联阈值);
            
            for (let 次级关联 of 中间文件关联) {
                let 目标文件 = 次级关联.目标文件;
                
                // 跳过已处理的文件
                if (已处理文件.has(目标文件)) {
                    continue;
                }
                
                // 计算间接关联强度（使用衰减因子）
                let 间接强度 = 关联.关联强度 * 次级关联.关联强度 * Math.pow(config.关联强度衰减, 深度 - 1);
                
                if (间接强度 >= config.最小关联阈值) {
                    // 合并关联类型
                    let 合并类型 = [...新集合(关联.关联类型, 次级关联.关联类型)];
                    
                    下一层关联.push({
                        源文件: 源文件,
                        目标文件: 目标文件,
                        关联强度: 间接强度,
                        关联类型: 合并类型,
                        最后计算时间: new Date(),
                        置信度: Math.min(关联.置信度, 次级关联.置信度) * config.关联强度衰减
                    });
                    
                    已处理文件.add(目标文件);
                }
            }
        }
        
        // 添加到总关联列表
        所有关联 = [...所有关联, ...下一层关联];
        
        // 更新当前层为下一层
        当前层关联 = 下一层关联;
        
        // 如果没有新的关联，提前退出
        if (下一层关联.length === 0) {
            break;
        }
    }
    
    return 所有关联;
}

function _更新关系图(源文件: string, 关联列表: array<关联信息>, 上下文ID: string = "") {
    let 图ID = 上下文ID || "全局";
    
    if (!state.关系图存储[图ID]) {
        state.关系图存储[图ID] = {
            节点: [],
            边: [],
            最后更新时间: new Date()
        };
    }
    
    let 关系图 = state.关系图存储[图ID];
    
    // 添加源文件节点
    if (!关系图.节点.includes(源文件)) {
        关系图.节点.push(源文件);
    }
    
    // 添加所有关联文件节点和边
    for (let 关联 of 关联列表) {
        let 目标文件 = 关联.目标文件;
        
        // 添加目标节点
        if (!关系图.节点.includes(目标文件)) {
            关系图.节点.push(目标文件);
        }
        
        // 查找现有边
        let 现有边索引 = 关系图.边.findIndex(边 => 
            (边.源文件 === 源文件 && 边.目标文件 === 目标文件) ||
            (边.源文件 === 目标文件 && 边.目标文件 === 源文件)
        );
        
        if (现有边索引 >= 0) {
            // 更新现有边
            关系图.边[现有边索引] = 关联;
        } else {
            // 添加新边
            关系图.边.push(关联);
        }
    }
    
    // 更新时间戳
    关系图.最后更新时间 = new Date();
    
    // 保存关系图
    state.关系图存储[图ID] = 关系图;
}

function _构建全局关系图() {
    // 初始化全局关系图
    state.关系图存储["全局"] = {
        节点: [],
        边: [],
        最后更新时间: new Date()
    };
    
    // 收集所有文件和关联
    let 节点集合 = new Set<string>();
    let 所有关联 = [];
    
    for (let 源文件 in state.文件关联映射) {
        节点集合.add(源文件);
        
        for (let 关联 of state.文件关联映射[源文件]) {
            节点集合.add(关联.目标文件);
            所有关联.push(关联);
        }
    }
    
    // 更新全局关系图
    state.关系图存储["全局"] = {
        节点: Array.from(节点集合),
        边: 所有关联,
        最后更新时间: new Date()
    };
    
    log.info(`已构建全局关系图，包含 ${节点集合.size} 个节点和 ${所有关联.length} 条边`);
}

function _获取文件名(文件路径: string): string {
    return 文件路径.substring(文件路径.lastIndexOf("/") + 1);
}

function _设置定期更新(间隔秒数: number) {
    // 设置定期更新任务
    scheduler.设置定期任务("关联更新", () => {
        if (!state.更新锁) {
            更新所有关联();
        }
    }, 间隔秒数);
    
    log.info(`已设置定期关联更新，间隔: ${间隔秒数}秒`);
}

function 新集合(...列表) {
    // 合并多个列表并去重
    let 结果集 = new Set();
    
    for (let 列表项 of 列表) {
        for (let 项 of 列表项) {
            结果集.add(项);
        }
    }
    
    return Array.from(结果集);
}

// 导出接口
export {
    初始化,
    计算文件关联,
    获取文件关联,
    搜索相关文件,
    根据情境推荐文件,
    获取两文件关联,
    获取关系图,
    更新所有关联,
    获取关联统计
} 