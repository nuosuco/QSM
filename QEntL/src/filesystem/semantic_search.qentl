// QEntL语义搜索
// 版本: 1.0.0
// 描述: 基于语义理解的高级搜索引擎，支持自然语言查询和多维搜索
// 作者: QEntL开发团队
// 量子基因: 0xF8A462
// 纠缠强度: 0.98

导入 "./semantic_analyzer.qentl" 作为 分析器
导入 "./knowledge_network.qentl" 作为 知识网络
导入 "./multidimensional_index.qentl" 作为 多维索引

配置 {
    // 搜索配置
    最大结果数: 50,
    最小相关度: 0.6,
    默认排序: "相关性",  // 相关性、日期、重要性
    上下文窗口大小: 5,   // 结果周围的上下文窗口大小
    
    // 索引配置
    索引类型: "混合",     // 向量、倒排、混合
    索引更新策略: "增量", // 增量、完全、定时
    
    // 优化设置
    并行搜索: true,
    启用缓存: true,
    缓存大小: 1000,
    缓存过期时间: 3600,   // 秒
    
    // 高级功能
    同义词扩展: true,
    统计重排序: true,
    实体识别: true,
    
    // 量子搜索参数
    量子叠加深度: 3,
    量子检索阈值: 0.75
}

类型 搜索结果 {
    ID: 字符串,
    标题: 字符串,
    内容摘要: 字符串,
    匹配段落: [字符串],
    源文档: 字符串,
    相关度分数: 浮点数,
    匹配关键词: [字符串],
    创建时间: 时间戳,
    上次更新时间: 时间戳,
    类别: [字符串],
    元数据: 映射<字符串, 任意>
}

类型 搜索选项 {
    查询文本: 字符串,
    过滤条件: 映射<字符串, 任意>,
    排序方式: 字符串,
    最大结果数: 整数,
    起始位置: 整数,
    高亮标记: 布尔,
    包含元数据: 布尔,
    时间范围: {
        开始: 时间戳,
        结束: 时间戳
    },
    相关度阈值: 浮点数,
    展开同义词: 布尔
}

类型 搜索统计 {
    总匹配数: 整数,
    搜索时间: 整数,  // 毫秒
    查询解析时间: 整数,
    检索时间: 整数,
    排序时间: 整数,
    缓存命中: 布尔,
    结果分布: 映射<字符串, 整数>,
    相关度分布: 映射<字符串, 整数>
}

状态 {
    已初始化: 布尔,
    索引状态: 字符串,
    索引节点数: 整数,
    最近查询: [字符串],
    缓存: 映射<字符串, {
        结果: [搜索结果],
        时间戳: 时间戳,
        统计: 搜索统计
    }>,
    查询历史: [{
        查询: 字符串,
        时间: 时间戳,
        结果数: 整数
    }]
}

// 初始化搜索引擎
函数 初始化() -> 布尔 {
    日志("初始化语义搜索引擎...")
    
    如果 (!分析器.初始化() || !知识网络.初始化()) {
        日志("依赖组件初始化失败")
        返回 false
    }
    
    尝试 {
        日志("构建搜索索引...")
        
        // 初始化多维索引
        多维索引.初始化(配置)
        
        状态.已初始化 = true
        状态.索引状态 = "就绪"
        状态.索引节点数 = 知识网络.状态.节点计数
        状态.最近查询 = []
        状态.缓存 = {}
        状态.查询历史 = []
        
        日志("语义搜索引擎初始化完成")
        返回 true
    } 捕获 (错误) {
        日志(`语义搜索引擎初始化错误: ${错误.消息}`)
        返回 false
    }
}

// 执行语义搜索
函数 搜索(查询: 字符串, 选项: 搜索选项 = {}) -> {结果: [搜索结果], 统计: 搜索统计} {
    如果 (!状态.已初始化) 抛出 新错误("搜索引擎未初始化")
    
    开始时间 = 获取当前毫秒()
    状态.最近查询.推入(查询)
    如果 (状态.最近查询.长度 > 10) 状态.最近查询.移出()
    
    // 合并默认选项
    完整选项 = {
        查询文本: 查询,
        过滤条件: 选项.过滤条件 || {},
        排序方式: 选项.排序方式 || 配置.默认排序,
        最大结果数: 选项.最大结果数 || 配置.最大结果数,
        起始位置: 选项.起始位置 || 0,
        高亮标记: 选项.高亮标记 !== undefined 器 选项.高亮标记 : true,
        包含元数据: 选项.包含元数据 !== undefined 器 选项.包含元数据 : true,
        时间范围: 选项.时间范围 || null,
        相关度阈值: 选项.相关度阈值 || 配置.最小相关度,
        展开同义词: 选项.展开同义词 !== undefined 器 选项.展开同义词 : 配置.同义词扩展
    }
    
    缓存键 = 生成缓存键(完整选项)
    
    // 检查缓存
    如果 (配置.启用缓存 && 状态.缓存[缓存键]) {
        缓存项 = 状态.缓存[缓存键]
        当前时间 = 获取当前时间()
        
        如果 (当前时间 - 缓存项.时间戳 < 配置.缓存过期时间) {
            // 更新统计信息
            缓存项.统计.缓存命中 = true
            返回 {
                结果: 缓存项.结果,
                统计: 缓存项.统计
            }
        }
    }
    
    查询解析开始 = 获取当前毫秒()
    查询向量 = 分析器.向量化(查询)
    查询意图 = 分析器.解析意图(查询)
    查询主题 = 分析器.提取主题(查询)
    查询实体 = 分析器.提取实体(查询)
    查询解析结束 = 获取当前毫秒()
    
    // 扩展同义词
    扩展关键词 = []
    如果 (完整选项.展开同义词) {
        对于 (实体 在 查询实体) {
            同义词列表 = 获取同义词(实体.文本)
            扩展关键词 = 扩展关键词.concat(同义词列表)
        }
    }
    
    检索开始 = 获取当前毫秒()
    
    // 构建复合查询
    语义查询 = {
        向量: 查询向量,
        关键词: 查询实体.map(e => e.文本),
        扩展关键词: 扩展关键词,
        意图: 查询意图,
        过滤器: 完整选项.过滤条件,
        时间范围: 完整选项.时间范围
    }
    
    // 执行多维检索
    原始结果 = 检索结果(语义查询)
    检索结束 = 获取当前毫秒()
    
    // 过滤结果
    过滤结果 = 过滤搜索结果(原始结果, 完整选项.相关度阈值)
    
    // 排序结果
    排序开始 = 获取当前毫秒()
    排序结果 = 排序搜索结果(过滤结果, 完整选项.排序方式)
    最终结果 = 排序结果.切片(
        完整选项.起始位置, 
        完整选项.起始位置 + 完整选项.最大结果数
    )
    排序结束 = 获取当前毫秒()
    
    // 高亮处理
    如果 (完整选项.高亮标记) {
        最终结果 = 高亮结果(最终结果, 查询实体)
    }
    
    // 移除元数据（如果需要）
    如果 (!完整选项.包含元数据) {
        对于 (结果 在 最终结果) {
            删除 结果.元数据
        }
    }
    
    // 生成统计信息
    结束时间 = 获取当前毫秒()
    统计 = {
        总匹配数: 过滤结果.长度,
        搜索时间: 结束时间 - 开始时间,
        查询解析时间: 查询解析结束 - 查询解析开始,
        检索时间: 检索结束 - 检索开始,
        排序时间: 排序结束 - 排序开始,
        缓存命中: false,
        结果分布: 统计结果分布(最终结果),
        相关度分布: 统计相关度分布(最终结果)
    }
    
    返回值 = {
        结果: 最终结果,
        统计: 统计
    }
    
    // 更新缓存
    如果 (配置.启用缓存) {
        状态.缓存[缓存键] = {
            结果: 最终结果,
            时间戳: 获取当前时间(),
            统计: 统计
        }
        
        // 清理过期缓存
        如果 (对象键(状态.缓存).长度 > 配置.缓存大小) {
            清理缓存()
        }
    }
    
    // 更新查询历史
    状态.查询历史.推入({
        查询: 查询,
        时间: 获取当前时间(),
        结果数: 最终结果.长度
    })
    
    返回 返回值
}

// 执行语义问答
函数 问答搜索(问题: 字符串) -> {回答: 字符串, 来源: [搜索结果], 置信度: 浮点数} {
    如果 (!状态.已初始化) 抛出 新错误("搜索引擎未初始化")
    
    // 执行语义搜索获取相关内容
    搜索结果 = 搜索(问题, {
        最大结果数: 10,
        相关度阈值: 0.7
    })
    
    // 使用分析器生成回答
    内容集合 = 搜索结果.结果.map(r => r.匹配段落.连接(" ")).连接("\n\n")
    
    分析结果 = 分析器.生成回答(问题, 内容集合)
    
    返回 {
        回答: 分析结果.回答,
        来源: 搜索结果.结果,
        置信度: 分析结果.置信度
    }
}

// 获取相似文档
函数 获取相似文档(文档ID: 字符串, 最大结果数: 整数 = 10) -> [搜索结果] {
    如果 (!状态.已初始化) 抛出 新错误("搜索引擎未初始化")
    
    // 获取文档内容
    文档 = 获取文档(文档ID)
    如果 (!文档) {
        抛出 新错误("文档不存在")
    }
    
    // 使用文档内容作为搜索查询
    搜索结果 = 搜索(文档.内容, {
        最大结果数: 最大结果数 + 1,  // +1 因为结果中会包含自身
        相关度阈值: 0.7
    })
    
    // 过滤掉自身
    过滤结果 = 搜索结果.结果.过滤(r => r.ID !== 文档ID)
    
    返回 过滤结果.切片(0, 最大结果数)
}

// 文本自动补全
函数 自动补全(部分查询: 字符串, 最大建议数: 整数 = 5) -> [字符串] {
    如果 (!状态.已初始化) 抛出 新错误("搜索引擎未初始化")
    
    // 首先检查最近查询历史
    历史匹配 = 状态.最近查询.过滤(q => 
        q.toLowerCase().开始于(部分查询.toLowerCase())
    )
    
    // 然后获取推荐补全
    推荐 = 获取查询建议(部分查询)
    
    // 合并结果并去重
    所有建议 = [...新集合([...历史匹配, ...推荐])]
    
    返回 所有建议.切片(0, 最大建议数)
}

// 更新搜索索引
函数 更新索引() -> {添加数: 整数, 更新数: 整数, 删除数: 整数} {
    如果 (!状态.已初始化) 抛出 新错误("搜索引擎未初始化")
    
    日志("开始更新搜索索引...")
    状态.索引状态 = "更新中"
    
    统计 = {
        添加数: 0,
        更新数: 0,
        删除数: 0
    }
    
    // 获取知识网络中的所有节点
    所有节点 = 知识网络.获取所有节点()
    
    // 更新索引
    对于 (节点 在 所有节点) {
        已索引 = 检查节点是否已索引(节点.ID)
        
        如果 (!已索引) {
            索引节点(节点)
            统计.添加数++
        } 否则如果 (节点已更新(节点)) {
            更新节点索引(节点)
            统计.更新数++
        }
    }
    
    // 删除不存在的节点索引
    已索引节点 = 获取所有索引节点ID()
    对于 (索引ID 在 已索引节点) {
        如果 (!知识网络.节点存在(索引ID)) {
            删除节点索引(索引ID)
            统计.删除数++
        }
    }
    
    状态.索引状态 = "就绪"
    状态.索引节点数 = 所有节点.长度
    
    日志(`索引更新完成: 添加 ${统计.添加数}, 更新 ${统计.更新数}, 删除 ${统计.删除数}`)
    
    返回 统计
}

// 内部函数：检索结果
内部函数 检索结果(语义查询) -> [搜索结果] {
    结果 = []
    
    如果 (配置.并行搜索) {
        任务池 = []
        
        // 向量搜索任务
        任务池.添加(异步 () => {
            返回 向量搜索(语义查询.向量)
        })
        
        // 关键词搜索任务
        任务池.添加(异步 () => {
            返回 关键词搜索([...语义查询.关键词, ...语义查询.扩展关键词])
        })
        
        // 等待所有任务完成
        所有结果 = 等待所有(任务池)
        向量结果 = 所有结果[0]
        关键词结果 = 所有结果[1]
        
        // 合并结果
        结果 = 合并搜索结果(向量结果, 关键词结果)
    } 否则 {
        // 串行执行
        向量结果 = 向量搜索(语义查询.向量)
        关键词结果 = 关键词搜索([...语义查询.关键词, ...语义查询.扩展关键词])
        结果 = 合并搜索结果(向量结果, 关键词结果)
    }
    
    // 应用过滤器
    如果 (语义查询.过滤器) {
        结果 = 应用过滤器(结果, 语义查询.过滤器)
    }
    
    // 应用时间范围过滤
    如果 (语义查询.时间范围) {
        结果 = 应用时间过滤(结果, 语义查询.时间范围)
    }
    
    返回 结果
}

// 内部函数：向量搜索
内部函数 向量搜索(查询向量) -> [搜索结果] {
    如果 (配置.量子搜索参数.量子叠加深度 > 0) {
        返回 量子向量搜索(查询向量)
    } 否则 {
        返回 经典向量搜索(查询向量)
    }
}

// 内部函数：合并搜索结果
内部函数 合并搜索结果(结果A, 结果B) -> [搜索结果] {
    合并结果 = {}
    
    // 添加结果A
    对于 (项 在 结果A) {
        合并结果[项.ID] = 项
    }
    
    // 添加或合并结果B
    对于 (项 在 结果B) {
        如果 (合并结果[项.ID]) {
            // 如果结果已存在，取最高相关度分数
            合并结果[项.ID].相关度分数 = 最大(
                合并结果[项.ID].相关度分数,
                项.相关度分数
            )
            
            // 合并匹配关键词
            合并结果[项.ID].匹配关键词 = [
                ...新集合([
                    ...合并结果[项.ID].匹配关键词,
                    ...项.匹配关键词
                ])
            ]
        } 否则 {
            合并结果[项.ID] = 项
        }
    }
    
    返回 对象值(合并结果)
}

// 内部函数：过滤搜索结果
内部函数 过滤搜索结果(结果, 相关度阈值) -> [搜索结果] {
    返回 结果.过滤(项 => 项.相关度分数 >= 相关度阈值)
}

// 内部函数：排序搜索结果
内部函数 排序搜索结果(结果, 排序方式) -> [搜索结果] {
    排序结果 = [...结果]
    
    切换 (排序方式) {
        情况 "相关性":
            排序结果.排序((a, b) => b.相关度分数 - a.相关度分数)
            break
        
        情况 "日期":
            排序结果.排序((a, b) => b.上次更新时间 - a.上次更新时间)
            break
        
        情况 "重要性":
            // 假设元数据中有重要性分数
            排序结果.排序((a, b) => {
                a重要性 = a.元数据器.重要性 || 0
                b重要性 = b.元数据器.重要性 || 0
                返回 b重要性 - a重要性
            })
            break
            
        默认:
            排序结果.排序((a, b) => b.相关度分数 - a.相关度分数)
    }
    
    返回 排序结果
}

// 内部函数：清理缓存
内部函数 清理缓存() {
    当前时间 = 获取当前时间()
    所有键 = 对象键(状态.缓存)
    
    如果 (所有键.长度 <= 配置.缓存大小) 返回
    
    // 按过期时间排序
    过期信息 = 所有键.map(键 => {
        返回 {
            键: 键,
            过期时间: 状态.缓存[键].时间戳
        }
    })
    
    过期信息.排序((a, b) => a.过期时间 - b.过期时间)
    
    // 移除最旧的缓存项
    要删除数量 = 所有键.长度 - 配置.缓存大小
    对于 (i = 0; i < 要删除数量; i++) {
        删除 状态.缓存[过期信息[i].键]
    }
} 