// 优先级管理器 - 文件自动分类系统优先级管理组件
// 版本: 1.0.0
// 作者: QEntL团队
// 描述: 基于用户行为和系统状态管理文件分类和访问优先级

// 导入依赖
import "../utils/logger.qentl";
import "./auto_classifier.qentl";
import "./behavior_learner.qentl";

// 配置
config PriorityConfig {
    优先级级别: 5,                  // 优先级级别数量(1-5)
    默认优先级: 3,                  // 默认优先级级别
    重新计算间隔: 3600,             // 优先级重新计算间隔(秒)
    自动调整优先级: true,           // 是否自动调整优先级
    访问频率权重: 0.4,              // 访问频率在优先级计算中的权重
    最近访问权重: 0.3,              // 最近访问时间在优先级计算中的权重
    文件大小权重: 0.1,              // 文件大小在优先级计算中的权重
    类别优先级权重: 0.2,            // 类别优先级在文件优先级计算中的权重
    重要文件最小优先级: 4,          // 重要文件的最低优先级
    启用缓存预热: true              // 是否启用高优先级文件缓存预热
}

// 数据类型
type 文件优先级 {
    文件路径: string,
    优先级: number,               // 1-5，5最高
    计算时间: datetime,
    原因: array<string>,
    用户ID: string,               // 关联用户，空表示所有用户
    有效期: datetime              // null表示永久有效
}

type 类别优先级 {
    类别ID: string,
    优先级: number,               // 1-5，5最高
    计算时间: datetime,
    原因: array<string>,
    用户ID: string,               // 关联用户，空表示所有用户
    有效期: datetime              // null表示永久有效
}

type 优先文件组 {
    组名: string,
    文件列表: array<string>,
    优先级: number,
    创建时间: datetime,
    过期时间: datetime,
    创建者: string,
    备注: string
}

// 状态
state {
    文件优先级缓存: map<string, 文件优先级>,
    类别优先级: map<string, 类别优先级>,
    优先文件组: map<string, 优先文件组>,
    用户重要文件: map<string, array<string>>,
    上次计算时间: datetime,
    最高优先级文件: array<string>
}

// 函数
function 初始化(配置: PriorityConfig) {
    log.info("初始化优先级管理器");
    state.文件优先级缓存 = {};
    state.类别优先级 = {};
    state.优先文件组 = {};
    state.用户重要文件 = {};
    state.上次计算时间 = new Date(0); // 1970-01-01
    state.最高优先级文件 = [];
    
    // 设置定期优先级计算
    if (配置.自动调整优先级) {
        _设置定期计算(配置.重新计算间隔);
    }
    
    // 加载已有优先级设置
    _加载优先级设置();
}

function 获取文件优先级(文件路径: string, 用户ID: string = ""): number {
    let 缓存键 = `${文件路径}:${用户ID}`;
    
    // 检查缓存
    if (state.文件优先级缓存[缓存键]) {
        let 缓存 = state.文件优先级缓存[缓存键];
        
        // 检查有效期
        if (!缓存.有效期 || 缓存.有效期 > new Date()) {
            return 缓存.优先级;
        }
    }
    
    // 计算优先级
    let 优先级 = _计算文件优先级(文件路径, 用户ID);
    
    // 缓存结果
    state.文件优先级缓存[缓存键] = 优先级;
    
    return 优先级.优先级;
}

function 批量获取文件优先级(文件路径列表: array<string>, 用户ID: string = ""): map<string, number> {
    let 结果 = {};
    
    for (let 路径 of 文件路径列表) {
        结果[路径] = 获取文件优先级(路径, 用户ID);
    }
    
    return 结果;
}

function 设置文件优先级(文件路径: string, 优先级: number, 原因: string = "手动设置", 用户ID: string = "", 有效期: datetime = null): boolean {
    if (优先级 < 1 || 优先级 > config.优先级级别) {
        log.error(`无效的优先级值: ${优先级}，应在1-${config.优先级级别}范围内`);
        return false;
    }
    
    let 缓存键 = `${文件路径}:${用户ID}`;
    
    // 创建或更新优先级
    state.文件优先级缓存[缓存键] = {
        文件路径: 文件路径,
        优先级: 优先级,
        计算时间: new Date(),
        原因: [原因],
        用户ID: 用户ID,
        有效期: 有效期
    };
    
    // 更新最高优先级文件列表
    if (优先级 >= config.重要文件最小优先级) {
        _更新最高优先级文件列表();
    }
    
    return true;
}

function 获取类别优先级(类别ID: string, 用户ID: string = ""): number {
    let 缓存键 = `${类别ID}:${用户ID}`;
    
    // 检查缓存
    if (state.类别优先级[缓存键]) {
        let 缓存 = state.类别优先级[缓存键];
        
        // 检查有效期
        if (!缓存.有效期 || 缓存.有效期 > new Date()) {
            return 缓存.优先级;
        }
    }
    
    // 对于未设置的类别，返回默认值
    return config.默认优先级;
}

function 设置类别优先级(类别ID: string, 优先级: number, 原因: string = "手动设置", 用户ID: string = "", 有效期: datetime = null): boolean {
    if (优先级 < 1 || 优先级 > config.优先级级别) {
        log.error(`无效的优先级值: ${优先级}，应在1-${config.优先级级别}范围内`);
        return false;
    }
    
    let 缓存键 = `${类别ID}:${用户ID}`;
    
    // 创建或更新优先级
    state.类别优先级[缓存键] = {
        类别ID: 类别ID,
        优先级: 优先级,
        计算时间: new Date(),
        原因: [原因],
        用户ID: 用户ID,
        有效期: 有效期
    };
    
    // 更新受影响的文件
    _更新类别关联文件优先级(类别ID, 用户ID);
    
    return true;
}

function 创建优先文件组(组名: string, 文件列表: array<string>, 优先级: number, 备注: string = "", 创建者: string = "", 过期时间: datetime = null): boolean {
    if (state.优先文件组[组名]) {
        log.error(`优先文件组 ${组名} 已存在`);
        return false;
    }
    
    if (优先级 < 1 || 优先级 > config.优先级级别) {
        log.error(`无效的优先级值: ${优先级}，应在1-${config.优先级级别}范围内`);
        return false;
    }
    
    // 创建文件组
    state.优先文件组[组名] = {
        组名: 组名,
        文件列表: 文件列表,
        优先级: 优先级,
        创建时间: new Date(),
        过期时间: 过期时间,
        创建者: 创建者,
        备注: 备注
    };
    
    // 更新文件优先级
    for (let 文件路径 of 文件列表) {
        设置文件优先级(文件路径, 优先级, `属于优先文件组: ${组名}`, 创建者, 过期时间);
    }
    
    log.info(`已创建优先文件组: ${组名}，包含 ${文件列表.length} 个文件，优先级 ${优先级}`);
    return true;
}

function 更新优先文件组(组名: string, 更新项: any): boolean {
    if (!state.优先文件组[组名]) {
        log.error(`优先文件组 ${组名} 不存在`);
        return false;
    }
    
    let 组 = state.优先文件组[组名];
    let 旧文件列表 = [...组.文件列表];
    let 旧优先级 = 组.优先级;
    
    // 更新属性
    for (let 键 in 更新项) {
        if (键 !== "组名" && 键 !== "创建时间") {
            组[键] = 更新项[键];
        }
    }
    
    // 如果文件列表或优先级变化，更新文件优先级
    if (更新项.文件列表 || 更新项.优先级) {
        // 清除旧列表中不在新列表的文件优先级
        for (let 文件路径 of 旧文件列表) {
            if (!组.文件列表.includes(文件路径)) {
                // 重新计算该文件优先级
                let 优先级 = _计算文件优先级(文件路径, 组.创建者);
                state.文件优先级缓存[`${文件路径}:${组.创建者}`] = 优先级;
            }
        }
        
        // 设置新文件优先级
        for (let 文件路径 of 组.文件列表) {
            设置文件优先级(文件路径, 组.优先级, `属于优先文件组: ${组名}`, 组.创建者, 组.过期时间);
        }
    }
    
    log.info(`已更新优先文件组: ${组名}`);
    return true;
}

function 删除优先文件组(组名: string): boolean {
    if (!state.优先文件组[组名]) {
        log.error(`优先文件组 ${组名} 不存在`);
        return false;
    }
    
    let 组 = state.优先文件组[组名];
    
    // 重置文件优先级
    for (let 文件路径 of 组.文件列表) {
        // 重新计算该文件优先级
        let 优先级 = _计算文件优先级(文件路径, 组.创建者);
        state.文件优先级缓存[`${文件路径}:${组.创建者}`] = 优先级;
    }
    
    // 删除组
    delete state.优先文件组[组名];
    
    log.info(`已删除优先文件组: ${组名}`);
    return true;
}

function 标记用户重要文件(用户ID: string, 文件路径: string): boolean {
    if (!state.用户重要文件[用户ID]) {
        state.用户重要文件[用户ID] = [];
    }
    
    if (!state.用户重要文件[用户ID].includes(文件路径)) {
        state.用户重要文件[用户ID].push(文件路径);
        
        // 设置高优先级
        设置文件优先级(文件路径, config.重要文件最小优先级, "用户标记为重要", 用户ID);
        
        log.info(`已将文件 ${文件路径} 标记为用户 ${用户ID} 的重要文件`);
        return true;
    }
    
    return false;
}

function 取消标记重要文件(用户ID: string, 文件路径: string): boolean {
    if (!state.用户重要文件[用户ID]) {
        return false;
    }
    
    let 索引 = state.用户重要文件[用户ID].indexOf(文件路径);
    if (索引 >= 0) {
        state.用户重要文件[用户ID].splice(索引, 1);
        
        // 重新计算优先级
        let 优先级 = _计算文件优先级(文件路径, 用户ID);
        state.文件优先级缓存[`${文件路径}:${用户ID}`] = 优先级;
        
        log.info(`已取消文件 ${文件路径} 作为用户 ${用户ID} 的重要文件标记`);
        return true;
    }
    
    return false;
}

function 获取用户重要文件(用户ID: string): array<string> {
    return state.用户重要文件[用户ID] || [];
}

function 获取最高优先级文件(数量: number = 10): array<string> {
    return state.最高优先级文件.slice(0, 数量);
}

function 重新计算所有优先级(): boolean {
    log.info("开始重新计算所有优先级");
    
    // 清空缓存
    state.文件优先级缓存 = {};
    
    // 重新计算类别优先级
    _计算所有类别优先级();
    
    // 更新最高优先级文件
    _更新最高优先级文件列表();
    
    // 更新上次计算时间
    state.上次计算时间 = new Date();
    
    log.info("所有优先级计算完成");
    return true;
}

function 获取优先级统计(): any {
    // 统计各级别文件数量
    let 级别统计 = {};
    for (let i = 1; i <= config.优先级级别; i++) {
        级别统计[i] = 0;
    }
    
    for (let 键 in state.文件优先级缓存) {
        let 优先级 = state.文件优先级缓存[键].优先级;
        级别统计[优先级] = (级别统计[优先级] || 0) + 1;
    }
    
    return {
        文件优先级数量: Object.keys(state.文件优先级缓存).length,
        类别优先级数量: Object.keys(state.类别优先级).length,
        优先文件组数量: Object.keys(state.优先文件组).length,
        重要文件数量: Object.values(state.用户重要文件).reduce((sum, files) => sum + files.length, 0),
        优先级分布: 级别统计,
        上次计算时间: state.上次计算时间
    };
}

// 内部函数
function _计算文件优先级(文件路径: string, 用户ID: string = ""): 文件优先级 {
    let 优先级值 = config.默认优先级;
    let 原因 = [];
    
    // 1. 检查文件分类
    let 分类结果 = auto_classifier.获取文件分类(文件路径);
    if (分类结果 && 分类结果.分类结果.length > 0) {
        let 顶级分类 = 分类结果.分类结果[0];
        let 类别优先级 = 获取类别优先级(顶级分类.类别ID, 用户ID);
        
        // 根据类别优先级调整
        let 类别影响 = (类别优先级 - config.默认优先级) * config.类别优先级权重;
        优先级值 += 类别影响;
        
        if (类别影响 !== 0) {
            原因.push(`类别 ${顶级分类.类别名称} 优先级: ${类别优先级}`);
        }
    }
    
    // 2. 检查用户行为
    if (用户ID) {
        // 获取用户行为数据
        let 一个月前 = new Date();
        一个月前.setMonth(一个月前.getMonth() - 1);
        let 用户行为 = behavior_learner.获取用户行为历史(用户ID, 一个月前, new Date());
        
        // 筛选与此文件相关的行为
        let 相关行为 = 用户行为.filter(行为 => 行为.资源路径 === 文件路径);
        
        // 根据访问频率调整
        if (相关行为.length > 0) {
            let 访问频率 = 相关行为.length;
            let 频率影响 = 0;
            
            if (访问频率 >= 20) {
                频率影响 = 2 * config.访问频率权重;
            } else if (访问频率 >= 10) {
                频率影响 = 1 * config.访问频率权重;
            } else if (访问频率 >= 5) {
                频率影响 = 0.5 * config.访问频率权重;
            }
            
            优先级值 += 频率影响;
            if (频率影响 > 0) {
                原因.push(`访问频率: ${访问频率}次/月`);
            }
            
            // 根据最近访问时间调整
            相关行为.sort((a, b) => b.时间戳.getTime() - a.时间戳.getTime());
            let 最近访问 = 相关行为[0].时间戳;
            let 现在 = new Date();
            let 距今天数 = (现在.getTime() - 最近访问.getTime()) / (24 * 60 * 60 * 1000);
            
            let 时间影响 = 0;
            if (距今天数 <= 1) {
                时间影响 = 1 * config.最近访问权重;
            } else if (距今天数 <= 7) {
                时间影响 = 0.5 * config.最近访问权重;
            }
            
            优先级值 += 时间影响;
            if (时间影响 > 0) {
                原因.push(`最近访问: ${Math.floor(距今天数)}天前`);
            }
        }
        
        // 检查是否为用户标记的重要文件
        if (state.用户重要文件[用户ID] && state.用户重要文件[用户ID].includes(文件路径)) {
            优先级值 = Math.max(优先级值, config.重要文件最小优先级);
            原因.push("用户标记为重要");
        }
    }
    
    // 3. 基于文件特性调整
    if (分类结果) {
        // 根据文件大小调整
        let 大小MB = 分类结果.文件大小 / (1024 * 1024);
        let 大小影响 = 0;
        
        if (大小MB > 100) {
            大小影响 = -0.5 * config.文件大小权重; // 大文件降低优先级
        } else if (大小MB < 1) {
            大小影响 = 0.5 * config.文件大小权重; // 小文件提高优先级
        }
        
        优先级值 += 大小影响;
        if (大小影响 !== 0) {
            原因.push(`文件大小: ${大小MB.toFixed(2)}MB`);
        }
    }
    
    // 4. 检查优先文件组
    for (let 组名 in state.优先文件组) {
        let 组 = state.优先文件组[组名];
        
        // 检查组是否过期
        if (组.过期时间 && 组.过期时间 < new Date()) {
            continue;
        }
        
        // 检查文件是否在组内
        if (组.文件列表.includes(文件路径)) {
            // 检查用户ID是否匹配
            if (!用户ID || !组.创建者 || 组.创建者 === 用户ID) {
                优先级值 = Math.max(优先级值, 组.优先级);
                原因.push(`属于优先文件组: ${组名}`);
            }
        }
    }
    
    // 确保优先级在有效范围内
    优先级值 = Math.max(1, Math.min(Math.round(优先级值), config.优先级级别));
    
    // 如果没有特殊原因，则标记为默认值
    if (原因.length === 0) {
        原因.push("默认优先级");
    }
    
    return {
        文件路径: 文件路径,
        优先级: 优先级值,
        计算时间: new Date(),
        原因: 原因,
        用户ID: 用户ID,
        有效期: null // 默认永久有效
    };
}

function _计算所有类别优先级() {
    // 获取所有类别
    let 所有类别 = auto_classifier.获取所有类别();
    let 统计信息 = auto_classifier.获取分类统计();
    
    for (let 类别 of 所有类别) {
        let 类别ID = 类别.类别ID;
        let 使用频率 = 类别.使用频率;
        let 文件数 = 统计信息.类别统计[类别ID] || 0;
        
        // 根据使用频率和文件数计算基础优先级
        let 优先级值 = config.默认优先级;
        let 原因 = [];
        
        // 使用频率影响
        if (使用频率 > 50) {
            优先级值 += 1;
            原因.push(`高使用频率: ${使用频率}`);
        } else if (使用频率 > 20) {
            优先级值 += 0.5;
            原因.push(`中等使用频率: ${使用频率}`);
        }
        
        // 文件数量影响
        if (文件数 > 100) {
            优先级值 += 0.5;
            原因.push(`大量文件: ${文件数}个`);
        }
        
        // 确保优先级在有效范围内
        优先级值 = Math.max(1, Math.min(Math.round(优先级值), config.优先级级别));
        
        // 如果没有特殊原因，则标记为默认值
        if (原因.length === 0) {
            原因.push("默认优先级");
        }
        
        // 保存类别优先级
        state.类别优先级[`${类别ID}:`] = {
            类别ID: 类别ID,
            优先级: 优先级值,
            计算时间: new Date(),
            原因: 原因,
            用户ID: "",
            有效期: null
        };
    }
}

function _更新类别关联文件优先级(类别ID: string, 用户ID: string = "") {
    // 根据类别查找关联文件
    // 注意：实际实现中需要访问数据库或索引
    // 此处简化处理，不做具体实现
    log.info(`更新类别 ${类别ID} 关联文件的优先级`);
}

function _更新最高优先级文件列表() {
    // 收集所有文件优先级
    let 文件优先级列表 = [];
    
    for (let 键 in state.文件优先级缓存) {
        let 优先级数据 = state.文件优先级缓存[键];
        
        // 检查有效期
        if (!优先级数据.有效期 || 优先级数据.有效期 > new Date()) {
            // 只考虑用户无关的优先级
            if (!优先级数据.用户ID) {
                文件优先级列表.push({
                    文件路径: 优先级数据.文件路径,
                    优先级: 优先级数据.优先级
                });
            }
        }
    }
    
    // 按优先级排序
    文件优先级列表.sort((a, b) => b.优先级 - a.优先级);
    
    // 提取最高优先级文件
    state.最高优先级文件 = 文件优先级列表.filter(项 => 项.优先级 >= 4).map(项 => 项.文件路径);
    
    // 如果高优先级文件太少，补充到至少10个
    if (state.最高优先级文件.length < 10 && 文件优先级列表.length > 10) {
        for (let i = 0; i < 文件优先级列表.length && state.最高优先级文件.length < 10; i++) {
            let 文件路径 = 文件优先级列表[i].文件路径;
            if (!state.最高优先级文件.includes(文件路径)) {
                state.最高优先级文件.push(文件路径);
            }
        }
    }
    
    // 预热高优先级文件缓存
    if (config.启用缓存预热) {
        _预热文件缓存(state.最高优先级文件);
    }
}

function _预热文件缓存(文件列表: array<string>) {
    // 实际实现中应该将这些文件加载到内存或缓存中
    // 此处简化处理，仅记录日志
    log.info(`预热 ${文件列表.length} 个高优先级文件的缓存`);
}

function _设置定期计算(间隔秒数: number) {
    // 设置定期优先级计算任务
    scheduler.设置定期任务("优先级计算", () => {
        重新计算所有优先级();
    }, 间隔秒数);
    
    log.info(`已设置定期优先级计算，间隔: ${间隔秒数}秒`);
}

function _加载优先级设置() {
    // 从存储加载优先级设置
    // 此处简化处理，不做具体实现
    log.info("加载优先级设置");
}

// 导出接口
export {
    初始化,
    获取文件优先级,
    批量获取文件优先级,
    设置文件优先级,
    获取类别优先级,
    设置类别优先级,
    创建优先文件组,
    更新优先文件组,
    删除优先文件组,
    标记用户重要文件,
    取消标记重要文件,
    获取用户重要文件,
    获取最高优先级文件,
    重新计算所有优先级,
    获取优先级统计
} 