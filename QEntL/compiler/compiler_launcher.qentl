/**
 * QEntL编译器启动器
 * QuantumGene: QG-COMPILER-LAUNCHER-Q5R6-1714043608
 * EntanglementStrength: 1.0
 */

quantum_program CompilerLauncher {
    // 量子基因编码
    metadata: {
        name: "QEntL编译器启动器",
        version: "1.0.0",
        description: "QEntL编译器启动和平台适配组件",
        quantum_gene: "QG-COMPILER-LAUNCHER-Q5R6-1714043608",
        entanglement_strength: 1.0,
        node_state: "ACTIVE"
    },
    
    // 加载编译器主程序
    components: {
        compiler: @import("qentl_compiler.qentl")
    },
    
    // 启动器状态
    state: {
        initialized: false,
        platform: null,
        platform_launcher: null,
        config_path: null,
        compiler_args: [],
        errors: []
    },
    
    // 初始化启动器
    initialize: function() {
        if (this.state.initialized) {
            return true;
        }
        
        log("CompilerLauncher", "初始化编译器启动器");
        
        try {
            // 检测运行平台
            this.detectPlatform();
            
            // 加载平台特定启动器
            this.loadPlatformLauncher();
            
            // 初始化编译器
            this.components.compiler.initialize();
            
            this.state.initialized = true;
            
            log("CompilerLauncher", `编译器启动器初始化完成，平台: ${this.state.platform}`);
            
            return true;
        } catch (error) {
            this.addError(`初始化失败: ${error.message}`);
            return false;
        }
    },
    
    // 重置状态
    reset: function() {
        this.state.compiler_args = [];
        this.state.errors = [];
    },
    
    // 检测运行平台
    detectPlatform: function() {
        log("CompilerLauncher", "检测运行平台");
        
        // 尝试获取操作系统信息
        try {
            const os = platform.get();
            
            if (os.includes("win")) {
                this.state.platform = "windows";
            } else if (os.includes("darwin")) {
                this.state.platform = "macos";
            } else if (os.includes("linux")) {
                this.state.platform = "linux";
            } else {
                this.state.platform = "unknown";
            }
            
            log("CompilerLauncher", `检测到平台: ${this.state.platform}`);
        } catch (error) {
            // 平台检测失败，使用通用平台
            this.state.platform = "generic";
            log("CompilerLauncher", "平台检测失败，使用通用平台", "WARNING");
        }
    },
    
    // 加载平台特定启动器
    loadPlatformLauncher: function() {
        log("CompilerLauncher", `加载 ${this.state.platform} 平台启动器`);
        
        try {
            switch (this.state.platform) {
                case "windows":
                    this.state.platform_launcher = @import("launchers/windows_launcher.qjs");
                    break;
                    
                case "macos":
                    this.state.platform_launcher = @import("launchers/macos_launcher.qjs");
                    break;
                    
                case "linux":
                    this.state.platform_launcher = @import("launchers/linux_launcher.qjs");
                    break;
                    
                default:
                    // 通用启动器
                    this.state.platform_launcher = {
                        setup: function() { return true; },
                        execute: function(args) { return args; },
                        cleanup: function() { return true; }
                    };
                    break;
            }
            
            // 初始化平台启动器
            if (this.state.platform_launcher.setup) {
                this.state.platform_launcher.setup();
            }
            
            log("CompilerLauncher", "平台启动器加载完成");
        } catch (error) {
            // 平台启动器加载失败，使用通用启动器
            log("CompilerLauncher", `平台启动器加载失败: ${error.message}，使用通用启动器`, "WARNING");
            
            this.state.platform_launcher = {
                setup: function() { return true; },
                execute: function(args) { return args; },
                cleanup: function() { return true; }
            };
        }
    },
    
    // 加载配置文件
    loadConfig: function(configPath) {
        log("CompilerLauncher", `加载配置文件: ${configPath || "默认配置"}`);
        
        this.state.config_path = configPath;
        
        // 如果提供了配置路径，尝试加载
        if (configPath) {
            try {
                const configContent = fs.readFileSync(configPath, 'utf8');
                const config = JSON.parse(configContent);
                
                // 将配置应用到编译器
                this.applyConfig(config);
                
                log("CompilerLauncher", "配置加载成功");
            } catch (error) {
                this.addError(`加载配置文件失败: ${error.message}`);
                log("CompilerLauncher", `配置加载失败，使用默认配置`, "WARNING");
            }
        }
    },
    
    // 应用配置
    applyConfig: function(config) {
        // 应用配置项到编译器
        if (config.optimization_level) {
            this.components.compiler.config.optimization_level = config.optimization_level;
        }
        
        if (config.include_debug_info !== undefined) {
            this.components.compiler.config.include_debug_info = config.include_debug_info;
        }
        
        if (config.output_extension) {
            this.components.compiler.config.default_output_extension = config.output_extension;
        }
        
        // 应用其他配置项...
    },
    
    // 编译单个文件
    compileFile: function(filename, options = {}) {
        log("CompilerLauncher", `编译文件: ${filename}`);
        
        // 确保初始化
        if (!this.state.initialized) {
            this.initialize();
        }
        
        try {
            // 准备编译选项
            const compileOptions = Object.assign({}, options);
            
            // 调用平台特定的执行前处理
            if (this.state.platform_launcher && this.state.platform_launcher.beforeCompile) {
                this.state.platform_launcher.beforeCompile(filename, compileOptions);
            }
            
            // 执行编译
            const result = this.components.compiler.compileFile(filename, compileOptions);
            
            // 调用平台特定的执行后处理
            if (this.state.platform_launcher && this.state.platform_launcher.afterCompile) {
                this.state.platform_launcher.afterCompile(result);
            }
            
            return result;
        } catch (error) {
            this.addError(`编译失败: ${error.message}`);
            
            return {
                success: false,
                errors: [{ message: error.message }]
            };
        }
    },
    
    // 编译多个文件
    compileFiles: function(filenames, options = {}) {
        log("CompilerLauncher", `编译多个文件: ${filenames.length} 个文件`);
        
        // 确保初始化
        if (!this.state.initialized) {
            this.initialize();
        }
        
        try {
            // 准备编译选项
            const compileOptions = Object.assign({}, options);
            
            // 调用平台特定的执行前处理
            if (this.state.platform_launcher && this.state.platform_launcher.beforeBatchCompile) {
                this.state.platform_launcher.beforeBatchCompile(filenames, compileOptions);
            }
            
            // 执行编译
            const result = this.components.compiler.compileFiles(filenames, compileOptions);
            
            // 调用平台特定的执行后处理
            if (this.state.platform_launcher && this.state.platform_launcher.afterBatchCompile) {
                this.state.platform_launcher.afterBatchCompile(result);
            }
            
            return result;
        } catch (error) {
            this.addError(`批量编译失败: ${error.message}`);
            
            return {
                success: false,
                errors: [{ message: error.message }]
            };
        }
    },
    
    // 解析命令行参数
    parseCommandLine: function(args) {
        log("CompilerLauncher", "解析命令行参数");
        
        // 保存命令行参数
        this.state.compiler_args = args;
        
        // 检查是否有配置文件参数
        let configPath = null;
        
        for (let i = 0; i < args.length; i++) {
            if (args[i] === "--config" && i + 1 < args.length) {
                configPath = args[i + 1];
                break;
            }
        }
        
        // 加载配置
        if (configPath) {
            this.loadConfig(configPath);
        }
        
        // 解析其他参数
        return this.components.compiler.parseCommandLine(args);
    },
    
    // 主入口函数
    main: function(args) {
        log("CompilerLauncher", "编译器启动器启动");
        
        // 重置状态
        this.reset();
        
        // 确保初始化
        if (!this.state.initialized) {
            if (!this.initialize()) {
                console.error("编译器启动器初始化失败");
                return 1;
            }
        }
        
        try {
            // 解析命令行参数
            const parsedArgs = this.parseCommandLine(args);
            
            if (!parsedArgs) {
                // 参数解析失败，可能是显示帮助或版本信息的情况
                return 0;
            }
            
            // 应用平台特定的命令行处理
            const platformArgs = this.state.platform_launcher.execute ? 
                this.state.platform_launcher.execute(parsedArgs) : parsedArgs;
            
            // 调用编译器主程序
            const result = this.components.compiler.main(platformArgs);
            
            log("CompilerLauncher", "编译器启动器完成");
            
            return result;
        } catch (error) {
            this.addError(`编译器执行失败: ${error.message}`);
            console.error(`编译器执行失败: ${error.message}`);
            
            return 1;
        } finally {
            // 执行平台特定的清理
            if (this.state.platform_launcher && this.state.platform_launcher.cleanup) {
                this.state.platform_launcher.cleanup();
            }
        }
    },
    
    // 添加错误
    addError: function(message) {
        const error = {
            message: message,
            timestamp: Date.now()
        };
        
        this.state.errors.push(error);
        log("CompilerLauncher", `错误: ${message}`, "ERROR");
    }
};

// 如果是直接运行，调用主函数
if (require.main === module) {
    process.exit(CompilerLauncher.main(process.argv.slice(2)));
}

// 导出编译器启动器
export CompilerLauncher; 