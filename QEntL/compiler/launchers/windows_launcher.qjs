/**
 * QEntL Windows平台启动器
 * 
 * 提供Windows平台特定的编译器启动和环境设置功能
 */

// Windows平台启动器
const WindowsLauncher = {
    // 启动器状态
    state: {
        initialized: false,
        env_vars: {},
        temp_files: [],
        original_env: {}
    },
    
    // 设置启动器
    setup: function() {
        console.log("[WindowsLauncher] 初始化Windows平台启动器");
        
        // 保存原始环境变量
        this.state.original_env = { ...process.env };
        
        // 检测Windows版本
        this.detectWindowsVersion();
        
        // 设置必要的环境变量
        this.setupEnvironment();
        
        // 创建临时目录
        this.setupTempDirectory();
        
        this.state.initialized = true;
        
        console.log("[WindowsLauncher] Windows平台启动器初始化完成");
        
        return true;
    },
    
    // 检测Windows版本
    detectWindowsVersion: function() {
        console.log("[WindowsLauncher] 检测Windows版本");
        
        try {
            // 使用Windows命令查询版本
            const { execSync } = require('child_process');
            const versionInfo = execSync('ver', { encoding: 'utf8' });
            
            console.log(`[WindowsLauncher] 检测到Windows版本: ${versionInfo.trim()}`);
            
            // 从版本信息中提取主要版本号
            const versionMatch = versionInfo.match(/\d+\.\d+\.\d+/);
            if (versionMatch) {
                this.state.env_vars.WINDOWS_VERSION = versionMatch[0];
            }
        } catch (error) {
            console.warn("[WindowsLauncher] 无法检测Windows版本:", error.message);
            this.state.env_vars.WINDOWS_VERSION = "unknown";
        }
    },
    
    // 设置环境变量
    setupEnvironment: function() {
        console.log("[WindowsLauncher] 设置环境变量");
        
        // 设置临时目录环境变量
        const tempDir = process.env.TEMP || process.env.TMP || 'C:\\Windows\\Temp';
        this.state.env_vars.QENTL_TEMP = `${tempDir}\\QEntL`;
        
        // 设置QEntL编译器路径
        this.state.env_vars.QENTL_COMPILER_PATH = process.cwd();
        
        // 应用环境变量
        Object.assign(process.env, this.state.env_vars);
        
        console.log("[WindowsLauncher] 环境变量设置完成");
    },
    
    // 设置临时目录
    setupTempDirectory: function() {
        console.log("[WindowsLauncher] 设置临时目录");
        
        const fs = require('fs');
        const path = require('path');
        
        try {
            // 确保临时目录存在
            const tempDir = this.state.env_vars.QENTL_TEMP;
            
            if (!fs.existsSync(tempDir)) {
                fs.mkdirSync(tempDir, { recursive: true });
                console.log(`[WindowsLauncher] 创建临时目录: ${tempDir}`);
            }
        } catch (error) {
            console.warn("[WindowsLauncher] 无法创建临时目录:", error.message);
        }
    },
    
    // 执行命令
    execute: function(args) {
        console.log("[WindowsLauncher] 处理命令行参数");
        
        // 确保初始化
        if (!this.state.initialized) {
            this.setup();
        }
        
        // 处理Windows平台特定的路径格式
        if (args && args.inputFiles) {
            args.inputFiles = args.inputFiles.map(file => this.normalizePath(file));
            
            if (args.outputFile) {
                args.outputFile = this.normalizePath(args.outputFile);
            }
        }
        
        return args;
    },
    
    // 编译前处理
    beforeCompile: function(filename, options) {
        console.log(`[WindowsLauncher] 编译前处理: ${filename}`);
        
        // 在Windows上规范化路径
        const normalizedPath = this.normalizePath(filename);
        
        // 添加Windows平台特定选项
        options.platform = "windows";
        
        return normalizedPath;
    },
    
    // 编译后处理
    afterCompile: function(result) {
        console.log("[WindowsLauncher] 编译后处理");
        
        // 处理编译结果
        if (result && result.success) {
            // 对输出文件进行Windows平台特定处理
            this.processOutputFile(result.output);
        }
        
        return result;
    },
    
    // 批量编译前处理
    beforeBatchCompile: function(filenames, options) {
        console.log(`[WindowsLauncher] 批量编译前处理: ${filenames.length}个文件`);
        
        // 在Windows上规范化所有路径
        const normalizedPaths = filenames.map(filename => this.normalizePath(filename));
        
        // 添加Windows平台特定选项
        options.platform = "windows";
        
        return normalizedPaths;
    },
    
    // 批量编译后处理
    afterBatchCompile: function(result) {
        console.log("[WindowsLauncher] 批量编译后处理");
        
        // 处理批量编译结果
        if (result && result.success) {
            // 处理每个输出文件
            if (result.results) {
                for (const file in result.results) {
                    if (result.results[file].success) {
                        this.processOutputFile(result.results[file].output);
                    }
                }
            }
            
            // 如果是链接的可执行文件
            if (result.executableFile) {
                this.processOutputFile(result.executableFile);
            }
        }
        
        return result;
    },
    
    // 处理输出文件
    processOutputFile: function(outputFile) {
        console.log(`[WindowsLauncher] 处理输出文件: ${outputFile}`);
        
        try {
            const fs = require('fs');
            const path = require('path');
            
            // 如果是可执行文件，添加Windows资源信息
            if (outputFile && outputFile.endsWith('.qexe')) {
                console.log("[WindowsLauncher] 添加Windows资源信息");
                
                // 这里通常会调用Windows资源编辑工具，例如rcedit
                // 简化示例，实际实现需要调用外部工具
            }
        } catch (error) {
            console.warn(`[WindowsLauncher] 处理输出文件失败: ${error.message}`);
        }
    },
    
    // 规范化路径
    normalizePath: function(path) {
        // 将正斜杠转换为反斜杠
        return path.replace(/\//g, '\\');
    },
    
    // 清理
    cleanup: function() {
        console.log("[WindowsLauncher] 执行清理");
        
        // 恢复原始环境变量
        Object.assign(process.env, this.state.original_env);
        
        // 清理临时文件
        this.cleanupTempFiles();
        
        console.log("[WindowsLauncher] 清理完成");
        
        return true;
    },
    
    // 清理临时文件
    cleanupTempFiles: function() {
        console.log("[WindowsLauncher] 清理临时文件");
        
        const fs = require('fs');
        
        // 删除临时文件
        for (const file of this.state.temp_files) {
            try {
                if (fs.existsSync(file)) {
                    fs.unlinkSync(file);
                    console.log(`[WindowsLauncher] 删除临时文件: ${file}`);
                }
            } catch (error) {
                console.warn(`[WindowsLauncher] 无法删除临时文件 ${file}: ${error.message}`);
            }
        }
        
        // 清空临时文件列表
        this.state.temp_files = [];
    }
};

// 导出Windows启动器
module.exports = WindowsLauncher; 