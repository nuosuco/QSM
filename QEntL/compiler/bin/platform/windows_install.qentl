/**
 * @file windows_install.qentl
 * @brief QEntL编译器Windows平台特定安装支持
 * 
 * 量子基因编码: QGC-WIN-INSTALL-2024062901
 * 量子纠缠信道: QEC-PLATFORM-INSTALL-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/fs.qentl";
import "QEntL/core/os.qentl";
import "QEntL/core/windows/registry.qentl";

/**
 * @class WindowsInstaller
 * @brief Windows平台特定安装操作
 */
quantum_class WindowsInstaller {
    private {
        installPath: String;      // 安装路径
        binPath: String;          // 二进制文件路径
        verbose: Boolean;         // 详细输出
    }
    
    /**
     * @brief 构造函数
     */
    constructor(installPath: String, verbose: Boolean = false) {
        this.installPath = installPath;
        this.binPath = Path.join(installPath, "bin");
        this.verbose = verbose;
    }
    
    /**
     * @brief 执行Windows特定安装步骤
     */
    public function install(): Boolean {
        this.log("执行Windows特定安装步骤...");
        
        // 执行Windows特定安装
        if (!this.addToRegistry()) {
            this.log("添加注册表信息失败", true);
            return false;
        }
        
        if (!this.addToPath()) {
            this.log("添加环境变量失败", true);
            return false;
        }
        
        if (!this.addContextMenu()) {
            this.log("添加右键菜单失败", true);
            // 这不是严重错误，可以继续安装
        }
        
        if (!this.createFileAssociations()) {
            this.log("创建文件关联失败", true);
            // 这不是严重错误，可以继续安装
        }
        
        this.log("Windows特定安装步骤完成");
        return true;
    }
    
    /**
     * @brief 添加注册表信息
     */
    private function addToRegistry(): Boolean {
        try {
            this.log("添加注册表信息...");
            
            // 添加应用程序信息
            const appKey = "SOFTWARE\\QEntL\\Compiler";
            Registry.createKey(Registry.HKEY_LOCAL_MACHINE, appKey);
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, appKey, "InstallPath", this.installPath);
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, appKey, "Version", "1.0.0");
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, appKey, "Publisher", "QEntL Project");
            
            // 添加卸载信息
            const uninstallKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\QEntL_Compiler";
            Registry.createKey(Registry.HKEY_LOCAL_MACHINE, uninstallKey);
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "DisplayName", "QEntL Compiler");
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "DisplayVersion", "1.0.0");
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "Publisher", "QEntL Project");
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "DisplayIcon", Path.join(this.binPath, "qentl.exe"));
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "UninstallString", `"${Path.join(this.binPath, "uninstall.exe")}"`);
            Registry.setString(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "InstallLocation", this.installPath);
            Registry.setDword(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "NoModify", 1);
            Registry.setDword(Registry.HKEY_LOCAL_MACHINE, uninstallKey, "NoRepair", 1);
            
            return true;
        } catch (e) {
            this.log(`添加注册表信息失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 添加环境变量
     */
    private function addToPath(): Boolean {
        try {
            this.log("添加环境变量...");
            
            // 获取当前PATH环境变量
            let path = Process.getEnvironmentVariable("PATH");
            
            // 检查是否已经存在
            if (path.indexOf(this.binPath) >= 0) {
                this.log("路径已在环境变量中，无需添加");
                return true;
            }
            
            // 添加到PATH
            path = `${this.binPath};${path}`;
            
            // 设置环境变量
            Process.setEnvironmentVariable("PATH", path, true); // true表示系统级别
            
            // 创建QENTL_HOME环境变量
            Process.setEnvironmentVariable("QENTL_HOME", this.installPath, true);
            
            return true;
        } catch (e) {
            this.log(`添加环境变量失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 添加右键菜单
     */
    private function addContextMenu(): Boolean {
        try {
            this.log("添加右键菜单...");
            
            // 添加目录右键菜单
            const dirKey = "Directory\\Background\\shell\\QEntL";
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, dirKey);
            Registry.setString(Registry.HKEY_CLASSES_ROOT, dirKey, "", "QEntL工程");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, dirKey, "Icon", Path.join(this.binPath, "qentl.exe"));
            
            // 添加命令
            const cmdKey = `${dirKey}\\command`;
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, cmdKey);
            Registry.setString(Registry.HKEY_CLASSES_ROOT, cmdKey, "", `"${Path.join(this.binPath, "qentl.exe")}" init "%V"`);
            
            // 添加文件右键菜单
            const fileKey = "SystemFileAssociations\\.qentl\\shell\\QEntL";
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, fileKey);
            Registry.setString(Registry.HKEY_CLASSES_ROOT, fileKey, "", "QEntL编译");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, fileKey, "Icon", Path.join(this.binPath, "qentl.exe"));
            
            // 添加文件命令
            const fileCmdKey = `${fileKey}\\command`;
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, fileCmdKey);
            Registry.setString(Registry.HKEY_CLASSES_ROOT, fileCmdKey, "", `"${Path.join(this.binPath, "qentl.exe")}" compile "%1"`);
            
            return true;
        } catch (e) {
            this.log(`添加右键菜单失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 创建文件关联
     */
    private function createFileAssociations(): Boolean {
        try {
            this.log("创建文件关联...");
            
            // 注册.qentl文件类型
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, ".qentl");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, ".qentl", "", "QEntLFile");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, ".qentl", "Content Type", "text/plain");
            
            // 创建文件类型
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, "QEntLFile", "", "QEntL源文件");
            
            // 设置图标
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\DefaultIcon");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\DefaultIcon", "", `"${Path.join(this.binPath, "qentl.exe")}",0`);
            
            // 添加打开操作
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\open\\command");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\open\\command", "", `notepad.exe "%1"`);
            
            // 添加编译操作
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\compile");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\compile", "", "编译QEntL文件");
            Registry.createKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\compile\\command");
            Registry.setString(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\compile\\command", "", `"${Path.join(this.binPath, "qentl.exe")}" compile "%1"`);
            
            return true;
        } catch (e) {
            this.log(`创建文件关联失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 卸载Windows特定安装项
     */
    public function uninstall(): Boolean {
        this.log("卸载Windows特定安装项...");
        
        // 删除注册表信息
        this.removeFromRegistry();
        
        // 删除环境变量
        this.removeFromPath();
        
        // 删除右键菜单
        this.removeContextMenu();
        
        // 删除文件关联
        this.removeFileAssociations();
        
        this.log("Windows特定卸载完成");
        return true;
    }
    
    /**
     * @brief 删除注册表信息
     */
    private function removeFromRegistry(): Boolean {
        try {
            this.log("删除注册表信息...");
            
            // 删除应用程序信息
            Registry.deleteKey(Registry.HKEY_LOCAL_MACHINE, "SOFTWARE\\QEntL\\Compiler");
            
            // 删除卸载信息
            Registry.deleteKey(Registry.HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\QEntL_Compiler");
            
            return true;
        } catch (e) {
            this.log(`删除注册表信息失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 删除环境变量
     */
    private function removeFromPath(): Boolean {
        try {
            this.log("删除环境变量...");
            
            // 获取当前PATH环境变量
            let path = Process.getEnvironmentVariable("PATH");
            
            // 删除二进制路径
            path = path.replace(`${this.binPath};`, "");
            path = path.replace(`;${this.binPath}`, "");
            path = path.replace(this.binPath, "");
            
            // 设置更新后的环境变量
            Process.setEnvironmentVariable("PATH", path, true);
            
            // 删除QENTL_HOME环境变量
            Process.removeEnvironmentVariable("QENTL_HOME", true);
            
            return true;
        } catch (e) {
            this.log(`删除环境变量失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 删除右键菜单
     */
    private function removeContextMenu(): Boolean {
        try {
            this.log("删除右键菜单...");
            
            // 删除目录右键菜单
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "Directory\\Background\\shell\\QEntL\\command");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "Directory\\Background\\shell\\QEntL");
            
            // 删除文件右键菜单
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "SystemFileAssociations\\.qentl\\shell\\QEntL\\command");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "SystemFileAssociations\\.qentl\\shell\\QEntL");
            
            return true;
        } catch (e) {
            this.log(`删除右键菜单失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 删除文件关联
     */
    private function removeFileAssociations(): Boolean {
        try {
            this.log("删除文件关联...");
            
            // 删除文件类型
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\compile\\command");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\compile");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\open\\command");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell\\open");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\shell");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile\\DefaultIcon");
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, "QEntLFile");
            
            // 删除文件扩展名关联
            Registry.deleteKey(Registry.HKEY_CLASSES_ROOT, ".qentl");
            
            return true;
        } catch (e) {
            this.log(`删除文件关联失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 日志输出
     */
    private function log(message: String, isError: Boolean = false): void {
        if (this.verbose || isError) {
            if (isError) {
                Console.writeLine(`错误: ${message}`);
            } else {
                Console.writeLine(message);
            }
        }
    }
}

// 导出类供主安装脚本使用
export { WindowsInstaller }; 