/**
 * @file macos_install.qentl
 * @brief QEntL编译器macOS平台特定安装支持
 * 
 * 量子基因编码: QGC-MACOS-INSTALL-2024062901
 * 量子纠缠信道: QEC-PLATFORM-INSTALL-02
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/fs.qentl";
import "QEntL/core/os.qentl";

/**
 * @class MacOSInstaller
 * @brief macOS平台特定安装操作
 */
quantum_class MacOSInstaller {
    private {
        installPath: String;      // 安装路径
        binPath: String;          // 二进制文件路径
        verbose: Boolean;         // 详细输出
    }
    
    /**
     * @brief 构造函数
     */
    constructor(installPath: String, verbose: Boolean = false) {
        this.installPath = installPath;
        this.binPath = Path.join(installPath, "bin");
        this.verbose = verbose;
    }
    
    /**
     * @brief 执行macOS特定安装步骤
     */
    public function install(): Boolean {
        this.log("执行macOS特定安装步骤...");
        
        // 执行macOS特定安装
        if (!this.createSymlinks()) {
            this.log("创建符号链接失败", true);
            return false;
        }
        
        if (!this.updateBashProfile()) {
            this.log("更新.bash_profile失败", true);
            // 这不是严重错误，可以继续安装
        }
        
        if (!this.updateZshrc()) {
            this.log("更新.zshrc失败", true);
            // 这不是严重错误，可以继续安装
        }
        
        if (!this.registerAppBundle()) {
            this.log("注册应用程序包失败", true);
            // 这不是严重错误，可以继续安装
        }
        
        if (!this.signBinaries()) {
            this.log("签名二进制文件失败", true);
            // 这不是严重错误，可以继续安装
        }
        
        this.log("macOS特定安装步骤完成");
        return true;
    }
    
    /**
     * @brief 创建符号链接
     */
    private function createSymlinks(): Boolean {
        try {
            this.log("创建符号链接...");
            
            // macOS常用的可执行文件位置
            const linkTarget = "/usr/local/bin";
            
            // 确保目标目录存在
            if (!FS.existsSync(linkTarget)) {
                FS.mkdirSync(linkTarget);
            }
            
            // 创建qentl命令的符号链接
            const binFile = Path.join(this.binPath, "qentl");
            const linkFile = Path.join(linkTarget, "qentl");
            
            // 删除已存在的链接
            if (FS.existsSync(linkFile)) {
                FS.unlinkSync(linkFile);
            }
            
            // 创建新链接
            FS.symlinkSync(binFile, linkFile);
            
            // 设置正确的权限
            Process.execute("chmod", ["+x", binFile]);
            
            this.log(`已创建符号链接: ${linkFile} -> ${binFile}`);
            return true;
        } catch (e) {
            this.log(`创建符号链接失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 更新.bash_profile文件
     */
    private function updateBashProfile(): Boolean {
        try {
            this.log("更新.bash_profile文件...");
            
            const homeDir = Process.getEnvironmentVariable("HOME");
            const profilePath = Path.join(homeDir, ".bash_profile");
            
            // 要添加的内容
            const content = `
# QEntL编译器环境变量
export QENTL_HOME="${this.installPath}"
export PATH="$QENTL_HOME/bin:$PATH"
`;
            
            // 检查文件是否存在
            if (FS.existsSync(profilePath)) {
                // 读取现有文件
                let profileContent = FS.readFileSync(profilePath, "utf8");
                
                // 检查是否已经包含QEntL相关配置
                if (profileContent.indexOf("QENTL_HOME") === -1) {
                    // 追加内容
                    FS.appendFileSync(profilePath, content);
                    this.log("已更新.bash_profile");
                } else {
                    this.log(".bash_profile已包含QEntL配置，无需更新");
                }
            } else {
                // 创建新文件
                FS.writeFileSync(profilePath, content);
                this.log("已创建.bash_profile");
            }
            
            return true;
        } catch (e) {
            this.log(`更新.bash_profile失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 更新.zshrc文件
     */
    private function updateZshrc(): Boolean {
        try {
            this.log("更新.zshrc文件...");
            
            const homeDir = Process.getEnvironmentVariable("HOME");
            const zshrcPath = Path.join(homeDir, ".zshrc");
            
            // 要添加的内容
            const content = `
# QEntL编译器环境变量
export QENTL_HOME="${this.installPath}"
export PATH="$QENTL_HOME/bin:$PATH"
`;
            
            // 检查文件是否存在
            if (FS.existsSync(zshrcPath)) {
                // 读取现有文件
                let zshrcContent = FS.readFileSync(zshrcPath, "utf8");
                
                // 检查是否已经包含QEntL相关配置
                if (zshrcContent.indexOf("QENTL_HOME") === -1) {
                    // 追加内容
                    FS.appendFileSync(zshrcPath, content);
                    this.log("已更新.zshrc");
                } else {
                    this.log(".zshrc已包含QEntL配置，无需更新");
                }
            } else {
                // 创建新文件
                FS.writeFileSync(zshrcPath, content);
                this.log("已创建.zshrc");
            }
            
            return true;
        } catch (e) {
            this.log(`更新.zshrc失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 注册应用程序包
     */
    private function registerAppBundle(): Boolean {
        try {
            this.log("注册应用程序包...");
            
            // 应用程序目录
            const applicationsDir = "/Applications";
            const appBundlePath = Path.join(applicationsDir, "QEntL.app");
            
            // 如果应用程序包不存在，创建一个简单的应用程序包结构
            if (!FS.existsSync(appBundlePath)) {
                // 创建应用程序包目录结构
                FS.mkdirSync(appBundlePath);
                FS.mkdirSync(Path.join(appBundlePath, "Contents"));
                FS.mkdirSync(Path.join(appBundlePath, "Contents", "MacOS"));
                FS.mkdirSync(Path.join(appBundlePath, "Contents", "Resources"));
                
                // 创建Info.plist文件
                const infoPlistPath = Path.join(appBundlePath, "Contents", "Info.plist");
                const infoPlistContent = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>QEntL</string>
    <key>CFBundleIdentifier</key>
    <string>com.qentl.compiler</string>
    <key>CFBundleName</key>
    <string>QEntL</string>
    <key>CFBundleDisplayName</key>
    <string>QEntL Compiler</string>
    <key>CFBundleVersion</key>
    <string>1.0</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.12</string>
    <key>NSHighResolutionCapable</key>
    <true/>
</dict>
</plist>`;
                
                FS.writeFileSync(infoPlistPath, infoPlistContent);
                
                // 创建可执行文件脚本
                const executablePath = Path.join(appBundlePath, "Contents", "MacOS", "QEntL");
                const executableContent = `#!/bin/bash
open -a Terminal.app "${Path.join(this.binPath, "qentl")}" "$@"
`;
                
                FS.writeFileSync(executablePath, executableContent);
                Process.execute("chmod", ["+x", executablePath]);
                
                // 创建图标文件链接（如果存在）
                const iconSourcePath = Path.join(this.installPath, "share", "icons", "qentl.icns");
                const iconDestPath = Path.join(appBundlePath, "Contents", "Resources", "QEntL.icns");
                
                if (FS.existsSync(iconSourcePath)) {
                    FS.copyFileSync(iconSourcePath, iconDestPath);
                }
                
                this.log(`已创建应用程序包: ${appBundlePath}`);
            } else {
                this.log(`应用程序包已存在: ${appBundlePath}`);
            }
            
            // 更新启动服务数据库
            Process.execute("lsregister", ["-f", appBundlePath]);
            
            return true;
        } catch (e) {
            this.log(`注册应用程序包失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 签名二进制文件
     */
    private function signBinaries(): Boolean {
        try {
            this.log("签名二进制文件...");
            
            // 检查是否有开发者证书
            const result = Process.execute("security", ["find-identity", "-v", "-p", "codesigning"]);
            
            if (result.indexOf("0 valid identities found") !== -1) {
                this.log("未找到代码签名证书，跳过签名步骤");
                return true;
            }
            
            // 获取所有二进制文件
            const binFiles = FS.readdirSync(this.binPath);
            
            for (const file of binFiles) {
                const filePath = Path.join(this.binPath, file);
                
                // 检查是否为可执行文件
                if (FS.statSync(filePath).isFile() && this.isExecutable(filePath)) {
                    // 签名二进制文件
                    Process.execute("codesign", ["--force", "--sign", "-", filePath]);
                    this.log(`已签名: ${filePath}`);
                }
            }
            
            return true;
        } catch (e) {
            this.log(`签名二进制文件失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 检查文件是否为可执行文件
     */
    private function isExecutable(filePath: String): Boolean {
        try {
            // 获取文件权限
            const stat = FS.statSync(filePath);
            return (stat.mode & 0o111) !== 0; // 检查是否有执行权限
        } catch (e) {
            return false;
        }
    }
    
    /**
     * @brief 卸载macOS特定安装项
     */
    public function uninstall(): Boolean {
        this.log("卸载macOS特定安装项...");
        
        // 删除符号链接
        this.removeSymlinks();
        
        // 清理环境变量配置
        this.cleanBashProfile();
        this.cleanZshrc();
        
        // 删除应用程序包
        this.removeAppBundle();
        
        this.log("macOS特定卸载完成");
        return true;
    }
    
    /**
     * @brief 删除符号链接
     */
    private function removeSymlinks(): Boolean {
        try {
            this.log("删除符号链接...");
            
            // macOS常用的可执行文件位置
            const linkTarget = "/usr/local/bin";
            const linkFile = Path.join(linkTarget, "qentl");
            
            // 删除链接
            if (FS.existsSync(linkFile)) {
                FS.unlinkSync(linkFile);
                this.log(`已删除符号链接: ${linkFile}`);
            }
            
            return true;
        } catch (e) {
            this.log(`删除符号链接失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 清理.bash_profile文件
     */
    private function cleanBashProfile(): Boolean {
        try {
            this.log("清理.bash_profile文件...");
            
            const homeDir = Process.getEnvironmentVariable("HOME");
            const profilePath = Path.join(homeDir, ".bash_profile");
            
            // 检查文件是否存在
            if (FS.existsSync(profilePath)) {
                // 读取现有文件
                let profileContent = FS.readFileSync(profilePath, "utf8");
                
                // 删除QEntL相关配置
                profileContent = profileContent.replace(/# QEntL编译器环境变量[^\n]*\n[^\n]*QENTL_HOME[^\n]*\n[^\n]*PATH[^\n]*\n/g, "");
                
                // 写回文件
                FS.writeFileSync(profilePath, profileContent);
                this.log("已清理.bash_profile中的QEntL配置");
            }
            
            return true;
        } catch (e) {
            this.log(`清理.bash_profile失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 清理.zshrc文件
     */
    private function cleanZshrc(): Boolean {
        try {
            this.log("清理.zshrc文件...");
            
            const homeDir = Process.getEnvironmentVariable("HOME");
            const zshrcPath = Path.join(homeDir, ".zshrc");
            
            // 检查文件是否存在
            if (FS.existsSync(zshrcPath)) {
                // 读取现有文件
                let zshrcContent = FS.readFileSync(zshrcPath, "utf8");
                
                // 删除QEntL相关配置
                zshrcContent = zshrcContent.replace(/# QEntL编译器环境变量[^\n]*\n[^\n]*QENTL_HOME[^\n]*\n[^\n]*PATH[^\n]*\n/g, "");
                
                // 写回文件
                FS.writeFileSync(zshrcPath, zshrcContent);
                this.log("已清理.zshrc中的QEntL配置");
            }
            
            return true;
        } catch (e) {
            this.log(`清理.zshrc失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 删除应用程序包
     */
    private function removeAppBundle(): Boolean {
        try {
            this.log("删除应用程序包...");
            
            // 应用程序目录
            const applicationsDir = "/Applications";
            const appBundlePath = Path.join(applicationsDir, "QEntL.app");
            
            // 删除应用程序包
            if (FS.existsSync(appBundlePath)) {
                this.removeDirectory(appBundlePath);
                this.log(`已删除应用程序包: ${appBundlePath}`);
            }
            
            return true;
        } catch (e) {
            this.log(`删除应用程序包失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 递归删除目录
     */
    private function removeDirectory(dirPath: String): void {
        if (FS.existsSync(dirPath)) {
            const files = FS.readdirSync(dirPath);
            
            for (const file of files) {
                const curPath = Path.join(dirPath, file);
                
                if (FS.statSync(curPath).isDirectory()) {
                    // 递归删除子目录
                    this.removeDirectory(curPath);
                } else {
                    // 删除文件
                    FS.unlinkSync(curPath);
                }
            }
            
            // 删除目录
            FS.rmdirSync(dirPath);
        }
    }
    
    /**
     * @brief 日志输出
     */
    private function log(message: String, isError: Boolean = false): void {
        if (this.verbose || isError) {
            if (isError) {
                Console.writeLine(`错误: ${message}`);
            } else {
                Console.writeLine(message);
            }
        }
    }
}

// 导出类供主安装脚本使用
export { MacOSInstaller }; 