/**
 * @file uninstall.qentl
 * @brief QEntL编译器卸载脚本
 * 
 * 量子基因编码: QGC-UNINSTALL-SCRIPT-2024062001
 * 量子纠缠信道: QEC-COMPILER-UNINSTALL-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/fs.qentl";
import "QEntL/core/os.qentl";

/**
 * @class ArgumentParser
 * @brief 命令行参数解析器
 */
quantum_class ArgumentParser {
    private {
        args: Array<String>;            // 原始参数列表
        options: Map<String, String>;   // 解析后的选项
        positionalArgs: Array<String>;  // 位置参数
    }
    
    /**
     * @brief 构造函数
     */
    constructor(args: Array<String>) {
        this.args = args;
        this.options = new Map<String, String>();
        this.positionalArgs = new Array<String>();
        this.parse();
    }
    
    /**
     * @brief 解析参数
     */
    private function parse(): void {
        for (let i = 0; i < this.args.length; i++) {
            let arg = this.args[i];
            
            if (arg.startsWith("--")) {
                // 长选项
                let optionName = arg.substring(2);
                let optionValue = "";
                
                // 检查是否有等号分隔的值
                let equalsPos = optionName.indexOf("=");
                if (equalsPos >= 0) {
                    optionValue = optionName.substring(equalsPos + 1);
                    optionName = optionName.substring(0, equalsPos);
                } else if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else if (arg.startsWith("-")) {
                // 短选项
                let optionName = arg.substring(1);
                let optionValue = "";
                
                if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else {
                // 位置参数
                this.positionalArgs.push(arg);
            }
        }
    }
    
    /**
     * @brief 获取选项值
     */
    public function getOption(name: String, defaultValue: String = ""): String {
        if (this.options.has(name)) {
            return this.options.get(name);
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取布尔选项值
     */
    public function getBoolOption(name: String, defaultValue: Boolean = false): Boolean {
        if (this.options.has(name)) {
            let value = this.options.get(name).toLowerCase();
            return value === "true" || value === "yes" || value === "1";
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取位置参数
     */
    public function getPositionalArgs(): Array<String> {
        return this.positionalArgs;
    }
    
    /**
     * @brief 是否包含选项
     */
    public function hasOption(name: String): Boolean {
        return this.options.has(name);
    }
}

/**
 * @class UninstallOptions
 * @brief 卸载选项
 */
quantum_class UninstallOptions {
    public {
        prefix: String;         // 安装前缀
        binDir: String;         // 可执行文件目录
        libDir: String;         // 库文件目录
        includeDir: String;     // 头文件目录
        docDir: String;         // 文档目录
        removeSymlinks: Boolean; // 移除符号链接
        force: Boolean;         // 强制卸载
        verbose: Boolean;       // 详细输出
    }
    
    /**
     * @brief 构造函数
     */
    constructor() {
        // 默认安装路径
        if (OS.isWindows()) {
            this.prefix = "C:\\Program Files\\QEntL";
            this.binDir = Path.join(this.prefix, "bin");
            this.libDir = Path.join(this.prefix, "lib");
            this.includeDir = Path.join(this.prefix, "include");
            this.docDir = Path.join(this.prefix, "doc");
        } else {
            this.prefix = "/usr/local";
            this.binDir = Path.join(this.prefix, "bin");
            this.libDir = Path.join(this.prefix, "lib", "qentl");
            this.includeDir = Path.join(this.prefix, "include", "qentl");
            this.docDir = Path.join(this.prefix, "share", "doc", "qentl");
        }
        
        this.removeSymlinks = true;
        this.force = false;
        this.verbose = false;
    }
}

/**
 * @class Uninstaller
 * @brief 卸载器
 */
quantum_class Uninstaller {
    private {
        options: UninstallOptions;    // 卸载选项
        removedFiles: Array<String>;  // 已移除文件列表
        removedDirs: Array<String>;   // 已移除目录列表
    }
    
    /**
     * @brief 构造函数
     */
    constructor(options: UninstallOptions) {
        this.options = options;
        this.removedFiles = new Array<String>();
        this.removedDirs = new Array<String>();
    }
    
    /**
     * @brief 执行卸载
     */
    public function uninstall(): Boolean {
        this.log("开始卸载QEntL编译器...");
        
        // 检查安装目录是否存在
        if (!this.checkInstallDirectory()) {
            return false;
        }
        
        // 确认卸载
        if (!this.confirmUninstall()) {
            Console.writeLine("卸载已取消");
            return false;
        }
        
        // 移除符号链接
        if (this.options.removeSymlinks) {
            this.removeSymlinks();
        }
        
        // 移除可执行文件
        this.removeBinaries();
        
        // 移除库文件
        this.removeLibraries();
        
        // 移除头文件
        this.removeHeaders();
        
        // 移除文档
        this.removeDocs();
        
        // 移除空目录
        this.removeEmptyDirectories();
        
        this.log("卸载完成");
        this.printSummary();
        
        return true;
    }
    
    /**
     * @brief 检查安装目录
     */
    private function checkInstallDirectory(): Boolean {
        if (!FS.existsSync(this.options.prefix)) {
            Console.writeErrorLine(`错误: 找不到安装目录: ${this.options.prefix}`);
            Console.writeErrorLine("请使用 --prefix 选项指定正确的安装目录");
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 确认卸载
     */
    private function confirmUninstall(): Boolean {
        if (this.options.force) {
            return true;
        }
        
        Console.writeLine(`即将从以下目录卸载QEntL编译器:`);
        Console.writeLine(`  前缀: ${this.options.prefix}`);
        Console.writeLine(`  可执行文件: ${this.options.binDir}`);
        Console.writeLine(`  库文件: ${this.options.libDir}`);
        Console.writeLine(`  头文件: ${this.options.includeDir}`);
        Console.writeLine(`  文档: ${this.options.docDir}`);
        
        let answer = Console.readLine("\n确认卸载? (y/N): ").toLowerCase();
        return answer === "y" || answer === "yes";
    }
    
    /**
     * @brief 移除符号链接
     */
    private function removeSymlinks(): void {
        // 仅在非Windows系统上移除符号链接
        if (OS.isWindows()) {
            return;
        }
        
        this.log("移除符号链接...");
        
        try {
            // 系统可执行文件目录
            if (FS.existsSync("/usr/bin")) {
                let symlinkTargets = [
                    Path.join(this.options.binDir, "qentl"),
                    Path.join(this.options.binDir, "qentlc"),
                    Path.join(this.options.binDir, "qentlbc"),
                    Path.join(this.options.binDir, "qentlopt"),
                    Path.join(this.options.binDir, "qentld")
                ];
                
                for (let target of symlinkTargets) {
                    let linkName = Path.join("/usr/bin", Path.basename(target));
                    
                    if (FS.existsSync(linkName) && FS.lstatSync(linkName).isSymbolicLink()) {
                        try {
                            let linkTarget = FS.readlinkSync(linkName);
                            
                            // 确认链接目标是指向我们的安装目录
                            if (linkTarget === target) {
                                FS.unlinkSync(linkName);
                                this.log(`移除符号链接: ${linkName}`);
                                this.removedFiles.push(linkName);
                            }
                        } catch (e) {
                            Console.writeErrorLine(`警告: 无法检查符号链接 ${linkName}: ${e.message}`);
                        }
                    }
                }
            }
        } catch (e) {
            Console.writeErrorLine(`警告: 移除符号链接时出错: ${e.message}`);
            Console.writeErrorLine("可能需要管理员权限来移除系统目录的符号链接");
        }
    }
    
    /**
     * @brief 移除可执行文件
     */
    private function removeBinaries(): void {
        this.log("移除可执行文件...");
        
        let binaries = [];
        
        // Windows可执行文件
        if (OS.isWindows()) {
            binaries = [
                Path.join(this.options.binDir, "qentl.exe"),
                Path.join(this.options.binDir, "qentlc.exe"),
                Path.join(this.options.binDir, "qentlbc.exe"),
                Path.join(this.options.binDir, "qentlopt.exe"),
                Path.join(this.options.binDir, "qentld.exe")
            ];
        } else {
            // Unix可执行文件
            binaries = [
                Path.join(this.options.binDir, "qentl"),
                Path.join(this.options.binDir, "qentlc"),
                Path.join(this.options.binDir, "qentlbc"),
                Path.join(this.options.binDir, "qentlopt"),
                Path.join(this.options.binDir, "qentld")
            ];
        }
        
        for (let file of binaries) {
            this.removeFile(file);
        }
    }
    
    /**
     * @brief 移除库文件
     */
    private function removeLibraries(): void {
        this.log("移除库文件...");
        
        // 移除库目录中的所有文件
        if (FS.existsSync(this.options.libDir)) {
            this.removeDirectoryContents(this.options.libDir);
        }
    }
    
    /**
     * @brief 移除头文件
     */
    private function removeHeaders(): void {
        this.log("移除头文件...");
        
        // 移除头文件目录中的所有文件
        if (FS.existsSync(this.options.includeDir)) {
            this.removeDirectoryContents(this.options.includeDir);
        }
    }
    
    /**
     * @brief 移除文档
     */
    private function removeDocs(): void {
        this.log("移除文档...");
        
        // 移除文档目录中的所有文件
        if (FS.existsSync(this.options.docDir)) {
            this.removeDirectoryContents(this.options.docDir);
        }
    }
    
    /**
     * @brief 移除目录内容
     */
    private function removeDirectoryContents(dir: String): void {
        if (!FS.existsSync(dir)) {
            return;
        }
        
        try {
            let entries = FS.readdirSync(dir, { withFileTypes: true });
            
            for (let entry of entries) {
                let fullPath = Path.join(dir, entry.name);
                
                if (entry.isDirectory()) {
                    // 递归移除子目录内容
                    this.removeDirectoryContents(fullPath);
                    
                    // 尝试移除空目录
                    try {
                        FS.rmdirSync(fullPath);
                        this.log(`移除目录: ${fullPath}`);
                        this.removedDirs.push(fullPath);
                    } catch (e) {
                        // 目录可能不为空
                        this.log(`无法移除目录: ${fullPath}: ${e.message}`);
                    }
                } else {
                    // 移除文件
                    this.removeFile(fullPath);
                }
            }
        } catch (e) {
            Console.writeErrorLine(`警告: 无法读取目录 ${dir}: ${e.message}`);
        }
    }
    
    /**
     * @brief 移除文件
     */
    private function removeFile(path: String): void {
        if (!FS.existsSync(path)) {
            return;
        }
        
        try {
            FS.unlinkSync(path);
            this.log(`移除文件: ${path}`);
            this.removedFiles.push(path);
        } catch (e) {
            Console.writeErrorLine(`警告: 无法移除文件 ${path}: ${e.message}`);
        }
    }
    
    /**
     * @brief 移除空目录
     */
    private function removeEmptyDirectories(): void {
        this.log("移除空目录...");
        
        // 尝试移除可能为空的目录
        const dirsToRemove = [
            this.options.docDir,
            this.options.includeDir,
            this.options.libDir,
            this.options.binDir,
            this.options.prefix
        ];
        
        for (let dir of dirsToRemove) {
            if (FS.existsSync(dir)) {
                try {
                    // 检查目录是否为空
                    let entries = FS.readdirSync(dir);
                    if (entries.length === 0) {
                        FS.rmdirSync(dir);
                        this.log(`移除空目录: ${dir}`);
                        this.removedDirs.push(dir);
                    } else {
                        this.log(`目录不为空，跳过: ${dir}`);
                    }
                } catch (e) {
                    Console.writeErrorLine(`警告: 无法移除目录 ${dir}: ${e.message}`);
                }
            }
        }
    }
    
    /**
     * @brief 打印卸载摘要
     */
    private function printSummary(): void {
        Console.writeLine("\n卸载摘要:");
        Console.writeLine(`已移除文件数量: ${this.removedFiles.length}`);
        Console.writeLine(`已移除目录数量: ${this.removedDirs.length}`);
        
        if (this.options.verbose) {
            if (this.removedFiles.length > 0) {
                Console.writeLine("\n已移除的文件:");
                for (let file of this.removedFiles) {
                    Console.writeLine(`  ${file}`);
                }
            }
            
            if (this.removedDirs.length > 0) {
                Console.writeLine("\n已移除的目录:");
                for (let dir of this.removedDirs) {
                    Console.writeLine(`  ${dir}`);
                }
            }
        }
    }
    
    /**
     * @brief 记录信息
     */
    private function log(message: String): void {
        if (this.options.verbose) {
            Console.writeLine(message);
        }
    }
}

/**
 * @brief 打印帮助信息
 */
function printHelp(): void {
    Console.writeLine("QEntL编译器卸载脚本");
    Console.writeLine("");
    Console.writeLine("用法: qentl uninstall [选项]");
    Console.writeLine("");
    Console.writeLine("选项:");
    Console.writeLine("  --prefix=DIR          设置安装前缀 [默认: /usr/local 或 C:\\Program Files\\QEntL]");
    Console.writeLine("  --bin-dir=DIR         设置可执行文件目录 [默认: <prefix>/bin]");
    Console.writeLine("  --lib-dir=DIR         设置库文件目录 [默认: <prefix>/lib/qentl]");
    Console.writeLine("  --include-dir=DIR     设置头文件目录 [默认: <prefix>/include/qentl]");
    Console.writeLine("  --doc-dir=DIR         设置文档目录 [默认: <prefix>/share/doc/qentl]");
    Console.writeLine("  --no-symlinks         不移除符号链接");
    Console.writeLine("  --force               强制卸载，不提示确认");
    Console.writeLine("  --verbose             详细输出");
    Console.writeLine("  --help                显示此帮助信息");
    Console.writeLine("");
    Console.writeLine("示例:");
    Console.writeLine("  qentl uninstall");
    Console.writeLine("  qentl uninstall --prefix=/opt/qentl");
    Console.writeLine("  qentl uninstall --force --verbose");
}

/**
 * @brief 主函数
 */
function main(args: Array<String>): Integer {
    // 检查是否为帮助选项
    if (args.length > 0 && args[0] === "--help") {
        printHelp();
        return 0;
    }
    
    try {
        // 创建参数解析器
        let parser = new ArgumentParser(args);
        
        // 创建卸载选项
        let options = new UninstallOptions();
        
        // 解析选项
        if (parser.hasOption("prefix")) {
            options.prefix = parser.getOption("prefix");
            options.binDir = Path.join(options.prefix, "bin");
            
            if (OS.isWindows()) {
                options.libDir = Path.join(options.prefix, "lib");
                options.includeDir = Path.join(options.prefix, "include");
                options.docDir = Path.join(options.prefix, "doc");
            } else {
                options.libDir = Path.join(options.prefix, "lib", "qentl");
                options.includeDir = Path.join(options.prefix, "include", "qentl");
                options.docDir = Path.join(options.prefix, "share", "doc", "qentl");
            }
        }
        
        // 覆盖各个目录（如果提供）
        if (parser.hasOption("bin-dir")) {
            options.binDir = parser.getOption("bin-dir");
        }
        
        if (parser.hasOption("lib-dir")) {
            options.libDir = parser.getOption("lib-dir");
        }
        
        if (parser.hasOption("include-dir")) {
            options.includeDir = parser.getOption("include-dir");
        }
        
        if (parser.hasOption("doc-dir")) {
            options.docDir = parser.getOption("doc-dir");
        }
        
        // 其他选项
        options.removeSymlinks = !parser.getBoolOption("no-symlinks");
        options.force = parser.getBoolOption("force");
        options.verbose = parser.getBoolOption("verbose");
        
        // 创建卸载器并执行卸载
        let uninstaller = new Uninstaller(options);
        if (uninstaller.uninstall()) {
            return 0;
        } else {
            return 1;
        }
    } catch (e) {
        Console.writeErrorLine(`错误: ${e.message}`);
        return 1;
    }
}

// 运行主函数并传递命令行参数
let exitCode = main(Process.getCommandLineArgs().slice(1));
Process.exit(exitCode); 