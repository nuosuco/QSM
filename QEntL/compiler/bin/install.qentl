/**
 * @file install.qentl
 * @brief QEntL编译器安装脚本
 * 
 * 量子基因编码: QGC-INSTALL-SCRIPT-2024062001
 * 量子纠缠信道: QEC-COMPILER-INSTALL-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/fs.qentl";
import "QEntL/core/os.qentl";

/**
 * @class ArgumentParser
 * @brief 命令行参数解析器
 */
quantum_class ArgumentParser {
    private {
        args: Array<String>;            // 原始参数列表
        options: Map<String, String>;   // 解析后的选项
        positionalArgs: Array<String>;  // 位置参数
    }
    
    /**
     * @brief 构造函数
     */
    constructor(args: Array<String>) {
        this.args = args;
        this.options = new Map<String, String>();
        this.positionalArgs = new Array<String>();
        this.parse();
    }
    
    /**
     * @brief 解析参数
     */
    private function parse(): void {
        for (let i = 0; i < this.args.length; i++) {
            let arg = this.args[i];
            
            if (arg.startsWith("--")) {
                // 长选项
                let optionName = arg.substring(2);
                let optionValue = "";
                
                // 检查是否有等号分隔的值
                let equalsPos = optionName.indexOf("=");
                if (equalsPos >= 0) {
                    optionValue = optionName.substring(equalsPos + 1);
                    optionName = optionName.substring(0, equalsPos);
                } else if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else if (arg.startsWith("-")) {
                // 短选项
                let optionName = arg.substring(1);
                let optionValue = "";
                
                if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else {
                // 位置参数
                this.positionalArgs.push(arg);
            }
        }
    }
    
    /**
     * @brief 获取选项值
     */
    public function getOption(name: String, defaultValue: String = ""): String {
        if (this.options.has(name)) {
            return this.options.get(name);
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取布尔选项值
     */
    public function getBoolOption(name: String, defaultValue: Boolean = false): Boolean {
        if (this.options.has(name)) {
            let value = this.options.get(name).toLowerCase();
            return value === "true" || value === "yes" || value === "1";
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取位置参数
     */
    public function getPositionalArgs(): Array<String> {
        return this.positionalArgs;
    }
    
    /**
     * @brief 是否包含选项
     */
    public function hasOption(name: String): Boolean {
        return this.options.has(name);
    }
}

/**
 * @class InstallOptions
 * @brief 安装选项
 */
quantum_class InstallOptions {
    public {
        prefix: String;         // 安装前缀
        binDir: String;         // 可执行文件目录
        libDir: String;         // 库文件目录
        includeDir: String;     // 头文件目录
        docDir: String;         // 文档目录
        force: Boolean;         // 强制安装
        createSymlinks: Boolean; // 创建符号链接
        verbose: Boolean;       // 详细输出
    }
    
    /**
     * @brief 构造函数
     */
    constructor() {
        // 默认安装路径
        if (OS.isWindows()) {
            this.prefix = "C:\\Program Files\\QEntL";
            this.binDir = Path.join(this.prefix, "bin");
            this.libDir = Path.join(this.prefix, "lib");
            this.includeDir = Path.join(this.prefix, "include");
            this.docDir = Path.join(this.prefix, "doc");
        } else {
            this.prefix = "/usr/local";
            this.binDir = Path.join(this.prefix, "bin");
            this.libDir = Path.join(this.prefix, "lib", "qentl");
            this.includeDir = Path.join(this.prefix, "include", "qentl");
            this.docDir = Path.join(this.prefix, "share", "doc", "qentl");
        }
        
        this.force = false;
        this.createSymlinks = true;
        this.verbose = false;
    }
}

/**
 * @class Installer
 * @brief 安装器
 */
quantum_class Installer {
    private {
        options: InstallOptions;       // 安装选项
        sourceDir: String;             // 源代码目录
        buildDir: String;              // 构建目录
        installedFiles: Array<String>; // 已安装文件列表
    }
    
    /**
     * @brief 构造函数
     */
    constructor(options: InstallOptions) {
        this.options = options;
        this.sourceDir = Process.getCurrentDirectory();
        this.buildDir = Path.join(this.sourceDir, "build");
        this.installedFiles = new Array<String>();
    }
    
    /**
     * @brief 执行安装
     */
    public function install(): Boolean {
        this.log("开始安装QEntL编译器...");
        
        // 检查构建目录
        if (!this.checkBuildDirectory()) {
            return false;
        }
        
        // 创建安装目录
        if (!this.createInstallDirectories()) {
            return false;
        }
        
        // 安装可执行文件
        if (!this.installBinaries()) {
            return false;
        }
        
        // 安装库文件
        if (!this.installLibraries()) {
            return false;
        }
        
        // 安装头文件
        if (!this.installHeaders()) {
            return false;
        }
        
        // 安装文档
        if (!this.installDocs()) {
            return false;
        }
        
        // 创建符号链接
        if (this.options.createSymlinks) {
            this.createSymlinks();
        }
        
        this.log("安装完成");
        this.printSummary();
        
        return true;
    }
    
    /**
     * @brief 检查构建目录
     */
    private function checkBuildDirectory(): Boolean {
        if (!FS.existsSync(this.buildDir)) {
            Console.writeErrorLine(`错误: 找不到构建目录: ${this.buildDir}`);
            Console.writeErrorLine("请先运行 qentl build 命令构建项目");
            return false;
        }
        
        // 检查必要的文件
        let requiredFiles = [
            Path.join(this.buildDir, "cli", "cli.qobj"),
            Path.join(this.buildDir, "compiler", "compiler.qobj"),
            Path.join(this.buildDir, "bytecode_gen", "bytecode_gen.qobj"),
            Path.join(this.buildDir, "bytecode_opt", "bytecode_opt.qobj"),
            Path.join(this.buildDir, "linker", "linker.qobj")
        ];
        
        for (let file of requiredFiles) {
            if (!FS.existsSync(file)) {
                Console.writeErrorLine(`错误: 找不到必要的构建文件: ${file}`);
                Console.writeErrorLine("请先运行 qentl build 命令构建项目");
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * @brief 创建安装目录
     */
    private function createInstallDirectories(): Boolean {
        try {
            // 创建目录
            this.createDirectory(this.options.prefix);
            this.createDirectory(this.options.binDir);
            this.createDirectory(this.options.libDir);
            this.createDirectory(this.options.includeDir);
            this.createDirectory(this.options.docDir);
            
            return true;
        } catch (e) {
            Console.writeErrorLine(`错误: 无法创建安装目录: ${e.message}`);
            return false;
        }
    }
    
    /**
     * @brief 安装可执行文件
     */
    private function installBinaries(): Boolean {
        this.log("安装可执行文件...");
        
        // QEntL主程序
        let mainExe = OS.isWindows() ? "qentl.exe" : "qentl";
        if (!this.installFile(
            Path.join(this.buildDir, "cli", "cli.qobj"),
            Path.join(this.options.binDir, mainExe),
            true // 可执行
        )) {
            return false;
        }
        
        // 编译器
        let compilerExe = OS.isWindows() ? "qentlc.exe" : "qentlc";
        if (!this.installFile(
            Path.join(this.buildDir, "compiler", "compiler.qobj"),
            Path.join(this.options.binDir, compilerExe),
            true // 可执行
        )) {
            return false;
        }
        
        // 字节码生成器
        let bcGenExe = OS.isWindows() ? "qentlbc.exe" : "qentlbc";
        if (!this.installFile(
            Path.join(this.buildDir, "bytecode_gen", "bytecode_gen.qobj"),
            Path.join(this.options.binDir, bcGenExe),
            true // 可执行
        )) {
            return false;
        }
        
        // 字节码优化器
        let bcOptExe = OS.isWindows() ? "qentlopt.exe" : "qentlopt";
        if (!this.installFile(
            Path.join(this.buildDir, "bytecode_opt", "bytecode_opt.qobj"),
            Path.join(this.options.binDir, bcOptExe),
            true // 可执行
        )) {
            return false;
        }
        
        // 链接器
        let linkerExe = OS.isWindows() ? "qentld.exe" : "qentld";
        if (!this.installFile(
            Path.join(this.buildDir, "linker", "linker.qobj"),
            Path.join(this.options.binDir, linkerExe),
            true // 可执行
        )) {
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 安装库文件
     */
    private function installLibraries(): Boolean {
        this.log("安装库文件...");
        
        // 创建库目录
        let coreLibDir = Path.join(this.options.libDir, "core");
        this.createDirectory(coreLibDir);
        
        // 安装核心库文件
        let coreLibFiles = this.findFiles(Path.join(this.sourceDir, "../vm/src/core/quantum"), ".qobj");
        for (let file of coreLibFiles) {
            let fileName = Path.basename(file);
            let destFile = Path.join(coreLibDir, fileName);
            
            if (!this.installFile(file, destFile, false)) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * @brief 安装头文件
     */
    private function installHeaders(): Boolean {
        this.log("安装头文件...");
        
        // 创建头文件目录
        let includeCorePath = Path.join(this.options.includeDir, "core");
        this.createDirectory(includeCorePath);
        
        // 安装基础类型头文件
        let headerFiles = this.findFiles(Path.join(this.sourceDir, "../compiler/include"), ".h.qentl");
        for (let file of headerFiles) {
            let relativePath = Path.relative(Path.join(this.sourceDir, "../compiler/include"), file);
            let destFile = Path.join(this.options.includeDir, relativePath);
            
            // 确保目标目录存在
            let destDir = Path.dirname(destFile);
            this.createDirectory(destDir);
            
            if (!this.installFile(file, destFile, false)) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * @brief 安装文档
     */
    private function installDocs(): Boolean {
        this.log("安装文档...");
        
        // 查找并安装文档
        let docFiles = this.findFiles(Path.join(this.sourceDir, "../docs"), ".md");
        docFiles = docFiles.concat(this.findFiles(Path.join(this.sourceDir, "../docs"), ".txt"));
        
        for (let file of docFiles) {
            let relativePath = Path.relative(Path.join(this.sourceDir, "../docs"), file);
            let destFile = Path.join(this.options.docDir, relativePath);
            
            // 确保目标目录存在
            let destDir = Path.dirname(destFile);
            this.createDirectory(destDir);
            
            if (!this.installFile(file, destFile, false)) {
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * @brief 创建符号链接
     */
    private function createSymlinks(): Boolean {
        // 仅在非Windows系统上创建符号链接
        if (OS.isWindows()) {
            return true;
        }
        
        this.log("创建符号链接...");
        
        try {
            // 创建到系统路径的符号链接
            if (FS.existsSync("/usr/bin")) {
                let binFiles = FS.readdirSync(this.options.binDir);
                
                for (let file of binFiles) {
                    let sourcePath = Path.join(this.options.binDir, file);
                    let linkPath = Path.join("/usr/bin", file);
                    
                    // 如果目标已存在且不是符号链接，跳过
                    if (FS.existsSync(linkPath) && !FS.lstatSync(linkPath).isSymbolicLink() && !this.options.force) {
                        Console.writeErrorLine(`警告: 无法创建符号链接，目标已存在: ${linkPath}`);
                        continue;
                    }
                    
                    // 如果目标已存在，先删除
                    if (FS.existsSync(linkPath)) {
                        FS.unlinkSync(linkPath);
                    }
                    
                    // 创建符号链接
                    FS.symlinkSync(sourcePath, linkPath);
                    this.log(`创建符号链接: ${linkPath} -> ${sourcePath}`);
                }
            }
            
            return true;
        } catch (e) {
            Console.writeErrorLine(`警告: 无法创建符号链接: ${e.message}`);
            Console.writeErrorLine("可能需要管理员权限来创建系统目录的符号链接");
            return false;
        }
    }
    
    /**
     * @brief 安装文件
     */
    private function installFile(sourcePath: String, destPath: String, executable: Boolean): Boolean {
        try {
            // 如果目标已存在且不是强制模式，检查是否覆盖
            if (FS.existsSync(destPath) && !this.options.force) {
                Console.writeErrorLine(`警告: 目标文件已存在: ${destPath}`);
                let answer = Console.readLine("是否覆盖? (y/N): ").toLowerCase();
                if (answer !== "y" && answer !== "yes") {
                    Console.writeLine("跳过安装该文件");
                    return true;
                }
            }
            
            // 复制文件
            FS.copyFileSync(sourcePath, destPath);
            
            // 设置执行权限
            if (executable && !OS.isWindows()) {
                FS.chmodSync(destPath, 0o755); // rwxr-xr-x
            }
            
            this.log(`安装文件: ${destPath}`);
            this.installedFiles.push(destPath);
            
            return true;
        } catch (e) {
            Console.writeErrorLine(`错误: 无法安装文件 ${sourcePath} -> ${destPath}: ${e.message}`);
            return false;
        }
    }
    
    /**
     * @brief 创建目录
     */
    private function createDirectory(dir: String): void {
        if (!FS.existsSync(dir)) {
            FS.mkdirSync(dir, { recursive: true });
            this.log(`创建目录: ${dir}`);
        }
    }
    
    /**
     * @brief 查找文件
     */
    private function findFiles(dir: String, extension: String): Array<String> {
        let results = new Array<String>();
        
        if (!FS.existsSync(dir)) {
            return results;
        }
        
        function scanDir(currentDir: String): void {
            let entries = FS.readdirSync(currentDir, { withFileTypes: true });
            
            for (let entry of entries) {
                let fullPath = Path.join(currentDir, entry.name);
                
                if (entry.isDirectory()) {
                    scanDir(fullPath);
                } else if (entry.isFile() && fullPath.endsWith(extension)) {
                    results.push(fullPath);
                }
            }
        }
        
        scanDir(dir);
        return results;
    }
    
    /**
     * @brief 打印安装摘要
     */
    private function printSummary(): void {
        Console.writeLine("\n安装摘要:");
        Console.writeLine(`安装前缀: ${this.options.prefix}`);
        Console.writeLine(`已安装文件数量: ${this.installedFiles.length}`);
        
        if (this.options.verbose) {
            Console.writeLine("\n已安装的文件:");
            for (let file of this.installedFiles) {
                Console.writeLine(`  ${file}`);
            }
        }
        
        // 打印环境变量设置说明
        Console.writeLine("\n要启用QEntL命令，请将以下路径添加到您的PATH环境变量:");
        Console.writeLine(`  ${this.options.binDir}`);
        
        if (OS.isWindows()) {
            Console.writeLine("\n在Windows中，您可以执行:");
            Console.writeLine(`  setx PATH "%PATH%;${this.options.binDir}"`);
        } else {
            Console.writeLine("\n在Unix/Linux中，您可以将以下行添加到您的~/.bashrc或~/.profile文件:");
            Console.writeLine(`  export PATH="$PATH:${this.options.binDir}"`);
        }
    }
    
    /**
     * @brief 记录信息
     */
    private function log(message: String): void {
        if (this.options.verbose) {
            Console.writeLine(message);
        }
    }
}

/**
 * @brief 打印帮助信息
 */
function printHelp(): void {
    Console.writeLine("QEntL编译器安装脚本");
    Console.writeLine("");
    Console.writeLine("用法: qentl install [选项]");
    Console.writeLine("");
    Console.writeLine("选项:");
    Console.writeLine("  --prefix=DIR          设置安装前缀 [默认: /usr/local 或 C:\\Program Files\\QEntL]");
    Console.writeLine("  --bin-dir=DIR         设置可执行文件目录 [默认: <prefix>/bin]");
    Console.writeLine("  --lib-dir=DIR         设置库文件目录 [默认: <prefix>/lib/qentl]");
    Console.writeLine("  --include-dir=DIR     设置头文件目录 [默认: <prefix>/include/qentl]");
    Console.writeLine("  --doc-dir=DIR         设置文档目录 [默认: <prefix>/share/doc/qentl]");
    Console.writeLine("  --force               强制安装，覆盖现有文件");
    Console.writeLine("  --no-symlinks         不创建符号链接");
    Console.writeLine("  --verbose             详细输出");
    Console.writeLine("  --help                显示此帮助信息");
    Console.writeLine("");
    Console.writeLine("示例:");
    Console.writeLine("  qentl install");
    Console.writeLine("  qentl install --prefix=/opt/qentl");
    Console.writeLine("  qentl install --prefix=/opt/qentl --force --verbose");
}

/**
 * @brief 主函数
 */
function main(args: Array<String>): Integer {
    // 检查是否为帮助选项
    if (args.length > 0 && args[0] === "--help") {
        printHelp();
        return 0;
    }
    
    try {
        // 创建参数解析器
        let parser = new ArgumentParser(args);
        
        // 创建安装选项
        let options = new InstallOptions();
        
        // 解析选项
        if (parser.hasOption("prefix")) {
            options.prefix = parser.getOption("prefix");
            options.binDir = Path.join(options.prefix, "bin");
            
            if (OS.isWindows()) {
                options.libDir = Path.join(options.prefix, "lib");
                options.includeDir = Path.join(options.prefix, "include");
                options.docDir = Path.join(options.prefix, "doc");
            } else {
                options.libDir = Path.join(options.prefix, "lib", "qentl");
                options.includeDir = Path.join(options.prefix, "include", "qentl");
                options.docDir = Path.join(options.prefix, "share", "doc", "qentl");
            }
        }
        
        // 覆盖各个目录（如果提供）
        if (parser.hasOption("bin-dir")) {
            options.binDir = parser.getOption("bin-dir");
        }
        
        if (parser.hasOption("lib-dir")) {
            options.libDir = parser.getOption("lib-dir");
        }
        
        if (parser.hasOption("include-dir")) {
            options.includeDir = parser.getOption("include-dir");
        }
        
        if (parser.hasOption("doc-dir")) {
            options.docDir = parser.getOption("doc-dir");
        }
        
        // 其他选项
        options.force = parser.getBoolOption("force");
        options.createSymlinks = !parser.getBoolOption("no-symlinks");
        options.verbose = parser.getBoolOption("verbose");
        
        // 创建安装器并执行安装
        let installer = new Installer(options);
        if (installer.install()) {
            return 0;
        } else {
            return 1;
        }
    } catch (e) {
        Console.writeErrorLine(`错误: ${e.message}`);
        return 1;
    }
}

// 运行主函数并传递命令行参数
let exitCode = main(Process.getCommandLineArgs().slice(1));
Process.exit(exitCode); 