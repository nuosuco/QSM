/**
 * @file option_parser.qentl
 * @brief QEntL命令行选项解析器
 * 
 * 量子基因编码: QGC-CORE-CLI-OPTION-2024062901
 * 量子纠缠信道: QEC-CORE-CLI-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/map.qentl";

/**
 * @class Option
 * @brief 命令行选项
 */
quantum_class Option {
    public {
        name: String;          // 选项完整名称
        shortName: String;     // 选项简称（单字符）
        description: String;   // 选项描述
        hasArg: Boolean;       // 是否有参数
        value: String;         // 选项值
        isSet: Boolean;        // 是否设置了该选项
    }
    
    /**
     * @brief 构造函数
     */
    constructor(name: String, shortName: String, description: String, hasArg: Boolean = false) {
        this.name = name;
        this.shortName = shortName;
        this.description = description;
        this.hasArg = hasArg;
        this.value = "";
        this.isSet = false;
    }
}

/**
 * @class OptionParser
 * @brief 命令行选项解析器
 */
quantum_class OptionParser {
    private {
        programName: String;         // 程序名称
        options: Array<Option>;      // 选项列表
        optionMap: Map<String, Option>; // 选项映射（名称到选项）
        shortOptionMap: Map<String, Option>; // 简称映射（简称到选项）
        parsedOptions: Map<String, String>; // 解析后的选项（名称到值）
        nonOptions: Array<String>;   // 非选项参数
    }
    
    /**
     * @brief 构造函数
     */
    constructor(programName: String = "") {
        this.programName = programName;
        this.options = new Array<Option>();
        this.optionMap = new Map<String, Option>();
        this.shortOptionMap = new Map<String, Option>();
        this.parsedOptions = new Map<String, String>();
        this.nonOptions = new Array<String>();
    }
    
    /**
     * @brief 添加选项
     */
    public function addOption(name: String, shortName: String, description: String, hasArg: Boolean = false): void {
        const option = new Option(name, shortName, description, hasArg);
        this.options.push(option);
        this.optionMap.set(name, option);
        this.shortOptionMap.set(shortName, option);
    }
    
    /**
     * @brief 解析命令行参数
     */
    public function parse(args: Array<String>): Map<String, String> {
        let i = 0;
        
        while (i < args.length) {
            const arg = args[i];
            
            // 检查是否为选项
            if (arg.startsWith("--")) {
                // 长选项
                const optName = arg.substring(2);
                
                // 检查是否存在该选项
                if (this.optionMap.has(optName)) {
                    const option = this.optionMap.get(optName);
                    option.isSet = true;
                    
                    if (option.hasArg) {
                        // 需要参数
                        if (i + 1 < args.length && !args[i + 1].startsWith("-")) {
                            option.value = args[i + 1];
                            this.parsedOptions.set(optName, option.value);
                            i += 2;
                        } else {
                            Console.writeLine(`错误: 选项 --${optName} 需要参数`);
                            i++;
                        }
                    } else {
                        // 无参数
                        this.parsedOptions.set(optName, "true");
                        i++;
                    }
                } else {
                    Console.writeLine(`警告: 未知选项 --${optName}`);
                    i++;
                }
            } else if (arg.startsWith("-") && arg.length > 1) {
                // 短选项
                const optName = arg.substring(1);
                
                // 检查是否存在该选项
                if (this.shortOptionMap.has(optName)) {
                    const option = this.shortOptionMap.get(optName);
                    option.isSet = true;
                    
                    if (option.hasArg) {
                        // 需要参数
                        if (i + 1 < args.length && !args[i + 1].startsWith("-")) {
                            option.value = args[i + 1];
                            this.parsedOptions.set(option.name, option.value);
                            i += 2;
                        } else {
                            Console.writeLine(`错误: 选项 -${optName} 需要参数`);
                            i++;
                        }
                    } else {
                        // 无参数
                        this.parsedOptions.set(option.name, "true");
                        i++;
                    }
                } else {
                    Console.writeLine(`警告: 未知选项 -${optName}`);
                    i++;
                }
            } else {
                // 非选项参数
                this.nonOptions.push(arg);
                i++;
            }
        }
        
        return this.parsedOptions;
    }
    
    /**
     * @brief 获取非选项参数
     */
    public function getNonOptions(): Array<String> {
        return this.nonOptions;
    }
    
    /**
     * @brief 打印帮助信息
     */
    public function printHelp(): void {
        // 打印程序名称
        if (this.programName.length > 0) {
            Console.writeLine(`${this.programName}`);
            Console.writeLine();
        }
        
        // 打印用法
        Console.writeLine("用法: qentl [选项]");
        Console.writeLine();
        
        // 打印选项
        Console.writeLine("选项:");
        
        // 计算最长选项名称
        let maxNameLength = 0;
        for (const option of this.options) {
            const nameLength = option.name.length + option.shortName.length + 6; // --name, -s
            if (nameLength > maxNameLength) {
                maxNameLength = nameLength;
            }
        }
        
        // 打印每个选项
        for (const option of this.options) {
            let optionText = `  --${option.name}, -${option.shortName}`;
            if (option.hasArg) {
                optionText += " <arg>";
            }
            
            // 添加足够的空格以对齐描述
            while (optionText.length < maxNameLength + 4) {
                optionText += " ";
            }
            
            Console.writeLine(`${optionText}${option.description}`);
        }
    }
    
    /**
     * @brief 检查选项是否设置
     */
    public function isSet(name: String): Boolean {
        return this.parsedOptions.has(name);
    }
    
    /**
     * @brief 获取选项值
     */
    public function getValue(name: String): String {
        if (this.parsedOptions.has(name)) {
            return this.parsedOptions.get(name);
        }
        return "";
    }
}

// 导出类
export { OptionParser, Option }; 