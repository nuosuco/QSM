/**
 * @file linker_cli.qentl
 * @brief QEntL链接器命令行界面
 * 
 * 量子基因编码: QGC-LINKER-CLI-2024062001
 * 量子纠缠信道: QEC-COMPILER-CORE-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/compiler/src/backend/linker/linker.qentl";

/**
 * @class ArgumentParser
 * @brief 命令行参数解析器
 */
quantum_class ArgumentParser {
    private {
        args: Array<String>;            // 原始参数列表
        options: Map<String, String>;   // 解析后的选项
        positionalArgs: Array<String>;  // 位置参数
    }
    
    /**
     * @brief 构造函数
     */
    constructor(args: Array<String>) {
        this.args = args;
        this.options = new Map<String, String>();
        this.positionalArgs = new Array<String>();
        this.parse();
    }
    
    /**
     * @brief 解析参数
     */
    private function parse(): void {
        for (let i = 0; i < this.args.length; i++) {
            let arg = this.args[i];
            
            if (arg.startsWith("--")) {
                // 长选项
                let optionName = arg.substring(2);
                let optionValue = "";
                
                // 检查是否有等号分隔的值
                let equalsPos = optionName.indexOf("=");
                if (equalsPos >= 0) {
                    optionValue = optionName.substring(equalsPos + 1);
                    optionName = optionName.substring(0, equalsPos);
                } else if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else if (arg.startsWith("-")) {
                // 短选项
                let optionName = arg.substring(1);
                let optionValue = "";
                
                if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else {
                // 位置参数
                this.positionalArgs.push(arg);
            }
        }
    }
    
    /**
     * @brief 获取选项值
     */
    public function getOption(name: String, defaultValue: String = ""): String {
        if (this.options.has(name)) {
            return this.options.get(name);
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取布尔选项值
     */
    public function getBoolOption(name: String, defaultValue: Boolean = false): Boolean {
        if (this.options.has(name)) {
            let value = this.options.get(name).toLowerCase();
            return value === "true" || value === "yes" || value === "1";
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取整数选项值
     */
    public function getIntOption(name: String, defaultValue: Integer = 0): Integer {
        if (this.options.has(name)) {
            try {
                return parseInt(this.options.get(name));
            } catch (e) {
                return defaultValue;
            }
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取位置参数
     */
    public function getPositionalArgs(): Array<String> {
        return this.positionalArgs;
    }
    
    /**
     * @brief 是否包含选项
     */
    public function hasOption(name: String): Boolean {
        return this.options.has(name);
    }
}

/**
 * @class LinkerCLI
 * @brief 链接器命令行接口
 */
quantum_class LinkerCLI {
    private {
        parser: ArgumentParser;     // 参数解析器
        linker: Linker;             // 链接器实例
        inputFiles: Array<String>;  // 输入文件列表
        outputFile: String;         // 输出文件
        verbose: Boolean;           // 详细输出
        generateDebugInfo: Boolean; // 生成调试信息
        targetArch: String;         // 目标架构
        libraryPaths: Array<String>; // 库文件路径
        libraries: Array<String>;    // 库文件
    }
    
    /**
     * @brief 构造函数
     */
    constructor(args: Array<String>) {
        this.parser = new ArgumentParser(args);
        this.linker = new Linker();
        this.inputFiles = new Array<String>();
        this.outputFile = "";
        this.verbose = false;
        this.generateDebugInfo = false;
        this.targetArch = "vm";
        this.libraryPaths = new Array<String>();
        this.libraries = new Array<String>();
    }
    
    /**
     * @brief 运行命令行界面
     */
    public function run(): Integer {
        // 显示帮助
        if (this.parser.getBoolOption("help") || this.parser.getBoolOption("h")) {
            this.printHelp();
            return 0;
        }
        
        // 显示版本
        if (this.parser.getBoolOption("version") || this.parser.getBoolOption("v")) {
            this.printVersion();
            return 0;
        }
        
        try {
            // 解析选项
            this.parseOptions();
            
            // 验证必要参数
            if (!this.validateOptions()) {
                return 1;
            }
            
            // 配置链接器
            this.configureLinker();
            
            // 执行链接
            Console.writeLine("开始链接...");
            let startTime = Date.now();
            let success = this.linker.link();
            let endTime = Date.now();
            
            if (success) {
                Console.writeLine(`链接成功: ${this.outputFile}`);
                if (this.verbose) {
                    Console.writeLine(`链接用时: ${(endTime - startTime) / 1000.0} 秒`);
                }
                return 0;
            } else {
                Console.writeErrorLine("链接失败");
                return 1;
            }
        } catch (e) {
            Console.writeErrorLine(`错误: ${e.message}`);
            return 1;
        }
    }
    
    /**
     * @brief 解析选项
     */
    private function parseOptions(): void {
        // 获取位置参数（输入文件）
        this.inputFiles = this.parser.getPositionalArgs();
        
        // 输出文件
        this.outputFile = this.parser.getOption("output", this.parser.getOption("o", "a.qexe"));
        
        // 详细输出
        this.verbose = this.parser.getBoolOption("verbose") || this.parser.getBoolOption("V");
        
        // 调试信息
        this.generateDebugInfo = this.parser.getBoolOption("debug") || this.parser.getBoolOption("g");
        
        // 目标架构
        this.targetArch = this.parser.getOption("target", this.parser.getOption("t", "vm"));
        
        // 库路径
        let libPathStr = this.parser.getOption("library-path", this.parser.getOption("L", ""));
        if (libPathStr.length > 0) {
            let paths = libPathStr.split(Path.pathSeparator);
            for (let path of paths) {
                if (path.trim().length > 0) {
                    this.libraryPaths.push(path.trim());
                }
            }
        }
        
        // 库文件
        let libStr = this.parser.getOption("library", this.parser.getOption("l", ""));
        if (libStr.length > 0) {
            let libs = libStr.split(",");
            for (let lib of libs) {
                if (lib.trim().length > 0) {
                    this.libraries.push(lib.trim());
                }
            }
        }
    }
    
    /**
     * @brief 验证选项
     */
    private function validateOptions(): Boolean {
        // 至少需要一个输入文件
        if (this.inputFiles.length === 0) {
            Console.writeErrorLine("错误: 未指定输入文件");
            this.printHelp();
            return false;
        }
        
        // 验证输入文件存在
        for (let file of this.inputFiles) {
            if (!File.exists(file)) {
                Console.writeErrorLine(`错误: 输入文件不存在: ${file}`);
                return false;
            }
        }
        
        // 验证库路径存在
        for (let path of this.libraryPaths) {
            if (!File.isDirectory(path)) {
                Console.writeErrorLine(`警告: 库路径不存在或不是目录: ${path}`);
            }
        }
        
        return true;
    }
    
    /**
     * @brief 配置链接器
     */
    private function configureLinker(): void {
        // 设置输出文件
        this.linker.setOutputFile(this.outputFile);
        
        // 设置调试信息
        this.linker.setGenerateDebugInfo(this.generateDebugInfo);
        
        // 设置目标架构
        this.linker.setTargetArch(this.targetArch);
        
        // 设置详细模式
        this.linker.setVerbose(this.verbose);
        
        // 添加库路径
        for (let path of this.libraryPaths) {
            this.linker.addLibraryPath(path);
        }
        
        // 添加库文件
        for (let lib of this.libraries) {
            this.linker.addLibrary(lib);
        }
        
        // 添加输入文件
        for (let file of this.inputFiles) {
            this.linker.addInputFile(file);
        }
    }
    
    /**
     * @brief 打印帮助信息
     */
    private function printHelp(): void {
        Console.writeLine("QEntL链接器 - 量子纠缠式语言链接工具");
        Console.writeLine("");
        Console.writeLine("用法: qentld [选项] 文件...");
        Console.writeLine("");
        Console.writeLine("选项:");
        Console.writeLine("  -h, --help               显示帮助信息");
        Console.writeLine("  -v, --version            显示版本信息");
        Console.writeLine("  -o, --output=FILE        指定输出文件名，默认为a.qexe");
        Console.writeLine("  -t, --target=ARCH        指定目标架构，默认为vm");
        Console.writeLine("  -L, --library-path=PATHS 添加库搜索路径，以','分隔");
        Console.writeLine("  -l, --library=LIBS       添加库，以','分隔");
        Console.writeLine("  -g, --debug              生成调试信息");
        Console.writeLine("  -V, --verbose            详细输出");
        Console.writeLine("");
        Console.writeLine("示例:");
        Console.writeLine("  qentld -o program.qexe file1.qobj file2.qobj");
        Console.writeLine("  qentld -L./lib -lmath,io -o calc.qexe calc.qobj");
    }
    
    /**
     * @brief 打印版本信息
     */
    private function printVersion(): void {
        Console.writeLine("QEntL链接器 版本 1.0.0");
        Console.writeLine("量子基因编码: QGC-LINKER-CLI-2024062001");
        Console.writeLine("量子纠缠信道: QEC-COMPILER-CORE-01");
    }
}

/**
 * @brief 主函数
 */
function main(args: Array<String>): Integer {
    // 创建并运行命令行界面
    let cli = new LinkerCLI(args);
    return cli.run();
}

// 运行主函数并传递命令行参数
let exitCode = main(Process.getCommandLineArgs().slice(1));
Process.exit(exitCode); 