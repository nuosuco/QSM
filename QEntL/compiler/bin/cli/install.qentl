/**
 * @file install.qentl
 * @brief QEntL编译器安装命令行工具
 * 
 * 量子基因编码: QGC-INSTALL-CLI-2024062901
 * 量子纠缠信道: QEC-INSTALL-MAIN-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/fs.qentl";
import "QEntL/core/os.qentl";
import "QEntL/core/cmd/option_parser.qentl";

// 导入平台特定安装器
import { WindowsInstaller } from "QEntL/compiler/bin/platform/windows_install.qentl";
import { MacOSInstaller } from "QEntL/compiler/bin/platform/macos_install.qentl";
import { LinuxInstaller, LinuxDistribution } from "QEntL/compiler/bin/platform/linux_install.qentl";

/**
 * @enum PlatformType
 * @brief 支持的平台类型
 */
quantum_enum PlatformType {
    UNKNOWN,
    WINDOWS,
    MACOS,
    LINUX
}

/**
 * @class Installer
 * @brief QEntL编译器安装管理器
 */
quantum_class Installer {
    private {
        platform: PlatformType;          // 当前平台
        installPath: String;             // 安装路径
        verbose: Boolean;                // 详细输出
        platformInstaller: any;          // 平台特定安装器
    }
    
    /**
     * @brief 构造函数
     */
    constructor(installPath: String, verbose: Boolean = false) {
        this.installPath = installPath;
        this.verbose = verbose;
        this.platform = this.detectPlatform();
        this.platformInstaller = this.createPlatformInstaller();
    }
    
    /**
     * @brief 检测当前平台
     */
    private function detectPlatform(): PlatformType {
        this.log("检测平台...");
        
        const platform = OS.platform();
        
        if (platform.indexOf("win") === 0) {
            this.log("检测到Windows平台");
            return PlatformType.WINDOWS;
        } else if (platform === "darwin") {
            this.log("检测到macOS平台");
            return PlatformType.MACOS;
        } else if (platform === "linux") {
            this.log("检测到Linux平台");
            return PlatformType.LINUX;
        } else {
            this.log(`不支持的平台: ${platform}`, true);
            return PlatformType.UNKNOWN;
        }
    }
    
    /**
     * @brief 创建平台特定安装器
     */
    private function createPlatformInstaller(): any {
        switch (this.platform) {
            case PlatformType.WINDOWS:
                return new WindowsInstaller(this.installPath, this.verbose);
            case PlatformType.MACOS:
                return new MacOSInstaller(this.installPath, this.verbose);
            case PlatformType.LINUX:
                return new LinuxInstaller(this.installPath, this.verbose);
            default:
                this.log("无法创建平台特定安装器，使用通用安装流程", true);
                return null;
        }
    }
    
    /**
     * @brief 执行安装
     */
    public function install(): Boolean {
        this.log("开始安装QEntL编译器...");
        
        // 检查平台支持
        if (this.platform === PlatformType.UNKNOWN) {
            this.log("不支持当前平台", true);
            return false;
        }
        
        // 创建安装目录
        if (!this.prepareInstallDirectory()) {
            return false;
        }
        
        // 复制文件
        if (!this.copyFiles()) {
            return false;
        }
        
        // 设置文件权限
        if (!this.setPermissions()) {
            return false;
        }
        
        // 执行平台特定安装
        if (this.platformInstaller) {
            try {
                if (!this.platformInstaller.install()) {
                    this.log("平台特定安装失败", true);
                    return false;
                }
            } catch (e) {
                this.log(`平台特定安装发生错误: ${e}`, true);
                return false;
            }
        }
        
        this.log("QEntL编译器安装完成");
        return true;
    }
    
    /**
     * @brief 准备安装目录
     */
    private function prepareInstallDirectory(): Boolean {
        try {
            this.log(`准备安装目录: ${this.installPath}`);
            
            // 检查目录是否存在
            if (!FS.existsSync(this.installPath)) {
                // 创建目录
                FS.mkdirSync(this.installPath, { recursive: true });
                this.log("已创建安装目录");
            } else {
                this.log("安装目录已存在");
            }
            
            // 创建子目录
            const subdirs = ["bin", "lib", "include", "share", "docs"];
            for (const dir of subdirs) {
                const dirPath = Path.join(this.installPath, dir);
                if (!FS.existsSync(dirPath)) {
                    FS.mkdirSync(dirPath);
                    this.log(`已创建子目录: ${dir}`);
                }
            }
            
            // 创建图标目录
            const iconsDir = Path.join(this.installPath, "share", "icons");
            if (!FS.existsSync(iconsDir)) {
                FS.mkdirSync(iconsDir);
                this.log("已创建图标目录");
            }
            
            return true;
        } catch (e) {
            this.log(`准备安装目录失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 复制文件
     */
    private function copyFiles(): Boolean {
        try {
            this.log("复制文件...");
            
            // 源目录 - 当前执行程序的目录
            const sourceDir = Path.dirname(Process.argv[0]);
            
            // 复制bin目录
            this.copyDirectory(
                Path.join(sourceDir, "bin"),
                Path.join(this.installPath, "bin")
            );
            
            // 复制lib目录
            this.copyDirectory(
                Path.join(sourceDir, "lib"),
                Path.join(this.installPath, "lib")
            );
            
            // 复制include目录
            this.copyDirectory(
                Path.join(sourceDir, "include"),
                Path.join(this.installPath, "include")
            );
            
            // 复制文档
            this.copyDirectory(
                Path.join(sourceDir, "docs"),
                Path.join(this.installPath, "docs")
            );
            
            // 复制图标
            this.copyFile(
                Path.join(sourceDir, "share", "icons", "qentl.png"),
                Path.join(this.installPath, "share", "icons", "qentl.png")
            );
            
            // 复制macOS图标
            this.copyFile(
                Path.join(sourceDir, "share", "icons", "qentl.icns"),
                Path.join(this.installPath, "share", "icons", "qentl.icns")
            );
            
            return true;
        } catch (e) {
            this.log(`复制文件失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 复制目录
     */
    private function copyDirectory(source: String, destination: String): void {
        // 确保目标目录存在
        if (!FS.existsSync(destination)) {
            FS.mkdirSync(destination, { recursive: true });
        }
        
        // 读取源目录内容
        const files = FS.readdirSync(source);
        
        for (const file of files) {
            const srcPath = Path.join(source, file);
            const destPath = Path.join(destination, file);
            
            // 检查是否为目录
            if (FS.statSync(srcPath).isDirectory()) {
                // 递归复制子目录
                this.copyDirectory(srcPath, destPath);
            } else {
                // 复制文件
                this.copyFile(srcPath, destPath);
            }
        }
    }
    
    /**
     * @brief 复制文件
     */
    private function copyFile(source: String, destination: String): void {
        try {
            // 确保目标目录存在
            const destDir = Path.dirname(destination);
            if (!FS.existsSync(destDir)) {
                FS.mkdirSync(destDir, { recursive: true });
            }
            
            if (FS.existsSync(source)) {
                FS.copyFileSync(source, destination);
                this.log(`已复制: ${source} -> ${destination}`, false, true);
            } else {
                this.log(`源文件不存在: ${source}`, false, true);
            }
        } catch (e) {
            this.log(`复制文件失败: ${source} -> ${destination}: ${e}`, true, true);
        }
    }
    
    /**
     * @brief 设置文件权限
     */
    private function setPermissions(): Boolean {
        try {
            this.log("设置文件权限...");
            
            // 在非Windows平台上设置可执行权限
            if (this.platform !== PlatformType.WINDOWS) {
                const binDir = Path.join(this.installPath, "bin");
                const binFiles = FS.readdirSync(binDir);
                
                for (const file of binFiles) {
                    const filePath = Path.join(binDir, file);
                    
                    // 检查是否为文件
                    if (FS.statSync(filePath).isFile()) {
                        // 设置可执行权限
                        Process.execute("chmod", ["+x", filePath]);
                        this.log(`已设置可执行权限: ${filePath}`, false, true);
                    }
                }
            }
            
            return true;
        } catch (e) {
            this.log(`设置文件权限失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 执行卸载
     */
    public function uninstall(): Boolean {
        this.log("开始卸载QEntL编译器...");
        
        // 检查平台支持
        if (this.platform === PlatformType.UNKNOWN) {
            this.log("不支持当前平台", true);
            return false;
        }
        
        // 执行平台特定卸载
        if (this.platformInstaller) {
            try {
                if (!this.platformInstaller.uninstall()) {
                    this.log("平台特定卸载失败", true);
                    // 继续卸载
                }
            } catch (e) {
                this.log(`平台特定卸载发生错误: ${e}`, true);
                // 继续卸载
            }
        }
        
        // 删除安装目录
        if (!this.removeInstallDirectory()) {
            return false;
        }
        
        this.log("QEntL编译器卸载完成");
        return true;
    }
    
    /**
     * @brief 移除安装目录
     */
    private function removeInstallDirectory(): Boolean {
        try {
            this.log(`移除安装目录: ${this.installPath}`);
            
            // 检查目录是否存在
            if (FS.existsSync(this.installPath)) {
                this.removeDirectory(this.installPath);
                this.log("已移除安装目录");
            } else {
                this.log("安装目录不存在，无需移除");
            }
            
            return true;
        } catch (e) {
            this.log(`移除安装目录失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 递归删除目录
     */
    private function removeDirectory(dirPath: String): void {
        if (FS.existsSync(dirPath)) {
            const files = FS.readdirSync(dirPath);
            
            for (const file of files) {
                const curPath = Path.join(dirPath, file);
                
                if (FS.statSync(curPath).isDirectory()) {
                    // 递归删除子目录
                    this.removeDirectory(curPath);
                } else {
                    // 删除文件
                    FS.unlinkSync(curPath);
                }
            }
            
            // 删除目录
            FS.rmdirSync(dirPath);
        }
    }
    
    /**
     * @brief 创建软件包
     */
    public function createPackage(outputDir: String): Boolean {
        this.log("开始创建安装包...");
        
        // 检查平台支持
        if (this.platform === PlatformType.UNKNOWN) {
            this.log("不支持当前平台", true);
            return false;
        }
        
        // 确保输出目录存在
        if (!FS.existsSync(outputDir)) {
            FS.mkdirSync(outputDir, { recursive: true });
        }
        
        // 针对不同平台创建安装包
        if (this.platformInstaller) {
            try {
                // 检查平台安装器是否支持打包
                if (typeof this.platformInstaller.createPackage === "function") {
                    if (!this.platformInstaller.createPackage(outputDir)) {
                        this.log("创建平台特定安装包失败", true);
                        return false;
                    }
                } else {
                    // 使用通用方法创建ZIP包
                    this.createZipPackage(outputDir);
                }
            } catch (e) {
                this.log(`创建安装包发生错误: ${e}`, true);
                return false;
            }
        } else {
            // 使用通用方法创建ZIP包
            this.createZipPackage(outputDir);
        }
        
        this.log("安装包创建完成");
        return true;
    }
    
    /**
     * @brief 创建通用ZIP安装包
     */
    private function createZipPackage(outputDir: String): Boolean {
        try {
            this.log("创建ZIP安装包...");
            
            const packageFile = Path.join(outputDir, "qentl-1.0.zip");
            
            // 使用不同的zip命令创建压缩包
            if (this.platform === PlatformType.WINDOWS) {
                // Windows - 使用PowerShell的Compress-Archive
                Process.execute("powershell", [
                    "-command",
                    `Compress-Archive -Path "${this.installPath}\\*" -DestinationPath "${packageFile}" -Force`
                ]);
            } else {
                // macOS/Linux - 使用zip命令
                Process.execute("zip", ["-r", packageFile, "."], { cwd: this.installPath });
            }
            
            this.log(`已创建ZIP安装包: ${packageFile}`);
            return true;
        } catch (e) {
            this.log(`创建ZIP安装包失败: ${e}`, true);
            return false;
        }
    }
    
    /**
     * @brief 日志输出
     */
    private function log(message: String, isError: Boolean = false, forceVerbose: Boolean = false): void {
        if (this.verbose || isError || forceVerbose) {
            if (isError) {
                Console.writeLine(`错误: ${message}`);
            } else {
                Console.writeLine(message);
            }
        }
    }
}

/**
 * @function main
 * @brief 主函数
 */
function main(): void {
    // 创建命令行选项解析器
    const parser = new OptionParser("QEntL编译器安装工具");
    
    // 添加选项
    parser.addOption("install", "i", "执行安装", false);
    parser.addOption("uninstall", "u", "执行卸载", false);
    parser.addOption("path", "p", "指定安装路径", true);
    parser.addOption("verbose", "v", "显示详细输出", false);
    parser.addOption("create-package", "c", "创建安装包", false);
    parser.addOption("output-dir", "o", "指定安装包输出目录", true);
    parser.addOption("help", "h", "显示帮助信息", false);
    
    // 解析命令行参数
    const options = parser.parse(Process.argv.slice(1));
    
    // 显示帮助信息
    if (options["help"]) {
        parser.printHelp();
        return;
    }
    
    // 默认安装路径
    let installPath = options["path"];
    if (!installPath) {
        if (OS.platform().indexOf("win") === 0) {
            installPath = "C:\\Program Files\\QEntL";
        } else {
            installPath = "/usr/local/qentl";
        }
        Console.writeLine(`使用默认安装路径: ${installPath}`);
    }
    
    // 创建安装管理器
    const installer = new Installer(installPath, options["verbose"]);
    
    if (options["install"]) {
        // 执行安装
        if (!installer.install()) {
            Console.writeLine("安装失败");
            Process.exit(1);
        }
    } else if (options["uninstall"]) {
        // 执行卸载
        if (!installer.uninstall()) {
            Console.writeLine("卸载失败");
            Process.exit(1);
        }
    } else if (options["create-package"]) {
        // 创建安装包
        let outputDir = options["output-dir"];
        if (!outputDir) {
            outputDir = Process.cwd();
            Console.writeLine(`使用当前目录作为输出目录: ${outputDir}`);
        }
        
        if (!installer.createPackage(outputDir)) {
            Console.writeLine("创建安装包失败");
            Process.exit(1);
        }
    } else {
        // 没有指定操作
        Console.writeLine("请指定操作: --install, --uninstall 或 --create-package");
        parser.printHelp();
        Process.exit(1);
    }
}

// 执行主函数
main(); 