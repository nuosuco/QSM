/**
 * @class CompilerCLI
 * @brief 编译器命令行接口
 */
quantum_class CompilerCLI {
    private {
        parser: ArgumentParser;              // 参数解析器
        options: CompilationOptions;         // 编译选项
        errorReporter: ErrorReporter;        // 错误报告器
        timers: Map<String, Timer>;          // 计时器
    }
    
    /**
     * @brief 构造函数
     */
    constructor(args: Array<String>) {
        this.parser = new ArgumentParser(args);
        this.options = new CompilationOptions();
        this.errorReporter = new ErrorReporter();
        this.timers = new Map<String, Timer>();
    }
    
    /**
     * @brief 运行命令行界面
     */
    public function run(): Integer {
        // 显示帮助
        if (this.parser.getBoolOption("help") || this.parser.getBoolOption("h")) {
            this.printHelp();
            return 0;
        }
        
        // 显示版本
        if (this.parser.getBoolOption("version") || this.parser.getBoolOption("v")) {
            this.printVersion();
            return 0;
        }
        
        try {
            // 解析选项
            this.parseOptions();
            
            // 验证必要参数
            if (!this.validateOptions()) {
                return 1;
            }
            
            // 创建总计时器
            let totalTimer = new Timer();
            totalTimer.start();
            
            // 执行编译
            let success = this.compile();
            
            totalTimer.stop();
            
            if (success) {
                Console.writeLine(`编译成功: ${this.options.outputFile}`);
                if (this.options.verbose) {
                    Console.writeLine(`总编译用时: ${totalTimer.getElapsedSeconds().toFixed(2)} 秒`);
                    this.printTimingInfo();
                }
                return 0;
            } else {
                Console.writeErrorLine("编译失败");
                return 1;
            }
        } catch (e) {
            Console.writeErrorLine(`错误: ${e.message}`);
            return 1;
        }
    }
    
    /**
     * @brief 解析选项
     */
    private function parseOptions(): void {
        // 获取位置参数（输入文件）
        let positionalArgs = this.parser.getPositionalArgs();
        for (let inputFile of positionalArgs) {
            this.options.inputFiles.push(inputFile);
        }
        
        // 输出文件
        this.options.outputFile = this.parser.getOption("output", this.parser.getOption("o", ""));
        if (this.options.outputFile === "" && this.options.inputFiles.length > 0) {
            // 默认输出文件名为第一个输入文件名去掉后缀加上.qobj
            let inputPath = Path.parse(this.options.inputFiles[0]);
            this.options.outputFile = Path.join(inputPath.dir, inputPath.name + ".qobj");
        }
        
        // 详细输出
        this.options.verbose = this.parser.getBoolOption("verbose") || this.parser.getBoolOption("V");
        
        // 包含目录
        let includeStr = this.parser.getOption("include-path", this.parser.getOption("I", ""));
        if (includeStr.length > 0) {
            let paths = includeStr.split(Path.pathSeparator);
            for (let path of paths) {
                if (path.trim().length > 0) {
                    this.options.includeDirectories.push(path.trim());
                }
            }
        }
        
        // 库目录
        let libStr = this.parser.getOption("library-path", this.parser.getOption("L", ""));
        if (libStr.length > 0) {
            let paths = libStr.split(Path.pathSeparator);
            for (let path of paths) {
                if (path.trim().length > 0) {
                    this.options.libraryDirectories.push(path.trim());
                }
            }
        }
        
        // 优化级别
        this.options.optimizationLevel = this.parser.getIntOption("optimize", this.parser.getIntOption("O", 1));
        
        // 调试信息
        this.options.generateDebugInfo = this.parser.getBoolOption("debug") || this.parser.getBoolOption("g");
        
        // 编译阶段
        let emitLexer = this.parser.getBoolOption("emit-lexer");
        let emitParser = this.parser.getBoolOption("emit-parser");
        let emitIR = this.parser.getBoolOption("emit-ir");
        let emitOptIR = this.parser.getBoolOption("emit-opt-ir");
        let emitBytecode = this.parser.getBoolOption("emit-bytecode");
        
        if (emitLexer) {
            this.options.stopStage = CompilationStage.LEXICAL_ANALYSIS;
            this.options.emitLexerOutput = true;
        } else if (emitParser) {
            this.options.stopStage = CompilationStage.PARSING;
            this.options.emitParserOutput = true;
        } else if (emitIR) {
            this.options.stopStage = CompilationStage.IR_GENERATION;
            this.options.emitIROutput = true;
        } else if (emitOptIR) {
            this.options.stopStage = CompilationStage.IR_OPTIMIZATION;
            this.options.emitOptimizedIROutput = true;
        } else if (emitBytecode) {
            this.options.stopStage = CompilationStage.BYTECODE_GENERATION;
            this.options.emitBytecodeOutput = true;
        }
        
        // 目标架构
        this.options.targetArch = this.parser.getOption("target", this.parser.getOption("t", "vm"));
        
        // 其他选项
        this.options.warningsAsErrors = this.parser.getBoolOption("warnings-as-errors") || this.parser.getBoolOption("Werror");
        this.options.keepTemporaryFiles = this.parser.getBoolOption("keep-temps");
    }
    
    /**
     * @brief 验证选项
     */
    private function validateOptions(): Boolean {
        // 需要输入文件
        if (this.options.inputFiles.length === 0) {
            Console.writeErrorLine("错误: 未指定输入文件");
            this.printHelp();
            return false;
        }
        
        // 验证所有输入文件存在
        for (let inputFile of this.options.inputFiles) {
            if (!File.exists(inputFile)) {
                Console.writeErrorLine(`错误: 输入文件不存在: ${inputFile}`);
                return false;
            }
        }
        
        // 验证优化级别有效
        if (this.options.optimizationLevel < 0 || this.options.optimizationLevel > 3) {
            Console.writeErrorLine(`错误: 无效的优化级别: ${this.options.optimizationLevel}, 应在0-3范围内`);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 执行编译
     */
    private function compile(): Boolean {
        // 初始化错误报告器
        this.errorReporter.setWarningsAsErrors(this.options.warningsAsErrors);
        
        // 词法分析
        if (!this.performLexicalAnalysis()) {
            return false;
        }
        
        if (this.options.stopStage === CompilationStage.LEXICAL_ANALYSIS) {
            return true;
        }
        
        // 语法分析
        if (!this.performParsing()) {
            return false;
        }
        
        if (this.options.stopStage === CompilationStage.PARSING) {
            return true;
        }
        
        // 语义分析
        if (!this.performSemanticAnalysis()) {
            return false;
        }
        
        if (this.options.stopStage === CompilationStage.SEMANTIC_ANALYSIS) {
            return true;
        }
        
        // 中间代码生成
        if (!this.performIRGeneration()) {
            return false;
        }
        
        if (this.options.stopStage === CompilationStage.IR_GENERATION) {
            return true;
        }
        
        // 中间代码优化
        if (!this.performIROptimization()) {
            return false;
        }
        
        if (this.options.stopStage === CompilationStage.IR_OPTIMIZATION) {
            return true;
        }
        
        // 字节码生成
        if (!this.performBytecodeGeneration()) {
            return false;
        }
        
        if (this.options.stopStage === CompilationStage.BYTECODE_GENERATION) {
            return true;
        }
        
        // 字节码优化
        if (!this.performBytecodeOptimization()) {
            return false;
        }
        
        if (this.options.stopStage === CompilationStage.BYTECODE_OPTIMIZATION) {
            return true;
        }
        
        // 链接
        if (!this.performLinking()) {
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 执行词法分析
     */
    private function performLexicalAnalysis(): Boolean {
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("执行词法分析...");
        }
        
        // 为每个输入文件执行词法分析
        for (let inputFile of this.options.inputFiles) {
            let lexer = new Lexer(inputFile, this.errorReporter);
            
            // 设置包含目录
            for (let dir of this.options.includeDirectories) {
                lexer.addIncludeDirectory(dir);
            }
            
            if (!lexer.tokenize()) {
                return false;
            }
            
            // 输出词法分析结果
            if (this.options.emitLexerOutput) {
                let outputFile = inputFile + ".tokens";
                lexer.dumpTokens(outputFile);
                
                if (this.options.verbose) {
                    Console.writeLine(`词法分析结果已输出到: ${outputFile}`);
                }
            }
        }
        
        timer.stop();
        this.timers.set("词法分析", timer);
        
        return true;
    }
    
    /**
     * @brief 执行语法分析
     */
    private function performParsing(): Boolean {
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("执行语法分析...");
        }
        
        // 为每个输入文件执行语法分析
        for (let inputFile of this.options.inputFiles) {
            let parser = new Parser(inputFile, this.errorReporter);
            
            // 设置包含目录
            for (let dir of this.options.includeDirectories) {
                parser.addIncludeDirectory(dir);
            }
            
            if (!parser.parse()) {
                return false;
            }
            
            // 输出语法分析结果
            if (this.options.emitParserOutput) {
                let outputFile = inputFile + ".ast";
                parser.dumpAST(outputFile);
                
                if (this.options.verbose) {
                    Console.writeLine(`语法分析结果已输出到: ${outputFile}`);
                }
            }
        }
        
        timer.stop();
        this.timers.set("语法分析", timer);
        
        return true;
    }
    
    /**
     * @brief 执行语义分析
     */
    private function performSemanticAnalysis(): Boolean {
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("执行语义分析...");
        }
        
        let analyzer = new SemanticAnalyzer(this.errorReporter);
        
        // 添加所有输入文件
        for (let inputFile of this.options.inputFiles) {
            analyzer.addSourceFile(inputFile);
        }
        
        // 设置包含目录
        for (let dir of this.options.includeDirectories) {
            analyzer.addIncludeDirectory(dir);
        }
        
        if (!analyzer.analyze()) {
            return false;
        }
        
        timer.stop();
        this.timers.set("语义分析", timer);
        
        return true;
    }
    
    /**
     * @brief 执行中间代码生成
     */
    private function performIRGeneration(): Boolean {
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("生成中间代码...");
        }
        
        let generator = new IRGenerator(this.errorReporter);
        
        // 设置生成调试信息
        generator.setGenerateDebugInfo(this.options.generateDebugInfo);
        
        if (!generator.generate()) {
            return false;
        }
        
        // 输出中间代码
        if (this.options.emitIROutput) {
            let outputFile = this.options.outputFile + ".ir";
            generator.dumpIR(outputFile);
            
            if (this.options.verbose) {
                Console.writeLine(`中间代码已输出到: ${outputFile}`);
            }
        }
        
        timer.stop();
        this.timers.set("中间代码生成", timer);
        
        return true;
    }
    
    /**
     * @brief 执行中间代码优化
     */
    private function performIROptimization(): Boolean {
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("优化中间代码...");
        }
        
        let optimizer = new Optimizer(this.errorReporter);
        
        // 设置优化级别
        optimizer.setOptimizationLevel(this.options.optimizationLevel);
        
        if (!optimizer.optimize()) {
            return false;
        }
        
        // 输出优化后的中间代码
        if (this.options.emitOptimizedIROutput) {
            let outputFile = this.options.outputFile + ".opt.ir";
            optimizer.dumpIR(outputFile);
            
            if (this.options.verbose) {
                Console.writeLine(`优化后的中间代码已输出到: ${outputFile}`);
            }
        }
        
        timer.stop();
        this.timers.set("中间代码优化", timer);
        
        return true;
    }
    
    /**
     * @brief 执行字节码生成
     */
    private function performBytecodeGeneration(): Boolean {
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("生成字节码...");
        }
        
        let generator = new BytecodeGenerator();
        
        // 设置输出文件
        let bytecodeFile = this.options.outputFile;
        if (this.options.emitBytecodeOutput) {
            bytecodeFile = this.options.outputFile + ".bc";
        }
        generator.setOutputFile(bytecodeFile);
        
        // 设置目标架构
        generator.setTargetArch(this.options.targetArch);
        
        // 设置生成调试信息
        generator.setGenerateDebugInfo(this.options.generateDebugInfo);
        
        if (!generator.generate()) {
            return false;
        }
        
        if (this.options.verbose && this.options.emitBytecodeOutput) {
            Console.writeLine(`字节码已输出到: ${bytecodeFile}`);
        }
        
        timer.stop();
        this.timers.set("字节码生成", timer);
        
        return true;
    }
    
    /**
     * @brief 执行字节码优化
     */
    private function performBytecodeOptimization(): Boolean {
        // 如果优化级别为0，跳过优化
        if (this.options.optimizationLevel === 0) {
            return true;
        }
        
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("优化字节码...");
        }
        
        let optimizer = new BytecodeOptimizer();
        
        // 设置输入文件
        let bytecodeFile = this.options.outputFile;
        if (this.options.emitBytecodeOutput) {
            bytecodeFile = this.options.outputFile + ".bc";
        }
        optimizer.setInputFile(bytecodeFile);
        
        // 设置输出文件
        let optimizedBytecodeFile = this.options.outputFile;
        if (this.options.emitBytecodeOutput) {
            optimizedBytecodeFile = this.options.outputFile + ".opt.bc";
        } else if (this.options.keepTemporaryFiles) {
            optimizedBytecodeFile = this.options.outputFile + ".opt.bc";
        }
        optimizer.setOutputFile(optimizedBytecodeFile);
        
        // 设置优化级别
        optimizer.setOptimizationLevel(this.options.optimizationLevel);
        
        // 设置是否保留调试信息
        optimizer.setPreserveDebugInfo(this.options.generateDebugInfo);
        
        if (!optimizer.optimize()) {
            return false;
        }
        
        if (this.options.verbose && optimizedBytecodeFile !== this.options.outputFile) {
            Console.writeLine(`优化后的字节码已输出到: ${optimizedBytecodeFile}`);
        }
        
        timer.stop();
        this.timers.set("字节码优化", timer);
        
        return true;
    }
    
    /**
     * @brief 执行链接
     */
    private function performLinking(): Boolean {
        let timer = new Timer();
        timer.start();
        
        if (this.options.verbose) {
            Console.writeLine("执行链接...");
        }
        
        let linker = new Linker();
        
        // 设置输入文件
        let bytecodeFile = this.options.outputFile;
        if (this.options.emitBytecodeOutput) {
            if (this.options.optimizationLevel > 0) {
                bytecodeFile = this.options.outputFile + ".opt.bc";
            } else {
                bytecodeFile = this.options.outputFile + ".bc";
            }
        } else if (this.options.optimizationLevel > 0 && this.options.keepTemporaryFiles) {
            bytecodeFile = this.options.outputFile + ".opt.bc";
        }
        linker.addInputFile(bytecodeFile);
        
        // 设置输出文件
        linker.setOutputFile(this.options.outputFile);
        
        // 设置库目录
        for (let dir of this.options.libraryDirectories) {
            linker.addLibraryDirectory(dir);
        }
        
        if (!linker.link()) {
            return false;
        }
        
        // 删除临时文件
        if (!this.options.keepTemporaryFiles) {
            this.cleanupTemporaryFiles();
        }
        
        timer.stop();
        this.timers.set("链接", timer);
        
        return true;
    }
    
    /**
     * @brief 清理临时文件
     */
    private function cleanupTemporaryFiles(): void {
        // 词法分析输出
        if (this.options.emitLexerOutput) {
            for (let inputFile of this.options.inputFiles) {
                let tokenFile = inputFile + ".tokens";
                if (File.exists(tokenFile)) {
                    File.delete(tokenFile);
                }
            }
        }
        
        // 语法分析输出
        if (this.options.emitParserOutput) {
            for (let inputFile of this.options.inputFiles) {
                let astFile = inputFile + ".ast";
                if (File.exists(astFile)) {
                    File.delete(astFile);
                }
            }
        }
        
        // 中间代码输出
        if (this.options.emitIROutput) {
            let irFile = this.options.outputFile + ".ir";
            if (File.exists(irFile)) {
                File.delete(irFile);
            }
        }
        
        // 优化后的中间代码输出
        if (this.options.emitOptimizedIROutput) {
            let optIrFile = this.options.outputFile + ".opt.ir";
            if (File.exists(optIrFile)) {
                File.delete(optIrFile);
            }
        }
        
        // 字节码输出
        if (this.options.emitBytecodeOutput) {
            let bcFile = this.options.outputFile + ".bc";
            if (File.exists(bcFile)) {
                File.delete(bcFile);
            }
            
            // 优化后的字节码
            if (this.options.optimizationLevel > 0) {
                let optBcFile = this.options.outputFile + ".opt.bc";
                if (File.exists(optBcFile)) {
                    File.delete(optBcFile);
                }
            }
        }
    }
    
    /**
     * @brief 打印计时信息
     */
    private function printTimingInfo(): void {
        Console.writeLine("编译阶段耗时统计:");
        
        for (let [stage, timer] of this.timers) {
            Console.writeLine(`  ${stage}: ${timer.getElapsedSeconds().toFixed(2)} 秒`);
        }
    }
    
    /**
     * @brief 打印帮助信息
     */
    private function printHelp(): void {
        Console.writeLine("QEntL编译器 - 量子纠缠式语言编译器");
        Console.writeLine("");
        Console.writeLine("用法: qentlc [选项] 输入文件...");
        Console.writeLine("");
        Console.writeLine("基本选项:");
        Console.writeLine("  -h, --help               显示帮助信息");
        Console.writeLine("  -v, --version            显示版本信息");
        Console.writeLine("  -o, --output=FILE        指定输出文件名");
        Console.writeLine("  -V, --verbose            详细输出");
        Console.writeLine("");
        Console.writeLine("目录选项:");
        Console.writeLine("  -I, --include-path=DIRS  添加包含目录，以'" + Path.pathSeparator + "'分隔");
        Console.writeLine("  -L, --library-path=DIRS  添加库目录，以'" + Path.pathSeparator + "'分隔");
        Console.writeLine("");
        Console.writeLine("编译选项:");
        Console.writeLine("  -O, --optimize=LEVEL     设置优化级别 (0-3)，默认为1");
        Console.writeLine("  -g, --debug              生成调试信息");
        Console.writeLine("  -t, --target=ARCH        指定目标架构，默认为vm");
        Console.writeLine("");
        Console.writeLine("输出选项:");
        Console.writeLine("      --emit-lexer         停止在词法分析阶段并输出标记流");
        Console.writeLine("      --emit-parser        停止在语法分析阶段并输出AST");
        Console.writeLine("      --emit-ir            停止在中间代码生成阶段并输出IR");
        Console.writeLine("      --emit-opt-ir        停止在中间代码优化阶段并输出优化后的IR");
        Console.writeLine("      --emit-bytecode      停止在字节码生成阶段并输出字节码");
        Console.writeLine("");
        Console.writeLine("其他选项:");
        Console.writeLine("      --warnings-as-errors 将警告视为错误");
        Console.writeLine("  -Werror                  将警告视为错误的简写");
        Console.writeLine("      --keep-temps         保留临时文件");
        Console.writeLine("");
        Console.writeLine("示例:");
        Console.writeLine("  qentlc -o program.qobj program.qentl");
        Console.writeLine("  qentlc -O3 -g -I./include program1.qentl program2.qentl");
        Console.writeLine("  qentlc --emit-ir -o program.ir program.qentl");
    }
    
    /**
     * @brief 打印版本信息
     */
    private function printVersion(): void {
        Console.writeLine("QEntL编译器 版本 1.0.0");
        Console.writeLine("量子基因编码: QGC-COMPILER-CLI-2024062001");
        Console.writeLine("量子纠缠信道: QEC-COMPILER-CORE-01");
    }
}

/**
 * @brief 主函数
 */
function main(args: Array<String>): Integer {
    // 创建并运行命令行界面
    let cli = new CompilerCLI(args);
    return cli.run();
}

// 运行主函数并传递命令行参数
let exitCode = main(Process.getCommandLineArgs().slice(1));
Process.exit(exitCode); 