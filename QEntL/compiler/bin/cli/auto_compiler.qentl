/**
 * @file auto_compiler.qentl
 * @brief QEntL自动编译工具，监控源文件变更并自动编译
 * 
 * 量子基因编码: QGC-AUTOCOMPILER-2024062901
 * 量子纠缠信道: QEC-COMPILER-CLI-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/fs.qentl";
import "QEntL/core/command_line.qentl";
import "QEntL/core/timer.qentl";
import "QEntL/compiler/src/utils/file_watcher.qentl";
import "QEntL/compiler/src/compiler.qentl";

/**
 * @class AutoCompiler
 * @brief 自动编译器
 */
quantum_class AutoCompiler {
    private {
        fileWatcher: FileWatcher;         // 文件监视器
        compiler: Compiler;               // 编译器实例
        sourceDirs: Array<String>;        // 源代码目录
        outputDir: String;                // 输出目录
        verbose: Boolean;                 // 是否输出详细信息
        compileOnStart: Boolean;          // 是否在启动时编译
        fileExtensions: Array<String>;    // 要监视的文件扩展名
        lastCompileTime: Map<String, Number>; // 上次编译时间
        compileQueue: Array<String>;      // 编译队列
        isCompiling: Boolean;             // 是否正在编译
        compileTimer: Timer;              // 编译定时器
        compileDelay: Number;             // 编译延迟(毫秒)
        maxConcurrentCompiles: Number;    // 最大并发编译数
    }
    
    /**
     * @brief 构造函数
     */
    constructor() {
        this.fileWatcher = new FileWatcher();
        this.compiler = new Compiler();
        this.sourceDirs = new Array<String>();
        this.outputDir = "./build";
        this.verbose = false;
        this.compileOnStart = true;
        this.fileExtensions = new Array<String>();
        this.lastCompileTime = new Map<String, Number>();
        this.compileQueue = new Array<String>();
        this.isCompiling = false;
        this.compileDelay = 500; // 编译延迟500毫秒
        this.compileTimer = new Timer(this.processCompileQueue.bind(this), this.compileDelay);
        this.maxConcurrentCompiles = 1; // 默认一次只编译一个文件
        
        // 默认监视qentl、qent和qjs文件
        this.fileExtensions.push(".qentl");
        this.fileExtensions.push(".qent");
        this.fileExtensions.push(".qjs");
        
        // 设置文件监视器事件处理器
        this.fileWatcher.on(FileEventType.CREATED, this.handleFileChange.bind(this));
        this.fileWatcher.on(FileEventType.MODIFIED, this.handleFileChange.bind(this));
        this.fileWatcher.on(FileEventType.DELETED, this.handleFileDeleted.bind(this));
    }
    
    /**
     * @brief 解析命令行参数
     */
    public function parseArgs(args: Array<String>): Boolean {
        const cmdLine = new CommandLine(args);
        
        // 添加命令行选项
        cmdLine.addOption("help", "h", "显示帮助信息", false);
        cmdLine.addOption("verbose", "v", "输出详细信息", false);
        cmdLine.addOption("output", "o", "指定输出目录", true);
        cmdLine.addOption("watch", "w", "指定要监视的源目录", true, true); // 允许多次指定
        cmdLine.addOption("ext", "e", "指定要监视的文件扩展名", true, true); // 允许多次指定
        cmdLine.addOption("no-compile", "n", "启动时不编译", false);
        cmdLine.addOption("delay", "d", "编译延迟（毫秒）", true);
        cmdLine.addOption("concurrent", "c", "最大并发编译数", true);
        
        // 解析命令行参数
        if (!cmdLine.parse()) {
            Console.writeLine("错误: 无效的命令行参数");
            this.showHelp();
            return false;
        }
        
        // 检查是否请求帮助
        if (cmdLine.hasOption("help")) {
            this.showHelp();
            return false;
        }
        
        // 处理详细模式
        this.verbose = cmdLine.hasOption("verbose");
        
        // 处理输出目录
        if (cmdLine.hasOption("output")) {
            this.outputDir = cmdLine.getOptionValue("output");
        }
        
        // 处理源目录
        const watchDirs = cmdLine.getOptionValues("watch");
        if (watchDirs.length > 0) {
            for (const dir of watchDirs) {
                this.addSourceDirectory(dir);
            }
        } else {
            // 如果没有指定源目录，使用当前目录
            this.addSourceDirectory(".");
        }
        
        // 处理文件扩展名
        const extensions = cmdLine.getOptionValues("ext");
        if (extensions.length > 0) {
            this.fileExtensions = new Array<String>();
            for (const ext of extensions) {
                this.fileExtensions.push(ext.startsWith(".") ? ext : "." + ext);
            }
        }
        
        // 处理启动时不编译选项
        if (cmdLine.hasOption("no-compile")) {
            this.compileOnStart = false;
        }
        
        // 处理编译延迟
        if (cmdLine.hasOption("delay")) {
            const delay = parseInt(cmdLine.getOptionValue("delay"));
            if (!isNaN(delay) && delay >= 0) {
                this.compileDelay = delay;
                this.compileTimer.setDelay(delay);
            }
        }
        
        // 处理最大并发编译数
        if (cmdLine.hasOption("concurrent")) {
            const concurrent = parseInt(cmdLine.getOptionValue("concurrent"));
            if (!isNaN(concurrent) && concurrent > 0) {
                this.maxConcurrentCompiles = concurrent;
            }
        }
        
        return true;
    }
    
    /**
     * @brief 显示帮助信息
     */
    public function showHelp(): void {
        Console.writeLine("QEntL 自动编译器");
        Console.writeLine("用法: auto_compiler [选项]");
        Console.writeLine("");
        Console.writeLine("选项:");
        Console.writeLine("  -h, --help               显示帮助信息");
        Console.writeLine("  -v, --verbose            输出详细信息");
        Console.writeLine("  -o, --output <dir>       指定输出目录");
        Console.writeLine("  -w, --watch <dir>        指定要监视的源目录（可多次指定）");
        Console.writeLine("  -e, --ext <extension>    指定要监视的文件扩展名（可多次指定）");
        Console.writeLine("  -n, --no-compile         启动时不编译");
        Console.writeLine("  -d, --delay <ms>         编译延迟（毫秒）");
        Console.writeLine("  -c, --concurrent <num>   最大并发编译数");
        Console.writeLine("");
        Console.writeLine("示例:");
        Console.writeLine("  auto_compiler --watch src --output build");
        Console.writeLine("  auto_compiler -w src -w test -o build -v");
    }
    
    /**
     * @brief 添加源代码目录
     */
    public function addSourceDirectory(dir: String): void {
        if (!this.sourceDirs.includes(dir)) {
            if (FS.existsSync(dir) && FS.statSync(dir).isDirectory()) {
                this.sourceDirs.push(dir);
                this.fileWatcher.addWatchPath(dir);
                
                if (this.verbose) {
                    Console.writeLine(`添加监视目录: ${dir}`);
                }
            } else {
                Console.writeLine(`警告: 目录不存在或不是有效目录: ${dir}`);
            }
        }
    }
    
    /**
     * @brief 开始监视
     */
    public function start(): void {
        // 确保输出目录存在
        this.ensureOutputDirectory();
        
        // 配置文件监视器
        for (const ext of this.fileExtensions) {
            this.fileWatcher.addFilePattern("*" + ext);
            
            if (this.verbose) {
                Console.writeLine(`监视文件类型: *${ext}`);
            }
        }
        
        // 配置编译器
        this.compiler.setOutputPath(this.outputDir);
        this.compiler.setVerbose(this.verbose);
        
        // 启动文件监视器
        this.fileWatcher.startWatching();
        
        if (this.verbose) {
            Console.writeLine("文件监视器已启动");
            Console.writeLine(`输出目录: ${this.outputDir}`);
        }
        
        // 如果需要，编译所有文件
        if (this.compileOnStart) {
            this.compileAllFiles();
        }
        
        Console.writeLine("QEntL自动编译器已启动");
        Console.writeLine("按Ctrl+C停止...");
    }
    
    /**
     * @brief 停止监视
     */
    public function stop(): void {
        this.fileWatcher.stopWatching();
        this.compileTimer.stop();
        
        if (this.verbose) {
            Console.writeLine("自动编译器已停止");
        }
    }
    
    /**
     * @brief 编译所有文件
     */
    private function compileAllFiles(): void {
        Console.writeLine("正在编译所有文件...");
        
        // 查找所有需要编译的文件
        const filesToCompile = new Array<String>();
        
        for (const dir of this.sourceDirs) {
            this.findQEntLFiles(dir, filesToCompile);
        }
        
        if (filesToCompile.length === 0) {
            Console.writeLine("没有找到需要编译的文件");
            return;
        }
        
        Console.writeLine(`找到 ${filesToCompile.length} 个文件需要编译`);
        
        // 将所有文件添加到编译队列
        for (const file of filesToCompile) {
            this.queueFileForCompilation(file);
        }
    }
    
    /**
     * @brief 递归查找QEntL文件
     */
    private function findQEntLFiles(dir: String, result: Array<String>): void {
        try {
            const entries = FS.readdirSync(dir);
            
            for (const entry of entries) {
                const fullPath = Path.join(dir, entry);
                
                try {
                    const stats = FS.statSync(fullPath);
                    
                    if (stats.isDirectory()) {
                        // 递归处理子目录
                        this.findQEntLFiles(fullPath, result);
                    } else if (stats.isFile()) {
                        // 检查文件扩展名
                        const ext = Path.extname(fullPath).toLowerCase();
                        
                        if (this.fileExtensions.includes(ext)) {
                            result.push(fullPath);
                        }
                    }
                } catch (statErr) {
                    // 忽略无法访问的文件
                }
            }
        } catch (e) {
            Console.writeLine(`错误: 无法读取目录 '${dir}': ${e}`);
        }
    }
    
    /**
     * @brief 确保输出目录存在
     */
    private function ensureOutputDirectory(): void {
        try {
            if (!FS.existsSync(this.outputDir)) {
                FS.mkdirSync(this.outputDir, { recursive: true });
                
                if (this.verbose) {
                    Console.writeLine(`创建输出目录: ${this.outputDir}`);
                }
            }
        } catch (e) {
            Console.writeLine(`错误: 无法创建输出目录 '${this.outputDir}': ${e}`);
        }
    }
    
    /**
     * @brief 处理文件变更事件
     */
    private function handleFileChange(event: FileEvent): void {
        const filePath = event.path;
        
        // 检查是否是我们关心的文件类型
        const ext = Path.extname(filePath).toLowerCase();
        if (!this.fileExtensions.includes(ext)) {
            return;
        }
        
        if (this.verbose) {
            Console.writeLine(`文件已${event.type === FileEventType.CREATED ? '创建' : '修改'}: ${filePath}`);
        }
        
        // 将文件添加到编译队列
        this.queueFileForCompilation(filePath);
    }
    
    /**
     * @brief 处理文件删除事件
     */
    private function handleFileDeleted(event: FileEvent): void {
        const filePath = event.path;
        
        // 检查是否是我们关心的文件类型
        const ext = Path.extname(filePath).toLowerCase();
        if (!this.fileExtensions.includes(ext)) {
            return;
        }
        
        if (this.verbose) {
            Console.writeLine(`文件已删除: ${filePath}`);
        }
        
        // 尝试删除对应的输出文件
        const relativePath = this.getRelativePath(filePath);
        if (relativePath) {
            const outputPath = Path.join(
                this.outputDir,
                Path.changeExtension(relativePath, ".qobj")
            );
            
            this.deleteOutputFile(outputPath);
        }
    }
    
    /**
     * @brief 删除输出文件
     */
    private function deleteOutputFile(outputPath: String): void {
        try {
            if (FS.existsSync(outputPath)) {
                FS.unlinkSync(outputPath);
                
                if (this.verbose) {
                    Console.writeLine(`已删除输出文件: ${outputPath}`);
                }
            }
        } catch (e) {
            Console.writeLine(`错误: 无法删除输出文件 '${outputPath}': ${e}`);
        }
    }
    
    /**
     * @brief 获取相对于源目录的路径
     */
    private function getRelativePath(filePath: String): String {
        for (const dir of this.sourceDirs) {
            const absDir = Path.resolve(dir);
            const absFile = Path.resolve(filePath);
            
            if (absFile.startsWith(absDir)) {
                return absFile.substring(absDir.length + 1);
            }
        }
        
        return null;
    }
    
    /**
     * @brief 将文件添加到编译队列
     */
    private function queueFileForCompilation(filePath: String): void {
        // 如果文件已经在队列中，跳过
        if (this.compileQueue.includes(filePath)) {
            return;
        }
        
        // 添加到编译队列
        this.compileQueue.push(filePath);
        
        // 重置编译定时器
        this.compileTimer.restart();
    }
    
    /**
     * @brief 处理编译队列
     */
    private function processCompileQueue(): void {
        if (this.compileQueue.length === 0 || this.isCompiling) {
            return;
        }
        
        this.isCompiling = true;
        
        // 获取要编译的文件数量
        const count = Math.min(this.maxConcurrentCompiles, this.compileQueue.length);
        const filesToCompile = this.compileQueue.splice(0, count);
        
        // 编译文件
        this.compileFiles(filesToCompile, () => {
            this.isCompiling = false;
            
            // 如果队列中还有文件，继续处理
            if (this.compileQueue.length > 0) {
                this.compileTimer.restart();
            }
        });
    }
    
    /**
     * @brief 编译文件
     */
    private function compileFiles(files: Array<String>, callback: Function): void {
        let pendingCount = files.length;
        
        // 如果没有文件要编译，直接回调
        if (pendingCount === 0) {
            callback();
            return;
        }
        
        const onCompileComplete = () => {
            pendingCount--;
            
            if (pendingCount === 0) {
                callback();
            }
        };
        
        // 开始编译所有文件
        for (const filePath of files) {
            this.compileFile(filePath, onCompileComplete);
        }
    }
    
    /**
     * @brief 编译单个文件
     */
    private function compileFile(filePath: String, callback: Function): void {
        // 获取相对路径
        const relativePath = this.getRelativePath(filePath);
        if (!relativePath) {
            Console.writeLine(`错误: 无法确定文件 '${filePath}' 的相对路径`);
            callback();
            return;
        }
        
        // 确定输出路径
        const outputFilePath = Path.join(
            this.outputDir,
            Path.changeExtension(relativePath, ".qobj")
        );
        
        // 确保输出目录存在
        const outputDir = Path.dirname(outputFilePath);
        try {
            if (!FS.existsSync(outputDir)) {
                FS.mkdirSync(outputDir, { recursive: true });
            }
        } catch (e) {
            Console.writeLine(`错误: 无法创建输出目录 '${outputDir}': ${e}`);
            callback();
            return;
        }
        
        // 更新最后编译时间
        this.lastCompileTime.set(filePath, Date.now());
        
        // 编译文件
        Console.writeLine(`正在编译: ${filePath}`);
        
        this.compiler.compileFile(filePath, outputFilePath, (success, error) => {
            if (success) {
                Console.writeLine(`编译成功: ${filePath} -> ${outputFilePath}`);
            } else {
                Console.writeLine(`编译失败: ${filePath}: ${error}`);
            }
            
            callback();
        });
    }
}

/**
 * @brief 主函数
 */
function main(args: Array<String>): Number {
    // 创建自动编译器实例
    const autoCompiler = new AutoCompiler();
    
    // 解析命令行参数
    if (!autoCompiler.parseArgs(args)) {
        return 1;
    }
    
    // 处理Ctrl+C信号
    Process.onExit(() => {
        autoCompiler.stop();
    });
    
    // 启动自动编译器
    autoCompiler.start();
    
    // 保持程序运行
    Process.waitForExit();
    
    return 0;
}

// 执行主函数
export { main }; 