/**
 * @file compiler_cli.qentl
 * @brief QEntL编译器主命令行界面
 * 
 * 量子基因编码: QGC-COMPILER-CLI-2024062001
 * 量子纠缠信道: QEC-COMPILER-CORE-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/process.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/compiler/src/frontend/lexer/lexer.qentl";
import "QEntL/compiler/src/frontend/parser/parser.qentl";
import "QEntL/compiler/src/frontend/semantic/semantic_analyzer.qentl";
import "QEntL/compiler/src/backend/ir/ir_generator.qentl";
import "QEntL/compiler/src/backend/optimizer/optimizer.qentl";
import "QEntL/compiler/src/backend/bytecode/generator/bytecode_generator.qentl";
import "QEntL/compiler/src/backend/bytecode/optimizer/bytecode_optimizer.qentl";
import "QEntL/compiler/src/backend/linker/linker.qentl";
import "QEntL/compiler/src/diagnostic/error_reporter.qentl";
import "QEntL/compiler/src/utils/timer.qentl";

/**
 * @class ArgumentParser
 * @brief 命令行参数解析器
 */
quantum_class ArgumentParser {
    private {
        args: Array<String>;            // 原始参数列表
        options: Map<String, String>;   // 解析后的选项
        positionalArgs: Array<String>;  // 位置参数
    }
    
    /**
     * @brief 构造函数
     */
    constructor(args: Array<String>) {
        this.args = args;
        this.options = new Map<String, String>();
        this.positionalArgs = new Array<String>();
        this.parse();
    }
    
    /**
     * @brief 解析参数
     */
    private function parse(): void {
        for (let i = 0; i < this.args.length; i++) {
            let arg = this.args[i];
            
            if (arg.startsWith("--")) {
                // 长选项
                let optionName = arg.substring(2);
                let optionValue = "";
                
                // 检查是否有等号分隔的值
                let equalsPos = optionName.indexOf("=");
                if (equalsPos >= 0) {
                    optionValue = optionName.substring(equalsPos + 1);
                    optionName = optionName.substring(0, equalsPos);
                } else if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else if (arg.startsWith("-")) {
                // 短选项
                let optionName = arg.substring(1);
                let optionValue = "";
                
                if (i + 1 < this.args.length && !this.args[i + 1].startsWith("-")) {
                    // 下一个参数不是选项，作为值
                    optionValue = this.args[++i];
                } else {
                    // 布尔标志
                    optionValue = "true";
                }
                
                this.options.set(optionName, optionValue);
            } else {
                // 位置参数
                this.positionalArgs.push(arg);
            }
        }
    }
    
    /**
     * @brief 获取选项值
     */
    public function getOption(name: String, defaultValue: String = ""): String {
        if (this.options.has(name)) {
            return this.options.get(name);
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取布尔选项值
     */
    public function getBoolOption(name: String, defaultValue: Boolean = false): Boolean {
        if (this.options.has(name)) {
            let value = this.options.get(name).toLowerCase();
            return value === "true" || value === "yes" || value === "1";
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取整数选项值
     */
    public function getIntOption(name: String, defaultValue: Integer = 0): Integer {
        if (this.options.has(name)) {
            try {
                return parseInt(this.options.get(name));
            } catch (e) {
                return defaultValue;
            }
        }
        return defaultValue;
    }
    
    /**
     * @brief 获取位置参数
     */
    public function getPositionalArgs(): Array<String> {
        return this.positionalArgs;
    }
    
    /**
     * @brief 是否包含选项
     */
    public function hasOption(name: String): Boolean {
        return this.options.has(name);
    }
}

/**
 * @enum CompilationStage
 * @brief 编译阶段枚举
 */
quantum_enum CompilationStage {
    LEXICAL_ANALYSIS,    // 词法分析
    PARSING,             // 语法分析
    SEMANTIC_ANALYSIS,   // 语义分析
    IR_GENERATION,       // 中间代码生成
    IR_OPTIMIZATION,     // 中间代码优化
    BYTECODE_GENERATION, // 字节码生成
    BYTECODE_OPTIMIZATION, // 字节码优化
    LINKING              // 链接
}

/**
 * @class CompilationOptions
 * @brief 编译选项
 */
quantum_class CompilationOptions {
    public {
        // 基本选项
        inputFiles: Array<String>;         // 输入文件
        outputFile: String;                // 输出文件
        stopStage: CompilationStage;       // 停止编译的阶段
        verbose: Boolean;                  // 详细输出
        
        // 目录选项
        includeDirectories: Array<String>; // 包含目录
        libraryDirectories: Array<String>; // 库目录
        
        // 优化选项
        optimizationLevel: Integer;        // 优化级别(0-3)
        
        // 调试选项
        generateDebugInfo: Boolean;        // 生成调试信息
        
        // 输出选项
        emitLexerOutput: Boolean;          // 输出词法分析结果
        emitParserOutput: Boolean;         // 输出语法分析结果
        emitIROutput: Boolean;             // 输出中间代码
        emitOptimizedIROutput: Boolean;    // 输出优化后的中间代码
        emitBytecodeOutput: Boolean;       // 输出字节码
        
        // 目标选项
        targetArch: String;                // 目标架构
        
        // 其他选项
        warningsAsErrors: Boolean;         // 警告视为错误
        keepTemporaryFiles: Boolean;       // 保留临时文件
    }
    
    /**
     * @brief 构造函数
     */
    constructor() {
        this.inputFiles = new Array<String>();
        this.outputFile = "";
        this.stopStage = CompilationStage.LINKING;
        this.verbose = false;
        
        this.includeDirectories = new Array<String>();
        this.libraryDirectories = new Array<String>();
        
        this.optimizationLevel = 1;
        
        this.generateDebugInfo = false;
        
        this.emitLexerOutput = false;
        this.emitParserOutput = false;
        this.emitIROutput = false;
        this.emitOptimizedIROutput = false;
        this.emitBytecodeOutput = false;
        
        this.targetArch = "vm";
        
        this.warningsAsErrors = false;
        this.keepTemporaryFiles = false;
    }
}

/**
 * @class CompilerCLI
 * @brief 编译器命令行接口
 */
quantum_class CompilerCLI {
    private {
        parser: ArgumentParser;     // 参数解析器
        options: CompilerOptions;   // 编译选项
    }
    
    /**
     * @brief 构造函数
     */
    constructor(args: Array<String>) {
        this.parser = new ArgumentParser(args);
        this.options = new CompilerOptions();
    }
    
    /**
     * @brief 运行命令行界面
     */
    public function run(): Integer {
        // 显示帮助
        if (this.parser.getBoolOption("help") || this.parser.getBoolOption("h")) {
            this.printHelp();
            return 0;
        }
        
        // 显示版本
        if (this.parser.getBoolOption("version") || this.parser.getBoolOption("v")) {
            this.printVersion();
            return 0;
        }
        
        try {
            // 解析编译选项
            this.parseOptions();
            
            // 验证必要参数
            if (!this.validateOptions()) {
                return 1;
            }
            
            // 创建并运行编译器
            let compiler = new Compiler(this.options);
            let result = compiler.compile();
            
            // 输出编译结果
            if (this.options.verbose) {
                Console.writeLine(result.toString());
            }
            
            return result.success ? 0 : 1;
        } catch (e) {
            Console.writeErrorLine(`错误: ${e.message}`);
            return 1;
        }
    }
    
    /**
     * @brief 解析编译选项
     */
    private function parseOptions(): void {
        // 设置编译模式
        if (this.parser.getBoolOption("project") || this.parser.getBoolOption("p")) {
            this.options.mode = CompilationMode.PROJECT;
        } else if (this.parser.getBoolOption("incremental") || this.parser.getBoolOption("i")) {
            this.options.mode = CompilationMode.INCREMENTAL;
        } else {
            this.options.mode = CompilationMode.SINGLE_FILE;
        }
        
        // 源码目录
        if (this.parser.hasOption("source-dir") || this.parser.hasOption("s")) {
            this.options.sourceDir = this.parser.getOption("source-dir", this.parser.getOption("s", "./"));
        }
        
        // 输出目录
        if (this.parser.hasOption("output-dir") || this.parser.hasOption("o")) {
            this.options.outputDir = this.parser.getOption("output-dir", this.parser.getOption("o", "./build"));
        }
        
        // 优化级别
        let optLevel = this.parser.getOption("optimize", this.parser.getOption("O", "normal"));
        switch (optLevel.toLowerCase()) {
            case "0":
            case "none":
                this.options.optimizationLevel = OptimizationLevel.NONE;
                break;
                
            case "1":
            case "basic":
                this.options.optimizationLevel = OptimizationLevel.BASIC;
                break;
                
            case "2":
            case "normal":
                this.options.optimizationLevel = OptimizationLevel.NORMAL;
                break;
                
            case "3":
            case "aggressive":
                this.options.optimizationLevel = OptimizationLevel.AGGRESSIVE;
                break;
                
            default:
                this.options.optimizationLevel = OptimizationLevel.NORMAL;
                break;
        }
        
        // 调试信息
        this.options.generateDebugInfo = !this.parser.getBoolOption("no-debug-info");
        
        // 详细输出
        this.options.verbose = this.parser.getBoolOption("verbose") || this.parser.getBoolOption("V");
        
        // 包含和排除模式
        let includePatterns = this.parser.getOption("include", "");
        if (includePatterns.length > 0) {
            let patterns = includePatterns.split(",");
            for (let pattern of patterns) {
                if (pattern.trim().length > 0) {
                    this.options.includePatterns.push(pattern.trim());
                }
            }
        }
        
        let excludePatterns = this.parser.getOption("exclude", "");
        if (excludePatterns.length > 0) {
            let patterns = excludePatterns.split(",");
            for (let pattern of patterns) {
                if (pattern.trim().length > 0) {
                    this.options.excludePatterns.push(pattern.trim());
                }
            }
        }
        
        // 预定义宏
        let defines = this.parser.getOption("define", this.parser.getOption("D", ""));
        if (defines.length > 0) {
            let definesList = defines.split(",");
            for (let define of definesList) {
                let parts = define.split("=");
                let name = parts[0].trim();
                let value = parts.length > 1 ? parts[1].trim() : "true";
                
                if (name.length > 0) {
                    this.options.defines.set(name, value);
                }
            }
        }
        
        // 处理位置参数（文件名）
        let positionalArgs = this.parser.getPositionalArgs();
        if (positionalArgs.length > 0) {
            this.options.entryFile = positionalArgs[0];
        }
    }
    
    /**
     * @brief 验证编译选项
     */
    private function validateOptions(): Boolean {
        // 单文件模式必须指定入口文件
        if (this.options.mode === CompilationMode.SINGLE_FILE && this.options.entryFile.length === 0) {
            Console.writeErrorLine("错误: 单文件编译模式下必须指定入口文件");
            this.printHelp();
            return false;
        }
        
        // 确保源码目录存在
        if (!File.isDirectory(this.options.sourceDir)) {
            Console.writeErrorLine(`错误: 源码目录不存在或不是目录: ${this.options.sourceDir}`);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 打印帮助信息
     */
    private function printHelp(): void {
        Console.writeLine("QEntL编译器 - 量子纠缠式语言编译工具");
        Console.writeLine("");
        Console.writeLine("用法: qentlc [选项] [文件]");
        Console.writeLine("");
        Console.writeLine("选项:");
        Console.writeLine("  -h, --help               显示帮助信息");
        Console.writeLine("  -v, --version            显示版本信息");
        Console.writeLine("  -p, --project            项目编译模式");
        Console.writeLine("  -i, --incremental        增量编译模式");
        Console.writeLine("  -s, --source-dir=DIR     指定源码目录，默认为当前目录");
        Console.writeLine("  -o, --output-dir=DIR     指定输出目录，默认为./build");
        Console.writeLine("  -O, --optimize=LEVEL     优化级别 (none, basic, normal, aggressive)，默认为normal");
        Console.writeLine("  --no-debug-info          不生成调试信息");
        Console.writeLine("  -V, --verbose            详细输出");
        Console.writeLine("  --include=PATTERNS       包含的文件模式，以逗号分隔");
        Console.writeLine("  --exclude=PATTERNS       排除的文件模式，以逗号分隔");
        Console.writeLine("  -D, --define=NAME=VALUE  预定义宏，以逗号分隔");
        Console.writeLine("");
        Console.writeLine("示例:");
        Console.writeLine("  qentlc file.qentl                 编译单个文件");
        Console.writeLine("  qentlc -p -s src -o build         编译整个项目");
        Console.writeLine("  qentlc -i -s src main.qentl       增量编译项目");
    }
    
    /**
     * @brief 打印版本信息
     */
    private function printVersion(): void {
        Console.writeLine("QEntL编译器 版本 1.0.0");
        Console.writeLine("量子基因编码: QGC-COMPILER-MAIN-2024062001");
        Console.writeLine("量子纠缠信道: QEC-COMPILER-CORE-01");
    }
}

/**
 * @brief 主函数
 */
function main(args: Array<String>): Integer {
    // 创建并运行命令行界面
    let cli = new CompilerCLI(args);
    return cli.run();
}

// 运行主函数并传递命令行参数
let exitCode = main(Process.getCommandLineArgs().slice(1));
Process.exit(exitCode); 