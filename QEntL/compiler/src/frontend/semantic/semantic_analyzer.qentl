/**
 * @file semantic_analyzer.qentl
 * @brief 语义分析器实现
 * 
 * 量子基因编码: QGC-COMPILER-SEMANTIC-2024061901
 * 量子纠缠信道: QEC-COMPILER-FRONTEND-02
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/compiler/frontend/parser/ast.qentl";
import "QEntL/compiler/frontend/semantic/symbol_table.qentl";
import "QEntL/compiler/frontend/semantic/type_checker.qentl";

/**
 * @class SemanticAnalyzer
 * @brief 语义分析器主类
 */
quantum_class SemanticAnalyzer {
    private {
        symbolTable: SymbolTable;        // 符号表
        typeChecker: TypeChecker;        // 类型检查器
        ast: ASTNode;                    // 抽象语法树
        errors: Array<String>;           // 错误列表
        warnings: Array<String>;         // 警告列表
        currentFile: String;             // 当前分析的文件
    }
    
    /**
     * @brief 构造函数
     * @param ast 抽象语法树
     * @param filename 文件名
     */
    constructor(ast: ASTNode, filename: String) {
        this.symbolTable = new SymbolTable();
        this.typeChecker = new TypeChecker(this.symbolTable);
        this.ast = ast;
        this.errors = new Array<String>();
        this.warnings = new Array<String>();
        this.currentFile = filename;
    }
    
    /**
     * @brief 执行语义分析
     * @return 是否分析成功（无错误）
     */
    public function analyze(): Boolean {
        // 预处理：添加内置类型和函数
        this.addBuiltInTypes();
        this.addBuiltInFunctions();
        
        // 分析AST
        this.visitNode(this.ast);
        
        // 收集错误和警告
        this.collectErrors();
        
        // 如果有错误，返回失败
        return this.errors.length == 0;
    }
    
    /**
     * @brief 添加内置类型
     */
    private function addBuiltInTypes(): void {
        // 添加基本类型
        let builtInTypes = [
            "Integer", "Float", "String", "Boolean", "Array", "Map",
            "Any", "void", "QBit", "Quantum", "QuantumState"
        ];
        
        for (let type of builtInTypes) {
            let node = new ASTNode(NodeType.TYPE_DECLARATION);
            node.line = 0;
            node.column = 0;
            this.symbolTable.define(type, SymbolType.TYPE, type, node);
        }
        
        // 标记量子类型
        let quantumTypes = ["QBit", "Quantum", "QuantumState"];
        for (let type of quantumTypes) {
            let symbol = this.symbolTable.resolve(type);
            if (symbol != null) {
                symbol.isQuantum = true;
            }
        }
    }
    
    /**
     * @brief 添加内置函数
     */
    private function addBuiltInFunctions(): void {
        // 添加基本函数
        let builtInFunctions = [
            "print", "println", "input", "entangle", "measure", "superpose"
        ];
        
        for (let func of builtInFunctions) {
            let node = new ASTNode(NodeType.FUNCTION_DECLARATION);
            node.line = 0;
            node.column = 0;
            
            let type = "Any";
            let isQuantum = false;
            
            if (func == "entangle" || func == "measure" || func == "superpose") {
                type = "Quantum";
                isQuantum = true;
            }
            
            this.symbolTable.define(func, SymbolType.FUNCTION, type, node, isQuantum);
        }
    }
    
    /**
     * @brief 访问AST节点
     * @param node 当前节点
     */
    private function visitNode(node: ASTNode): void {
        if (node == null) return;
        
        switch (node.type) {
            case NodeType.PROGRAM:
                this.visitProgram(node);
                break;
                
            case NodeType.IMPORT_DECLARATION:
                this.visitImport(node);
                break;
                
            case NodeType.VARIABLE_DECLARATION:
                this.visitVariableDeclaration(node);
                break;
                
            case NodeType.FUNCTION_DECLARATION:
                this.visitFunctionDeclaration(node);
                break;
                
            case NodeType.CLASS_DECLARATION:
                this.visitClassDeclaration(node);
                break;
                
            case NodeType.QUANTUM_ENTITY_DECLARATION:
                this.visitQuantumEntityDeclaration(node);
                break;
                
            case NodeType.BLOCK:
                this.visitBlock(node);
                break;
                
            case NodeType.EXPRESSION_STATEMENT:
                this.visitExpressionStatement(node);
                break;
                
            case NodeType.IF_STATEMENT:
                this.visitIfStatement(node);
                break;
                
            case NodeType.WHILE_STATEMENT:
                this.visitWhileStatement(node);
                break;
                
            case NodeType.FOR_STATEMENT:
                this.visitForStatement(node);
                break;
                
            case NodeType.RETURN_STATEMENT:
                this.visitReturnStatement(node);
                break;
                
            case NodeType.BINARY_EXPRESSION:
                this.visitBinaryExpression(node);
                break;
                
            case NodeType.UNARY_EXPRESSION:
                this.visitUnaryExpression(node);
                break;
                
            case NodeType.VARIABLE_EXPRESSION:
                this.visitVariableExpression(node);
                break;
                
            case NodeType.CALL_EXPRESSION:
                this.visitCallExpression(node);
                break;
                
            case NodeType.MEMBER_EXPRESSION:
                this.visitMemberExpression(node);
                break;
                
            case NodeType.LITERAL:
                this.visitLiteral(node);
                break;
                
            case NodeType.QUANTUM_OPERATION:
                this.visitQuantumOperation(node);
                break;
                
            default:
                // 处理其他类型的节点或未知节点
                this.errors.push(`未知的AST节点类型: ${node.type}`);
                break;
        }
    }
    
    /**
     * @brief 访问程序节点
     */
    private function visitProgram(node: ASTNode): void {
        // 访问所有子节点
        for (let child of node.children) {
            this.visitNode(child);
        }
    }
    
    /**
     * @brief 访问导入声明
     */
    private function visitImport(node: ASTNode): void {
        let path = node.value;
        
        // 检查导入路径是否有效
        if (path == null || path == "") {
            this.error(node, "导入路径不能为空");
            return;
        }
        
        // 记录导入
        this.symbolTable.define(path, SymbolType.IMPORT, "Module", node);
        
        // 注意：真实实现需要加载导入的模块并分析其符号
        // 这里简化处理，只记录导入信息
    }
    
    /**
     * @brief 访问变量声明
     */
    private function visitVariableDeclaration(node: ASTNode): void {
        let name = node.name;
        let typeAnnotation = node.typeAnnotation || "Any";
        let isQuantum = this.isQuantumType(typeAnnotation);
        
        // 添加到符号表
        this.symbolTable.define(name, SymbolType.VARIABLE, typeAnnotation, node, isQuantum);
        
        // 如果有初始化表达式，访问并检查类型
        if (node.initializer != null) {
            this.visitNode(node.initializer);
            
            // 类型检查
            let initType = this.typeChecker.getExpressionType(node.initializer);
            if (!this.typeChecker.checkTypeCompatibility(initType, typeAnnotation)) {
                this.error(node, `类型不匹配: 不能将类型 '${initType}' 赋值给类型 '${typeAnnotation}'`);
            }
            
            // 检查量子变量的特殊规则
            if (isQuantum) {
                if (!this.typeChecker.isQuantumExpression(node.initializer)) {
                    this.error(node, `量子类型变量 '${name}' 必须使用量子表达式初始化`);
                }
            }
        } else if (isQuantum) {
            // 量子变量需要初始化
            this.warning(node, `量子类型变量 '${name}' 没有初始化，可能导致不确定的量子状态`);
        }
    }
    
    /**
     * @brief 访问函数声明
     */
    private function visitFunctionDeclaration(node: ASTNode): void {
        let name = node.name;
        let returnType = node.returnType || "void";
        let isQuantum = this.isQuantumType(returnType) || node.isQuantum;
        
        // 将函数添加到符号表
        this.symbolTable.define(name, SymbolType.FUNCTION, returnType, node, isQuantum);
        
        // 进入函数作用域
        this.symbolTable.enterScope();
        
        // 处理参数
        if (node.parameters != null) {
            for (let param of node.parameters) {
                let paramName = param.name;
                let paramType = param.type || "Any";
                let isParamQuantum = this.isQuantumType(paramType);
                
                this.symbolTable.define(paramName, SymbolType.PARAMETER, paramType, param, isParamQuantum);
            }
        }
        
        // 访问函数体
        this.visitNode(node.body);
        
        // 离开函数作用域
        this.symbolTable.exitScope();
    }
    
    /**
     * @brief 访问类声明
     */
    private function visitClassDeclaration(node: ASTNode): void {
        let name = node.name;
        let isQuantum = node.isQuantum || false;
        
        // 将类添加到符号表
        this.symbolTable.define(name, SymbolType.CLASS, name, node, isQuantum);
        
        // 处理继承
        if (node.extends != null) {
            let baseClass = this.symbolTable.resolve(node.extends);
            if (baseClass == null) {
                this.error(node, `未定义的基类 '${node.extends}'`);
            } else if (baseClass.type != SymbolType.CLASS) {
                this.error(node, `'${node.extends}' 不是一个类，无法继承`);
            }
        }
        
        // 进入类作用域
        this.symbolTable.enterScope();
        
        // 处理字段和方法
        for (let member of node.members) {
            if (member.type == NodeType.VARIABLE_DECLARATION) {
                // 处理字段
                let fieldName = member.name;
                let fieldType = member.typeAnnotation || "Any";
                let isFieldQuantum = this.isQuantumType(fieldType) || member.isQuantum;
                
                this.symbolTable.define(fieldName, SymbolType.FIELD, fieldType, member, isFieldQuantum);
                
                // 如果字段有初始化表达式，访问并检查
                if (member.initializer != null) {
                    this.visitNode(member.initializer);
                }
            } else if (member.type == NodeType.FUNCTION_DECLARATION) {
                // 处理方法
                let methodName = member.name;
                let returnType = member.returnType || "void";
                let isMethodQuantum = this.isQuantumType(returnType) || member.isQuantum;
                
                this.symbolTable.define(methodName, SymbolType.METHOD, returnType, member, isMethodQuantum);
                
                // 访问方法体
                this.visitNode(member);
            }
        }
        
        // 离开类作用域
        this.symbolTable.exitScope();
    }
    
    /**
     * @brief 访问量子实体声明
     */
    private function visitQuantumEntityDeclaration(node: ASTNode): void {
        let name = node.name;
        
        // 量子实体自动被标记为量子类型
        this.symbolTable.define(name, SymbolType.QUANTUM_ENTITY, name, node, true);
        
        // 进入实体作用域
        this.symbolTable.enterScope();
        
        // 处理属性和行为
        for (let member of node.members) {
            this.visitNode(member);
        }
        
        // 离开实体作用域
        this.symbolTable.exitScope();
    }
    
    /**
     * @brief 访问代码块
     */
    private function visitBlock(node: ASTNode): void {
        // 进入新作用域
        this.symbolTable.enterScope();
        
        // 访问所有语句
        for (let statement of node.statements) {
            this.visitNode(statement);
        }
        
        // 离开作用域
        this.symbolTable.exitScope();
    }
    
    /**
     * @brief 访问表达式语句
     */
    private function visitExpressionStatement(node: ASTNode): void {
        this.visitNode(node.expression);
    }
    
    /**
     * @brief 访问if语句
     */
    private function visitIfStatement(node: ASTNode): void {
        // 访问条件表达式
        this.visitNode(node.condition);
        
        // 检查条件是否为布尔类型
        let conditionType = this.typeChecker.getExpressionType(node.condition);
        if (conditionType != "Boolean" && conditionType != "Any") {
            this.error(node.condition, `if语句的条件必须是布尔类型，得到的是 '${conditionType}'`);
        }
        
        // 访问then分支
        this.visitNode(node.thenBranch);
        
        // 访问else分支（如果有）
        if (node.elseBranch != null) {
            this.visitNode(node.elseBranch);
        }
    }
    
    /**
     * @brief 访问while语句
     */
    private function visitWhileStatement(node: ASTNode): void {
        // 访问条件表达式
        this.visitNode(node.condition);
        
        // 检查条件是否为布尔类型
        let conditionType = this.typeChecker.getExpressionType(node.condition);
        if (conditionType != "Boolean" && conditionType != "Any") {
            this.error(node.condition, `while语句的条件必须是布尔类型，得到的是 '${conditionType}'`);
        }
        
        // 访问循环体
        this.visitNode(node.body);
    }
    
    /**
     * @brief 访问for语句
     */
    private function visitForStatement(node: ASTNode): void {
        // 进入循环作用域
        this.symbolTable.enterScope();
        
        // 访问初始化表达式
        if (node.initializer != null) {
            this.visitNode(node.initializer);
        }
        
        // 访问条件表达式
        if (node.condition != null) {
            this.visitNode(node.condition);
            
            // 检查条件是否为布尔类型
            let conditionType = this.typeChecker.getExpressionType(node.condition);
            if (conditionType != "Boolean" && conditionType != "Any") {
                this.error(node.condition, `for语句的条件必须是布尔类型，得到的是 '${conditionType}'`);
            }
        }
        
        // 访问更新表达式
        if (node.increment != null) {
            this.visitNode(node.increment);
        }
        
        // 访问循环体
        this.visitNode(node.body);
        
        // 离开循环作用域
        this.symbolTable.exitScope();
    }
    
    /**
     * @brief 访问return语句
     */
    private function visitReturnStatement(node: ASTNode): void {
        // 如果有返回值表达式，访问它
        if (node.value != null) {
            this.visitNode(node.value);
            
            // 类型检查在具体上下文中进行
            // 这里需要获取当前函数的返回类型进行比较
            // 由于简化，这里略过实现
        }
    }
    
    /**
     * @brief 访问二元表达式
     */
    private function visitBinaryExpression(node: ASTNode): void {
        // 访问左操作数和右操作数
        this.visitNode(node.left);
        this.visitNode(node.right);
        
        // 获取操作数类型
        let leftType = this.typeChecker.getExpressionType(node.left);
        let rightType = this.typeChecker.getExpressionType(node.right);
        
        // 根据操作符进行类型检查
        let operator = node.operator;
        
        // 算术运算符检查
        if (operator == "+" || operator == "-" || operator == "*" || operator == "/" || operator == "%") {
            if (!this.typeChecker.isNumericType(leftType) && leftType != "Any") {
                this.error(node.left, `算术运算符 '${operator}' 的左操作数必须是数值类型，得到的是 '${leftType}'`);
            }
            
            if (!this.typeChecker.isNumericType(rightType) && rightType != "Any") {
                this.error(node.right, `算术运算符 '${operator}' 的右操作数必须是数值类型，得到的是 '${rightType}'`);
            }
        }
        
        // 比较运算符检查
        else if (operator == "==" || operator == "!=" || operator == "<" || operator == ">" || operator == "<=" || operator == ">=") {
            if (!this.typeChecker.checkTypeCompatibility(leftType, rightType)) {
                this.error(node, `比较运算符 '${operator}' 的操作数类型不兼容: '${leftType}' 和 '${rightType}'`);
            }
        }
        
        // 逻辑运算符检查
        else if (operator == "&&" || operator == "||") {
            if (leftType != "Boolean" && leftType != "Any") {
                this.error(node.left, `逻辑运算符 '${operator}' 的左操作数必须是布尔类型，得到的是 '${leftType}'`);
            }
            
            if (rightType != "Boolean" && rightType != "Any") {
                this.error(node.right, `逻辑运算符 '${operator}' 的右操作数必须是布尔类型，得到的是 '${rightType}'`);
            }
        }
    }
    
    /**
     * @brief 访问一元表达式
     */
    private function visitUnaryExpression(node: ASTNode): void {
        // 访问操作数
        this.visitNode(node.operand);
        
        // 获取操作数类型
        let operandType = this.typeChecker.getExpressionType(node.operand);
        
        // 根据操作符进行类型检查
        let operator = node.operator;
        
        // -号运算符检查
        if (operator == "-") {
            if (!this.typeChecker.isNumericType(operandType) && operandType != "Any") {
                this.error(node.operand, `一元运算符 '${operator}' 的操作数必须是数值类型，得到的是 '${operandType}'`);
            }
        }
        
        // !号运算符检查
        else if (operator == "!") {
            if (operandType != "Boolean" && operandType != "Any") {
                this.error(node.operand, `一元运算符 '${operator}' 的操作数必须是布尔类型，得到的是 '${operandType}'`);
            }
        }
        
        // 量子测量运算符检查
        else if (operator == "@") {
            if (!this.typeChecker.isQuantumType(operandType)) {
                this.error(node.operand, `量子测量运算符 '${operator}' 的操作数必须是量子类型，得到的是 '${operandType}'`);
            }
        }
    }
    
    /**
     * @brief 访问变量表达式
     */
    private function visitVariableExpression(node: ASTNode): void {
        let name = node.name;
        
        // 在符号表中查找变量
        let symbol = this.symbolTable.use(name, node);
        
        // 如果找不到，错误已在use方法中报告
        if (symbol == null) {
            return;
        }
        
        // 如果是量子变量，记录使用信息
        if (symbol.isQuantum) {
            node.isQuantum = true;
        }
    }
    
    /**
     * @brief 访问函数调用表达式
     */
    private function visitCallExpression(node: ASTNode): void {
        // 访问被调用的表达式
        this.visitNode(node.callee);
        
        // 访问参数
        for (let arg of node.arguments) {
            this.visitNode(arg);
        }
        
        // 函数调用的类型检查
        if (node.callee.type == NodeType.VARIABLE_EXPRESSION) {
            let funcName = node.callee.name;
            let symbol = this.symbolTable.resolve(funcName);
            
            if (symbol != null) {
                // 检查它是否是一个函数或方法
                if (symbol.type != SymbolType.FUNCTION && symbol.type != SymbolType.METHOD) {
                    this.error(node, `'${funcName}' 不是一个函数或方法`);
                    return;
                }
                
                // 如果是量子函数，标记调用为量子
                if (symbol.isQuantum) {
                    node.isQuantum = true;
                }
                
                // 参数数量检查（这里简化了，实际情况可能更复杂）
                // 真实实现需要考虑函数定义中参数的数量和类型
            }
        }
        
        // 对于其他类型的调用表达式，类型检查更复杂
    }
    
    /**
     * @brief 访问成员表达式
     */
    private function visitMemberExpression(node: ASTNode): void {
        // 访问对象表达式
        this.visitNode(node.object);
        
        // 获取对象类型
        let objectType = this.typeChecker.getExpressionType(node.object);
        
        // 检查成员访问
        // 真实实现需要查找类型定义并检查成员是否存在
        
        // 如果对象是量子类型，成员访问也可能是量子类型
        if (this.typeChecker.isQuantumType(objectType)) {
            node.isQuantum = true; // 简化处理，实际需要检查成员是否也是量子类型
        }
    }
    
    /**
     * @brief 访问字面量
     */
    private function visitLiteral(node: ASTNode): void {
        // 字面量节点不需要特殊处理
        // 类型已在节点创建时设置
    }
    
    /**
     * @brief 访问量子操作
     */
    private function visitQuantumOperation(node: ASTNode): void {
        // 量子操作总是量子类型
        node.isQuantum = true;
        
        // 访问操作的目标和参数
        this.visitNode(node.target);
        
        if (node.parameters != null) {
            for (let param of node.parameters) {
                this.visitNode(param);
            }
        }
        
        // 根据量子操作类型进行特定检查
        let opType = node.operationType;
        
        if (opType == "entangle") {
            // 纠缠操作需要检查两个量子对象
            if (node.parameters.length < 1) {
                this.error(node, "纠缠操作需要至少一个目标对象");
                return;
            }
            
            // 检查target是否是量子类型
            if (!this.typeChecker.isQuantumExpression(node.target)) {
                this.error(node.target, "纠缠操作的源对象必须是量子类型");
            }
            
            // 检查所有参数是否都是量子类型
            for (let param of node.parameters) {
                if (!this.typeChecker.isQuantumExpression(param)) {
                    this.error(param, "纠缠操作的目标对象必须是量子类型");
                }
            }
        }
        else if (opType == "superpose") {
            // 叠加操作检查
            // 这里略去具体实现
        }
    }
    
    /**
     * @brief 检查是否是量子类型
     */
    private function isQuantumType(typeName: String): Boolean {
        // 基本量子类型
        if (typeName == "QBit" || typeName == "Quantum" || typeName == "QuantumState") {
            return true;
        }
        
        // 查找类型定义
        let symbol = this.symbolTable.resolve(typeName);
        if (symbol != null && symbol.type == SymbolType.TYPE) {
            return symbol.isQuantum;
        }
        
        return false;
    }
    
    /**
     * @brief 收集错误和警告
     */
    private function collectErrors(): void {
        // 收集符号表的错误
        let symbolTableErrors = this.symbolTable.getErrors();
        for (let error of symbolTableErrors) {
            this.errors.push(error);
        }
        
        // 收集类型检查器的错误和警告
        let typeErrors = this.typeChecker.getErrors();
        let typeWarnings = this.typeChecker.getWarnings();
        
        for (let error of typeErrors) {
            this.errors.push(error);
        }
        
        for (let warning of typeWarnings) {
            this.warnings.push(warning);
        }
    }
    
    /**
     * @brief 获取错误列表
     */
    public function getErrors(): Array<String> {
        return this.errors;
    }
    
    /**
     * @brief 获取警告列表
     */
    public function getWarnings(): Array<String> {
        return this.warnings;
    }
    
    /**
     * @brief 报告错误
     */
    private function error(node: ASTNode, message: String): void {
        let location = "";
        if (node != null) {
            location = `${this.currentFile}:${node.line}:${node.column}: `;
        }
        this.errors.push(`${location}错误: ${message}`);
    }
    
    /**
     * @brief 报告警告
     */
    private function warning(node: ASTNode, message: String): void {
        let location = "";
        if (node != null) {
            location = `${this.currentFile}:${node.line}:${node.column}: `;
        }
        this.warnings.push(`${location}警告: ${message}`);
    }
} 