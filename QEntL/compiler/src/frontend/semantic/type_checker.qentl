/**
 * @file type_checker.qentl
 * @brief 类型检查器实现
 * 
 * 量子基因编码: QGC-COMPILER-TYPECHECKER-2024061901
 * 量子纠缠信道: QEC-COMPILER-FRONTEND-02
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/map.qentl";
import "QEntL/compiler/frontend/parser/ast.qentl";
import "QEntL/compiler/frontend/semantic/symbol_table.qentl";

/**
 * @class TypeChecker
 * @brief 类型检查器，负责类型兼容性检查和表达式类型推导
 */
quantum_class TypeChecker {
    private {
        symbolTable: SymbolTable;    // 符号表引用
        errors: Array<String>;       // 错误列表
        warnings: Array<String>;     // 警告列表
        
        // 类型缓存，避免重复计算
        expressionTypes: Map<Integer, String>; // 保存表达式节点的类型
    }
    
    /**
     * @brief 构造函数
     * @param symbolTable 符号表
     */
    constructor(symbolTable: SymbolTable) {
        this.symbolTable = symbolTable;
        this.errors = new Array<String>();
        this.warnings = new Array<String>();
        this.expressionTypes = new Map<Integer, String>();
    }
    
    /**
     * @brief 获取表达式的类型
     * @param node 表达式节点
     * @return 类型名称
     */
    public function getExpressionType(node: ASTNode): String {
        if (node == null) {
            return "void";
        }
        
        // 检查缓存
        let nodeId = node.id;
        if (this.expressionTypes.has(nodeId)) {
            return this.expressionTypes.get(nodeId);
        }
        
        // 计算类型
        let type = this.calculateExpressionType(node);
        
        // 缓存结果
        this.expressionTypes.set(nodeId, type);
        
        return type;
    }
    
    /**
     * @brief 计算表达式类型
     * @param node 表达式节点
     * @return 类型名称
     */
    private function calculateExpressionType(node: ASTNode): String {
        switch (node.type) {
            case NodeType.LITERAL:
                return this.getLiteralType(node);
                
            case NodeType.VARIABLE_EXPRESSION:
                return this.getVariableType(node);
                
            case NodeType.BINARY_EXPRESSION:
                return this.getBinaryExpressionType(node);
                
            case NodeType.UNARY_EXPRESSION:
                return this.getUnaryExpressionType(node);
                
            case NodeType.CALL_EXPRESSION:
                return this.getCallExpressionType(node);
                
            case NodeType.MEMBER_EXPRESSION:
                return this.getMemberExpressionType(node);
                
            case NodeType.QUANTUM_OPERATION:
                return this.getQuantumOperationType(node);
                
            default:
                this.errors.push(`无法确定节点类型 ${node.type} 的表达式类型`);
                return "Any";
        }
    }
    
    /**
     * @brief 获取字面量的类型
     */
    private function getLiteralType(node: ASTNode): String {
        if (node.literalType != null) {
            return node.literalType;
        }
        
        // 根据值判断类型
        let value = node.value;
        
        if (value === true || value === false) {
            return "Boolean";
        }
        
        if (typeof value === "number") {
            // 判断是整数还是浮点数
            if (Math.floor(value) === value) {
                return "Integer";
            } else {
                return "Float";
            }
        }
        
        if (typeof value === "string") {
            return "String";
        }
        
        if (value === null) {
            return "null";
        }
        
        return "Any";
    }
    
    /**
     * @brief 获取变量的类型
     */
    private function getVariableType(node: ASTNode): String {
        let name = node.name;
        let symbol = this.symbolTable.resolve(name);
        
        if (symbol == null) {
            // 未定义的变量，错误已在符号表中报告
            return "Any";
        }
        
        return symbol.dataType;
    }
    
    /**
     * @brief 获取二元表达式的类型
     */
    private function getBinaryExpressionType(node: ASTNode): String {
        let leftType = this.getExpressionType(node.left);
        let rightType = this.getExpressionType(node.right);
        let operator = node.operator;
        
        // 算术运算符
        if (operator === "+" || operator === "-" || operator === "*" || operator === "/" || operator === "%") {
            // 字符串连接
            if (operator === "+" && (leftType === "String" || rightType === "String")) {
                return "String";
            }
            
            // 数值运算
            if (this.isNumericType(leftType) && this.isNumericType(rightType)) {
                // 如果有一个是Float，结果就是Float
                if (leftType === "Float" || rightType === "Float") {
                    return "Float";
                }
                return "Integer";
            }
            
            // 如果任一操作数是Any，结果是Any
            if (leftType === "Any" || rightType === "Any") {
                return "Any";
            }
            
            // 类型不兼容
            this.errors.push(`运算符 '${operator}' 不能应用于类型 '${leftType}' 和 '${rightType}'`);
            return "Any";
        }
        
        // 比较运算符
        if (operator === "==" || operator === "!=" || operator === "<" || operator === ">" || operator === "<=" || operator === ">=") {
            return "Boolean";
        }
        
        // 逻辑运算符
        if (operator === "&&" || operator === "||") {
            return "Boolean";
        }
        
        // 默认返回Any
        return "Any";
    }
    
    /**
     * @brief 获取一元表达式的类型
     */
    private function getUnaryExpressionType(node: ASTNode): String {
        let operandType = this.getExpressionType(node.operand);
        let operator = node.operator;
        
        // 负号
        if (operator === "-") {
            if (this.isNumericType(operandType)) {
                return operandType;
            }
            
            if (operandType === "Any") {
                return "Any";
            }
            
            this.errors.push(`运算符 '${operator}' 不能应用于类型 '${operandType}'`);
            return "Any";
        }
        
        // 逻辑非
        if (operator === "!") {
            return "Boolean";
        }
        
        // 量子测量运算符
        if (operator === "@") {
            if (this.isQuantumType(operandType)) {
                // 量子测量返回经典类型
                if (operandType === "QBit") {
                    return "Boolean";
                }
                return "Any"; // 其他量子类型的测量结果
            }
            
            this.errors.push(`量子测量运算符 '@' 不能应用于非量子类型 '${operandType}'`);
            return "Any";
        }
        
        return "Any";
    }
    
    /**
     * @brief 获取函数调用的类型
     */
    private function getCallExpressionType(node: ASTNode): String {
        // 如果是变量表达式，可以直接查找函数定义
        if (node.callee.type === NodeType.VARIABLE_EXPRESSION) {
            let funcName = node.callee.name;
            let symbol = this.symbolTable.resolve(funcName);
            
            if (symbol != null) {
                if (symbol.type === SymbolType.FUNCTION || symbol.type === SymbolType.METHOD) {
                    return symbol.dataType;
                }
            }
        }
        
        // 对于更复杂的调用表达式，需要计算被调用者的类型
        // 然后根据该类型确定返回类型
        // 这里简化处理
        
        return "Any";
    }
    
    /**
     * @brief 获取成员表达式的类型
     */
    private function getMemberExpressionType(node: ASTNode): String {
        // 需要查找对象类型定义，然后找到成员的类型
        // 这里简化处理
        return "Any";
    }
    
    /**
     * @brief 获取量子操作的类型
     */
    private function getQuantumOperationType(node: ASTNode): String {
        let opType = node.operationType;
        
        // 根据不同的量子操作类型返回对应的结果类型
        if (opType === "entangle") {
            return "Quantum";
        }
        
        if (opType === "superpose") {
            return "QuantumState";
        }
        
        if (opType === "measure") {
            // 测量将量子状态转换为经典状态
            return "Any";
        }
        
        return "Quantum";
    }
    
    /**
     * @brief 检查类型兼容性
     * @param sourceType 源类型
     * @param targetType 目标类型
     * @return 是否兼容
     */
    public function checkTypeCompatibility(sourceType: String, targetType: String): Boolean {
        // Any类型与任何类型兼容
        if (sourceType === "Any" || targetType === "Any") {
            return true;
        }
        
        // 相同类型兼容
        if (sourceType === targetType) {
            return true;
        }
        
        // 数值类型兼容性
        if (targetType === "Float" && sourceType === "Integer") {
            return true;
        }
        
        // 量子类型兼容性
        if (this.isQuantumType(targetType) && this.isQuantumType(sourceType)) {
            // 量子类型之间的具体兼容规则
            return true;
        }
        
        // 继承关系兼容性（需要类型系统信息）
        // 这里简化处理
        
        return false;
    }
    
    /**
     * @brief 检查是否是数值类型
     */
    public function isNumericType(type: String): Boolean {
        return type === "Integer" || type === "Float" || type === "Number";
    }
    
    /**
     * @brief 检查是否是量子类型
     */
    public function isQuantumType(type: String): Boolean {
        // 基本量子类型
        if (type === "QBit" || type === "Quantum" || type === "QuantumState") {
            return true;
        }
        
        // 查找类型定义
        let symbol = this.symbolTable.resolve(type);
        if (symbol != null && symbol.type === SymbolType.TYPE) {
            return symbol.isQuantum;
        }
        
        return false;
    }
    
    /**
     * @brief 检查表达式是否是量子表达式
     */
    public function isQuantumExpression(node: ASTNode): Boolean {
        // 先检查节点自身是否标记为量子
        if (node.isQuantum === true) {
            return true;
        }
        
        // 再检查表达式类型是否是量子类型
        let exprType = this.getExpressionType(node);
        return this.isQuantumType(exprType);
    }
    
    /**
     * @brief 获取错误列表
     */
    public function getErrors(): Array<String> {
        return this.errors;
    }
    
    /**
     * @brief 获取警告列表
     */
    public function getWarnings(): Array<String> {
        return this.warnings;
    }
} 