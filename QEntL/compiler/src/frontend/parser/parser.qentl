/**
 * @file parser.qentl
 * @brief QEntL语法分析器实现
 * 
 * 量子基因编码: QGC-COMPILER-PARSER-2024061901
 * 量子纠缠信道: QEC-COMPILER-FRONTEND-01
 */

// 导入基础模块
import "QEntL/core/string.qentl";
import "QEntL/core/array.qentl";
import "QEntL/core/error.qentl";
import "QEntL/compiler/token.qentl";
import "QEntL/compiler/ast.qentl";

/**
 * @class Parser
 * @brief 语法分析器实现，将标记流转换为AST
 */
quantum_class Parser {
    // 私有属性
    private {
        tokens: Array<Token>;       // 标记流
        current: Integer = 0;       // 当前标记索引
        errors: Array<String>;      // 错误列表
    }
    
    /**
     * @brief 构造函数
     * @param tokens 标记流
     */
    constructor(tokens: Array<Token>) {
        this.tokens = tokens;
        this.errors = new Array<String>();
    }
    
    /**
     * @brief 解析程序
     * @return 程序AST
     */
    public function parse(): Program {
        try {
            let program = new Program();
            
            while (!this.isAtEnd()) {
                try {
                    let declaration = this.declaration();
                    if (declaration != null) {
                        program.addDeclaration(declaration);
                    }
                } catch (error: ParseError) {
                    this.synchronize();
                }
            }
            
            return program;
        } catch (error: Any) {
            this.error(this.peek(), `解析错误: ${error}`);
            return new Program(); // 返回空程序
        }
    }
    
    /**
     * @brief 获取错误列表
     * @return 错误列表
     */
    public function getErrors(): Array<String> {
        return this.errors;
    }
    
    // ===== 声明解析方法 =====
    
    /**
     * @brief 解析声明
     * @return 声明节点
     */
    private function declaration(): Declaration {
        if (this.match(TokenType.KW_FUNCTION)) {
            return this.functionDeclaration();
        } else if (this.match(TokenType.KW_QUANTUM_FUNCTION)) {
            return this.quantumFunctionDeclaration();
        } else if (this.match(TokenType.KW_VAR, TokenType.KW_LET, TokenType.KW_CONST)) {
            return this.variableDeclaration();
        } else if (this.match(TokenType.KW_QUANTUM)) {
            return this.quantumDeclaration();
        } else if (this.match(TokenType.KW_CLASS)) {
            return this.classDeclaration();
        } else if (this.match(TokenType.KW_QUANTUM_CLASS)) {
            return this.quantumClassDeclaration();
        } else if (this.match(TokenType.KW_QUANTUM_ENTITY)) {
            return this.quantumEntityDeclaration();
        } else if (this.match(TokenType.KW_IMPORT)) {
            return this.importDeclaration();
        } else if (this.match(TokenType.KW_EXPORT)) {
            return this.exportDeclaration();
        } else {
            return this.statement();
        }
    }
    
    /**
     * @brief 解析函数声明
     * @return 函数声明节点
     */
    private function functionDeclaration(): FunctionDeclaration {
        let name = this.consume(TokenType.IDENTIFIER, "期望函数名");
        
        this.consume(TokenType.LEFT_PAREN, "函数名后期望'('");
        let parameters = new Array<Parameter>();
        
        if (!this.check(TokenType.RIGHT_PAREN)) {
            do {
                let paramName = this.consume(TokenType.IDENTIFIER, "期望参数名");
                let paramType = null;
                
                if (this.match(TokenType.COLON)) {
                    paramType = this.typeExpression();
                }
                
                parameters.push(new Parameter(paramName.lexeme, paramType));
            } while (this.match(TokenType.COMMA));
        }
        
        this.consume(TokenType.RIGHT_PAREN, "参数列表后期望')'");
        
        let returnType = null;
        if (this.match(TokenType.COLON)) {
            returnType = this.typeExpression();
        }
        
        this.consume(TokenType.LEFT_BRACE, "函数声明后期望'{'");
        let body = this.blockStatement();
        
        return new FunctionDeclaration(name.lexeme, parameters, returnType, body);
    }
    
    /**
     * @brief 解析量子函数声明
     * @return 量子函数声明节点
     */
    private function quantumFunctionDeclaration(): QuantumFunctionDeclaration {
        let name = this.consume(TokenType.IDENTIFIER, "期望量子函数名");
        
        this.consume(TokenType.LEFT_PAREN, "量子函数名后期望'('");
        let parameters = new Array<Parameter>();
        
        if (!this.check(TokenType.RIGHT_PAREN)) {
            do {
                let paramName = this.consume(TokenType.IDENTIFIER, "期望参数名");
                let paramType = null;
                
                if (this.match(TokenType.COLON)) {
                    paramType = this.typeExpression();
                }
                
                parameters.push(new Parameter(paramName.lexeme, paramType));
            } while (this.match(TokenType.COMMA));
        }
        
        this.consume(TokenType.RIGHT_PAREN, "参数列表后期望')'");
        
        let returnType = null;
        if (this.match(TokenType.COLON)) {
            returnType = this.typeExpression();
        }
        
        this.consume(TokenType.LEFT_BRACE, "量子函数声明后期望'{'");
        let body = this.blockStatement();
        
        return new QuantumFunctionDeclaration(name.lexeme, parameters, returnType, body);
    }
    
    /**
     * @brief 解析变量声明
     * @return 变量声明节点
     */
    private function variableDeclaration(): VariableDeclaration {
        let keyword = this.previous();
        let name = this.consume(TokenType.IDENTIFIER, "期望变量名");
        
        let type = null;
        if (this.match(TokenType.COLON)) {
            type = this.typeExpression();
        }
        
        let initializer = null;
        if (this.match(TokenType.EQUAL)) {
            initializer = this.expression();
        }
        
        this.consume(TokenType.SEMICOLON, "变量声明后期望';'");
        
        return new VariableDeclaration(name.lexeme, type, initializer, keyword.type);
    }
    
    /**
     * @brief 解析量子声明
     * @return 量子声明节点
     */
    private function quantumDeclaration(): QuantumDeclaration {
        let name = this.consume(TokenType.IDENTIFIER, "期望量子变量名");
        
        // 检查量子比特数量
        this.consume(TokenType.LEFT_BRACKET, "量子变量名后期望'['");
        let numQubits = this.expression();
        this.consume(TokenType.RIGHT_BRACKET, "量子比特数量后期望']'");
        
        let initializer = null;
        if (this.match(TokenType.EQUAL)) {
            initializer = this.expression();
        }
        
        this.consume(TokenType.SEMICOLON, "量子声明后期望';'");
        
        return new QuantumDeclaration(name.lexeme, numQubits, initializer);
    }
    
    /**
     * @brief 解析类声明
     * @return 类声明节点
     */
    private function classDeclaration(): ClassDeclaration {
        let name = this.consume(TokenType.IDENTIFIER, "期望类名");
        
        let superclass = null;
        if (this.match(TokenType.KW_EXTENDS)) {
            superclass = this.consume(TokenType.IDENTIFIER, "期望父类名").lexeme;
        }
        
        this.consume(TokenType.LEFT_BRACE, "类声明后期望'{'");
        
        let methods = new Array<MethodDeclaration>();
        let properties = new Array<PropertyDeclaration>();
        
        while (!this.check(TokenType.RIGHT_BRACE) && !this.isAtEnd()) {
            // 解析访问修饰符
            let visibility = "public";
            if (this.match(TokenType.KW_PUBLIC)) {
                visibility = "public";
            } else if (this.match(TokenType.KW_PRIVATE)) {
                visibility = "private";
            } else if (this.match(TokenType.KW_PROTECTED)) {
                visibility = "protected";
            }
            
            let isStatic = false;
            if (this.match(TokenType.KW_STATIC)) {
                isStatic = true;
            }
            
            // 判断是方法还是属性
            if (this.check(TokenType.KW_FUNCTION)) {
                let method = this.functionDeclaration();
                methods.push(new MethodDeclaration(method.name, method.parameters, method.returnType, method.body, visibility, isStatic));
            } else {
                let property = this.variableDeclaration();
                properties.push(new PropertyDeclaration(property.name, property.type, property.initializer, visibility, isStatic));
            }
        }
        
        this.consume(TokenType.RIGHT_BRACE, "类体后期望'}'");
        
        return new ClassDeclaration(name.lexeme, superclass, methods, properties);
    }
    
    // ===== 类型表达式解析 =====
    
    /**
     * @brief 解析类型表达式
     * @return 类型表达式节点
     */
    private function typeExpression(): TypeExpression {
        let baseType = this.primaryType();
        
        // 处理数组类型
        while (this.match(TokenType.LEFT_BRACKET)) {
            this.consume(TokenType.RIGHT_BRACKET, "数组类型定义中期望']'");
            baseType = new ArrayTypeExpression(baseType);
        }
        
        return baseType;
    }
    
    /**
     * @brief 解析基本类型
     * @return 基本类型表达式节点
     */
    private function primaryType(): TypeExpression {
        if (this.match(TokenType.IDENTIFIER)) {
            return new NamedTypeExpression(this.previous().lexeme);
        } else if (this.match(TokenType.KW_QBIT)) {
            return new QbitTypeExpression();
        } else {
            throw this.error(this.peek(), "期望类型");
        }
    }
    
    // ===== 语句解析方法 =====
    
    /**
     * @brief 解析语句
     * @return 语句节点
     */
    private function statement(): Statement {
        if (this.match(TokenType.KW_IF)) {
            return this.ifStatement();
        } else if (this.match(TokenType.KW_WHILE)) {
            return this.whileStatement();
        } else if (this.match(TokenType.KW_FOR)) {
            return this.forStatement();
        } else if (this.match(TokenType.KW_RETURN)) {
            return this.returnStatement();
        } else if (this.match(TokenType.LEFT_BRACE)) {
            return this.blockStatement();
        } else {
            return this.expressionStatement();
        }
    }
    
    /**
     * @brief 解析块语句
     * @return 块语句节点
     */
    private function blockStatement(): BlockStatement {
        let statements = new Array<Statement>();
        
        while (!this.check(TokenType.RIGHT_BRACE) && !this.isAtEnd()) {
            let declaration = this.declaration();
            if (declaration != null) {
                statements.push(declaration);
            }
        }
        
        this.consume(TokenType.RIGHT_BRACE, "块语句后期望'}'");
        
        return new BlockStatement(statements);
    }
    
    /**
     * @brief 解析if语句
     * @return if语句节点
     */
    private function ifStatement(): IfStatement {
        this.consume(TokenType.LEFT_PAREN, "if后期望'('");
        let condition = this.expression();
        this.consume(TokenType.RIGHT_PAREN, "条件后期望')'");
        
        let thenBranch = this.statement();
        let elseBranch = null;
        
        if (this.match(TokenType.KW_ELSE)) {
            elseBranch = this.statement();
        }
        
        return new IfStatement(condition, thenBranch, elseBranch);
    }
    
    /**
     * @brief 解析while语句
     * @return while语句节点
     */
    private function whileStatement(): WhileStatement {
        this.consume(TokenType.LEFT_PAREN, "while后期望'('");
        let condition = this.expression();
        this.consume(TokenType.RIGHT_PAREN, "条件后期望')'");
        
        let body = this.statement();
        
        return new WhileStatement(condition, body);
    }
    
    /**
     * @brief 解析for语句
     * @return for语句节点
     */
    private function forStatement(): ForStatement {
        this.consume(TokenType.LEFT_PAREN, "for后期望'('");
        
        let initializer = null;
        if (!this.check(TokenType.SEMICOLON)) {
            if (this.match(TokenType.KW_VAR, TokenType.KW_LET, TokenType.KW_CONST)) {
                initializer = this.variableDeclaration();
            } else {
                initializer = this.expressionStatement();
            }
        } else {
            this.consume(TokenType.SEMICOLON, "");
        }
        
        let condition = null;
        if (!this.check(TokenType.SEMICOLON)) {
            condition = this.expression();
        }
        this.consume(TokenType.SEMICOLON, "for条件后期望';'");
        
        let increment = null;
        if (!this.check(TokenType.RIGHT_PAREN)) {
            increment = this.expression();
        }
        this.consume(TokenType.RIGHT_PAREN, "for子句后期望')'");
        
        let body = this.statement();
        
        return new ForStatement(initializer, condition, increment, body);
    }
    
    /**
     * @brief 解析return语句
     * @return return语句节点
     */
    private function returnStatement(): ReturnStatement {
        let keyword = this.previous();
        
        let value = null;
        if (!this.check(TokenType.SEMICOLON)) {
            value = this.expression();
        }
        
        this.consume(TokenType.SEMICOLON, "return后期望';'");
        
        return new ReturnStatement(value);
    }
    
    /**
     * @brief 解析表达式语句
     * @return 表达式语句节点
     */
    private function expressionStatement(): ExpressionStatement {
        let expr = this.expression();
        this.consume(TokenType.SEMICOLON, "表达式后期望';'");
        
        return new ExpressionStatement(expr);
    }
    
    // ===== 表达式解析方法 =====
    
    /**
     * @brief 解析表达式
     * @return 表达式节点
     */
    private function expression(): Expression {
        return this.assignment();
    }
    
    /**
     * @brief 解析赋值表达式
     * @return 表达式节点
     */
    private function assignment(): Expression {
        let expr = this.logicalOr();
        
        if (this.match(TokenType.EQUAL, TokenType.PLUS_EQUAL, TokenType.MINUS_EQUAL,
                        TokenType.STAR_EQUAL, TokenType.SLASH_EQUAL, TokenType.PERCENT_EQUAL)) {
            let operator = this.previous();
            let value = this.assignment();
            
            // 检查左侧是否是可赋值的
            if (expr instanceof IdentifierExpression) {
                return new AssignmentExpression(expr, operator, value);
            } else if (expr instanceof MemberAccessExpression) {
                return new MemberAssignmentExpression(expr, operator, value);
            } else if (expr instanceof IndexExpression) {
                return new IndexAssignmentExpression(expr, operator, value);
            }
            
            this.error(operator, "无效的赋值目标");
        }
        
        return expr;
    }
    
    /**
     * @brief 解析逻辑或表达式
     * @return 表达式节点
     */
    private function logicalOr(): Expression {
        let expr = this.logicalAnd();
        
        while (this.match(TokenType.OR)) {
            let operator = this.previous();
            let right = this.logicalAnd();
            expr = new LogicalExpression(expr, operator, right);
        }
        
        return expr;
    }

    // 辅助方法（简化实现）
    
    /**
     * @brief 检查是否到达标记流结尾
     * @return 是否到达结尾
     */
    private function isAtEnd(): Boolean {
        return this.peek().is(TokenType.EOF);
    }
    
    /**
     * @brief 获取当前标记
     * @return 当前标记
     */
    private function peek(): Token {
        return this.tokens[this.current];
    }
    
    /**
     * @brief 消耗当前标记并移动到下一个
     * @return 当前标记
     */
    private function advance(): Token {
        if (!this.isAtEnd()) {
            this.current++;
        }
        return this.previous();
    }
    
    /**
     * @brief 获取前一个标记
     * @return 前一个标记
     */
    private function previous(): Token {
        return this.tokens[this.current - 1];
    }
    
    /**
     * @brief 检查当前标记是否匹配指定类型
     * @param types 标记类型列表
     * @return 是否匹配
     */
    private function match(...types: TokenType[]): Boolean {
        for (let type of types) {
            if (this.check(type)) {
                this.advance();
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * @brief 检查当前标记是否为指定类型
     * @param type 标记类型
     * @return 是否匹配
     */
    private function check(type: TokenType): Boolean {
        if (this.isAtEnd()) {
            return false;
        }
        
        return this.peek().is(type);
    }
    
    /**
     * @brief 消耗当前标记，如果不匹配则抛出错误
     * @param type 期望的标记类型
     * @param message 错误消息
     * @return 当前标记
     */
    private function consume(type: TokenType, message: String): Token {
        if (this.check(type)) {
            return this.advance();
        }
        
        throw this.error(this.peek(), message);
    }
    
    /**
     * @brief 添加错误
     * @param token 错误标记
     * @param message 错误消息
     * @return 解析错误对象
     */
    private function error(token: Token, message: String): ParseError {
        let errorMsg;
        
        if (token.is(TokenType.EOF)) {
            errorMsg = `第${token.line}行第${token.column}列文件结束: ${message}`;
        } else {
            errorMsg = `第${token.line}行第${token.column}列'${token.lexeme}': ${message}`;
        }
        
        this.errors.push(errorMsg);
        return new ParseError(errorMsg);
    }
    
    /**
     * @brief 同步解析状态，从错误中恢复
     */
    private function synchronize(): void {
        this.advance();
        
        while (!this.isAtEnd()) {
            if (this.previous().is(TokenType.SEMICOLON)) {
                return;
            }
            
            switch (this.peek().type) {
                case TokenType.KW_FUNCTION:
                case TokenType.KW_QUANTUM_FUNCTION:
                case TokenType.KW_VAR:
                case TokenType.KW_LET:
                case TokenType.KW_CONST:
                case TokenType.KW_QUANTUM:
                case TokenType.KW_CLASS:
                case TokenType.KW_QUANTUM_CLASS:
                case TokenType.KW_QUANTUM_ENTITY:
                case TokenType.KW_IF:
                case TokenType.KW_WHILE:
                case TokenType.KW_FOR:
                case TokenType.KW_RETURN:
                    return;
            }
            
            this.advance();
        }
    }
}

/**
 * @class ParseError
 * @brief 解析错误类
 */
quantum_class ParseError extends Error {
    constructor(message: String) {
        super(message);
    }
} 