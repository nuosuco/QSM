/**
 * @file source_file_manager.qentl
 * @brief 源文件管理系统
 * 
 * 量子基因编码: QGC-COMPILER-SOURCEMANAGER-2024062001
 * 量子纠缠信道: QEC-COMPILER-CORE-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/map.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/crypto.qentl";
import "QEntL/core/debug.qentl";

/**
 * @class SourceFile
 * @brief 源文件信息类
 */
quantum_class SourceFile {
    public {
        path: String;               // 文件路径
        content: String;            // 文件内容
        contentHash: String;        // 内容哈希值
        lastModifiedTime: Integer;  // 最后修改时间
        dependencies: Array<String>; // 依赖文件路径
        isDirty: Boolean;           // 是否需要重新编译
    }
    
    /**
     * @brief 构造函数
     */
    constructor(path: String) {
        this.path = path;
        this.content = "";
        this.contentHash = "";
        this.lastModifiedTime = 0;
        this.dependencies = new Array<String>();
        this.isDirty = true;
        
        this.reload();
    }
    
    /**
     * @brief 重新加载文件
     * @return 是否成功加载
     */
    public function reload(): Boolean {
        try {
            // 获取文件信息
            let fileInfo = File.getFileInfo(this.path);
            this.lastModifiedTime = fileInfo.lastModifiedTime;
            
            // 加载内容
            this.content = File.readAllText(this.path);
            
            // 计算内容哈希
            this.contentHash = Crypto.sha256(this.content);
            
            return true;
        } catch (e) {
            Debug.log(`无法加载文件 ${this.path}: ${e.message}`);
            return false;
        }
    }
    
    /**
     * @brief 检查文件是否已更改
     * @return 是否已更改
     */
    public function isChanged(): Boolean {
        try {
            // 获取文件信息
            let fileInfo = File.getFileInfo(this.path);
            
            // 如果修改时间不同，可能已更改
            if (fileInfo.lastModifiedTime != this.lastModifiedTime) {
                // 加载新内容并计算哈希
                let newContent = File.readAllText(this.path);
                let newHash = Crypto.sha256(newContent);
                
                // 如果哈希不同，则确实已更改
                if (newHash != this.contentHash) {
                    this.content = newContent;
                    this.contentHash = newHash;
                    this.lastModifiedTime = fileInfo.lastModifiedTime;
                    return true;
                }
            }
            
            return false;
        } catch (e) {
            Debug.log(`检查文件变更失败 ${this.path}: ${e.message}`);
            // 文件可能已被删除或无法访问
            return true;
        }
    }
    
    /**
     * @brief 添加依赖
     */
    public function addDependency(dependencyPath: String): void {
        // 检查是否已存在
        for (let dep of this.dependencies) {
            if (dep == dependencyPath) {
                return;
            }
        }
        
        this.dependencies.push(dependencyPath);
    }
    
    /**
     * @brief 清除所有依赖
     */
    public function clearDependencies(): void {
        this.dependencies = new Array<String>();
    }
    
    /**
     * @brief 标记为脏（需要重新编译）
     */
    public function markDirty(): void {
        this.isDirty = true;
    }
    
    /**
     * @brief 标记为已编译
     */
    public function markCompiled(): void {
        this.isDirty = false;
    }
}

/**
 * @class SourceFileManager
 * @brief 源文件管理系统
 */
quantum_class SourceFileManager {
    private {
        files: Map<String, SourceFile>;       // 文件映射表
        dependencyGraph: Map<String, Array<String>>; // 依赖图 (文件 -> 依赖它的文件)
        rootDirectory: String;                // 根目录
        includePatterns: Array<String>;       // 包含模式
        excludePatterns: Array<String>;       // 排除模式
    }
    
    /**
     * @brief 构造函数
     */
    constructor(rootDirectory: String = "") {
        this.files = new Map<String, SourceFile>();
        this.dependencyGraph = new Map<String, Array<String>>();
        this.rootDirectory = rootDirectory;
        this.includePatterns = new Array<String>();
        this.excludePatterns = new Array<String>();
        
        // 默认包含QEntL文件
        this.includePatterns.push("**/*.qentl");
        this.includePatterns.push("**/*.qent");
        this.includePatterns.push("**/*.qjs");
        
        // 默认排除测试文件和临时文件
        this.excludePatterns.push("**/test/**");
        this.excludePatterns.push("**/tests/**");
        this.excludePatterns.push("**/temp/**");
        this.excludePatterns.push("**/.temp/**");
    }
    
    /**
     * @brief 设置根目录
     */
    public function setRootDirectory(directory: String): void {
        this.rootDirectory = directory;
    }
    
    /**
     * @brief 添加包含模式
     */
    public function addIncludePattern(pattern: String): void {
        this.includePatterns.push(pattern);
    }
    
    /**
     * @brief 添加排除模式
     */
    public function addExcludePattern(pattern: String): void {
        this.excludePatterns.push(pattern);
    }
    
    /**
     * @brief 扫描源文件
     * @return 找到的文件数量
     */
    public function scanSourceFiles(): Integer {
        let startCount = this.files.size();
        
        // 扫描目录
        let filePaths = this.findMatchingFiles(this.rootDirectory);
        
        // 添加文件
        for (let path of filePaths) {
            this.addSourceFile(path);
        }
        
        return this.files.size() - startCount;
    }
    
    /**
     * @brief 添加源文件
     */
    public function addSourceFile(path: String): SourceFile {
        // 规范化路径
        let normalizedPath = Path.normalize(path);
        
        // 检查是否已存在
        if (this.files.has(normalizedPath)) {
            return this.files.get(normalizedPath);
        }
        
        // 创建新的源文件
        let sourceFile = new SourceFile(normalizedPath);
        this.files.set(normalizedPath, sourceFile);
        
        return sourceFile;
    }
    
    /**
     * @brief 检查文件变更
     * @return 变更的文件列表
     */
    public function checkFileChanges(): Array<String> {
        let changedFiles = new Array<String>();
        
        // 检查每个文件是否有变化
        for (let entry of this.files.entries()) {
            let path = entry.key;
            let file = entry.value;
            
            if (file.isChanged()) {
                changedFiles.push(path);
                file.markDirty();
                
                // 标记所有依赖这个文件的文件为脏
                this.markDependentsAsDirty(path);
            }
        }
        
        return changedFiles;
    }
    
    /**
     * @brief 获取需要编译的文件
     * @return 需要编译的文件路径列表
     */
    public function getFilesToCompile(): Array<String> {
        let filesToCompile = new Array<String>();
        
        // 收集所有标记为脏的文件
        for (let entry of this.files.entries()) {
            let path = entry.key;
            let file = entry.value;
            
            if (file.isDirty) {
                filesToCompile.push(path);
            }
        }
        
        // 按依赖顺序排序
        this.sortByDependencyOrder(filesToCompile);
        
        return filesToCompile;
    }
    
    /**
     * @brief 标记文件为已编译
     */
    public function markFileAsCompiled(path: String): void {
        let normalizedPath = Path.normalize(path);
        let file = this.files.get(normalizedPath);
        
        if (file != null) {
            file.markCompiled();
        }
    }
    
    /**
     * @brief 记录文件依赖关系
     */
    public function recordDependency(sourcePath: String, dependsOnPath: String): void {
        let normalizedSource = Path.normalize(sourcePath);
        let normalizedDependency = Path.normalize(dependsOnPath);
        
        // 添加源文件依赖
        let sourceFile = this.files.get(normalizedSource);
        if (sourceFile != null) {
            sourceFile.addDependency(normalizedDependency);
        }
        
        // 更新依赖图
        if (!this.dependencyGraph.has(normalizedDependency)) {
            this.dependencyGraph.set(normalizedDependency, new Array<String>());
        }
        
        let dependents = this.dependencyGraph.get(normalizedDependency);
        if (!dependents.includes(normalizedSource)) {
            dependents.push(normalizedSource);
        }
    }
    
    /**
     * @brief 清除文件的依赖
     */
    public function clearDependencies(path: String): void {
        let normalizedPath = Path.normalize(path);
        let file = this.files.get(normalizedPath);
        
        if (file != null) {
            // 从依赖图中移除这个文件作为被依赖项
            for (let dependency of file.dependencies) {
                if (this.dependencyGraph.has(dependency)) {
                    let dependents = this.dependencyGraph.get(dependency);
                    let index = dependents.indexOf(normalizedPath);
                    if (index >= 0) {
                        dependents.splice(index, 1);
                    }
                }
            }
            
            // 清除这个文件的依赖列表
            file.clearDependencies();
        }
    }
    
    /**
     * @brief 获取源文件
     */
    public function getSourceFile(path: String): SourceFile? {
        let normalizedPath = Path.normalize(path);
        return this.files.get(normalizedPath);
    }
    
    /**
     * @brief 获取所有源文件路径
     */
    public function getAllSourceFilePaths(): Array<String> {
        return this.files.keys();
    }
    
    /**
     * @brief 获取文件内容
     */
    public function getFileContent(path: String): String {
        let normalizedPath = Path.normalize(path);
        let file = this.files.get(normalizedPath);
        
        if (file != null) {
            return file.content;
        }
        
        // 尝试加载文件
        let sourceFile = this.addSourceFile(normalizedPath);
        return sourceFile.content;
    }
    
    /**
     * @brief 标记依赖文件为脏
     */
    private function markDependentsAsDirty(path: String): void {
        if (!this.dependencyGraph.has(path)) {
            return;
        }
        
        let dependents = this.dependencyGraph.get(path);
        for (let dependent of dependents) {
            let file = this.files.get(dependent);
            if (file != null && !file.isDirty) {
                file.markDirty();
                
                // 递归标记
                this.markDependentsAsDirty(dependent);
            }
        }
    }
    
    /**
     * @brief 按依赖顺序排序文件
     */
    private function sortByDependencyOrder(filePaths: Array<String>): void {
        // 简单的拓扑排序
        let result = new Array<String>();
        let visited = new Map<String, Boolean>();
        
        function visit(path: String): void {
            if (visited.has(path)) {
                return;
            }
            
            visited.set(path, true);
            
            // 先访问依赖
            let file = this.files.get(path);
            if (file != null) {
                for (let dependency of file.dependencies) {
                    if (filePaths.includes(dependency)) {
                        visit.call(this, dependency);
                    }
                }
            }
            
            result.push(path);
        }
        
        // 访问所有文件
        for (let path of filePaths) {
            visit.call(this, path);
        }
        
        // 用排序后的结果替换原数组
        filePaths.length = 0;
        for (let path of result) {
            filePaths.push(path);
        }
    }
    
    /**
     * @brief 查找匹配模式的文件
     */
    private function findMatchingFiles(directory: String): Array<String> {
        let result = new Array<String>();
        
        // 递归扫描目录
        function scanDirectory(dir: String, relativePath: String = ""): void {
            let entries = File.listDirectory(dir);
            
            for (let entry of entries) {
                let fullPath = Path.join(dir, entry.name);
                let entryRelativePath = relativePath.length > 0 
                    ? Path.join(relativePath, entry.name) 
                    : entry.name;
                
                if (entry.isDirectory) {
                    // 检查是否应该排除这个目录
                    if (!this.isExcluded(entryRelativePath)) {
                        scanDirectory.call(this, fullPath, entryRelativePath);
                    }
                } else {
                    // 检查文件是否匹配包含模式并且不匹配排除模式
                    if (this.isIncluded(entryRelativePath) && !this.isExcluded(entryRelativePath)) {
                        result.push(fullPath);
                    }
                }
            }
        }
        
        scanDirectory.call(this, directory);
        return result;
    }
    
    /**
     * @brief 检查路径是否匹配包含模式
     */
    private function isIncluded(path: String): Boolean {
        for (let pattern of this.includePatterns) {
            if (this.matchesPattern(path, pattern)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * @brief 检查路径是否匹配排除模式
     */
    private function isExcluded(path: String): Boolean {
        for (let pattern of this.excludePatterns) {
            if (this.matchesPattern(path, pattern)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * @brief 检查路径是否匹配模式
     */
    private function matchesPattern(path: String, pattern: String): Boolean {
        // 简单的通配符匹配实现
        
        // 转换为正则表达式
        let regexPattern = pattern
            .replace(/\./g, "\\.")     // 转义点
            .replace(/\*/g, ".*")      // 替换*为.*
            .replace(/\?/g, ".")       // 替换?为.
            .replace(/\*\*/g, ".*");   // 替换**为.*
            
        let regex = new RegExp("^" + regexPattern + "$", "i");
        return regex.test(path);
    }
} 