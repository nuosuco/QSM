/**
 * @file file_change_detector.qentl
 * @brief 文件变更检测实现
 * 
 * 量子基因编码: QGC-COMPILER-FILE-CHANGE-2024061901
 * 量子纠缠信道: QEC-COMPILER-SRC-01
 */

import "QEntL/core/error.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/array.qentl";
import "QEntL/core/map.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/crypto.qentl";
import "QEntL/vm/src/core/os_interface/logger.qentl";

/**
 * @class FileChangeDetector
 * @brief 文件变更检测器
 */
export quantum_class FileChangeDetector {
    private {
        fileTimestamps: Map<String, Integer>;
        fileHashes: Map<String, String>;
        logger: Logger;
        cacheFile: String;
        useHashing: Boolean;
    }
    
    /**
     * @brief 构造函数
     * @param logger 日志记录器
     * @param cacheFile 缓存文件路径
     * @param useHashing 是否使用文件哈希而不仅仅是时间戳
     */
    constructor(logger: Logger, cacheFile: String = ".file_changes.cache", useHashing: Boolean = true) {
        this.fileTimestamps = new Map<String, Integer>();
        this.fileHashes = new Map<String, String>();
        this.logger = logger;
        this.cacheFile = cacheFile;
        this.useHashing = useHashing;
        
        // 尝试加载缓存
        this.loadCache();
    }
    
    /**
     * @brief 检测文件变更
     * @param files 要检查的文件列表
     * @return 已更改的文件列表
     */
    public function detectChanges(files: Array<String>): Array<String> {
        this.logger.log(LogLevel.DEBUG, "开始检测文件变更");
        
        let changedFiles = [];
        
        for (let i = 0; i < files.length; i++) {
            let file = files[i];
            
            if (this.hasFileChanged(file)) {
                changedFiles.push(file);
            }
        }
        
        // 更新缓存
        this.saveCache();
        
        this.logger.log(LogLevel.DEBUG, `检测到 ${changedFiles.length} 个文件变更`);
        return changedFiles;
    }
    
    /**
     * @brief 检查单个文件是否变更
     * @param filePath 文件路径
     * @return 文件是否变更
     */
    public function hasFileChanged(filePath: String): Boolean {
        // 检查文件是否存在
        if (!File.exists(filePath)) {
            // 如果文件不存在但在缓存中存在，则说明文件被删除
            if (this.fileTimestamps.has(filePath)) {
                this.logger.log(LogLevel.DEBUG, `文件已删除: ${filePath}`);
                this.fileTimestamps.delete(filePath);
                this.fileHashes.delete(filePath);
                return true;
            }
            
            return false;
        }
        
        // 获取文件的当前修改时间
        let currentTimestamp = this.getFileTimestamp(filePath);
        
        // 检查文件是否为新文件
        if (!this.fileTimestamps.has(filePath)) {
            this.logger.log(LogLevel.DEBUG, `新文件: ${filePath}`);
            this.updateFileInfo(filePath, currentTimestamp);
            return true;
        }
        
        // 获取上次记录的时间戳
        let previousTimestamp = this.fileTimestamps.get(filePath);
        
        // 如果时间戳不同，再进一步检查
        if (currentTimestamp != previousTimestamp) {
            // 如果使用哈希校验，则计算文件哈希
            if (this.useHashing) {
                let currentHash = this.calculateFileHash(filePath);
                let previousHash = this.fileHashes.get(filePath);
                
                // 只有哈希值不同时才认为文件真正变更
                if (currentHash != previousHash) {
                    this.logger.log(LogLevel.DEBUG, `文件内容已变更: ${filePath}`);
                    this.updateFileInfo(filePath, currentTimestamp, currentHash);
                    return true;
                } else {
                    // 时间戳变了但内容没变，更新时间戳
                    this.fileTimestamps.set(filePath, currentTimestamp);
                    return false;
                }
            } else {
                // 不使用哈希校验时，直接根据时间戳判断
                this.logger.log(LogLevel.DEBUG, `文件时间戳已变更: ${filePath}`);
                this.updateFileInfo(filePath, currentTimestamp);
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * @brief 更新文件信息
     * @param filePath 文件路径
     * @param timestamp 时间戳
     * @param hash 哈希值（可选）
     */
    private function updateFileInfo(
        filePath: String,
        timestamp: Integer,
        hash: String = null
    ): void {
        this.fileTimestamps.set(filePath, timestamp);
        
        if (this.useHashing) {
            if (hash == null) {
                hash = this.calculateFileHash(filePath);
            }
            this.fileHashes.set(filePath, hash);
        }
    }
    
    /**
     * @brief 获取文件的修改时间戳
     * @param filePath 文件路径
     * @return 时间戳
     */
    private function getFileTimestamp(filePath: String): Integer {
        try {
            return File.getLastModifiedTime(filePath);
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `获取文件时间戳失败: ${filePath}: ${error}`);
            return 0;
        }
    }
    
    /**
     * @brief 计算文件的哈希值
     * @param filePath 文件路径
     * @return 哈希值
     */
    private function calculateFileHash(filePath: String): String {
        try {
            // 读取文件内容
            let fileData = File.readBinary(filePath);
            
            // 计算SHA-256哈希值
            return Crypto.sha256(fileData);
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `计算文件哈希失败: ${filePath}: ${error}`);
            return "";
        }
    }
    
    /**
     * @brief 加载缓存
     */
    private function loadCache(): void {
        if (!File.exists(this.cacheFile)) {
            this.logger.log(LogLevel.DEBUG, "缓存文件不存在，将创建新缓存");
            return;
        }
        
        try {
            // 读取缓存文件
            let cacheData = File.readAllText(this.cacheFile);
            let cache = JSON.parse(cacheData);
            
            // 加载时间戳
            if (cache.timestamps) {
                for (let filePath in cache.timestamps) {
                    this.fileTimestamps.set(filePath, cache.timestamps[filePath]);
                }
            }
            
            // 加载哈希值
            if (cache.hashes) {
                for (let filePath in cache.hashes) {
                    this.fileHashes.set(filePath, cache.hashes[filePath]);
                }
            }
            
            this.logger.log(LogLevel.DEBUG, `已加载缓存，包含 ${this.fileTimestamps.size} 个文件记录`);
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `加载缓存失败: ${error}`);
            
            // 清空现有缓存
            this.fileTimestamps.clear();
            this.fileHashes.clear();
        }
    }
    
    /**
     * @brief 保存缓存
     */
    private function saveCache(): void {
        try {
            // 构建缓存对象
            let cache = {
                timestamps: {},
                hashes: {}
            };
            
            // 保存时间戳
            this.fileTimestamps.forEach((filePath, timestamp) => {
                cache.timestamps[filePath] = timestamp;
            });
            
            // 保存哈希值
            if (this.useHashing) {
                this.fileHashes.forEach((filePath, hash) => {
                    cache.hashes[filePath] = hash;
                });
            }
            
            // 序列化为JSON
            let cacheData = JSON.stringify(cache);
            
            // 写入文件
            File.writeAllText(this.cacheFile, cacheData);
            
            this.logger.log(LogLevel.DEBUG, `已保存缓存，包含 ${this.fileTimestamps.size} 个文件记录`);
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `保存缓存失败: ${error}`);
        }
    }
    
    /**
     * @brief 清除缓存
     */
    public function clearCache(): void {
        this.fileTimestamps.clear();
        this.fileHashes.clear();
        
        // 删除缓存文件
        if (File.exists(this.cacheFile)) {
            try {
                File.delete(this.cacheFile);
                this.logger.log(LogLevel.DEBUG, "已清除缓存");
            } catch (error) {
                this.logger.log(LogLevel.ERROR, `删除缓存文件失败: ${error}`);
            }
        }
    }
    
    /**
     * @brief 添加文件到监控列表
     * @param filePath 文件路径
     */
    public function addFile(filePath: String): void {
        if (!File.exists(filePath)) {
            this.logger.log(LogLevel.WARNING, `文件不存在: ${filePath}`);
            return;
        }
        
        let timestamp = this.getFileTimestamp(filePath);
        let hash = this.useHashing ? this.calculateFileHash(filePath) : null;
        this.updateFileInfo(filePath, timestamp, hash);
    }
    
    /**
     * @brief 批量添加文件到监控列表
     * @param files 文件路径列表
     */
    public function addFiles(files: Array<String>): void {
        for (let i = 0; i < files.length; i++) {
            this.addFile(files[i]);
        }
    }
    
    /**
     * @brief 获取统计信息
     * @return 统计信息对象
     */
    public function getStatistics(): any {
        return {
            filesMonitored: this.fileTimestamps.size,
            hashingEnabled: this.useHashing,
            cacheFile: this.cacheFile
        };
    }
} 