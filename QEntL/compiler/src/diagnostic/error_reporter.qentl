/**
 * @file error_reporter.qentl
 * @brief 编译器错误报告系统
 * 
 * 量子基因编码: QGC-COMPILER-DIAGNOSTIC-2024062001
 * 量子纠缠信道: QEC-COMPILER-CORE-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/console.qentl";
import "QEntL/core/file.qentl";

/**
 * @enum DiagnosticSeverity
 * @brief 诊断信息严重程度枚举
 */
quantum_enum DiagnosticSeverity {
    ERROR,      // 错误 - 阻止编译继续进行
    WARNING,    // 警告 - 可能存在问题但不阻止编译
    INFO,       // 信息 - 仅供参考的提示
    HINT        // 提示 - 改进代码的建议
}

/**
 * @class SourceLocation
 * @brief 源代码位置信息
 */
quantum_class SourceLocation {
    public {
        file: String;       // 文件名
        line: Integer;      // 行号 (1-based)
        column: Integer;    // 列号 (1-based)
        length: Integer;    // 问题长度
    }
    
    /**
     * @brief 构造函数
     */
    constructor(file: String, line: Integer, column: Integer, length: Integer = 1) {
        this.file = file;
        this.line = line;
        this.column = column;
        this.length = length;
    }
    
    /**
     * @brief 转为字符串
     */
    public function toString(): String {
        return `${this.file}:${this.line}:${this.column}`;
    }
}

/**
 * @class Diagnostic
 * @brief 诊断信息类
 */
quantum_class Diagnostic {
    public {
        severity: DiagnosticSeverity;  // 严重程度
        message: String;               // 错误消息
        location: SourceLocation;      // 位置信息
        code: String;                  // 错误代码
        contextLines: Array<String>;   // 上下文行
        hint: String;                  // 修复提示
    }
    
    /**
     * @brief 构造函数
     */
    constructor(severity: DiagnosticSeverity, message: String, location: SourceLocation, 
                code: String = "", hint: String = "") {
        this.severity = severity;
        this.message = message;
        this.location = location;
        this.code = code;
        this.contextLines = new Array<String>();
        this.hint = hint;
    }
    
    /**
     * @brief 添加上下文行
     */
    public function addContextLine(line: String): void {
        this.contextLines.push(line);
    }
    
    /**
     * @brief 获取严重程度字符串
     */
    public function getSeverityString(): String {
        switch (this.severity) {
            case DiagnosticSeverity.ERROR: return "错误";
            case DiagnosticSeverity.WARNING: return "警告";
            case DiagnosticSeverity.INFO: return "信息";
            case DiagnosticSeverity.HINT: return "提示";
            default: return "未知";
        }
    }
    
    /**
     * @brief 格式化为输出字符串
     */
    public function format(showContext: Boolean = true): String {
        let result = `${this.getSeverityString()}: ${this.message}\n`;
        result += `位置: ${this.location.toString()}`;
        
        if (this.code.length > 0) {
            result += ` [${this.code}]`;
        }
        
        if (showContext && this.contextLines.length > 0) {
            result += "\n\n";
            
            // 找到出错行及其索引
            let errorLineIndex = -1;
            for (let i = 0; i < this.contextLines.length; i++) {
                if (i == this.location.line - 1) {
                    errorLineIndex = i;
                    break;
                }
            }
            
            // 计算行号宽度
            let lineNumberWidth = String(this.location.line + 2).length;
            
            // 显示上下文行
            for (let i = 0; i < this.contextLines.length; i++) {
                let lineNumber = this.location.line - errorLineIndex + i;
                let lineNumberStr = String(lineNumber).padStart(lineNumberWidth, ' ');
                
                result += `${lineNumberStr} | ${this.contextLines[i]}\n`;
                
                // 在错误行下方添加指示标记
                if (i == errorLineIndex) {
                    result += ' '.repeat(lineNumberWidth);
                    result += ' | ';
                    result += ' '.repeat(this.location.column - 1);
                    result += '^'.repeat(this.location.length);
                    result += '\n';
                }
            }
        }
        
        if (this.hint.length > 0) {
            result += `\n提示: ${this.hint}`;
        }
        
        return result;
    }
}

/**
 * @class ErrorReporter
 * @brief 错误报告系统
 */
quantum_class ErrorReporter {
    private {
        diagnostics: Array<Diagnostic>;       // 诊断信息列表
        errorCount: Integer = 0;              // 错误计数
        warningCount: Integer = 0;            // 警告计数
        sourceFiles: Map<String, Array<String>>; // 源文件内容缓存
        contextLines: Integer = 3;            // 上下文行数 (上方和下方各3行)
    }
    
    /**
     * @brief 构造函数
     */
    constructor(contextLines: Integer = 3) {
        this.diagnostics = new Array<Diagnostic>();
        this.sourceFiles = new Map<String, Array<String>>();
        this.contextLines = contextLines;
    }
    
    /**
     * @brief 重置报告器
     */
    public function reset(): void {
        this.diagnostics = new Array<Diagnostic>();
        this.errorCount = 0;
        this.warningCount = 0;
    }
    
    /**
     * @brief 报告错误
     */
    public function error(message: String, location: SourceLocation, code: String = "", hint: String = ""): void {
        let diagnostic = new Diagnostic(DiagnosticSeverity.ERROR, message, location, code, hint);
        this.addContextToDiagnostic(diagnostic);
        this.diagnostics.push(diagnostic);
        this.errorCount++;
    }
    
    /**
     * @brief 报告警告
     */
    public function warning(message: String, location: SourceLocation, code: String = "", hint: String = ""): void {
        let diagnostic = new Diagnostic(DiagnosticSeverity.WARNING, message, location, code, hint);
        this.addContextToDiagnostic(diagnostic);
        this.diagnostics.push(diagnostic);
        this.warningCount++;
    }
    
    /**
     * @brief 报告信息
     */
    public function info(message: String, location: SourceLocation, code: String = "", hint: String = ""): void {
        let diagnostic = new Diagnostic(DiagnosticSeverity.INFO, message, location, code, hint);
        this.addContextToDiagnostic(diagnostic);
        this.diagnostics.push(diagnostic);
    }
    
    /**
     * @brief 报告提示
     */
    public function hint(message: String, location: SourceLocation, code: String = "", hint: String = ""): void {
        let diagnostic = new Diagnostic(DiagnosticSeverity.HINT, message, location, code, hint);
        this.addContextToDiagnostic(diagnostic);
        this.diagnostics.push(diagnostic);
    }
    
    /**
     * @brief 获取所有诊断信息
     */
    public function getDiagnostics(): Array<Diagnostic> {
        return this.diagnostics;
    }
    
    /**
     * @brief 获取错误计数
     */
    public function getErrorCount(): Integer {
        return this.errorCount;
    }
    
    /**
     * @brief 获取警告计数
     */
    public function getWarningCount(): Integer {
        return this.warningCount;
    }
    
    /**
     * @brief 是否有错误
     */
    public function hasErrors(): Boolean {
        return this.errorCount > 0;
    }
    
    /**
     * @brief 打印所有诊断信息
     */
    public function printDiagnostics(showContext: Boolean = true): void {
        for (let diagnostic of this.diagnostics) {
            Console.writeLine(diagnostic.format(showContext));
            Console.writeLine("");
        }
    }
    
    /**
     * @brief 输出诊断摘要
     */
    public function printSummary(): void {
        if (this.errorCount > 0 || this.warningCount > 0) {
            let summary = "";
            
            if (this.errorCount > 0) {
                summary += `${this.errorCount} 个错误`;
            }
            
            if (this.warningCount > 0) {
                if (summary.length > 0) {
                    summary += "，";
                }
                summary += `${this.warningCount} 个警告`;
            }
            
            Console.writeLine(`编译完成，${summary}`);
        } else {
            Console.writeLine("编译完成，没有发现错误或警告。");
        }
    }
    
    /**
     * @brief 为诊断信息添加上下文
     */
    private function addContextToDiagnostic(diagnostic: Diagnostic): void {
        let location = diagnostic.location;
        let filename = location.file;
        
        // 尝试获取源文件内容
        let lines = this.getFileLines(filename);
        if (lines.length == 0) {
            return;
        }
        
        // 计算上下文范围
        let startLine = Math.max(1, location.line - this.contextLines);
        let endLine = Math.min(lines.length, location.line + this.contextLines);
        
        // 添加上下文行
        for (let i = startLine; i <= endLine; i++) {
            diagnostic.addContextLine(lines[i - 1]);
        }
    }
    
    /**
     * @brief 获取文件行
     */
    private function getFileLines(filename: String): Array<String> {
        // 检查缓存
        if (this.sourceFiles.has(filename)) {
            return this.sourceFiles.get(filename);
        }
        
        // 尝试读取文件
        try {
            let content = File.readAllText(filename);
            let lines = content.split("\n");
            this.sourceFiles.set(filename, lines);
            return lines;
        } catch (e) {
            // 无法读取文件
            return new Array<String>();
        }
    }
} 