/**
 * @file unit_test_framework.qentl
 * @brief QEntL单元测试框架
 * 
 * 量子基因编码: QGC-COMPILER-TEST-UNIT-2024061901
 * 量子纠缠信道: QEC-COMPILER-TEST-01
 */

import "QEntL/core/error.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/array.qentl";
import "QEntL/core/map.qentl";
import "QEntL/core/system.qentl";
import "QEntL/vm/src/core/os_interface/logger.qentl";

/**
 * 测试结果状态
 */
export quantum_enum TestStatus {
    PASSED = 0,     // 测试通过
    FAILED = 1,     // 测试失败
    SKIPPED = 2,    // 测试跳过
    ERROR = 3       // 测试错误(非断言错误)
}

/**
 * 测试结果包装类
 */
export quantum_class TestResult {
    public {
        name: String;               // 测试名称
        status: TestStatus;         // 测试状态
        message: String;            // 结果消息
        duration: Integer;          // 执行时间(毫秒)
        assertions: Integer;        // 断言次数
        assertionsFailed: Integer;  // 失败的断言数
        stackTrace: String;         // 错误栈跟踪(如果有)
    }
    
    /**
     * @brief 构造函数
     * @param name 测试名称
     * @param status 测试状态
     * @param message 结果消息
     * @param duration 执行时间(毫秒)
     * @param assertions 断言次数
     * @param assertionsFailed 失败的断言数
     * @param stackTrace 错误栈跟踪
     */
    constructor(
        name: String, 
        status: TestStatus,
        message: String = "",
        duration: Integer = 0,
        assertions: Integer = 0,
        assertionsFailed: Integer = 0,
        stackTrace: String = ""
    ) {
        this.name = name;
        this.status = status;
        this.message = message;
        this.duration = duration;
        this.assertions = assertions;
        this.assertionsFailed = assertionsFailed;
        this.stackTrace = stackTrace;
    }
    
    /**
     * @brief 获取测试状态的字符串表示
     * @return 状态字符串
     */
    public function getStatusString(): String {
        switch (this.status) {
            case TestStatus.PASSED:
                return "通过";
            case TestStatus.FAILED:
                return "失败";
            case TestStatus.SKIPPED:
                return "跳过";
            case TestStatus.ERROR:
                return "错误";
            default:
                return "未知";
        }
    }
}

/**
 * 测试套件结果包装类
 */
export quantum_class TestSuiteResult {
    public {
        name: String;                   // 套件名称
        passedCount: Integer;           // 通过的测试数量
        failedCount: Integer;           // 失败的测试数量
        skippedCount: Integer;          // 跳过的测试数量
        errorCount: Integer;            // 错误的测试数量
        totalDuration: Integer;         // 总执行时间(毫秒)
        results: Array<TestResult>;     // 单个测试结果
    }
    
    /**
     * @brief 构造函数
     * @param name 套件名称
     */
    constructor(name: String) {
        this.name = name;
        this.passedCount = 0;
        this.failedCount = 0;
        this.skippedCount = 0;
        this.errorCount = 0;
        this.totalDuration = 0;
        this.results = new Array<TestResult>();
    }
    
    /**
     * @brief 添加测试结果
     * @param result 测试结果
     */
    public function addResult(result: TestResult): void {
        this.results.push(result);
        this.totalDuration += result.duration;
        
        // 更新计数
        switch (result.status) {
            case TestStatus.PASSED:
                this.passedCount++;
                break;
            case TestStatus.FAILED:
                this.failedCount++;
                break;
            case TestStatus.SKIPPED:
                this.skippedCount++;
                break;
            case TestStatus.ERROR:
                this.errorCount++;
                break;
        }
    }
    
    /**
     * @brief 获取测试总数
     * @return 测试总数
     */
    public function getTotalCount(): Integer {
        return this.results.length;
    }
    
    /**
     * @brief 检查套件是否全部通过
     * @return 是否全部通过
     */
    public function isPassed(): Boolean {
        return this.failedCount == 0 && this.errorCount == 0;
    }
}

/**
 * 断言工具类
 */
export quantum_class Assertions {
    private {
        assertionCount: Integer;
        failedCount: Integer;
        lastFailureMessage: String;
    }
    
    /**
     * @brief 构造函数
     */
    constructor() {
        this.assertionCount = 0;
        this.failedCount = 0;
        this.lastFailureMessage = "";
    }
    
    /**
     * @brief 断言两个值相等
     * @param expected 期望值
     * @param actual 实际值
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertEquals<T>(
        expected: T,
        actual: T,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        if (expected != actual) {
            let failMsg = message != "" ? message : 
                `预期: <${expected}>, 实际: <${actual}>`;
            this.recordFailure(failMsg);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 断言两个值不相等
     * @param unexpected 不期望的值
     * @param actual 实际值
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertNotEquals<T>(
        unexpected: T,
        actual: T,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        if (unexpected == actual) {
            let failMsg = message != "" ? message : 
                `值不应该等于: <${unexpected}>`;
            this.recordFailure(failMsg);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 断言布尔值为真
     * @param condition 条件
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertTrue(
        condition: Boolean,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        if (!condition) {
            let failMsg = message != "" ? message : "条件应该为真";
            this.recordFailure(failMsg);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 断言布尔值为假
     * @param condition 条件
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertFalse(
        condition: Boolean,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        if (condition) {
            let failMsg = message != "" ? message : "条件应该为假";
            this.recordFailure(failMsg);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 断言值为null
     * @param value 值
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertNull<T>(
        value: T?,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        if (value != null) {
            let failMsg = message != "" ? message : 
                `值应该为null, 实际: <${value}>`;
            this.recordFailure(failMsg);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 断言值不为null
     * @param value 值
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertNotNull<T>(
        value: T?,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        if (value == null) {
            let failMsg = message != "" ? message : "值不应该为null";
            this.recordFailure(failMsg);
            return false;
        }
        
        return true;
    }
    
    /**
     * @brief 断言两个数组内容相等
     * @param expected 期望数组
     * @param actual 实际数组
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertArrayEquals<T>(
        expected: Array<T>,
        actual: Array<T>,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        if (expected.length != actual.length) {
            let failMsg = message != "" ? message : 
                `数组长度不同: 预期 ${expected.length}, 实际 ${actual.length}`;
            this.recordFailure(failMsg);
            return false;
        }
        
        for (let i = 0; i < expected.length; i++) {
            if (expected[i] != actual[i]) {
                let failMsg = message != "" ? message : 
                    `数组元素在索引 ${i} 不同: 预期 <${expected[i]}>, 实际 <${actual[i]}>`;
                this.recordFailure(failMsg);
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * @brief 断言抛出指定类型的错误
     * @param errorClass 错误类型
     * @param func 要执行的函数
     * @param message 断言失败时的消息
     * @return 断言是否通过
     */
    public function assertThrows(
        errorClass: any,
        func: Function,
        message: String = ""
    ): Boolean {
        this.assertionCount++;
        
        try {
            func();
            
            // 如果没有抛出错误,断言失败
            let failMsg = message != "" ? message : 
                `预期抛出 ${errorClass.name} 错误, 但没有抛出任何错误`;
            this.recordFailure(failMsg);
            return false;
        } catch (error) {
            // 检查错误类型
            if (!(error instanceof errorClass)) {
                let failMsg = message != "" ? message : 
                    `预期抛出 ${errorClass.name} 错误, 实际抛出 ${error.constructor.name}`;
                this.recordFailure(failMsg);
                return false;
            }
            
            return true;
        }
    }
    
    /**
     * @brief 记录断言失败
     * @param message 失败消息
     */
    private function recordFailure(message: String): void {
        this.failedCount++;
        this.lastFailureMessage = message;
    }
    
    /**
     * @brief 获取断言次数
     * @return 断言次数
     */
    public function getAssertionCount(): Integer {
        return this.assertionCount;
    }
    
    /**
     * @brief 获取失败次数
     * @return 失败次数
     */
    public function getFailedCount(): Integer {
        return this.failedCount;
    }
    
    /**
     * @brief 获取最后一次失败消息
     * @return 失败消息
     */
    public function getLastFailureMessage(): String {
        return this.lastFailureMessage;
    }
    
    /**
     * @brief 重置断言状态
     */
    public function reset(): void {
        this.assertionCount = 0;
        this.failedCount = 0;
        this.lastFailureMessage = "";
    }
}

/**
 * 测试用例执行上下文
 */
export quantum_class TestContext {
    public {
        assertions: Assertions;     // 断言工具
        logger: Logger;             // 日志记录器
        data: Map<String, any>;     // 测试数据
    }
    
    /**
     * @brief 构造函数
     * @param logger 日志记录器
     */
    constructor(logger: Logger) {
        this.assertions = new Assertions();
        this.logger = logger;
        this.data = new Map<String, any>();
    }
    
    /**
     * @brief 设置测试数据
     * @param key 键
     * @param value 值
     */
    public function setData(key: String, value: any): void {
        this.data.set(key, value);
    }
    
    /**
     * @brief 获取测试数据
     * @param key 键
     * @return 值
     */
    public function getData(key: String): any {
        return this.data.get(key);
    }
    
    /**
     * @brief 重置上下文
     */
    public function reset(): void {
        this.assertions.reset();
        this.data.clear();
    }
}

/**
 * 测试用例类型定义
 */
export type TestFunction = (context: TestContext) => void;
export type BeforeFunction = (context: TestContext) => void;
export type AfterFunction = (context: TestContext) => void;

/**
 * 测试用例
 */
export quantum_class TestCase {
    public {
        name: String;               // 测试名称
        testFunc: TestFunction;     // 测试函数
        enabled: Boolean;           // 是否启用
    }
    
    /**
     * @brief 构造函数
     * @param name 测试名称
     * @param testFunc 测试函数
     * @param enabled 是否启用
     */
    constructor(
        name: String,
        testFunc: TestFunction,
        enabled: Boolean = true
    ) {
        this.name = name;
        this.testFunc = testFunc;
        this.enabled = enabled;
    }
}

/**
 * @class QEntLUnitTest
 * @brief QEntL单元测试框架
 */
export quantum_class QEntLUnitTest {
    private {
        suiteName: String;                      // 测试套件名称
        tests: Array<TestCase>;                 // 测试用例
        beforeEachFuncs: Array<BeforeFunction>; // 每个测试前执行的函数
        afterEachFuncs: Array<AfterFunction>;   // 每个测试后执行的函数
        beforeAllFunc: BeforeFunction?;         // 所有测试前执行的函数
        afterAllFunc: AfterFunction?;           // 所有测试后执行的函数
        logger: Logger;                         // 日志记录器
        context: TestContext;                   // 测试上下文
        verbose: Boolean;                       // 是否详细输出
        results: TestSuiteResult;               // 测试结果
    }
    
    /**
     * @brief 构造函数
     * @param suiteName 测试套件名称
     * @param logger 日志记录器
     * @param verbose 是否详细输出
     */
    constructor(
        suiteName: String,
        logger: Logger,
        verbose: Boolean = false
    ) {
        this.suiteName = suiteName;
        this.tests = new Array<TestCase>();
        this.beforeEachFuncs = new Array<BeforeFunction>();
        this.afterEachFuncs = new Array<AfterFunction>();
        this.beforeAllFunc = null;
        this.afterAllFunc = null;
        this.logger = logger;
        this.context = new TestContext(logger);
        this.verbose = verbose;
        this.results = new TestSuiteResult(suiteName);
    }
    
    /**
     * @brief 添加测试用例
     * @param name 测试名称
     * @param testFunc 测试函数
     * @param enabled 是否启用
     */
    public function addTest(
        name: String,
        testFunc: TestFunction,
        enabled: Boolean = true
    ): void {
        let testCase = new TestCase(name, testFunc, enabled);
        this.tests.push(testCase);
    }
    
    /**
     * @brief 设置所有测试前执行的函数
     * @param func 要执行的函数
     */
    public function beforeAll(func: BeforeFunction): void {
        this.beforeAllFunc = func;
    }
    
    /**
     * @brief 设置所有测试后执行的函数
     * @param func 要执行的函数
     */
    public function afterAll(func: AfterFunction): void {
        this.afterAllFunc = func;
    }
    
    /**
     * @brief 添加每个测试前执行的函数
     * @param func 要执行的函数
     */
    public function beforeEach(func: BeforeFunction): void {
        this.beforeEachFuncs.push(func);
    }
    
    /**
     * @brief 添加每个测试后执行的函数
     * @param func 要执行的函数
     */
    public function afterEach(func: AfterFunction): void {
        this.afterEachFuncs.push(func);
    }
    
    /**
     * @brief 运行所有测试
     * @return 测试套件结果
     */
    public function runTests(): TestSuiteResult {
        this.results = new TestSuiteResult(this.suiteName);
        
        if (this.tests.length == 0) {
            this.logger.log(LogLevel.WARNING, `测试套件 "${this.suiteName}" 没有测试用例`);
            return this.results;
        }
        
        this.logger.log(LogLevel.INFO, `开始运行测试套件: "${this.suiteName}"`);
        
        // 运行beforeAll函数
        if (this.beforeAllFunc) {
            try {
                this.beforeAllFunc(this.context);
            } catch (error) {
                this.logger.log(LogLevel.ERROR, `beforeAll 函数失败: ${error}`);
                // 如果beforeAll失败，标记所有测试为错误
                for (let i = 0; i < this.tests.length; i++) {
                    let testCase = this.tests[i];
                    let result = new TestResult(
                        testCase.name,
                        TestStatus.ERROR,
                        "beforeAll 函数失败: " + error
                    );
                    this.results.addResult(result);
                }
                return this.results;
            }
        }
        
        // 运行每个测试
        for (let i = 0; i < this.tests.length; i++) {
            let testCase = this.tests[i];
            
            if (!testCase.enabled) {
                let result = new TestResult(
                    testCase.name,
                    TestStatus.SKIPPED,
                    "测试被禁用"
                );
                this.results.addResult(result);
                
                if (this.verbose) {
                    this.logger.log(LogLevel.INFO, `跳过 ${testCase.name}`);
                }
                
                continue;
            }
            
            let testResult = this.runTest(testCase);
            this.results.addResult(testResult);
            
            if (this.verbose || testResult.status != TestStatus.PASSED) {
                let statusMsg = testResult.getStatusString();
                let logLevel = testResult.status == TestStatus.PASSED ? 
                    LogLevel.INFO : LogLevel.ERROR;
                
                this.logger.log(logLevel, 
                    `${testCase.name}: ${statusMsg} (${testResult.duration}ms)` +
                    (testResult.message ? ` - ${testResult.message}` : "")
                );
                
                if (testResult.stackTrace) {
                    this.logger.log(logLevel, testResult.stackTrace);
                }
            }
        }
        
        // 运行afterAll函数
        if (this.afterAllFunc) {
            try {
                this.afterAllFunc(this.context);
            } catch (error) {
                this.logger.log(LogLevel.ERROR, `afterAll 函数失败: ${error}`);
            }
        }
        
        // 输出总结
        this.logger.log(LogLevel.INFO, 
            `测试套件 "${this.suiteName}" 完成: ` +
            `共 ${this.results.getTotalCount()} 个测试, ` +
            `${this.results.passedCount} 通过, ` +
            `${this.results.failedCount} 失败, ` +
            `${this.results.skippedCount} 跳过, ` +
            `${this.results.errorCount} 错误`
        );
        
        return this.results;
    }
    
    /**
     * @brief 运行单个测试
     * @param testCase 测试用例
     * @return 测试结果
     */
    private function runTest(testCase: TestCase): TestResult {
        if (this.verbose) {
            this.logger.log(LogLevel.INFO, `运行测试: ${testCase.name}`);
        }
        
        // 重置上下文
        this.context.reset();
        
        // 运行beforeEach函数
        try {
            for (let i = 0; i < this.beforeEachFuncs.length; i++) {
                this.beforeEachFuncs[i](this.context);
            }
        } catch (error) {
            return new TestResult(
                testCase.name,
                TestStatus.ERROR,
                "beforeEach 函数失败: " + error,
                0,
                0,
                0,
                error.stack
            );
        }
        
        // 运行测试
        let startTime = System.currentTimeMillis();
        try {
            testCase.testFunc(this.context);
            
            let endTime = System.currentTimeMillis();
            let duration = endTime - startTime;
            
            // 检查断言结果
            let assertions = this.context.assertions;
            let assertionCount = assertions.getAssertionCount();
            let failedCount = assertions.getFailedCount();
            
            if (failedCount > 0) {
                return new TestResult(
                    testCase.name,
                    TestStatus.FAILED,
                    assertions.getLastFailureMessage(),
                    duration,
                    assertionCount,
                    failedCount
                );
            } else {
                return new TestResult(
                    testCase.name,
                    TestStatus.PASSED,
                    "",
                    duration,
                    assertionCount,
                    0
                );
            }
        } catch (error) {
            let endTime = System.currentTimeMillis();
            let duration = endTime - startTime;
            
            return new TestResult(
                testCase.name,
                TestStatus.ERROR,
                "测试抛出异常: " + error,
                duration,
                this.context.assertions.getAssertionCount(),
                this.context.assertions.getFailedCount(),
                error.stack
            );
        } finally {
            // 运行afterEach函数
            try {
                for (let i = 0; i < this.afterEachFuncs.length; i++) {
                    this.afterEachFuncs[i](this.context);
                }
            } catch (error) {
                this.logger.log(LogLevel.WARNING, 
                    `afterEach 函数失败: ${error}`);
            }
        }
    }
    
    /**
     * @brief 生成测试报告
     * @return 测试报告内容
     */
    public function generateReport(): String {
        if (this.results.getTotalCount() == 0) {
            return "未运行任何测试";
        }
        
        let report = `测试套件: ${this.suiteName}\n`;
        report += `=======================================\n`;
        report += `总测试数: ${this.results.getTotalCount()}\n`;
        report += `通过: ${this.results.passedCount}\n`;
        report += `失败: ${this.results.failedCount}\n`;
        report += `跳过: ${this.results.skippedCount}\n`;
        report += `错误: ${this.results.errorCount}\n`;
        report += `总时间: ${this.results.totalDuration}ms\n\n`;
        
        // 添加失败和错误的测试详情
        let hasDetails = false;
        
        for (let i = 0; i < this.results.results.length; i++) {
            let result = this.results.results[i];
            
            if (result.status == TestStatus.FAILED || result.status == TestStatus.ERROR) {
                if (!hasDetails) {
                    report += `失败和错误详情:\n`;
                    report += `=======================================\n`;
                    hasDetails = true;
                }
                
                report += `${result.name}: ${result.getStatusString()}\n`;
                report += `  - 消息: ${result.message}\n`;
                
                if (result.stackTrace) {
                    let stackLines = result.stackTrace.split("\n");
                    report += `  - 堆栈跟踪:\n`;
                    for (let j = 0; j < stackLines.length; j++) {
                        report += `    ${stackLines[j]}\n`;
                    }
                }
                
                report += `  - 执行时间: ${result.duration}ms\n`;
                report += `  - 断言次数: ${result.assertions} (失败: ${result.assertionsFailed})\n`;
                report += `---------------------------------------\n`;
            }
        }
        
        return report;
    }
    
    /**
     * @brief 获取测试结果
     * @return 测试套件结果
     */
    public function getResults(): TestSuiteResult {
        return this.results;
    }
    
    /**
     * @brief 清空测试用例
     */
    public function clearTests(): void {
        this.tests = new Array<TestCase>();
    }
}

/**
 * @class QEntLUnitTestFactory
 * @brief 单元测试框架工厂类
 */
export quantum_class QEntLUnitTestFactory {
    /**
     * @brief 创建测试框架实例
     * @param suiteName 测试套件名称
     * @param logger 日志记录器
     * @param verbose 是否详细输出
     * @return 测试框架实例
     */
    public static function create(
        suiteName: String,
        logger: Logger,
        verbose: Boolean = false
    ): QEntLUnitTest {
        return new QEntLUnitTest(suiteName, logger, verbose);
    }
    
    /**
     * @brief 创建详细测试框架实例
     * @param suiteName 测试套件名称
     * @param logger 日志记录器
     * @return 测试框架实例
     */
    public static function createVerbose(
        suiteName: String,
        logger: Logger
    ): QEntLUnitTest {
        return new QEntLUnitTest(suiteName, logger, true);
    }
} 