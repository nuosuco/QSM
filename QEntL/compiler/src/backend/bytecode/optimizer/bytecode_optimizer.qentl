/**
 * @file bytecode_optimizer.qentl
 * @brief 量子字节码优化器
 * 
 * 量子基因编码: QGC-COMPILER-OPTIMIZER-2024062001
 * 量子纠缠信道: QEC-COMPILER-BACKEND-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/map.qentl";
import "QEntL/core/debug.qentl";
import "QEntL/compiler/src/backend/bytecode/bytecode_generator.qentl";

/**
 * @enum OptimizationLevel
 * @brief 优化级别枚举
 */
quantum_enum OptimizationLevel {
    NONE,     // 不进行优化
    BASIC,    // 基本优化
    NORMAL,   // 正常优化
    AGGRESSIVE // 激进优化
}

/**
 * @class OptimizationInfo
 * @brief 优化信息收集类
 */
quantum_class OptimizationInfo {
    public {
        totalInstructions: Integer = 0;    // 总指令数
        removedInstructions: Integer = 0;  // 删除的指令数
        replacedInstructions: Integer = 0; // 替换的指令数
        blocksMerged: Integer = 0;         // 合并的代码块数
        quantumOpsOptimized: Integer = 0;  // 优化的量子操作数
        entanglementOpsOptimized: Integer = 0; // 优化的纠缠操作数
    }
    
    /**
     * @brief 生成优化报告
     */
    public function generateReport(): String {
        let report = "量子字节码优化报告:\n";
        report += `- 总指令数: ${this.totalInstructions}\n`;
        report += `- 移除指令数: ${this.removedInstructions}\n`;
        report += `- 替换指令数: ${this.replacedInstructions}\n`;
        report += `- 合并代码块数: ${this.blocksMerged}\n`;
        report += `- 优化量子操作数: ${this.quantumOpsOptimized}\n`;
        report += `- 优化纠缠操作数: ${this.entanglementOpsOptimized}\n`;
        
        // 计算总体优化率
        let optimizationRate = 0;
        if (this.totalInstructions > 0) {
            optimizationRate = (this.removedInstructions + this.replacedInstructions) / this.totalInstructions * 100;
        }
        report += `- 总体优化率: ${optimizationRate.toFixed(2)}%\n`;
        
        return report;
    }
    
    /**
     * @brief 重置信息
     */
    public function reset(): void {
        this.totalInstructions = 0;
        this.removedInstructions = 0;
        this.replacedInstructions = 0;
        this.blocksMerged = 0;
        this.quantumOpsOptimized = 0;
        this.entanglementOpsOptimized = 0;
    }
}

/**
 * @class BytecodeOptimizationPass
 * @brief 字节码优化通道基类
 */
quantum_abstract_class BytecodeOptimizationPass {
    protected {
        info: OptimizationInfo;  // 优化信息
    }
    
    /**
     * @brief 构造函数
     */
    constructor(info: OptimizationInfo) {
        this.info = info;
    }
    
    /**
     * @brief 执行优化
     * @param bytecode 要优化的字节码
     * @return 是否进行了任何优化
     */
    public abstract function optimize(bytecode: BytecodeModule): Boolean;
    
    /**
     * @brief 获取优化通道名称
     */
    public abstract function getName(): String;
}

/**
 * @class DeadCodeEliminationPass
 * @brief 死代码消除优化通道
 */
quantum_class DeadCodeEliminationPass extends BytecodeOptimizationPass {
    /**
     * @brief 构造函数
     */
    constructor(info: OptimizationInfo) {
        super(info);
    }
    
    /**
     * @brief 执行优化
     */
    public override function optimize(bytecode: BytecodeModule): Boolean {
        let modified = false;
        
        // 对每个函数进行处理
        for (let func of bytecode.functions) {
            // 跳过入口函数，避免删除重要代码
            if (func.isEntryPoint) {
                continue;
            }
            
            // 收集活跃标记点
            let activeLabels = this.collectActiveLabels(func);
            
            // 对所有代码块进行处理
            for (let block of func.blocks) {
                let newInstructions = new Array<BytecodeInstruction>();
                let currentInstructions = block.instructions;
                this.info.totalInstructions += currentInstructions.length;
                
                // 过滤指令
                for (let instruction of currentInstructions) {
                    if (this.isDeadInstruction(instruction, activeLabels)) {
                        this.info.removedInstructions++;
                        modified = true;
                    } else {
                        newInstructions.push(instruction);
                    }
                }
                
                // 用过滤后的指令替换原指令
                if (currentInstructions.length != newInstructions.length) {
                    block.instructions = newInstructions;
                }
            }
            
            // 移除不可达的代码块
            let reachableBlocks = this.collectReachableBlocks(func);
            let newBlocks = new Array<BytecodeBlock>();
            
            for (let block of func.blocks) {
                if (reachableBlocks.has(block.label)) {
                    newBlocks.push(block);
                } else {
                    this.info.removedInstructions += block.instructions.length;
                    this.info.blocksMerged++;
                    modified = true;
                }
            }
            
            if (func.blocks.length != newBlocks.length) {
                func.blocks = newBlocks;
            }
        }
        
        return modified;
    }
    
    /**
     * @brief 获取优化通道名称
     */
    public override function getName(): String {
        return "死代码消除";
    }
    
    /**
     * @brief 收集活跃标记点
     */
    private function collectActiveLabels(func: BytecodeFunction): Set<String> {
        let labels = new Set<String>();
        
        for (let block of func.blocks) {
            // 每个块的标签都是活跃的
            labels.add(block.label);
            
            // 检查跳转指令引用的标签
            for (let instruction of block.instructions) {
                if (instruction.isJump() || instruction.isConditionalJump()) {
                    labels.add(instruction.operands[0]);
                }
            }
        }
        
        return labels;
    }
    
    /**
     * @brief 收集可达的代码块
     */
    private function collectReachableBlocks(func: BytecodeFunction): Set<String> {
        let reachable = new Set<String>();
        let queue = new Array<String>();
        
        // 从入口块开始
        if (func.blocks.length > 0) {
            queue.push(func.blocks[0].label);
        }
        
        // 广度优先遍历
        while (queue.length > 0) {
            let label = queue.shift();
            
            if (reachable.has(label)) {
                continue;
            }
            
            reachable.add(label);
            
            // 查找此块可达的其他块
            for (let block of func.blocks) {
                if (block.label === label) {
                    for (let instruction of block.instructions) {
                        if (instruction.isJump()) {
                            // 无条件跳转
                            queue.push(instruction.operands[0]);
                        } else if (instruction.isConditionalJump()) {
                            // 条件跳转
                            queue.push(instruction.operands[0]);
                            
                            // 如果不是块中的最后一条指令，下一块也是可达的
                            let lastInstructionIndex = block.instructions.length - 1;
                            if (block.instructions.indexOf(instruction) < lastInstructionIndex) {
                                // 查找下一个块
                                let nextBlockIndex = func.blocks.indexOf(block) + 1;
                                if (nextBlockIndex < func.blocks.length) {
                                    queue.push(func.blocks[nextBlockIndex].label);
                                }
                            }
                        } else if (instruction.isReturn()) {
                            // 返回指令，不添加后继块
                            break;
                        }
                    }
                    break;
                }
            }
        }
        
        return reachable;
    }
    
    /**
     * @brief 判断指令是否是死代码
     */
    private function isDeadInstruction(instruction: BytecodeInstruction, activeLabels: Set<String>): Boolean {
        // 跳转标记是活跃的
        if (instruction.isLabel()) {
            return !activeLabels.has(instruction.operands[0]);
        }
        
        // 如果是无副作用的操作，且结果未被使用，则为死代码
        // 这需要更复杂的分析，简单实现可以考虑：
        // 1. 没有副作用的计算指令
        // 2. 不影响控制流的指令
        // 3. 不会被后续指令引用的结果
        
        // 简单实现：仅移除空指令、无操作指令和未使用的调试信息
        return instruction.isNop() || 
               (instruction.isDebug() && !activeLabels.has(instruction.operands[0]));
    }
}

/**
 * @class ConstantFoldingPass
 * @brief 常量折叠优化通道
 */
quantum_class ConstantFoldingPass extends BytecodeOptimizationPass {
    /**
     * @brief 构造函数
     */
    constructor(info: OptimizationInfo) {
        super(info);
    }
    
    /**
     * @brief 执行优化
     */
    public override function optimize(bytecode: BytecodeModule): Boolean {
        let modified = false;
        
        // 对每个函数进行处理
        for (let func of bytecode.functions) {
            // 对所有代码块进行处理
            for (let block of func.blocks) {
                let instructions = block.instructions;
                this.info.totalInstructions += instructions.length;
                
                for (let i = 0; i < instructions.length; i++) {
                    let instruction = instructions[i];
                    
                    // 检查当前指令是否可以常量折叠
                    if (this.canFoldConstant(instruction)) {
                        let result = this.foldConstant(instruction);
                        
                        if (result != null) {
                            // 替换为常量加载指令
                            instructions[i] = result;
                            this.info.replacedInstructions++;
                            modified = true;
                        }
                    }
                    
                    // 检查条件跳转是否可以优化
                    if (instruction.isConditionalJump() && i > 0) {
                        let prevInstruction = instructions[i - 1];
                        
                        // 如果前一条指令是常量加载
                        if (prevInstruction.isLoadConst()) {
                            let constValue = prevInstruction.operands[0];
                            let conditionValue = false;
                            
                            // 根据常量值确定条件
                            if (typeof constValue === "boolean") {
                                conditionValue = constValue;
                            } else if (typeof constValue === "number") {
                                conditionValue = constValue !== 0;
                            } else if (typeof constValue === "string") {
                                conditionValue = constValue.length > 0;
                            } else {
                                conditionValue = constValue != null;
                            }
                            
                            // 根据条件值优化跳转
                            if (conditionValue) {
                                // 条件为真，替换为无条件跳转
                                instructions[i] = new BytecodeInstruction(
                                    BytecodeOpCode.JUMP,
                                    [instruction.operands[0]]
                                );
                            } else {
                                // 条件为假，移除跳转
                                instructions[i] = new BytecodeInstruction(
                                    BytecodeOpCode.NOP,
                                    []
                                );
                            }
                            
                            this.info.replacedInstructions++;
                            modified = true;
                        }
                    }
                }
            }
        }
        
        return modified;
    }
    
    /**
     * @brief 获取优化通道名称
     */
    public override function getName(): String {
        return "常量折叠";
    }
    
    /**
     * @brief 检查指令是否可以常量折叠
     */
    private function canFoldConstant(instruction: BytecodeInstruction): Boolean {
        // 检查是否为二元数学运算
        if (instruction.isBinaryOp()) {
            // 需要两个操作数都是常量
            return instruction.operands.length >= 2 &&
                   this.isConstantValue(instruction.operands[0]) &&
                   this.isConstantValue(instruction.operands[1]);
        }
        
        // 检查是否为一元运算
        if (instruction.isUnaryOp()) {
            // 需要操作数是常量
            return instruction.operands.length >= 1 &&
                   this.isConstantValue(instruction.operands[0]);
        }
        
        return false;
    }
    
    /**
     * @brief 执行常量折叠
     */
    private function foldConstant(instruction: BytecodeInstruction): BytecodeInstruction? {
        let opcode = instruction.opcode;
        let operands = instruction.operands;
        
        // 处理二元运算
        if (instruction.isBinaryOp()) {
            let a = operands[0];
            let b = operands[1];
            let result;
            
            switch (opcode) {
                case BytecodeOpCode.ADD:
                    result = a + b;
                    break;
                case BytecodeOpCode.SUB:
                    result = a - b;
                    break;
                case BytecodeOpCode.MUL:
                    result = a * b;
                    break;
                case BytecodeOpCode.DIV:
                    if (b === 0) return null; // 避免除以零
                    result = a / b;
                    break;
                case BytecodeOpCode.MOD:
                    if (b === 0) return null; // 避免除以零
                    result = a % b;
                    break;
                case BytecodeOpCode.EQ:
                    result = a === b;
                    break;
                case BytecodeOpCode.NE:
                    result = a !== b;
                    break;
                case BytecodeOpCode.LT:
                    result = a < b;
                    break;
                case BytecodeOpCode.LE:
                    result = a <= b;
                    break;
                case BytecodeOpCode.GT:
                    result = a > b;
                    break;
                case BytecodeOpCode.GE:
                    result = a >= b;
                    break;
                case BytecodeOpCode.AND:
                    result = a && b;
                    break;
                case BytecodeOpCode.OR:
                    result = a || b;
                    break;
                default:
                    return null; // 不支持的操作
            }
            
            // 创建常量加载指令
            return new BytecodeInstruction(
                BytecodeOpCode.LOAD_CONST,
                [result]
            );
        }
        
        // 处理一元运算
        if (instruction.isUnaryOp()) {
            let a = operands[0];
            let result;
            
            switch (opcode) {
                case BytecodeOpCode.NEG:
                    result = -a;
                    break;
                case BytecodeOpCode.NOT:
                    result = !a;
                    break;
                default:
                    return null; // 不支持的操作
            }
            
            // 创建常量加载指令
            return new BytecodeInstruction(
                BytecodeOpCode.LOAD_CONST,
                [result]
            );
        }
        
        return null;
    }
    
    /**
     * @brief 检查值是否为常量
     */
    private function isConstantValue(value: Any): Boolean {
        // 简单实现：检查基本类型
        let type = typeof value;
        return type === "number" || type === "string" || type === "boolean" || value === null;
    }
}

/**
 * @class QuantumOperationOptimizationPass
 * @brief 量子操作优化通道
 */
quantum_class QuantumOperationOptimizationPass extends BytecodeOptimizationPass {
    /**
     * @brief 构造函数
     */
    constructor(info: OptimizationInfo) {
        super(info);
    }
    
    /**
     * @brief 执行优化
     */
    public override function optimize(bytecode: BytecodeModule): Boolean {
        let modified = false;
        
        // 对每个函数进行处理
        for (let func of bytecode.functions) {
            // 对所有代码块进行处理
            for (let block of func.blocks) {
                let instructions = block.instructions;
                this.info.totalInstructions += instructions.length;
                
                // 量子门合并优化
                modified = this.mergeQuantumGates(instructions) || modified;
                
                // 量子测量优化
                modified = this.optimizeQuantumMeasurements(instructions) || modified;
                
                // 纠缠操作优化
                modified = this.optimizeEntanglementOperations(instructions) || modified;
            }
        }
        
        return modified;
    }
    
    /**
     * @brief 获取优化通道名称
     */
    public override function getName(): String {
        return "量子操作优化";
    }
    
    /**
     * @brief 合并量子门操作
     */
    private function mergeQuantumGates(instructions: Array<BytecodeInstruction>): Boolean {
        let modified = false;
        
        // 创建新的指令列表
        let newInstructions = new Array<BytecodeInstruction>();
        
        for (let i = 0; i < instructions.length; i++) {
            let instruction = instructions[i];
            
            // 如果不是量子门操作，直接添加
            if (!this.isQuantumGateOp(instruction)) {
                newInstructions.push(instruction);
                continue;
            }
            
            // 查找连续的相同量子门操作
            let j = i + 1;
            while (j < instructions.length && 
                   this.canMergeQuantumGates(instruction, instructions[j])) {
                j++;
            }
            
            // 如果找到可合并的门
            if (j > i + 1) {
                // 合并量子门
                let mergedInstruction = this.mergeQuantumGateSequence(
                    instructions.slice(i, j)
                );
                
                newInstructions.push(mergedInstruction);
                this.info.quantumOpsOptimized += (j - i - 1);
                this.info.replacedInstructions += (j - i - 1);
                modified = true;
                
                // 跳过已处理的指令
                i = j - 1;
            } else {
                newInstructions.push(instruction);
            }
        }
        
        // 替换原指令列表
        if (modified) {
            instructions.length = 0;
            for (let instruction of newInstructions) {
                instructions.push(instruction);
            }
        }
        
        return modified;
    }
    
    /**
     * @brief 优化量子测量操作
     */
    private function optimizeQuantumMeasurements(instructions: Array<BytecodeInstruction>): Boolean {
        let modified = false;
        
        // 查找并优化不必要的测量
        for (let i = 0; i < instructions.length; i++) {
            let instruction = instructions[i];
            
            // 如果是量子测量操作
            if (this.isQuantumMeasureOp(instruction)) {
                // 检查是否可以优化掉
                if (this.canOptimizeMeasurement(instructions, i)) {
                    // 移除这条测量指令
                    instructions[i] = new BytecodeInstruction(
                        BytecodeOpCode.NOP,
                        []
                    );
                    
                    this.info.quantumOpsOptimized++;
                    this.info.replacedInstructions++;
                    modified = true;
                }
            }
        }
        
        return modified;
    }
    
    /**
     * @brief 优化纠缠操作
     */
    private function optimizeEntanglementOperations(instructions: Array<BytecodeInstruction>): Boolean {
        let modified = false;
        
        // 创建新的指令列表
        let newInstructions = new Array<BytecodeInstruction>();
        
        for (let i = 0; i < instructions.length; i++) {
            let instruction = instructions[i];
            
            // 如果不是纠缠操作，直接添加
            if (!this.isEntanglementOp(instruction)) {
                newInstructions.push(instruction);
                continue;
            }
            
            // 检查是否是重复的纠缠操作
            if (i > 0 && this.isRedundantEntanglement(instruction, newInstructions)) {
                // 跳过重复的纠缠操作
                this.info.entanglementOpsOptimized++;
                this.info.removedInstructions++;
                modified = true;
            } else {
                newInstructions.push(instruction);
            }
        }
        
        // 替换原指令列表
        if (modified) {
            instructions.length = 0;
            for (let instruction of newInstructions) {
                instructions.push(instruction);
            }
        }
        
        return modified;
    }
    
    /**
     * @brief 检查指令是否是量子门操作
     */
    private function isQuantumGateOp(instruction: BytecodeInstruction): Boolean {
        let opcode = instruction.opcode;
        return opcode === BytecodeOpCode.Q_X_GATE ||
               opcode === BytecodeOpCode.Q_Y_GATE ||
               opcode === BytecodeOpCode.Q_Z_GATE ||
               opcode === BytecodeOpCode.Q_H_GATE ||
               opcode === BytecodeOpCode.Q_CNOT_GATE ||
               opcode === BytecodeOpCode.Q_SWAP_GATE;
    }
    
    /**
     * @brief 检查指令是否是量子测量操作
     */
    private function isQuantumMeasureOp(instruction: BytecodeInstruction): Boolean {
        return instruction.opcode === BytecodeOpCode.Q_MEASURE;
    }
    
    /**
     * @brief 检查指令是否是纠缠操作
     */
    private function isEntanglementOp(instruction: BytecodeInstruction): Boolean {
        return instruction.opcode === BytecodeOpCode.Q_ENTANGLE;
    }
    
    /**
     * @brief 检查两个量子门是否可以合并
     */
    private function canMergeQuantumGates(gate1: BytecodeInstruction, gate2: BytecodeInstruction): Boolean {
        // 检查是否是相同类型的门
        if (gate1.opcode !== gate2.opcode) {
            return false;
        }
        
        // 特定门的合并规则
        switch (gate1.opcode) {
            case BytecodeOpCode.Q_X_GATE:
            case BytecodeOpCode.Q_Y_GATE:
            case BytecodeOpCode.Q_Z_GATE:
                // 相同比特的X/Y/Z门应用两次会抵消
                return gate1.operands[0] === gate2.operands[0];
                
            case BytecodeOpCode.Q_H_GATE:
                // 相同比特的H门应用两次会抵消
                return gate1.operands[0] === gate2.operands[0];
                
            default:
                // 其他门可能需要更复杂的规则
                return false;
        }
    }
    
    /**
     * @brief 合并量子门序列
     */
    private function mergeQuantumGateSequence(gates: Array<BytecodeInstruction>): BytecodeInstruction {
        // 简单实现：如果是偶数个相同的门，它们会抵消
        if (gates.length % 2 === 0) {
            // 返回NOP指令
            return new BytecodeInstruction(
                BytecodeOpCode.NOP,
                []
            );
        } else {
            // 返回单个门
            return gates[0];
        }
    }
    
    /**
     * @brief 检查测量操作是否可优化
     */
    private function canOptimizeMeasurement(instructions: Array<BytecodeInstruction>, index: Integer): Boolean {
        let measureInstruction = instructions[index];
        let qubitId = measureInstruction.operands[0];
        
        // 检查测量结果是否被使用
        let resultUsed = false;
        
        for (let i = index + 1; i < instructions.length; i++) {
            let instruction = instructions[i];
            
            // 如果遇到另一个对同一比特的操作，可以优化掉测量
            if (this.isQuantumOp(instruction) && this.operatesOnQubit(instruction, qubitId)) {
                return !resultUsed;
            }
            
            // 如果测量结果被使用，不能优化
            if (this.usesMeasurementResult(instruction, measureInstruction)) {
                resultUsed = true;
            }
            
            // 如果遇到控制流指令，保守处理
            if (instruction.isJump() || instruction.isConditionalJump() || instruction.isReturn()) {
                return false;
            }
        }
        
        // 如果到达函数末尾且结果未被使用，可以优化
        return !resultUsed;
    }
    
    /**
     * @brief 检查指令是否是任何量子操作
     */
    private function isQuantumOp(instruction: BytecodeInstruction): Boolean {
        return this.isQuantumGateOp(instruction) || 
               this.isQuantumMeasureOp(instruction) || 
               this.isEntanglementOp(instruction);
    }
    
    /**
     * @brief 检查指令是否操作特定的量子比特
     */
    private function operatesOnQubit(instruction: BytecodeInstruction, qubitId: String): Boolean {
        // 不同量子指令可能有不同的操作数格式
        if (instruction.operands.length > 0) {
            return instruction.operands[0] === qubitId;
        }
        return false;
    }
    
    /**
     * @brief 检查指令是否使用了测量结果
     */
    private function usesMeasurementResult(instruction: BytecodeInstruction, measureInstruction: BytecodeInstruction): Boolean {
        // 需要更详细的数据流分析
        // 简单实现：检查是否引用了测量结果寄存器
        if (measureInstruction.operands.length > 1) {
            let resultReg = measureInstruction.operands[1];
            
            // 检查指令是否使用这个寄存器
            for (let operand of instruction.operands) {
                if (operand === resultReg) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    /**
     * @brief 检查是否是重复的纠缠操作
     */
    private function isRedundantEntanglement(instruction: BytecodeInstruction, prevInstructions: Array<BytecodeInstruction>): Boolean {
        // 检查是否已经有相同的纠缠操作
        for (let i = prevInstructions.length - 1; i >= 0; i--) {
            let prev = prevInstructions[i];
            
            if (prev.opcode === BytecodeOpCode.Q_ENTANGLE) {
                // 检查是否是相同的纠缠对
                if ((prev.operands[0] === instruction.operands[0] && 
                     prev.operands[1] === instruction.operands[1]) ||
                    (prev.operands[0] === instruction.operands[1] && 
                     prev.operands[1] === instruction.operands[0])) {
                    return true;
                }
            }
            
            // 如果遇到可能改变纠缠状态的操作，停止搜索
            if (this.canChangeEntanglementState(prev)) {
                break;
            }
        }
        
        return false;
    }
    
    /**
     * @brief 检查指令是否可能改变纠缠状态
     */
    private function canChangeEntanglementState(instruction: BytecodeInstruction): Boolean {
        // 量子测量可能崩溃纠缠
        if (this.isQuantumMeasureOp(instruction)) {
            return true;
        }
        
        // 特定量子门可能改变纠缠
        if (instruction.opcode === BytecodeOpCode.Q_CNOT_GATE ||
            instruction.opcode === BytecodeOpCode.Q_SWAP_GATE) {
            return true;
        }
        
        // 函数调用可能改变纠缠
        if (instruction.opcode === BytecodeOpCode.CALL) {
            return true;
        }
        
        return false;
    }
}

/**
 * @class BytecodeOptimizer
 * @brief 字节码优化器主类
 */
quantum_class BytecodeOptimizer {
    private {
        optimizationLevel: OptimizationLevel;  // 优化级别
        passes: Array<BytecodeOptimizationPass>; // 优化通道列表
        info: OptimizationInfo;                // 优化信息收集
        maxIterations: Integer = 10;           // 最大迭代次数
    }
    
    /**
     * @brief 构造函数
     */
    constructor(level: OptimizationLevel = OptimizationLevel.NORMAL) {
        this.optimizationLevel = level;
        this.info = new OptimizationInfo();
        this.passes = new Array<BytecodeOptimizationPass>();
        
        // 根据优化级别注册优化通道
        this.registerOptimizationPasses();
    }
    
    /**
     * @brief 优化字节码
     * @param bytecode 要优化的字节码
     * @return 优化后的字节码
     */
    public function optimize(bytecode: BytecodeModule): BytecodeModule {
        Debug.log("开始字节码优化...");
        
        // 如果没有优化，直接返回
        if (this.optimizationLevel === OptimizationLevel.NONE || this.passes.length === 0) {
            Debug.log("跳过优化 (优化级别: NONE)");
            return bytecode;
        }
        
        // 重置优化信息
        this.info.reset();
        
        // 迭代应用优化通道，直到没有变化或达到最大迭代次数
        let iteration = 0;
        let changed = true;
        
        while (changed && iteration < this.maxIterations) {
            changed = false;
            iteration++;
            
            Debug.log(`优化迭代 ${iteration}...`);
            
            // 应用每个优化通道
            for (let pass of this.passes) {
                Debug.log(`应用优化通道: ${pass.getName()}`);
                let passChanged = pass.optimize(bytecode);
                changed = changed || passChanged;
                
                if (passChanged) {
                    Debug.log(`  - 通道 ${pass.getName()} 进行了优化`);
                }
            }
            
            if (!changed) {
                Debug.log("没有更多优化可应用，提前退出");
                break;
            }
        }
        
        // 输出优化报告
        Debug.log(this.info.generateReport());
        Debug.log(`总共优化迭代: ${iteration}`);
        
        return bytecode;
    }
    
    /**
     * @brief 设置优化级别
     */
    public function setOptimizationLevel(level: OptimizationLevel): void {
        if (this.optimizationLevel !== level) {
            this.optimizationLevel = level;
            
            // 重新注册优化通道
            this.passes = new Array<BytecodeOptimizationPass>();
            this.registerOptimizationPasses();
        }
    }
    
    /**
     * @brief 获取优化信息
     */
    public function getOptimizationInfo(): OptimizationInfo {
        return this.info;
    }
    
    /**
     * @brief 注册优化通道
     */
    private function registerOptimizationPasses(): void {
        // 根据优化级别注册不同的优化通道
        switch (this.optimizationLevel) {
            case OptimizationLevel.BASIC:
                // 基本优化
                this.passes.push(new DeadCodeEliminationPass(this.info));
                break;
                
            case OptimizationLevel.NORMAL:
                // 正常优化
                this.passes.push(new DeadCodeEliminationPass(this.info));
                this.passes.push(new ConstantFoldingPass(this.info));
                break;
                
            case OptimizationLevel.AGGRESSIVE:
                // 激进优化
                this.passes.push(new DeadCodeEliminationPass(this.info));
                this.passes.push(new ConstantFoldingPass(this.info));
                this.passes.push(new QuantumOperationOptimizationPass(this.info));
                break;
                
            default:
                // 不注册任何优化通道
                break;
        }
    }
} 