/**
 * @file linker_utils.qentl
 * @brief QEntL编译器链接器辅助工具
 * 
 * 量子基因编码: QGC-COMPILER-LINKER-UTILS-2024061901
 * 量子纠缠信道: QEC-COMPILER-BACKEND-01
 */

import "QEntL/core/error.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/array.qentl";
import "QEntL/core/map.qentl";
import "QEntL/compiler/src/backend/linker/linker.qentl";
import "QEntL/vm/src/core/os_interface/logger.qentl";

/**
 * 链接器重定位类型
 */
export quantum_enum RelocationType {
    // 绝对地址重定位，链接器用目标地址的绝对值替换重定位点
    ABSOLUTE = 1,
    
    // 相对地址重定位，链接器用当前位置到目标位置的相对偏移替换重定位点
    RELATIVE = 2,
    
    // 对全局偏移表(GOT)的间接引用
    GOT = 3,
    
    // 对过程链接表(PLT)的间接引用，用于函数调用
    PLT = 4
}

/**
 * @class RelocationResolver
 * @brief 处理链接器重定位的工具类
 */
export quantum_class RelocationResolver {
    private {
        logger: Logger;
    }
    
    /**
     * @brief 构造函数
     * @param logger 日志记录器
     */
    constructor(logger: Logger) {
        this.logger = logger;
    }
    
    /**
     * @brief 处理绝对地址重定位
     * @param section 需要重定位的节
     * @param offset 重定位点的偏移
     * @param targetAddress 目标地址的绝对值
     * @param size 重定位大小（字节数）
     */
    public function resolveAbsolute(
        section: ObjectSection,
        offset: UInteger,
        targetAddress: UInteger,
        size: UInteger
    ): void {
        if (size == 4) {
            // 32位绝对地址重定位
            writeUInt32(section.data, offset, targetAddress);
        } else if (size == 8) {
            // 64位绝对地址重定位
            writeUInt64(section.data, offset, targetAddress);
        } else {
            throw new Error(`不支持的重定位大小: ${size}`);
        }
    }
    
    /**
     * @brief 处理相对地址重定位
     * @param section 需要重定位的节
     * @param offset 重定位点的偏移
     * @param targetAddress 目标地址的绝对值
     * @param currentAddress 当前地址的绝对值
     * @param size 重定位大小（字节数）
     */
    public function resolveRelative(
        section: ObjectSection,
        offset: UInteger,
        targetAddress: UInteger,
        currentAddress: UInteger,
        size: UInteger
    ): void {
        // 计算相对偏移
        let relativeOffset = targetAddress - currentAddress;
        
        if (size == 4) {
            // 32位相对地址重定位
            writeInt32(section.data, offset, relativeOffset);
        } else if (size == 8) {
            // 64位相对地址重定位
            writeInt64(section.data, offset, relativeOffset);
        } else {
            throw new Error(`不支持的重定位大小: ${size}`);
        }
    }
    
    /**
     * @brief 处理所有重定位
     * @param section 需要重定位的节
     * @param symbolTable 符号表
     * @param sectionBaseAddress 节的基址
     */
    public function resolveAllRelocations(
        section: ObjectSection,
        symbolTable: Map<String, LinkerSymbol>,
        sectionBaseAddress: UInteger
    ): void {
        let relocations = section.relocations;
        
        for (let i = 0; i < relocations.length; i++) {
            let reloc = relocations[i];
            let symbolName = reloc.symbolName;
            let symbol = symbolTable.get(symbolName);
            
            if (!symbol) {
                throw new Error(`链接器错误: 无法解析符号 "${symbolName}"`);
            }
            
            if (!symbol.isResolved) {
                throw new Error(`链接器错误: 符号 "${symbolName}" 未解析`);
            }
            
            // 目标地址是符号的最终偏移
            let targetAddress = symbol.finalOffset;
            
            // 当前指令的绝对地址是节的基址 + 重定位点的偏移
            let currentAddress = sectionBaseAddress + reloc.offset;
            
            // 根据重定位类型应用不同的解析方法
            switch (reloc.type) {
                case RelocationType.ABSOLUTE:
                    this.resolveAbsolute(section, reloc.offset, targetAddress, reloc.size);
                    break;
                    
                case RelocationType.RELATIVE:
                    this.resolveRelative(section, reloc.offset, targetAddress, currentAddress, reloc.size);
                    break;
                    
                case RelocationType.GOT:
                    // TODO: 实现GOT重定位
                    throw new Error("GOT重定位尚未实现");
                    
                case RelocationType.PLT:
                    // TODO: 实现PLT重定位
                    throw new Error("PLT重定位尚未实现");
                    
                default:
                    throw new Error(`未知的重定位类型: ${reloc.type}`);
            }
            
            this.logger.log(LogLevel.DEBUG, `解析重定位: ${symbolName} 在偏移 ${reloc.offset} (类型 ${reloc.type})`);
        }
    }
    
    /**
     * @brief 写入32位无符号整数
     * @param data 数据数组
     * @param offset 偏移
     * @param value 值
     */
    private function writeUInt32(data: Array<UInt8>, offset: UInteger, value: UInteger): void {
        data[offset] = (value & 0xFF);
        data[offset + 1] = ((value >> 8) & 0xFF);
        data[offset + 2] = ((value >> 16) & 0xFF);
        data[offset + 3] = ((value >> 24) & 0xFF);
    }
    
    /**
     * @brief 写入64位无符号整数
     * @param data 数据数组
     * @param offset 偏移
     * @param value 值
     */
    private function writeUInt64(data: Array<UInt8>, offset: UInteger, value: UInteger): void {
        data[offset] = (value & 0xFF);
        data[offset + 1] = ((value >> 8) & 0xFF);
        data[offset + 2] = ((value >> 16) & 0xFF);
        data[offset + 3] = ((value >> 24) & 0xFF);
        data[offset + 4] = ((value >> 32) & 0xFF);
        data[offset + 5] = ((value >> 40) & 0xFF);
        data[offset + 6] = ((value >> 48) & 0xFF);
        data[offset + 7] = ((value >> 56) & 0xFF);
    }
    
    /**
     * @brief 写入32位有符号整数
     * @param data 数据数组
     * @param offset 偏移
     * @param value 值
     */
    private function writeInt32(data: Array<UInt8>, offset: UInteger, value: Integer): void {
        this.writeUInt32(data, offset, value);
    }
    
    /**
     * @brief 写入64位有符号整数
     * @param data 数据数组
     * @param offset 偏移
     * @param value 值
     */
    private function writeInt64(data: Array<UInt8>, offset: UInteger, value: Integer): void {
        this.writeUInt64(data, offset, value);
    }
}

/**
 * @class SymbolTableBuilder
 * @brief 帮助构建和管理链接器符号表的工具类
 */
export quantum_class SymbolTableBuilder {
    private {
        symbolTable: Map<String, LinkerSymbol>;
        logger: Logger;
    }
    
    /**
     * @brief 构造函数
     * @param logger 日志记录器
     */
    constructor(logger: Logger) {
        this.symbolTable = new Map<String, LinkerSymbol>();
        this.logger = logger;
    }
    
    /**
     * @brief 获取符号表
     * @return 符号表
     */
    public function getSymbolTable(): Map<String, LinkerSymbol> {
        return this.symbolTable;
    }
    
    /**
     * @brief 从目标文件中添加符号
     * @param objFile 目标文件
     */
    public function addSymbolsFromObjectFile(objFile: ObjectFile): void {
        let symbols = objFile.symbols;
        
        for (let i = 0; i < symbols.length; i++) {
            let symbol = symbols[i];
            
            // 如果是本地符号，直接添加
            if (!symbol.isGlobal() && !symbol.isWeak()) {
                this.symbolTable.set(symbol.name, symbol);
                continue;
            }
            
            // 检查符号是否已经在表中
            if (this.symbolTable.has(symbol.name)) {
                let existingSymbol = this.symbolTable.get(symbol.name);
                
                // 解决符号冲突
                if (this.resolveSymbolConflict(existingSymbol, symbol)) {
                    // 如果返回true，使用新符号
                    this.symbolTable.set(symbol.name, symbol);
                    this.logger.log(LogLevel.DEBUG, `符号冲突解决: "${symbol.name}" 使用来自 ${symbol.ownerFile} 的定义`);
                }
            } else {
                // 新符号，直接添加
                this.symbolTable.set(symbol.name, symbol);
            }
        }
    }
    
    /**
     * @brief 解决符号冲突
     * @param existing 已存在的符号
     * @param newSymbol 新符号
     * @return 是否使用新符号
     */
    private function resolveSymbolConflict(existing: LinkerSymbol, newSymbol: LinkerSymbol): Boolean {
        // 如果已存在的是未定义的，而新的是定义的，使用新的
        if (existing.isExternal() && !newSymbol.isExternal()) {
            return true;
        }
        
        // 如果已存在的是弱链接，而新的是强链接，使用新的
        if (existing.isWeak() && newSymbol.isGlobal()) {
            return true;
        }
        
        // 如果已存在的是定义的，而新的是未定义的，保留已存在的
        if (!existing.isExternal() && newSymbol.isExternal()) {
            return false;
        }
        
        // 如果两个都是定义的，且两个都是强链接，报错
        if (!existing.isExternal() && !newSymbol.isExternal() && 
            existing.isGlobal() && newSymbol.isGlobal()) {
            throw new Error(
                `符号 "${existing.name}" 在 ${existing.ownerFile} 和 ${newSymbol.ownerFile} 中重复定义`
            );
        }
        
        // 默认保留已存在的
        return false;
    }
    
    /**
     * @brief 检查未解析的符号
     */
    public function checkUnresolvedSymbols(): void {
        this.symbolTable.forEach((name, symbol) => {
            if (symbol.isExternal() && !symbol.isResolved) {
                throw new Error(`未解析的符号: "${name}"`);
            }
        });
    }
}

/**
 * @class ExecutableBuilder
 * @brief 帮助构建可执行文件的工具类
 */
export quantum_class ExecutableBuilder {
    private {
        logger: Logger;
    }
    
    /**
     * @brief 构造函数
     * @param logger 日志记录器
     */
    constructor(logger: Logger) {
        this.logger = logger;
    }
    
    /**
     * @brief 写入可执行文件头部
     * @param output 输出数组
     * @param entryPoint 入口点地址
     * @param codeSize 代码段大小
     * @param dataSize 数据段大小
     * @param entanglementSize 量子纠缠段大小
     * @param minQuantumCapability 最低量子能力要求
     */
    public function writeExecutableHeader(
        output: Array<UInt8>,
        entryPoint: UInteger,
        codeSize: UInteger,
        dataSize: UInteger,
        entanglementSize: UInteger,
        minQuantumCapability: UInteger
    ): void {
        // 魔数: "QEXE"
        output.push(0x51); // 'Q'
        output.push(0x45); // 'E'
        output.push(0x58); // 'X'
        output.push(0x45); // 'E'
        
        // 文件格式版本
        this.writeUInt32(output, 1); // 版本1
        
        // 入口点
        this.writeUInt64(output, entryPoint);
        
        // 段大小
        this.writeUInt64(output, codeSize);        // 代码段大小
        this.writeUInt64(output, dataSize);        // 数据段大小
        this.writeUInt64(output, entanglementSize); // 量子纠缠段大小
        
        // 最低量子能力要求
        this.writeUInt32(output, minQuantumCapability);
        
        // 保留区域 (32字节)
        for (let i = 0; i < 32; i++) {
            output.push(0);
        }
    }
    
    /**
     * @brief 写入32位无符号整数
     * @param output 输出数组
     * @param value 值
     */
    private function writeUInt32(output: Array<UInt8>, value: UInteger): void {
        output.push(value & 0xFF);
        output.push((value >> 8) & 0xFF);
        output.push((value >> 16) & 0xFF);
        output.push((value >> 24) & 0xFF);
    }
    
    /**
     * @brief 写入64位无符号整数
     * @param output 输出数组
     * @param value 值
     */
    private function writeUInt64(output: Array<UInt8>, value: UInteger): void {
        output.push(value & 0xFF);
        output.push((value >> 8) & 0xFF);
        output.push((value >> 16) & 0xFF);
        output.push((value >> 24) & 0xFF);
        output.push((value >> 32) & 0xFF);
        output.push((value >> 40) & 0xFF);
        output.push((value >> 48) & 0xFF);
        output.push((value >> 56) & 0xFF);
    }
} 