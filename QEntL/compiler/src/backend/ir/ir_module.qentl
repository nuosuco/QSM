/**
 * @file ir_module.qentl
 * @brief IR模块定义
 * 
 * 量子基因编码: QGC-COMPILER-IR-MODULE-2024061901
 * 量子纠缠信道: QEC-COMPILER-BACKEND-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/map.qentl";
import "QEntL/compiler/src/backend/ir/ir_node.qentl";

/**
 * @class IRModule
 * @brief IR模块类，表示一个编译单元
 */
quantum_class IRModule {
    public {
        name: String;                // 模块名称
        functions: Array<FunctionIRNode>; // 函数列表
        globals: Array<IRNode>;      // 全局变量列表
        nextId: Integer;             // 下一个分配的ID
        sourceFile: String;          // 源文件名
        comments: Array<String>;     // 注释信息
        metaData: Map<String, Any>;  // 模块元数据
    }
    
    /**
     * @brief 构造函数
     * @param name 模块名称
     * @param sourceFile 源文件名
     */
    constructor(name: String, sourceFile: String) {
        this.name = name;
        this.functions = new Array<FunctionIRNode>();
        this.globals = new Array<IRNode>();
        this.nextId = 1;
        this.sourceFile = sourceFile;
        this.comments = new Array<String>();
        this.metaData = new Map<String, Any>();
    }
    
    /**
     * @brief 生成新的节点ID
     * @return 新分配的ID
     */
    public function generateId(): Integer {
        let id = this.nextId;
        this.nextId++;
        return id;
    }
    
    /**
     * @brief 添加函数
     * @param function 函数IR节点
     */
    public function addFunction(func: FunctionIRNode): void {
        this.functions.push(func);
    }
    
    /**
     * @brief 添加全局变量
     * @param global 全局变量IR节点
     */
    public function addGlobal(global: IRNode): void {
        this.globals.push(global);
    }
    
    /**
     * @brief 查找函数
     * @param name 函数名
     * @return 函数IR节点，如果找不到则返回null
     */
    public function findFunction(name: String): FunctionIRNode? {
        for (let func of this.functions) {
            if (func.name == name) {
                return func;
            }
        }
        return null;
    }
    
    /**
     * @brief 添加注释
     * @param comment 注释文本
     */
    public function addComment(comment: String): void {
        this.comments.push(comment);
    }
    
    /**
     * @brief 添加元数据
     * @param key 键
     * @param value 值
     */
    public function addMetaData(key: String, value: Any): void {
        this.metaData.set(key, value);
    }
    
    /**
     * @brief 获取模块的文本表示
     * @return 模块的IR文本表示
     */
    public function toString(): String {
        let result = `; 模块: ${this.name}\n`;
        result += `; 源文件: ${this.sourceFile}\n`;
        
        // 添加注释
        for (let comment of this.comments) {
            result += `; ${comment}\n`;
        }
        
        result += "\n";
        
        // 添加全局变量
        if (this.globals.length > 0) {
            result += "; 全局变量\n";
            for (let global of this.globals) {
                result += global.toString() + "\n";
            }
            result += "\n";
        }
        
        // 添加函数
        for (let func of this.functions) {
            result += this.functionToString(func) + "\n\n";
        }
        
        return result;
    }
    
    /**
     * @brief 获取函数的文本表示
     * @param function 函数IR节点
     * @return 函数的IR文本表示
     */
    private function functionToString(func: FunctionIRNode): String {
        let result = func.toString() + " {\n";
        
        // 添加基本块
        for (let block of func.basicBlocks) {
            result += "  " + block.toString() + "\n";
            
            // 添加指令
            for (let inst of block.instructions) {
                result += "    " + inst.toString() + "\n";
            }
            
            result += "\n";
        }
        
        result += "}";
        return result;
    }
    
    /**
     * @brief 验证模块
     * @return 如果验证通过返回true，否则返回false
     */
    public function verify(): Boolean {
        // TODO: 实现模块验证逻辑
        return true;
    }
    
    /**
     * @brief 执行基本优化
     */
    public function optimize(): void {
        // TODO: 实现基本优化逻辑
    }
} 