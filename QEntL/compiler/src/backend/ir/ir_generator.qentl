/**
 * @file ir_generator.qentl
 * @brief IR生成器实现
 * 
 * 量子基因编码: QGC-COMPILER-IR-GENERATOR-2024061901
 * 量子纠缠信道: QEC-COMPILER-BACKEND-01
 */

import "QEntL/core/array.qentl";
import "QEntL/core/string.qentl";
import "QEntL/core/map.qentl";
import "QEntL/compiler/frontend/parser/ast.qentl";
import "QEntL/compiler/frontend/semantic/semantic_analyzer.qentl";
import "QEntL/compiler/src/backend/ir/ir_node.qentl";
import "QEntL/compiler/src/backend/ir/ir_module.qentl";

/**
 * @class IRGenerator
 * @brief IR生成器，将AST转换为IR
 */
quantum_class IRGenerator {
    private {
        ast: ASTNode;                // AST根节点
        module: IRModule;            // IR模块
        semanticAnalyzer: SemanticAnalyzer; // 语义分析器
        
        // 当前上下文
        currentFunction: FunctionIRNode; // 当前处理的函数
        currentBlock: BasicBlockIRNode;  // 当前处理的基本块
        
        // 变量和标签管理
        localVars: Map<String, String>;  // 本地变量名到IR变量名的映射
        tempCounter: Integer;           // 临时变量计数器
        labelCounter: Integer;          // 标签计数器
        
        // 错误处理
        errors: Array<String>;          // 错误列表
    }
    
    /**
     * @brief 构造函数
     * @param ast AST根节点
     * @param semanticAnalyzer 语义分析器
     * @param moduleName 模块名
     * @param sourceFile 源文件名
     */
    constructor(ast: ASTNode, semanticAnalyzer: SemanticAnalyzer, moduleName: String, sourceFile: String) {
        this.ast = ast;
        this.semanticAnalyzer = semanticAnalyzer;
        this.module = new IRModule(moduleName, sourceFile);
        
        this.localVars = new Map<String, String>();
        this.tempCounter = 0;
        this.labelCounter = 0;
        this.errors = new Array<String>();
    }
    
    /**
     * @brief 生成IR
     * @return 生成的IR模块
     */
    public function generate(): IRModule {
        try {
            this.visitNode(this.ast);
        } catch (error) {
            this.errors.push(`IR生成错误: ${error.message}`);
        }
        
        return this.module;
    }
    
    /**
     * @brief 获取错误列表
     * @return 错误列表
     */
    public function getErrors(): Array<String> {
        return this.errors;
    }
    
    /**
     * @brief 访问AST节点
     * @param node AST节点
     */
    private function visitNode(node: ASTNode): Any {
        if (node == null) return null;
        
        switch (node.type) {
            case NodeType.PROGRAM:
                return this.visitProgram(node);
                
            case NodeType.IMPORT_DECLARATION:
                return this.visitImport(node);
                
            case NodeType.VARIABLE_DECLARATION:
                return this.visitVariableDeclaration(node);
                
            case NodeType.FUNCTION_DECLARATION:
                return this.visitFunctionDeclaration(node);
                
            case NodeType.CLASS_DECLARATION:
                return this.visitClassDeclaration(node);
                
            case NodeType.QUANTUM_ENTITY_DECLARATION:
                return this.visitQuantumEntityDeclaration(node);
                
            case NodeType.BLOCK:
                return this.visitBlock(node);
                
            case NodeType.EXPRESSION_STATEMENT:
                return this.visitExpressionStatement(node);
                
            case NodeType.IF_STATEMENT:
                return this.visitIfStatement(node);
                
            case NodeType.WHILE_STATEMENT:
                return this.visitWhileStatement(node);
                
            case NodeType.FOR_STATEMENT:
                return this.visitForStatement(node);
                
            case NodeType.RETURN_STATEMENT:
                return this.visitReturnStatement(node);
                
            case NodeType.BINARY_EXPRESSION:
                return this.visitBinaryExpression(node);
                
            case NodeType.UNARY_EXPRESSION:
                return this.visitUnaryExpression(node);
                
            case NodeType.VARIABLE_EXPRESSION:
                return this.visitVariableExpression(node);
                
            case NodeType.CALL_EXPRESSION:
                return this.visitCallExpression(node);
                
            case NodeType.MEMBER_EXPRESSION:
                return this.visitMemberExpression(node);
                
            case NodeType.LITERAL:
                return this.visitLiteral(node);
                
            case NodeType.QUANTUM_OPERATION:
                return this.visitQuantumOperation(node);
                
            default:
                this.error(node, `无法为节点类型 ${node.type} 生成IR`);
                return null;
        }
    }
    
    /**
     * @brief 生成一个新的临时变量名
     * @return 临时变量名
     */
    private function generateTemp(): String {
        let temp = `%t${this.tempCounter}`;
        this.tempCounter++;
        return temp;
    }
    
    /**
     * @brief 生成一个新的标签名
     * @param prefix 标签前缀
     * @return 标签名
     */
    private function generateLabel(prefix: String = "L"): String {
        let label = `${prefix}${this.labelCounter}`;
        this.labelCounter++;
        return label;
    }
    
    /**
     * @brief 创建一个新的基本块
     * @param label 标签名，如果为null则自动生成
     * @return 创建的基本块
     */
    private function createBasicBlock(label: String = null): BasicBlockIRNode {
        if (label == null) {
            label = this.generateLabel();
        }
        
        let block = new BasicBlockIRNode(this.module.generateId(), label);
        return block;
    }
    
    /**
     * @brief 添加指令到当前基本块
     * @param instruction 指令
     */
    private function addInstruction(instruction: IRNode): void {
        if (this.currentBlock != null) {
            this.currentBlock.addInstruction(instruction);
        } else {
            this.error(null, "尝试在没有当前基本块的情况下添加指令");
        }
    }
    
    /**
     * @brief 报告错误
     * @param node 相关的AST节点
     * @param message 错误消息
     */
    private function error(node: ASTNode, message: String): void {
        let location = "";
        if (node != null) {
            location = `${this.module.sourceFile}:${node.line}:${node.column}: `;
        }
        this.errors.push(`${location}错误: ${message}`);
    }

    /**
     * @brief 访问程序节点
     * @param node 程序节点
     */
    private function visitProgram(node: ASTNode): void {
        // 设置模块元数据
        this.module.addComment("QEntL编译器生成的IR");
        this.module.addComment("生成时间: " + new Date().toISOString());
        
        // 处理所有顶层声明
        for (let child of node.children) {
            this.visitNode(child);
        }
        
        // 添加模块初始化函数（如果需要）
        this.generateModuleInit();
    }
    
    /**
     * @brief 生成模块初始化函数
     */
    private function generateModuleInit(): void {
        // 创建模块初始化函数
        let initFunc = new FunctionIRNode(
            this.module.generateId(),
            "__module_init",
            "void"
        );
        
        // 创建入口基本块
        let entryBlock = this.createBasicBlock("entry");
        initFunc.addBasicBlock(entryBlock);
        
        // 保存当前上下文
        let savedFunction = this.currentFunction;
        let savedBlock = this.currentBlock;
        
        // 设置当前上下文
        this.currentFunction = initFunc;
        this.currentBlock = entryBlock;
        
        // 这里可以添加全局变量初始化代码
        
        // 添加返回指令
        let returnInst = new ReturnIRNode(this.module.generateId());
        this.addInstruction(returnInst);
        
        // 恢复上下文
        this.currentFunction = savedFunction;
        this.currentBlock = savedBlock;
        
        // 将函数添加到模块
        this.module.addFunction(initFunc);
    }
    
    /**
     * @brief 访问导入声明
     * @param node 导入声明节点
     */
    private function visitImport(node: ASTNode): void {
        // 在IR中记录导入信息
        let path = node.value;
        this.module.addComment(`导入模块: ${path}`);
        
        // 实际的导入处理在编译器的其他部分完成
    }
    
    /**
     * @brief 访问变量声明
     * @param node 变量声明节点
     */
    private function visitVariableDeclaration(node: ASTNode): String {
        let name = node.name;
        let type = node.typeAnnotation || "Any";
        let isQuantum = node.isQuantum || false;
        
        // 检查是否是全局变量
        let isGlobal = this.currentFunction == null;
        
        if (isGlobal) {
            // 全局变量处理
            return this.declareGlobalVariable(node);
        } else {
            // 局部变量处理
            return this.declareLocalVariable(node);
        }
    }
    
    /**
     * @brief 声明全局变量
     * @param node 变量声明节点
     */
    private function declareGlobalVariable(node: ASTNode): String {
        let name = node.name;
        let type = node.typeAnnotation || "Any";
        let isQuantum = node.isQuantum || false;
        
        // 为全局变量生成唯一名称
        let globalName = "@" + name;
        
        // 创建全局变量节点
        // 这里简化处理，实际需要根据变量类型创建不同的IR节点
        
        // 如果有初始化表达式，生成初始化代码
        if (node.initializer != null) {
            // 初始化代码会在模块初始化函数中生成
            // 这里仅记录需要初始化的全局变量
        }
        
        return globalName;
    }
    
    /**
     * @brief 声明局部变量
     * @param node 变量声明节点
     */
    private function declareLocalVariable(node: ASTNode): String {
        let name = node.name;
        let type = node.typeAnnotation || "Any";
        let isQuantum = node.isQuantum || false;
        
        // 分配栈空间
        let varPtr = this.generateTemp();
        let allocaInst = new AllocaIRNode(
            this.module.generateId(),
            varPtr,
            type,
            1,
            isQuantum
        );
        
        // 设置源代码位置
        allocaInst.setSourceLocation(this.module.sourceFile, node.line, node.column);
        
        // 添加到当前基本块
        this.addInstruction(allocaInst);
        
        // 记录变量
        this.localVars.set(name, varPtr);
        
        // 如果有初始化表达式，生成初始化代码
        if (node.initializer != null) {
            // 生成初始化表达式的IR
            let initValue = this.visitNode(node.initializer);
            
            if (initValue != null) {
                // 创建存储指令
                let initType = this.getNodeType(node.initializer);
                let storeInst = new StoreIRNode(
                    this.module.generateId(),
                    initValue,
                    varPtr,
                    initType,
                    isQuantum
                );
                
                // 添加到当前基本块
                this.addInstruction(storeInst);
            }
        }
        
        return varPtr;
    }
    
    /**
     * @brief 访问函数声明
     * @param node 函数声明节点
     */
    private function visitFunctionDeclaration(node: ASTNode): FunctionIRNode {
        let name = node.name;
        let returnType = node.returnType || "void";
        let isQuantum = node.isQuantum || false;
        
        // 创建函数
        let func = new FunctionIRNode(
            this.module.generateId(),
            name,
            returnType,
            isQuantum
        );
        
        // 添加参数
        if (node.parameters != null) {
            for (let param of node.parameters) {
                let paramName = param.name;
                let paramType = param.type || "Any";
                let isParamQuantum = param.isQuantum || false;
                
                func.addParameter(paramName, paramType);
            }
        }
        
        // 创建入口基本块
        let entryBlock = this.createBasicBlock("entry");
        func.addBasicBlock(entryBlock);
        
        // 保存当前上下文
        let savedFunction = this.currentFunction;
        let savedBlock = this.currentBlock;
        let savedVars = this.localVars;
        
        // 设置当前上下文
        this.currentFunction = func;
        this.currentBlock = entryBlock;
        this.localVars = new Map<String, String>();
        
        // 为参数分配栈空间
        if (node.parameters != null) {
            for (let i = 0; i < node.parameters.length; i++) {
                let param = node.parameters[i];
                let paramName = param.name;
                let paramType = param.type || "Any";
                let isParamQuantum = param.isQuantum || false;
                
                // 分配栈空间
                let paramPtr = this.generateTemp();
                let allocaInst = new AllocaIRNode(
                    this.module.generateId(),
                    paramPtr,
                    paramType,
                    1,
                    isParamQuantum
                );
                
                // 添加到当前基本块
                this.addInstruction(allocaInst);
                
                // 记录变量
                this.localVars.set(paramName, paramPtr);
                
                // 将参数存储到分配的空间
                let paramValue = `%param${i}`;
                let storeInst = new StoreIRNode(
                    this.module.generateId(),
                    paramValue,
                    paramPtr,
                    paramType,
                    isParamQuantum
                );
                
                // 添加到当前基本块
                this.addInstruction(storeInst);
            }
        }
        
        // 处理函数体
        if (node.body != null) {
            this.visitNode(node.body);
        }
        
        // 确保函数有返回指令
        if (this.currentBlock.instructions.length == 0 ||
            this.currentBlock.instructions[this.currentBlock.instructions.length - 1].type != IRNodeType.RETURN) {
            
            // 添加默认返回指令
            let returnInst = new ReturnIRNode(this.module.generateId());
            this.addInstruction(returnInst);
        }
        
        // 恢复上下文
        this.currentFunction = savedFunction;
        this.currentBlock = savedBlock;
        this.localVars = savedVars;
        
        // 将函数添加到模块
        this.module.addFunction(func);
        
        return func;
    }
    
    /**
     * @brief 访问类声明
     * @param node 类声明节点
     */
    private function visitClassDeclaration(node: ASTNode): void {
        // 记录类信息
        let name = node.name;
        let isQuantum = node.isQuantum || false;
        
        this.module.addComment(`类定义: ${name}`);
        
        // 处理类中的方法
        for (let member of node.members) {
            if (member.type == NodeType.FUNCTION_DECLARATION) {
                // 访问方法，生成方法的IR
                this.visitNode(member);
            }
        }
    }
    
    /**
     * @brief 访问量子实体声明
     * @param node 量子实体声明节点
     */
    private function visitQuantumEntityDeclaration(node: ASTNode): void {
        // 记录量子实体信息
        let name = node.name;
        
        this.module.addComment(`量子实体定义: ${name}`);
        
        // 处理量子实体中的方法
        for (let member of node.members) {
            if (member.type == NodeType.FUNCTION_DECLARATION) {
                // 访问方法，生成方法的IR
                this.visitNode(member);
            }
        }
    }
    
    /**
     * @brief 获取节点的类型
     * @param node AST节点
     * @return 类型名称
     */
    private function getNodeType(node: ASTNode): String {
        // 实际实现应该查询符号表或语义分析结果
        // 这里简化处理
        return "Any";
    }
} 