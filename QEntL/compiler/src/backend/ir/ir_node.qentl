/**
 * @file ir_node.qentl
 * @brief IR节点定义
 * 
 * 量子基因编码: QGC-IR-NODE-2024062801
 * 量子纠缠信道: QEC-COMPILER-IR-01
 */

import "QEntL/core/array.qentl";

/**
 * @class IRNode
 * @brief 中间表示(IR)节点基类
 */
quantum_class IRNode {
    private {
        type: String;           // 节点类型
        location: SourceLocation; // 源代码位置
    }
    
    /**
     * @brief 构造函数
     * @param type 节点类型
     * @param location 源代码位置
     */
    constructor(type: String, location: SourceLocation = null) {
        this.type = type;
        this.location = location;
    }
    
    /**
     * @brief 获取节点类型
     */
    public function getType(): String {
        return this.type;
    }
    
    /**
     * @brief 获取源代码位置
     */
    public function getLocation(): SourceLocation {
        return this.location;
    }
}

/**
 * @class SourceLocation
 * @brief 源代码位置信息
 */
quantum_class SourceLocation {
    private {
        file: String;           // 文件名
        line: Number;           // 行号
        column: Number;         // 列号
        endLine: Number;        // 结束行号
        endColumn: Number;      // 结束列号
    }
    
    /**
     * @brief 构造函数
     */
    constructor(file: String, line: Number, column: Number, endLine: Number = -1, endColumn: Number = -1) {
        this.file = file;
        this.line = line;
        this.column = column;
        this.endLine = endLine !== -1 ? endLine : line;
        this.endColumn = endColumn !== -1 ? endColumn : column;
    }
    
    /**
     * @brief 获取文件名
     */
    public function getFile(): String {
        return this.file;
    }
    
    /**
     * @brief 获取行号
     */
    public function getLine(): Number {
        return this.line;
    }
    
    /**
     * @brief 获取列号
     */
    public function getColumn(): Number {
        return this.column;
    }
    
    /**
     * @brief 获取结束行号
     */
    public function getEndLine(): Number {
        return this.endLine;
    }
    
    /**
     * @brief 获取结束列号
     */
    public function getEndColumn(): Number {
        return this.endColumn;
    }
    
    /**
     * @brief 转换为字符串
     */
    public function toString(): String {
        return `${this.file}:${this.line}:${this.column}`;
    }
}

/**
 * @class InstructionNode
 * @brief 指令节点
 */
quantum_class InstructionNode extends IRNode {
    private {
        opcode: Number;         // 操作码
        operands: Array<Operand>; // 操作数
    }
    
    /**
     * @brief 构造函数
     */
    constructor(opcode: Number, operands: Array<Operand> = null, location: SourceLocation = null) {
        super("Instruction", location);
        this.opcode = opcode;
        this.operands = operands || [];
    }
    
    /**
     * @brief 获取操作码
     */
    public function getOpcode(): Number {
        return this.opcode;
    }
    
    /**
     * @brief 获取操作数
     */
    public function getOperands(): Array<Operand> {
        return this.operands;
    }
    
    /**
     * @brief 添加操作数
     */
    public function addOperand(operand: Operand): void {
        this.operands.push(operand);
    }
}

/**
 * @class Operand
 * @brief 操作数基类
 */
quantum_class Operand {
    private {
        type: String;           // 操作数类型
        value: any;             // 操作数值
    }
    
    /**
     * @brief 构造函数
     */
    constructor(type: String, value: any) {
        this.type = type;
        this.value = value;
    }
    
    /**
     * @brief 获取操作数类型
     */
    public function getType(): String {
        return this.type;
    }
    
    /**
     * @brief 获取操作数值
     */
    public function getValue(): any {
        return this.value;
    }
}

/**
 * @class LabelNode
 * @brief 标签节点
 */
quantum_class LabelNode extends IRNode {
    private {
        name: String;           // 标签名
    }
    
    /**
     * @brief 构造函数
     */
    constructor(name: String, location: SourceLocation = null) {
        super("Label", location);
        this.name = name;
    }
    
    /**
     * @brief 获取标签名
     */
    public function getName(): String {
        return this.name;
    }
}

/**
 * @class QuantumOperationNode
 * @brief 量子操作节点
 */
quantum_class QuantumOperationNode extends IRNode {
    private {
        operation: String;      // 操作类型
        stateName: String;      // 状态名称
        gateName: String;       // 门名称
        targetQubits: Array<Number>; // 目标量子位
        numQubits: Number;      // 量子位数量
        qubitIndex: Number;     // 量子位索引
    }
    
    /**
     * @brief 构造函数
     */
    constructor(operation: String, location: SourceLocation = null) {
        super("QuantumOperation", location);
        this.operation = operation;
        this.targetQubits = [];
    }
    
    /**
     * @brief 获取操作类型
     */
    public function getOperation(): String {
        return this.operation;
    }
    
    /**
     * @brief 设置状态名称
     */
    public function setStateName(name: String): void {
        this.stateName = name;
    }
    
    /**
     * @brief 获取状态名称
     */
    public function getStateName(): String {
        return this.stateName;
    }
    
    /**
     * @brief 设置门名称
     */
    public function setGateName(name: String): void {
        this.gateName = name;
    }
    
    /**
     * @brief 获取门名称
     */
    public function getGateName(): String {
        return this.gateName;
    }
    
    /**
     * @brief 添加目标量子位
     */
    public function addTargetQubit(qubit: Number): void {
        this.targetQubits.push(qubit);
    }
    
    /**
     * @brief 获取目标量子位
     */
    public function getTargetQubits(): Array<Number> {
        return this.targetQubits;
    }
    
    /**
     * @brief 设置量子位数量
     */
    public function setNumQubits(num: Number): void {
        this.numQubits = num;
    }
    
    /**
     * @brief 获取量子位数量
     */
    public function getNumQubits(): Number {
        return this.numQubits;
    }
    
    /**
     * @brief 设置量子位索引
     */
    public function setQubitIndex(index: Number): void {
        this.qubitIndex = index;
    }
    
    /**
     * @brief 获取量子位索引
     */
    public function getQubitIndex(): Number {
        return this.qubitIndex;
    }
}

/**
 * @class ConstantNode
 * @brief 常量节点
 */
quantum_class ConstantNode extends IRNode {
    private {
        value: String;          // 常量值
    }
    
    /**
     * @brief 构造函数
     */
    constructor(value: String, location: SourceLocation = null) {
        super("Constant", location);
        this.value = value;
    }
    
    /**
     * @brief 获取常量值
     */
    public function getValue(): String {
        return this.value;
    }
}

/**
 * @class DebugInfoNode
 * @brief 调试信息节点
 */
quantum_class DebugInfoNode extends IRNode {
    private {
        line: Number;           // 行号
        column: Number;         // 列号
        sourceInfo: String;     // 源码信息
    }
    
    /**
     * @brief 构造函数
     */
    constructor(line: Number, column: Number, sourceInfo: String, location: SourceLocation = null) {
        super("DebugInfo", location);
        this.line = line;
        this.column = column;
        this.sourceInfo = sourceInfo;
    }
    
    /**
     * @brief 获取行号
     */
    public function getLine(): Number {
        return this.line;
    }
    
    /**
     * @brief 获取列号
     */
    public function getColumn(): Number {
        return this.column;
    }
    
    /**
     * @brief 获取源码信息
     */
    public function getSourceInfo(): String {
        return this.sourceInfo;
    }
}

// 创建操作数类型
function createInt8Operand(value: Number): Operand {
    return new Operand("Int8", value);
}

function createInt16Operand(value: Number): Operand {
    return new Operand("Int16", value);
}

function createInt32Operand(value: Number): Operand {
    return new Operand("Int32", value);
}

function createFloat64Operand(value: Number): Operand {
    return new Operand("Float64", value);
}

function createConstantRefOperand(value: Number): Operand {
    return new Operand("ConstantRef", value);
}

function createLabelRefOperand(value: String): Operand {
    return new Operand("LabelRef", value);
}

export {
    IRNode,
    SourceLocation,
    InstructionNode,
    Operand,
    LabelNode,
    QuantumOperationNode,
    ConstantNode,
    DebugInfoNode,
    createInt8Operand,
    createInt16Operand,
    createInt32Operand,
    createFloat64Operand,
    createConstantRefOperand,
    createLabelRefOperand
}; 