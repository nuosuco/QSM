/**
 * @file debug_info_generator.qentl
 * @brief QEntL调试信息生成器
 * 
 * 量子基因编码: QGC-COMPILER-DEBUGINFO-2024061907
 * 量子纠缠信道: QEC-COMPILER-DEBUG-02
 */

// 调试信息生成器类
// 负责生成源码映射和调试符号信息
// 作者：Claude
// 版本：1.0.0

import { FileSystem } from "../../../../vm/src/core/os_interface/file_system.qentl";
import { Logger, LogLevel } from "../../../../vm/src/core/os_interface/logger.qentl";

// 源码位置信息
export class SourceLocation {
    // 源文件路径
    public readonly filePath: string;
    
    // 起始行
    public readonly startLine: number;
    
    // 起始列
    public readonly startColumn: number;
    
    // 结束行
    public readonly endLine: number;
    
    // 结束列
    public readonly endColumn: number;
    
    // 构造函数
    constructor(
        filePath: string,
        startLine: number,
        startColumn: number,
        endLine: number,
        endColumn: number
    ) {
        this.filePath = filePath;
        this.startLine = startLine;
        this.startColumn = startColumn;
        this.endLine = endLine;
        this.endColumn = endColumn;
    }
    
    // 复制一个新的源码位置对象
    public clone(): SourceLocation {
        return new SourceLocation(
            this.filePath,
            this.startLine,
            this.startColumn,
            this.endLine,
            this.endColumn
        );
    }
    
    // 转换为字符串表示
    public toString(): string {
        return `${this.filePath}:${this.startLine}:${this.startColumn}-${this.endLine}:${this.endColumn}`;
    }
    
    // 检查是否与另一个位置对象相等
    public equals(other: SourceLocation): boolean {
        return (
            this.filePath === other.filePath &&
            this.startLine === other.startLine &&
            this.startColumn === other.startColumn &&
            this.endLine === other.endLine &&
            this.endColumn === other.endColumn
        );
    }
    
    // 转换为对象表示（用于序列化）
    public toObject(): object {
        return {
            filePath: this.filePath,
            startLine: this.startLine,
            startColumn: this.startColumn,
            endLine: this.endLine,
            endColumn: this.endColumn
        };
    }
    
    // 从对象表示创建（用于反序列化）
    public static fromObject(obj: any): SourceLocation {
        return new SourceLocation(
            obj.filePath,
            obj.startLine,
            obj.startColumn,
            obj.endLine,
            obj.endColumn
        );
    }
}

// 源码映射类型（源码位置到目标位置的映射）
export class SourceMapping {
    // 源码位置
    public readonly sourceLocation: SourceLocation;
    
    // 目标位置（字节码偏移量或目标代码位置）
    public readonly targetPosition: number;
    
    // 目标长度（字节码指令数量或目标代码长度）
    public readonly targetLength: number;
    
    // 构造函数
    constructor(
        sourceLocation: SourceLocation,
        targetPosition: number,
        targetLength: number = 1
    ) {
        this.sourceLocation = sourceLocation;
        this.targetPosition = targetPosition;
        this.targetLength = targetLength;
    }
    
    // 复制一个新的源码映射对象
    public clone(): SourceMapping {
        return new SourceMapping(
            this.sourceLocation.clone(),
            this.targetPosition,
            this.targetLength
        );
    }
    
    // 转换为字符串表示
    public toString(): string {
        return `${this.sourceLocation.toString()} -> ${this.targetPosition}:${this.targetLength}`;
    }
    
    // 转换为对象表示（用于序列化）
    public toObject(): object {
        return {
            sourceLocation: this.sourceLocation.toObject(),
            targetPosition: this.targetPosition,
            targetLength: this.targetLength
        };
    }
    
    // 从对象表示创建（用于反序列化）
    public static fromObject(obj: any): SourceMapping {
        return new SourceMapping(
            SourceLocation.fromObject(obj.sourceLocation),
            obj.targetPosition,
            obj.targetLength
        );
    }
}

// 变量信息类
export class VariableInfo {
    // 变量名
    public readonly name: string;
    
    // 变量类型
    public readonly type: string;
    
    // 作用域起始位置（字节码偏移量）
    public readonly scopeStart: number;
    
    // 作用域结束位置（字节码偏移量）
    public readonly scopeEnd: number;
    
    // 变量存储位置（寄存器索引、堆栈偏移量等）
    public readonly storageLocation: number;
    
    // 变量所在源码位置
    public readonly sourceLocation: SourceLocation;
    
    // 是否为参数
    public readonly isParameter: boolean;
    
    // 构造函数
    constructor(
        name: string,
        type: string,
        scopeStart: number,
        scopeEnd: number,
        storageLocation: number,
        sourceLocation: SourceLocation,
        isParameter: boolean = false
    ) {
        this.name = name;
        this.type = type;
        this.scopeStart = scopeStart;
        this.scopeEnd = scopeEnd;
        this.storageLocation = storageLocation;
        this.sourceLocation = sourceLocation;
        this.isParameter = isParameter;
    }
    
    // 复制一个新的变量信息对象
    public clone(): VariableInfo {
        return new VariableInfo(
            this.name,
            this.type,
            this.scopeStart,
            this.scopeEnd,
            this.storageLocation,
            this.sourceLocation.clone(),
            this.isParameter
        );
    }
    
    // 转换为字符串表示
    public toString(): string {
        const paramIndicator = this.isParameter ? "(参数)" : "";
        return `${this.name}: ${this.type} ${paramIndicator} [${this.scopeStart}-${this.scopeEnd}] @ ${this.storageLocation}`;
    }
    
    // 检查给定位置是否在变量的作用域内
    public isInScope(position: number): boolean {
        return position >= this.scopeStart && position <= this.scopeEnd;
    }
    
    // 转换为对象表示（用于序列化）
    public toObject(): object {
        return {
            name: this.name,
            type: this.type,
            scopeStart: this.scopeStart,
            scopeEnd: this.scopeEnd,
            storageLocation: this.storageLocation,
            sourceLocation: this.sourceLocation.toObject(),
            isParameter: this.isParameter
        };
    }
    
    // 从对象表示创建（用于反序列化）
    public static fromObject(obj: any): VariableInfo {
        return new VariableInfo(
            obj.name,
            obj.type,
            obj.scopeStart,
            obj.scopeEnd,
            obj.storageLocation,
            SourceLocation.fromObject(obj.sourceLocation),
            obj.isParameter
        );
    }
}

// 函数信息类
export class FunctionInfo {
    // 函数名
    public readonly name: string;
    
    // 返回类型
    public readonly returnType: string;
    
    // 参数信息列表
    public readonly parameters: VariableInfo[] = [];
    
    // 局部变量列表
    public readonly localVariables: VariableInfo[] = [];
    
    // 函数起始位置（字节码偏移量）
    public readonly startPosition: number;
    
    // 函数结束位置（字节码偏移量）
    public readonly endPosition: number;
    
    // 函数所在源码位置
    public readonly sourceLocation: SourceLocation;
    
    // 构造函数
    constructor(
        name: string,
        returnType: string,
        startPosition: number,
        endPosition: number,
        sourceLocation: SourceLocation
    ) {
        this.name = name;
        this.returnType = returnType;
        this.startPosition = startPosition;
        this.endPosition = endPosition;
        this.sourceLocation = sourceLocation;
    }
    
    // 添加参数信息
    public addParameter(parameter: VariableInfo): void {
        this.parameters.push(parameter);
    }
    
    // 添加局部变量信息
    public addLocalVariable(variable: VariableInfo): void {
        this.localVariables.push(variable);
    }
    
    // 获取指定位置可见的局部变量
    public getVariablesInScope(position: number): VariableInfo[] {
        const result: VariableInfo[] = [];
        
        // 添加所有在作用域内的参数
        for (const param of this.parameters) {
            if (param.isInScope(position)) {
                result.push(param);
            }
        }
        
        // 添加所有在作用域内的局部变量
        for (const variable of this.localVariables) {
            if (variable.isInScope(position)) {
                result.push(variable);
            }
        }
        
        return result;
    }
    
    // 检查给定位置是否在函数内
    public isInFunction(position: number): boolean {
        return position >= this.startPosition && position <= this.endPosition;
    }
    
    // 转换为字符串表示
    public toString(): string {
        return `${this.name}(${this.parameters.map(p => p.toString()).join(", ")}) -> ${this.returnType} [${this.startPosition}-${this.endPosition}]`;
    }
    
    // 转换为对象表示（用于序列化）
    public toObject(): object {
        return {
            name: this.name,
            returnType: this.returnType,
            parameters: this.parameters.map(p => p.toObject()),
            localVariables: this.localVariables.map(v => v.toObject()),
            startPosition: this.startPosition,
            endPosition: this.endPosition,
            sourceLocation: this.sourceLocation.toObject()
        };
    }
    
    // 从对象表示创建（用于反序列化）
    public static fromObject(obj: any): FunctionInfo {
        const functionInfo = new FunctionInfo(
            obj.name,
            obj.returnType,
            obj.startPosition,
            obj.endPosition,
            SourceLocation.fromObject(obj.sourceLocation)
        );
        
        // 添加参数
        for (const paramObj of obj.parameters) {
            functionInfo.addParameter(VariableInfo.fromObject(paramObj));
        }
        
        // 添加局部变量
        for (const varObj of obj.localVariables) {
            functionInfo.addLocalVariable(VariableInfo.fromObject(varObj));
        }
        
        return functionInfo;
    }
}

// 类型信息类
export class TypeInfo {
    // 类型名
    public readonly name: string;
    
    // 类型所在源码位置
    public readonly sourceLocation: SourceLocation;
    
    // 字段信息列表
    public readonly fields: { name: string, type: string, sourceLocation: SourceLocation }[] = [];
    
    // 方法信息列表
    public readonly methods: FunctionInfo[] = [];
    
    // 构造函数
    constructor(
        name: string,
        sourceLocation: SourceLocation
    ) {
        this.name = name;
        this.sourceLocation = sourceLocation;
    }
    
    // 添加字段信息
    public addField(name: string, type: string, sourceLocation: SourceLocation): void {
        this.fields.push({ name, type, sourceLocation });
    }
    
    // 添加方法信息
    public addMethod(method: FunctionInfo): void {
        this.methods.push(method);
    }
    
    // 转换为字符串表示
    public toString(): string {
        return `类型: ${this.name} (字段: ${this.fields.length}, 方法: ${this.methods.length})`;
    }
    
    // 转换为对象表示（用于序列化）
    public toObject(): object {
        return {
            name: this.name,
            sourceLocation: this.sourceLocation.toObject(),
            fields: this.fields.map(f => ({
                name: f.name,
                type: f.type,
                sourceLocation: f.sourceLocation.toObject()
            })),
            methods: this.methods.map(m => m.toObject())
        };
    }
    
    // 从对象表示创建（用于反序列化）
    public static fromObject(obj: any): TypeInfo {
        const typeInfo = new TypeInfo(
            obj.name,
            SourceLocation.fromObject(obj.sourceLocation)
        );
        
        // 添加字段
        for (const fieldObj of obj.fields) {
            typeInfo.addField(
                fieldObj.name,
                fieldObj.type,
                SourceLocation.fromObject(fieldObj.sourceLocation)
            );
        }
        
        // 添加方法
        for (const methodObj of obj.methods) {
            typeInfo.addMethod(FunctionInfo.fromObject(methodObj));
        }
        
        return typeInfo;
    }
}

// 断点类型
export enum BreakpointType {
    LINE,           // 行断点
    FUNCTION_ENTRY, // 函数入口断点
    FUNCTION_EXIT,  // 函数退出断点
    EXCEPTION,      // 异常断点
    CONDITIONAL     // 条件断点
}

// 断点信息类
export class BreakpointInfo {
    // 断点ID
    public readonly id: number;
    
    // 断点类型
    public readonly type: BreakpointType;
    
    // 断点位置
    public readonly location: SourceLocation;
    
    // 断点条件表达式（仅用于条件断点）
    public readonly condition: string;
    
    // 断点启用状态
    public enabled: boolean = true;
    
    // 断点触发次数
    public hitCount: number = 0;
    
    // 目标位置（编译后的字节码偏移量）
    public targetPosition: number = -1;
    
    // 构造函数
    constructor(
        id: number,
        type: BreakpointType,
        location: SourceLocation,
        condition: string = ""
    ) {
        this.id = id;
        this.type = type;
        this.location = location;
        this.condition = condition;
    }
    
    // 转换为对象表示（用于序列化）
    public toObject(): object {
        return {
            id: this.id,
            type: this.type,
            location: this.location.toObject(),
            condition: this.condition,
            enabled: this.enabled,
            hitCount: this.hitCount,
            targetPosition: this.targetPosition
        };
    }
    
    // 从对象表示创建（用于反序列化）
    public static fromObject(obj: any): BreakpointInfo {
        const breakpoint = new BreakpointInfo(
            obj.id,
            obj.type,
            SourceLocation.fromObject(obj.location),
            obj.condition
        );
        
        breakpoint.enabled = obj.enabled;
        breakpoint.hitCount = obj.hitCount;
        breakpoint.targetPosition = obj.targetPosition;
        
        return breakpoint;
    }
}

// 调试信息容器类
export class DebugInfo {
    // 源文件与目标文件的映射
    private sourceFiles: Map<string, string> = new Map();
    
    // 源码映射列表
    private sourceMappings: SourceMapping[] = [];
    
    // 函数信息映射表（函数名 -> 函数信息）
    private functions: Map<string, FunctionInfo> = new Map();
    
    // 类型信息映射表（类型名 -> 类型信息）
    private types: Map<string, TypeInfo> = new Map();
    
    // 断点信息列表
    private breakpoints: BreakpointInfo[] = [];
    
    // 下一个断点ID
    private nextBreakpointId: number = 1;
    
    // 构造函数
    constructor() {}
    
    // 添加源文件映射
    public addSourceFile(sourcePath: string, targetPath: string): void {
        this.sourceFiles.set(sourcePath, targetPath);
    }
    
    // 获取源文件路径列表
    public getSourceFiles(): string[] {
        return Array.from(this.sourceFiles.keys());
    }
    
    // 获取目标文件路径
    public getTargetFile(sourcePath: string): string {
        return this.sourceFiles.get(sourcePath);
    }
    
    // 添加源码映射
    public addSourceMapping(mapping: SourceMapping): void {
        this.sourceMappings.push(mapping);
    }
    
    // 获取所有源码映射
    public getSourceMappings(): SourceMapping[] {
        return this.sourceMappings;
    }
    
    // 根据目标位置查找对应的源码位置
    public findSourceLocation(targetPosition: number): SourceLocation {
        // 寻找最接近但不超过目标位置的映射
        let bestMapping: SourceMapping = null;
        let bestDistance: number = Number.MAX_VALUE;
        
        for (const mapping of this.sourceMappings) {
            const startPos = mapping.targetPosition;
            const endPos = mapping.targetPosition + mapping.targetLength - 1;
            
            // 如果目标位置正好在映射范围内，直接返回
            if (targetPosition >= startPos && targetPosition <= endPos) {
                return mapping.sourceLocation;
            }
            
            // 计算到映射起始位置的距离
            const distance = Math.abs(targetPosition - startPos);
            
            // 如果这个映射比之前找到的更接近，更新最佳映射
            if (distance < bestDistance && startPos <= targetPosition) {
                bestMapping = mapping;
                bestDistance = distance;
            }
        }
        
        return bestMapping ? bestMapping.sourceLocation : null;
    }
    
    // 根据源码位置查找对应的目标位置
    public findTargetPosition(sourceLocation: SourceLocation): number {
        for (const mapping of this.sourceMappings) {
            if (mapping.sourceLocation.equals(sourceLocation)) {
                return mapping.targetPosition;
            }
        }
        
        return -1; // 未找到对应的目标位置
    }
    
    // 添加函数信息
    public addFunction(functionInfo: FunctionInfo): void {
        this.functions.set(functionInfo.name, functionInfo);
    }
    
    // 获取函数信息
    public getFunction(name: string): FunctionInfo {
        return this.functions.get(name);
    }
    
    // 获取所有函数信息
    public getAllFunctions(): FunctionInfo[] {
        return Array.from(this.functions.values());
    }
    
    // 添加类型信息
    public addType(typeInfo: TypeInfo): void {
        this.types.set(typeInfo.name, typeInfo);
    }
    
    // 获取类型信息
    public getType(name: string): TypeInfo {
        return this.types.get(name);
    }
    
    // 获取所有类型信息
    public getAllTypes(): TypeInfo[] {
        return Array.from(this.types.values());
    }
    
    // 创建断点
    public createBreakpoint(
        type: BreakpointType,
        location: SourceLocation,
        condition: string = ""
    ): BreakpointInfo {
        const breakpoint = new BreakpointInfo(
            this.nextBreakpointId++,
            type,
            location,
            condition
        );
        
        this.breakpoints.push(breakpoint);
        
        // 设置断点的目标位置
        if (type === BreakpointType.LINE) {
            breakpoint.targetPosition = this.findTargetPosition(location);
        } else if (type === BreakpointType.FUNCTION_ENTRY) {
            // 查找函数并设置断点位置为函数的起始位置
            for (const func of this.functions.values()) {
                if (func.sourceLocation.filePath === location.filePath &&
                    func.sourceLocation.startLine === location.startLine) {
                    breakpoint.targetPosition = func.startPosition;
                    break;
                }
            }
        }
        
        return breakpoint;
    }
    
    // 删除断点
    public removeBreakpoint(id: number): boolean {
        const index = this.breakpoints.findIndex(bp => bp.id === id);
        
        if (index >= 0) {
            this.breakpoints.splice(index, 1);
            return true;
        }
        
        return false;
    }
    
    // 获取所有断点
    public getAllBreakpoints(): BreakpointInfo[] {
        return this.breakpoints;
    }
    
    // 查找指定位置的断点
    public findBreakpoints(position: number): BreakpointInfo[] {
        return this.breakpoints.filter(bp => bp.enabled && bp.targetPosition === position);
    }
    
    // 保存调试信息到文件
    public save(filePath: string): boolean {
        try {
            const data = {
                sourceFiles: Array.from(this.sourceFiles.entries()),
                sourceMappings: this.sourceMappings.map(m => m.toObject()),
                functions: Array.from(this.functions.values()).map(f => f.toObject()),
                types: Array.from(this.types.values()).map(t => t.toObject()),
                breakpoints: this.breakpoints.map(b => b.toObject()),
                nextBreakpointId: this.nextBreakpointId
            };
            
            FileSystem.writeTextFile(filePath, JSON.stringify(data, null, 2));
            return true;
        } catch (error) {
            return false;
        }
    }
    
    // 从文件加载调试信息
    public static load(filePath: string): DebugInfo {
        try {
            const content = FileSystem.readTextFile(filePath);
            const data = JSON.parse(content);
            
            const debugInfo = new DebugInfo();
            
            // 加载源文件映射
            for (const [sourcePath, targetPath] of data.sourceFiles) {
                debugInfo.addSourceFile(sourcePath, targetPath);
            }
            
            // 加载源码映射
            for (const mappingObj of data.sourceMappings) {
                debugInfo.addSourceMapping(SourceMapping.fromObject(mappingObj));
            }
            
            // 加载函数信息
            for (const funcObj of data.functions) {
                debugInfo.addFunction(FunctionInfo.fromObject(funcObj));
            }
            
            // 加载类型信息
            for (const typeObj of data.types) {
                debugInfo.addType(TypeInfo.fromObject(typeObj));
            }
            
            // 加载断点信息
            debugInfo.breakpoints = data.breakpoints.map(b => BreakpointInfo.fromObject(b));
            debugInfo.nextBreakpointId = data.nextBreakpointId;
            
            return debugInfo;
        } catch (error) {
            return new DebugInfo();
        }
    }
}

// 调试信息生成器类
export class DebugInfoGenerator {
    // 调试信息
    private debugInfo: DebugInfo = new DebugInfo();
    
    // 日志器
    private logger: Logger;
    
    // 构造函数
    constructor(logger: Logger = new Logger()) {
        this.logger = logger;
    }
    
    // 获取调试信息
    public getDebugInfo(): DebugInfo {
        return this.debugInfo;
    }
    
    // 设置调试信息
    public setDebugInfo(debugInfo: DebugInfo): void {
        this.debugInfo = debugInfo;
    }
    
    // 添加源文件映射
    public addSourceFile(sourcePath: string, targetPath: string): void {
        this.debugInfo.addSourceFile(sourcePath, targetPath);
    }
    
    // 添加源码映射
    public addSourceMapping(
        sourceFilePath: string,
        startLine: number,
        startColumn: number,
        endLine: number,
        endColumn: number,
        targetPosition: number,
        targetLength: number = 1
    ): void {
        const sourceLocation = new SourceLocation(
            sourceFilePath,
            startLine,
            startColumn,
            endLine,
            endColumn
        );
        
        const mapping = new SourceMapping(sourceLocation, targetPosition, targetLength);
        this.debugInfo.addSourceMapping(mapping);
    }
    
    // 添加函数信息
    public addFunction(
        name: string,
        returnType: string,
        sourceFilePath: string,
        startLine: number,
        startColumn: number,
        endLine: number,
        endColumn: number,
        startPosition: number,
        endPosition: number
    ): FunctionInfo {
        const sourceLocation = new SourceLocation(
            sourceFilePath,
            startLine,
            startColumn,
            endLine,
            endColumn
        );
        
        const functionInfo = new FunctionInfo(
            name,
            returnType,
            startPosition,
            endPosition,
            sourceLocation
        );
        
        this.debugInfo.addFunction(functionInfo);
        return functionInfo;
    }
    
    // 添加函数参数
    public addFunctionParameter(
        functionInfo: FunctionInfo,
        name: string,
        type: string,
        sourceFilePath: string,
        startLine: number,
        startColumn: number,
        endLine: number,
        endColumn: number,
        storageLocation: number
    ): void {
        const sourceLocation = new SourceLocation(
            sourceFilePath,
            startLine,
            startColumn,
            endLine,
            endColumn
        );
        
        const paramInfo = new VariableInfo(
            name,
            type,
            functionInfo.startPosition,
            functionInfo.endPosition,
            storageLocation,
            sourceLocation,
            true // 标记为参数
        );
        
        functionInfo.addParameter(paramInfo);
    }
    
    // 添加局部变量
    public addLocalVariable(
        functionInfo: FunctionInfo,
        name: string,
        type: string,
        scopeStart: number,
        scopeEnd: number,
        sourceFilePath: string,
        startLine: number,
        startColumn: number,
        endLine: number,
        endColumn: number,
        storageLocation: number
    ): void {
        const sourceLocation = new SourceLocation(
            sourceFilePath,
            startLine,
            startColumn,
            endLine,
            endColumn
        );
        
        const variableInfo = new VariableInfo(
            name,
            type,
            scopeStart,
            scopeEnd,
            storageLocation,
            sourceLocation,
            false // 不是参数
        );
        
        functionInfo.addLocalVariable(variableInfo);
    }
    
    // 添加类型信息
    public addType(
        name: string,
        sourceFilePath: string,
        startLine: number,
        startColumn: number,
        endLine: number,
        endColumn: number
    ): TypeInfo {
        const sourceLocation = new SourceLocation(
            sourceFilePath,
            startLine,
            startColumn,
            endLine,
            endColumn
        );
        
        const typeInfo = new TypeInfo(name, sourceLocation);
        this.debugInfo.addType(typeInfo);
        
        return typeInfo;
    }
    
    // 添加类型字段
    public addTypeField(
        typeInfo: TypeInfo,
        name: string,
        type: string,
        sourceFilePath: string,
        startLine: number,
        startColumn: number,
        endLine: number,
        endColumn: number
    ): void {
        const sourceLocation = new SourceLocation(
            sourceFilePath,
            startLine,
            startColumn,
            endLine,
            endColumn
        );
        
        typeInfo.addField(name, type, sourceLocation);
    }
    
    // 添加类型方法
    public addTypeMethod(typeInfo: TypeInfo, methodInfo: FunctionInfo): void {
        typeInfo.addMethod(methodInfo);
    }
    
    // 保存调试信息到文件
    public saveDebugInfo(filePath: string): boolean {
        try {
            const result = this.debugInfo.save(filePath);
            
            if (result) {
                this.logger.log(LogLevel.INFO, `调试信息已保存到文件: ${filePath}`);
            } else {
                this.logger.log(LogLevel.ERROR, `保存调试信息到文件失败: ${filePath}`);
            }
            
            return result;
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `保存调试信息时发生错误: ${error}`);
            return false;
        }
    }
    
    // 从文件加载调试信息
    public loadDebugInfo(filePath: string): boolean {
        try {
            const debugInfo = DebugInfo.load(filePath);
            this.debugInfo = debugInfo;
            
            this.logger.log(LogLevel.INFO, `从文件加载调试信息: ${filePath}`);
            return true;
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `从文件加载调试信息失败: ${filePath}: ${error}`);
            return false;
        }
    }
} 