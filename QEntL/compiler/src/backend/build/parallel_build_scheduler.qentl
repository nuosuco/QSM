/**
 * @file parallel_build_scheduler.qentl
 * @brief QEntL并行构建调度器
 * 
 * 量子基因编码: QGC-COMPILER-PARALSCHED-2024061906
 * 量子纠缠信道: QEC-COMPILER-BUILD-03
 */

import { FileSystem } from "../../../../vm/src/core/os_interface/file_system.qentl";
import { Logger, LogLevel } from "../../../../vm/src/core/os_interface/logger.qentl";
import { Process, ProcessInfo } from "../../../../vm/src/core/os_interface/process.qentl";

// 构建任务状态枚举
enum BuildTaskStatus {
    PENDING,    // 等待执行
    RUNNING,    // 正在执行
    COMPLETED,  // 已完成
    FAILED      // 失败
}

// 构建任务类
class BuildTask {
    // 任务ID
    private id: string;
    
    // 源文件路径
    private sourceFile: string;
    
    // 目标文件路径
    private targetFile: string;
    
    // 编译命令
    private command: string;
    
    // 任务状态
    private status: BuildTaskStatus = BuildTaskStatus.PENDING;
    
    // 依赖的任务ID列表
    private dependencies: string[] = [];
    
    // 进程ID（如果正在运行）
    private processId: number = -1;
    
    // 开始时间
    private startTime: number = 0;
    
    // 结束时间
    private endTime: number = 0;
    
    // 输出结果
    private output: string = "";
    
    // 错误信息
    private errorOutput: string = "";
    
    // 构造函数
    constructor(id: string, sourceFile: string, targetFile: string, command: string) {
        this.id = id;
        this.sourceFile = sourceFile;
        this.targetFile = targetFile;
        this.command = command;
    }
    
    // 获取任务ID
    public getId(): string {
        return this.id;
    }
    
    // 获取源文件路径
    public getSourceFile(): string {
        return this.sourceFile;
    }
    
    // 获取目标文件路径
    public getTargetFile(): string {
        return this.targetFile;
    }
    
    // 获取编译命令
    public getCommand(): string {
        return this.command;
    }
    
    // 获取任务状态
    public getStatus(): BuildTaskStatus {
        return this.status;
    }
    
    // 设置任务状态
    public setStatus(status: BuildTaskStatus): void {
        this.status = status;
    }
    
    // 添加依赖任务
    public addDependency(taskId: string): void {
        if (!this.dependencies.includes(taskId)) {
            this.dependencies.push(taskId);
        }
    }
    
    // 获取依赖任务列表
    public getDependencies(): string[] {
        return this.dependencies;
    }
    
    // 设置进程ID
    public setProcessId(processId: number): void {
        this.processId = processId;
    }
    
    // 获取进程ID
    public getProcessId(): number {
        return this.processId;
    }
    
    // 设置开始时间
    public setStartTime(time: number): void {
        this.startTime = time;
    }
    
    // 获取开始时间
    public getStartTime(): number {
        return this.startTime;
    }
    
    // 设置结束时间
    public setEndTime(time: number): void {
        this.endTime = time;
    }
    
    // 获取结束时间
    public getEndTime(): number {
        return this.endTime;
    }
    
    // 获取执行时间（毫秒）
    public getExecutionTime(): number {
        if (this.startTime === 0) {
            return 0;
        }
        
        const end = this.endTime > 0 ? this.endTime : Date.now();
        return end - this.startTime;
    }
    
    // 添加输出结果
    public appendOutput(output: string): void {
        this.output += output;
    }
    
    // 获取输出结果
    public getOutput(): string {
        return this.output;
    }
    
    // 添加错误输出
    public appendErrorOutput(error: string): void {
        this.errorOutput += error;
    }
    
    // 获取错误输出
    public getErrorOutput(): string {
        return this.errorOutput;
    }
    
    // 检查任务是否可以执行（所有依赖都已完成）
    public canExecute(taskMap: Map<string, BuildTask>): boolean {
        for (const depId of this.dependencies) {
            const depTask = taskMap.get(depId);
            
            if (!depTask || depTask.getStatus() !== BuildTaskStatus.COMPLETED) {
                return false;
            }
        }
        
        return true;
    }
}

// 并行构建调度器类
export class ParallelBuildScheduler {
    // 任务映射表
    private tasks: Map<string, BuildTask> = new Map();
    
    // 任务队列（待执行）
    private taskQueue: string[] = [];
    
    // 最大并行任务数
    private maxParallelTasks: number;
    
    // 当前运行的任务数
    private runningTaskCount: number = 0;
    
    // 已完成的任务数
    private completedTaskCount: number = 0;
    
    // 失败的任务数
    private failedTaskCount: number = 0;
    
    // 日志器
    private logger: Logger;
    
    // 构建开始时间
    private buildStartTime: number = 0;
    
    // 构建结束时间
    private buildEndTime: number = 0;
    
    // 是否中止构建
    private aborted: boolean = false;
    
    // 构造函数
    constructor(maxParallelTasks: number = 4, logger: Logger = new Logger()) {
        this.maxParallelTasks = maxParallelTasks;
        this.logger = logger;
    }
    
    // 添加构建任务
    public addTask(
        id: string,
        sourceFile: string,
        targetFile: string,
        command: string,
        dependencies: string[] = []
    ): void {
        const task = new BuildTask(id, sourceFile, targetFile, command);
        
        // 添加依赖
        for (const depId of dependencies) {
            task.addDependency(depId);
        }
        
        this.tasks.set(id, task);
        this.taskQueue.push(id);
    }
    
    // 获取任务
    public getTask(id: string): BuildTask {
        return this.tasks.get(id);
    }
    
    // 获取所有任务
    public getAllTasks(): BuildTask[] {
        return Array.from(this.tasks.values());
    }
    
    // 清除所有任务
    public clearTasks(): void {
        this.tasks.clear();
        this.taskQueue = [];
        this.runningTaskCount = 0;
        this.completedTaskCount = 0;
        this.failedTaskCount = 0;
    }
    
    // 设置最大并行任务数
    public setMaxParallelTasks(count: number): void {
        this.maxParallelTasks = count;
    }
    
    // 获取最大并行任务数
    public getMaxParallelTasks(): number {
        return this.maxParallelTasks;
    }
    
    // 获取当前运行的任务数
    public getRunningTaskCount(): number {
        return this.runningTaskCount;
    }
    
    // 获取已完成的任务数
    public getCompletedTaskCount(): number {
        return this.completedTaskCount;
    }
    
    // 获取失败的任务数
    public getFailedTaskCount(): number {
        return this.failedTaskCount;
    }
    
    // 获取总任务数
    public getTotalTaskCount(): number {
        return this.tasks.size;
    }
    
    // 获取构建进度（百分比）
    public getBuildProgress(): number {
        const total = this.getTotalTaskCount();
        if (total === 0) return 100;
        
        const completed = this.completedTaskCount + this.failedTaskCount;
        return Math.floor((completed / total) * 100);
    }
    
    // 构建是否已完成
    public isBuildCompleted(): boolean {
        return this.completedTaskCount + this.failedTaskCount === this.tasks.size;
    }
    
    // 构建是否成功
    public isBuildSuccessful(): boolean {
        return this.failedTaskCount === 0 && this.isBuildCompleted();
    }
    
    // 启动构建
    public async startBuild(): Promise<boolean> {
        this.buildStartTime = Date.now();
        this.aborted = false;
        
        this.logger.log(LogLevel.INFO, `开始并行构建，共 ${this.tasks.size} 个任务，最大并行数 ${this.maxParallelTasks}`);
        
        try {
            // 重排任务队列，使依赖少的任务先执行
            this.reorderTaskQueue();
            
            // 持续调度任务直到全部完成或中止
            while (this.runningTaskCount > 0 || this.taskQueue.length > 0) {
                if (this.aborted) {
                    this.logger.log(LogLevel.WARNING, "构建已被中止");
                    await this.stopAllRunningTasks();
                    break;
                }
                
                // 检查已完成的任务
                await this.checkCompletedTasks();
                
                // 启动新任务（如果可能）
                this.startPendingTasks();
                
                // 等待一小段时间
                await this.sleep(100);
            }
            
            this.buildEndTime = Date.now();
            
            // 记录构建结果
            if (this.aborted) {
                this.logger.log(LogLevel.WARNING, `构建已中止。完成: ${this.completedTaskCount}, 失败: ${this.failedTaskCount}, 未执行: ${this.taskQueue.length}`);
                return false;
            } else if (this.failedTaskCount > 0) {
                this.logger.log(LogLevel.ERROR, `构建失败。完成: ${this.completedTaskCount}, 失败: ${this.failedTaskCount}`);
                return false;
            } else {
                const buildTime = (this.buildEndTime - this.buildStartTime) / 1000;
                this.logger.log(LogLevel.INFO, `构建成功完成 ${this.completedTaskCount} 个任务，耗时 ${buildTime.toFixed(2)} 秒`);
                return true;
            }
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `构建过程中发生错误: ${error}`);
            this.aborted = true;
            await this.stopAllRunningTasks();
            return false;
        }
    }
    
    // 中止构建
    public abortBuild(): void {
        this.aborted = true;
    }
    
    // 重新排序任务队列
    private reorderTaskQueue(): void {
        // 计算每个任务的依赖深度
        const taskDepth = new Map<string, number>();
        
        for (const taskId of this.taskQueue) {
            this.calculateTaskDepth(taskId, taskDepth);
        }
        
        // 根据依赖深度排序（深度小的优先）
        this.taskQueue.sort((a, b) => {
            const depthA = taskDepth.get(a) || 0;
            const depthB = taskDepth.get(b) || 0;
            
            return depthA - depthB;
        });
    }
    
    // 计算任务依赖深度
    private calculateTaskDepth(taskId: string, depthMap: Map<string, number>): number {
        // 如果已计算过，直接返回
        if (depthMap.has(taskId)) {
            return depthMap.get(taskId);
        }
        
        const task = this.tasks.get(taskId);
        
        if (!task) {
            return 0;
        }
        
        // 没有依赖，深度为0
        const dependencies = task.getDependencies();
        if (dependencies.length === 0) {
            depthMap.set(taskId, 0);
            return 0;
        }
        
        // 计算所有依赖的最大深度
        let maxDepth = 0;
        for (const depId of dependencies) {
            const depDepth = this.calculateTaskDepth(depId, depthMap);
            maxDepth = Math.max(maxDepth, depDepth);
        }
        
        // 当前任务深度为最大依赖深度 + 1
        const depth = maxDepth + 1;
        depthMap.set(taskId, depth);
        
        return depth;
    }
    
    // 启动待处理的任务
    private startPendingTasks(): void {
        // 如果已达到最大并行任务数，不启动新任务
        if (this.runningTaskCount >= this.maxParallelTasks) {
            return;
        }
        
        // 找出所有可以执行的任务
        const executableTasks = [];
        
        for (let i = 0; i < this.taskQueue.length; i++) {
            const taskId = this.taskQueue[i];
            const task = this.tasks.get(taskId);
            
            if (task && task.canExecute(this.tasks)) {
                executableTasks.push({ index: i, taskId });
            }
        }
        
        // 按照队列顺序启动可执行的任务
        executableTasks.sort((a, b) => a.index - b.index);
        
        for (const { index, taskId } of executableTasks) {
            // 如果已达到最大并行任务数，中止
            if (this.runningTaskCount >= this.maxParallelTasks) {
                break;
            }
            
            // 从队列中移除任务
            this.taskQueue.splice(this.taskQueue.indexOf(taskId), 1);
            
            // 启动任务
            this.executeTask(taskId);
        }
    }
    
    // 执行任务
    private executeTask(taskId: string): void {
        const task = this.tasks.get(taskId);
        
        if (!task) {
            return;
        }
        
        try {
            this.logger.log(LogLevel.DEBUG, `执行任务: ${taskId} - ${task.getSourceFile()}`);
            
            // 设置任务状态为运行中
            task.setStatus(BuildTaskStatus.RUNNING);
            task.setStartTime(Date.now());
            this.runningTaskCount++;
            
            // 使用Process类来运行命令
            const process = new Process();
            const command = task.getCommand();
            
            // 启动进程
            process.start(command, {
                captureOutput: true,
                workingDirectory: FileSystem.getDirectoryPath(task.getSourceFile())
            });
            
            // 记录进程ID
            task.setProcessId(process.getProcessInfo().processId);
            
            this.logger.log(LogLevel.DEBUG, `任务开始执行: ${taskId} (PID: ${task.getProcessId()})`);
        } catch (error) {
            this.handleTaskError(task, `启动任务失败: ${error}`);
        }
    }
    
    // 检查已完成的任务
    private async checkCompletedTasks(): Promise<void> {
        for (const task of this.tasks.values()) {
            // 只检查正在运行的任务
            if (task.getStatus() !== BuildTaskStatus.RUNNING) {
                continue;
            }
            
            const pid = task.getProcessId();
            
            try {
                // 检查进程是否仍在运行
                const isRunning = Process.isProcessRunning(pid);
                
                if (!isRunning) {
                    // 获取进程信息
                    const processInfo = Process.getProcessInfo(pid);
                    
                    // 检查退出代码
                    if (processInfo && processInfo.exitCode === 0) {
                        this.handleTaskCompletion(task, processInfo);
                    } else {
                        this.handleTaskError(task, `任务执行失败，退出代码: ${processInfo ? processInfo.exitCode : "未知"}`);
                    }
                }
            } catch (error) {
                // 无法获取进程状态，假设已完成但失败
                this.handleTaskError(task, `检查任务状态失败: ${error}`);
            }
        }
    }
    
    // 处理任务完成
    private handleTaskCompletion(task: BuildTask, processInfo: ProcessInfo): void {
        try {
            task.setEndTime(Date.now());
            task.setStatus(BuildTaskStatus.COMPLETED);
            this.runningTaskCount--;
            this.completedTaskCount++;
            
            // 获取输出
            if (processInfo.stdout) {
                task.appendOutput(processInfo.stdout);
            }
            
            const executionTime = task.getExecutionTime();
            this.logger.log(
                LogLevel.INFO,
                `任务完成: ${task.getId()} - ${task.getSourceFile()} (耗时: ${(executionTime / 1000).toFixed(2)}s)`
            );
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `处理任务完成时发生错误: ${error}`);
        }
    }
    
    // 处理任务错误
    private handleTaskError(task: BuildTask, errorMessage: string): void {
        try {
            task.setEndTime(Date.now());
            task.setStatus(BuildTaskStatus.FAILED);
            task.appendErrorOutput(errorMessage);
            this.runningTaskCount--;
            this.failedTaskCount++;
            
            const executionTime = task.getExecutionTime();
            this.logger.log(
                LogLevel.ERROR,
                `任务失败: ${task.getId()} - ${task.getSourceFile()} (耗时: ${(executionTime / 1000).toFixed(2)}s): ${errorMessage}`
            );
        } catch (error) {
            this.logger.log(LogLevel.ERROR, `处理任务错误时发生错误: ${error}`);
        }
    }
    
    // 停止所有运行中的任务
    private async stopAllRunningTasks(): Promise<void> {
        for (const task of this.tasks.values()) {
            if (task.getStatus() === BuildTaskStatus.RUNNING) {
                const pid = task.getProcessId();
                
                try {
                    // 尝试终止进程
                    if (Process.isProcessRunning(pid)) {
                        Process.killProcess(pid);
                        this.logger.log(LogLevel.DEBUG, `已终止任务进程: ${task.getId()} (PID: ${pid})`);
                    }
                    
                    // 更新任务状态
                    task.setEndTime(Date.now());
                    task.setStatus(BuildTaskStatus.FAILED);
                    task.appendErrorOutput("任务被中止");
                    this.runningTaskCount--;
                    this.failedTaskCount++;
                } catch (error) {
                    this.logger.log(LogLevel.ERROR, `终止任务进程失败: ${error}`);
                }
            }
        }
        
        // 等待一点时间确保所有进程都已终止
        await this.sleep(500);
    }
    
    // 休眠辅助函数
    private async sleep(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    // 获取构建报告
    public getBuildReport(): object {
        const endTime = this.buildEndTime > 0 ? this.buildEndTime : Date.now();
        const totalTime = (endTime - this.buildStartTime) / 1000;
        
        const taskReports = [];
        for (const task of this.tasks.values()) {
            taskReports.push({
                id: task.getId(),
                sourceFile: task.getSourceFile(),
                targetFile: task.getTargetFile(),
                status: this.getTaskStatusString(task.getStatus()),
                executionTime: task.getExecutionTime() / 1000,
                hasErrors: task.getStatus() === BuildTaskStatus.FAILED
            });
        }
        
        return {
            totalTasks: this.tasks.size,
            completedTasks: this.completedTaskCount,
            failedTasks: this.failedTaskCount,
            pendingTasks: this.taskQueue.length,
            totalTime: totalTime,
            success: this.isBuildSuccessful(),
            completed: this.isBuildCompleted(),
            aborted: this.aborted,
            tasks: taskReports
        };
    }
    
    // 转换任务状态为字符串
    private getTaskStatusString(status: BuildTaskStatus): string {
        switch (status) {
            case BuildTaskStatus.PENDING:
                return "等待中";
            case BuildTaskStatus.RUNNING:
                return "运行中";
            case BuildTaskStatus.COMPLETED:
                return "已完成";
            case BuildTaskStatus.FAILED:
                return "失败";
            default:
                return "未知";
        }
    }
} 