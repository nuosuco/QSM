/**
 * @file incremental_builder.qentl
 * @brief QEntL增量构建器
 * 
 * 量子基因编码: QGC-COMPILER-INCBUILD-2024061905
 * 量子纠缠信道: QEC-COMPILER-BUILD-01
 */

import "QEntL/core/string.qentl";
import "QEntL/core/array.qentl";
import "QEntL/core/map.qentl";
import "QEntL/core/set.qentl";
import "QEntL/core/file.qentl";
import "QEntL/core/path.qentl";
import "QEntL/core/system.qentl";
import "QEntL/compiler/frontend/parser/dependency_extractor.qentl";
import "QEntL/vm/src/core/os_interface/file_system.qentl";

/**
 * @class FileInfo
 * @brief 文件信息类，存储文件的路径、上次修改时间等信息
 */
class FileInfo {
    public {
        path: String;           // 文件路径
        lastModifiedTime: Long; // 上次修改时间（毫秒时间戳）
        size: Long;             // 文件大小（字节）
        hash: String;           // 文件内容哈希值
    }
    
    /**
     * @brief 构造函数
     * @param path 文件路径
     */
    constructor(path: String) {
        this.path = path;
        this.update();
    }
    
    /**
     * @brief 更新文件信息
     */
    public function update(): void {
        try {
            let stats = FileSystem.getFileInfo(this.path);
            this.lastModifiedTime = stats.lastModifiedTime;
            this.size = stats.size;
            this.hash = this.computeHash();
        } catch (e) {
            System.println("警告：无法获取文件信息：" + this.path + "，错误：" + e.message);
            this.lastModifiedTime = 0;
            this.size = 0;
            this.hash = "";
        }
    }
    
    /**
     * @brief 计算文件内容的哈希值
     * @return 哈希值
     */
    private function computeHash(): String {
        try {
            let content = FileSystem.readTextFile(this.path);
            // 简单哈希实现，在生产环境中可使用更强的哈希算法
            let hash = 0;
            for (let i = 0; i < content.length; i++) {
                hash = ((hash << 5) - hash) + content.charCodeAt(i);
                hash = hash & hash; // 转换为32位整数
            }
            return hash.toString(16);
        } catch (e) {
            System.println("警告：无法读取文件内容以计算哈希值：" + this.path + "，错误：" + e.message);
            return "";
        }
    }
    
    /**
     * @brief 检查文件是否已修改
     * @return 是否已修改
     */
    public function hasChanged(): Boolean {
        let currentInfo = new FileInfo(this.path);
        
        // 先比较修改时间和大小，这样更高效
        if (this.lastModifiedTime != currentInfo.lastModifiedTime || 
            this.size != currentInfo.size) {
            return true;
        }
        
        // 如果时间和大小相同，比较哈希值
        return this.hash != currentInfo.hash;
    }
    
    /**
     * @brief 获取文件存在
     * @return 文件是否存在
     */
    public function exists(): Boolean {
        return FileSystem.fileExists(this.path);
    }
}

/**
 * @class DependencyInfo
 * @brief 依赖信息类，存储文件的依赖关系
 */
class DependencyInfo {
    public {
        sourcePath: String;                 // 源文件路径
        dependencies: Set<String>;          // 依赖的文件路径集合
        reverseDependencies: Set<String>;   // 反向依赖（依赖该文件的文件路径集合）
    }
    
    /**
     * @brief 构造函数
     * @param sourcePath 源文件路径
     */
    constructor(sourcePath: String) {
        this.sourcePath = sourcePath;
        this.dependencies = new Set<String>();
        this.reverseDependencies = new Set<String>();
    }
    
    /**
     * @brief 添加依赖
     * @param dependencyPath 依赖文件路径
     */
    public function addDependency(dependencyPath: String): void {
        this.dependencies.add(dependencyPath);
    }
    
    /**
     * @brief 添加反向依赖
     * @param dependentPath 依赖该文件的文件路径
     */
    public function addReverseDependency(dependentPath: String): void {
        this.reverseDependencies.add(dependentPath);
    }
    
    /**
     * @brief 获取所有依赖
     * @return 依赖文件路径集合
     */
    public function getDependencies(): Set<String> {
        return this.dependencies;
    }
    
    /**
     * @brief 获取所有反向依赖
     * @return 反向依赖文件路径集合
     */
    public function getReverseDependencies(): Set<String> {
        return this.reverseDependencies;
    }
    
    /**
     * @brief 清除所有依赖
     */
    public function clearDependencies(): void {
        this.dependencies.clear();
    }
    
    /**
     * @brief 清除所有反向依赖
     */
    public function clearReverseDependencies(): void {
        this.reverseDependencies.clear();
    }
}

/**
 * @class BuildCache
 * @brief 构建缓存类，存储文件的构建信息和依赖关系
 */
class BuildCache {
    private {
        fileInfoMap: Map<String, FileInfo>;             // 文件路径 -> 文件信息
        dependencyMap: Map<String, DependencyInfo>;     // 文件路径 -> 依赖信息
        cachePath: String;                              // 缓存文件路径
    }
    
    /**
     * @brief 构造函数
     * @param cachePath 缓存文件路径
     */
    constructor(cachePath: String = ".qentl-build-cache") {
        this.fileInfoMap = new Map<String, FileInfo>();
        this.dependencyMap = new Map<String, DependencyInfo>();
        this.cachePath = cachePath;
        this.loadCache();
    }
    
    /**
     * @brief 加载缓存
     */
    private function loadCache(): void {
        try {
            if (FileSystem.fileExists(this.cachePath)) {
                let content = FileSystem.readTextFile(this.cachePath);
                let cacheData = JSON.parse(content);
                
                // 加载文件信息
                let fileInfoData = cacheData["fileInfo"] || {};
                for (let path in fileInfoData) {
                    let info = new FileInfo(path);
                    info.lastModifiedTime = fileInfoData[path]["lastModifiedTime"] || 0;
                    info.size = fileInfoData[path]["size"] || 0;
                    info.hash = fileInfoData[path]["hash"] || "";
                    this.fileInfoMap.set(path, info);
                }
                
                // 加载依赖信息
                let dependencyData = cacheData["dependency"] || {};
                for (let path in dependencyData) {
                    let depInfo = new DependencyInfo(path);
                    
                    // 加载依赖
                    let deps = dependencyData[path]["dependencies"] || [];
                    for (let i = 0; i < deps.length; i++) {
                        depInfo.addDependency(deps[i]);
                    }
                    
                    // 加载反向依赖
                    let revDeps = dependencyData[path]["reverseDependencies"] || [];
                    for (let i = 0; i < revDeps.length; i++) {
                        depInfo.addReverseDependency(revDeps[i]);
                    }
                    
                    this.dependencyMap.set(path, depInfo);
                }
                
                System.println("成功加载构建缓存：" + this.cachePath);
            }
        } catch (e) {
            System.println("加载构建缓存失败：" + e.message);
            // 如果加载失败，使用空缓存
            this.fileInfoMap.clear();
            this.dependencyMap.clear();
        }
    }
    
    /**
     * @brief 保存缓存
     */
    public function saveCache(): void {
        try {
            let cacheData = {
                "fileInfo": {},
                "dependency": {}
            };
            
            // 保存文件信息
            let fileInfoKeys = this.fileInfoMap.keys();
            for (let i = 0; i < fileInfoKeys.length; i++) {
                let path = fileInfoKeys[i];
                let info = this.fileInfoMap.get(path);
                cacheData["fileInfo"][path] = {
                    "lastModifiedTime": info.lastModifiedTime,
                    "size": info.size,
                    "hash": info.hash
                };
            }
            
            // 保存依赖信息
            let dependencyKeys = this.dependencyMap.keys();
            for (let i = 0; i < dependencyKeys.length; i++) {
                let path = dependencyKeys[i];
                let depInfo = this.dependencyMap.get(path);
                cacheData["dependency"][path] = {
                    "dependencies": Array.fromSet(depInfo.getDependencies()),
                    "reverseDependencies": Array.fromSet(depInfo.getReverseDependencies())
                };
            }
            
            let content = JSON.stringify(cacheData, null, 2);
            FileSystem.writeTextFile(this.cachePath, content);
            System.println("成功保存构建缓存：" + this.cachePath);
        } catch (e) {
            System.println("保存构建缓存失败：" + e.message);
        }
    }
    
    /**
     * @brief 添加或更新文件信息
     * @param path 文件路径
     * @return 文件信息对象
     */
    public function addFileInfo(path: String): FileInfo {
        let info = new FileInfo(path);
        this.fileInfoMap.set(path, info);
        return info;
    }
    
    /**
     * @brief 获取文件信息
     * @param path 文件路径
     * @return 文件信息对象，若不存在则返回null
     */
    public function getFileInfo(path: String): FileInfo {
        return this.fileInfoMap.get(path);
    }
    
    /**
     * @brief 添加依赖关系
     * @param sourcePath 源文件路径
     * @param dependencyPath 依赖文件路径
     */
    public function addDependency(sourcePath: String, dependencyPath: String): void {
        // 添加或获取源文件的依赖信息
        let sourceDepInfo = this.dependencyMap.get(sourcePath);
        if (sourceDepInfo == null) {
            sourceDepInfo = new DependencyInfo(sourcePath);
            this.dependencyMap.set(sourcePath, sourceDepInfo);
        }
        
        // 添加或获取依赖文件的依赖信息
        let depDepInfo = this.dependencyMap.get(dependencyPath);
        if (depDepInfo == null) {
            depDepInfo = new DependencyInfo(dependencyPath);
            this.dependencyMap.set(dependencyPath, depDepInfo);
        }
        
        // 添加依赖关系
        sourceDepInfo.addDependency(dependencyPath);
        depDepInfo.addReverseDependency(sourcePath);
    }
    
    /**
     * @brief 获取依赖信息
     * @param path 文件路径
     * @return 依赖信息对象，若不存在则返回null
     */
    public function getDependencyInfo(path: String): DependencyInfo {
        return this.dependencyMap.get(path);
    }
    
    /**
     * @brief 清除文件的所有依赖关系
     * @param path 文件路径
     */
    public function clearDependencies(path: String): void {
        let depInfo = this.dependencyMap.get(path);
        if (depInfo != null) {
            // 获取所有依赖
            let deps = depInfo.getDependencies();
            let depsArray = Array.fromSet(deps);
            
            // 清除自身依赖列表
            depInfo.clearDependencies();
            
            // 从所有依赖文件的反向依赖列表中移除自身
            for (let i = 0; i < depsArray.length; i++) {
                let depPath = depsArray[i];
                let depDepInfo = this.dependencyMap.get(depPath);
                if (depDepInfo != null) {
                    let revDeps = depDepInfo.getReverseDependencies();
                    revDeps.remove(path);
                }
            }
        }
    }
    
    /**
     * @brief 检查文件是否已修改
     * @param path 文件路径
     * @return 是否已修改
     */
    public function isFileModified(path: String): Boolean {
        let info = this.getFileInfo(path);
        if (info == null) {
            // 如果没有缓存信息，认为已修改
            return true;
        }
        
        return info.hasChanged();
    }
    
    /**
     * @brief 获取需要重新构建的文件列表
     * @param sourceFiles 源文件列表
     * @return 需要重新构建的文件列表
     */
    public function getFilesToRebuild(sourceFiles: Array<String>): Array<String> {
        let result = new Set<String>();
        
        for (let i = 0; i < sourceFiles.length; i++) {
            let path = sourceFiles[i];
            
            // 检查文件是否存在
            let fileInfo = this.getFileInfo(path);
            if (fileInfo == null) {
                fileInfo = this.addFileInfo(path);
            }
            
            if (!fileInfo.exists()) {
                continue; // 跳过不存在的文件
            }
            
            // 如果文件已修改，添加自身和所有依赖该文件的文件
            if (this.isFileModified(path)) {
                result.add(path);
                this.addReverseDependenciesToSet(path, result);
            }
        }
        
        return Array.fromSet(result);
    }
    
    /**
     * @brief 将文件的所有反向依赖添加到集合中
     * @param path 文件路径
     * @param result 结果集合
     */
    private function addReverseDependenciesToSet(path: String, result: Set<String>): void {
        let depInfo = this.getDependencyInfo(path);
        if (depInfo != null) {
            let revDeps = depInfo.getReverseDependencies();
            let revDepsArray = Array.fromSet(revDeps);
            
            for (let i = 0; i < revDepsArray.length; i++) {
                let revDepPath = revDepsArray[i];
                if (!result.contains(revDepPath)) {
                    result.add(revDepPath);
                    // 递归添加反向依赖的反向依赖
                    this.addReverseDependenciesToSet(revDepPath, result);
                }
            }
        }
    }
}

/**
 * @class IncrementalBuilder
 * @brief 增量构建器类，用于实现增量编译
 */
class IncrementalBuilder {
    private {
        cache: BuildCache;              // 构建缓存
        sourceDir: String;              // 源码目录
        outputDir: String;              // 输出目录
        verbose: Boolean;               // 是否输出详细信息
    }
    
    /**
     * @brief 构造函数
     * @param sourceDir 源码目录
     * @param outputDir 输出目录
     * @param cachePath 缓存文件路径
     * @param verbose 是否输出详细信息
     */
    constructor(sourceDir: String, outputDir: String, cachePath: String = ".qentl-build-cache", verbose: Boolean = false) {
        this.sourceDir = sourceDir;
        this.outputDir = outputDir;
        this.cache = new BuildCache(cachePath);
        this.verbose = verbose;
    }
    
    /**
     * @brief 获取指定目录下的所有QEntL源文件
     * @param directory 目录路径
     * @param recursive 是否递归搜索子目录
     * @return 源文件路径列表
     */
    public function getSourceFiles(directory: String = "", recursive: Boolean = true): Array<String> {
        let dir = directory.length > 0 ? directory : this.sourceDir;
        let result = new Array<String>();
        
        try {
            let entries = FileSystem.listDirectory(dir);
            
            for (let i = 0; i < entries.length; i++) {
                let entry = entries[i];
                let path = dir + "/" + entry;
                
                if (FileSystem.isDirectory(path)) {
                    if (recursive) {
                        let subDirFiles = this.getSourceFiles(path, recursive);
                        for (let j = 0; j < subDirFiles.length; j++) {
                            result.push(subDirFiles[j]);
                        }
                    }
                } else if (path.endsWith(".qentl")) {
                    result.push(path);
                }
            }
        } catch (e) {
            System.println("获取源文件列表失败：" + e.message);
        }
        
        return result;
    }
    
    /**
     * @brief 解析源文件依赖关系
     * @param sourcePath 源文件路径
     */
    public function parseDependencies(sourcePath: String): void {
        // 清除现有依赖
        this.cache.clearDependencies(sourcePath);
        
        try {
            let content = FileSystem.readTextFile(sourcePath);
            let lines = content.split("\n");
            
            // 正则表达式匹配import语句
            let importRegex = /^import\s+"([^"]+)"/;
            
            for (let i = 0; i < lines.length; i++) {
                let line = lines[i].trim();
                
                // 跳过注释行
                if (line.startsWith("//") || line.startsWith("/*")) {
                    continue;
                }
                
                // 匹配import语句
                let match = importRegex.exec(line);
                if (match) {
                    let dependency = match[1];
                    
                    // 确保依赖存在.qentl扩展名
                    if (!dependency.endsWith(".qentl")) {
                        dependency += ".qentl";
                    }
                    
                    // 添加依赖关系
                    this.cache.addDependency(sourcePath, dependency);
                    
                    if (this.verbose) {
                        System.println("发现依赖：" + sourcePath + " -> " + dependency);
                    }
                }
            }
        } catch (e) {
            System.println("解析依赖失败：" + sourcePath + "，错误：" + e.message);
        }
    }
    
    /**
     * @brief 更新所有源文件的依赖关系
     */
    public function updateDependencies(): void {
        let sourceFiles = this.getSourceFiles();
        
        if (this.verbose) {
            System.println("更新依赖关系：共 " + sourceFiles.length + " 个源文件");
        }
        
        for (let i = 0; i < sourceFiles.length; i++) {
            this.parseDependencies(sourceFiles[i]);
        }
        
        // 保存缓存
        this.cache.saveCache();
    }
    
    /**
     * @brief 获取需要重新构建的文件
     * @return 需要重新构建的文件列表
     */
    public function getFilesToRebuild(): Array<String> {
        let sourceFiles = this.getSourceFiles();
        return this.cache.getFilesToRebuild(sourceFiles);
    }
    
    /**
     * @brief 获取构建缓存
     * @return 构建缓存
     */
    public function getCache(): BuildCache {
        return this.cache;
    }
    
    /**
     * @brief 保存构建缓存
     */
    public function saveCache(): void {
        this.cache.saveCache();
    }
    
    /**
     * @brief 构建完成后更新文件信息
     * @param filePath 文件路径
     */
    public function updateFileInfo(filePath: String): void {
        this.cache.addFileInfo(filePath);
    }
    
    /**
     * @brief 打印构建统计信息
     * @param filesToRebuild 需要重新构建的文件列表
     * @param totalFiles 总文件数
     */
    public function printBuildStats(filesToRebuild: Array<String>, totalFiles: Integer): void {
        System.println("构建统计信息:");
        System.println("  总文件数: " + totalFiles);
        System.println("  需重新构建: " + filesToRebuild.length);
        System.println("  节省构建数: " + (totalFiles - filesToRebuild.length));
        
        if (this.verbose && filesToRebuild.length > 0) {
            System.println("需要重新构建的文件:");
            for (let i = 0; i < filesToRebuild.length; i++) {
                System.println("  " + filesToRebuild[i]);
            }
        }
    }
}

export {
    FileInfo,
    DependencyInfo,
    BuildCache,
    IncrementalBuilder
}; 