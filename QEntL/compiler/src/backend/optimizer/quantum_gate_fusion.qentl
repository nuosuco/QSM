/**
 * @file quantum_gate_fusion.qentl
 * @brief 量子门融合优化器实现
 * 
 * 量子基因编码: QGC-COMPILER-OPT-FUSION-2024061901
 * 量子纠缠信道: QEC-COMPILER-OPT-01
 */

import "QEntL/core/error.qentl";
import "QEntL/core/array.qentl";
import "QEntL/core/map.qentl";
import "QEntL/compiler/src/backend/ir/ir_module.qentl";
import "QEntL/compiler/src/backend/ir/ir_instruction.qentl";
import "QEntL/vm/src/core/os_interface/logger.qentl";

/**
 * 量子门类型
 */
quantum_enum QuantumGateType {
    H = 1,        // 阿达马门
    X = 2,        // 泡利-X门
    Y = 3,        // 泡利-Y门
    Z = 4,        // 泡利-Z门
    S = 5,        // S门
    T = 6,        // T门
    CNOT = 7,     // 受控非门
    SWAP = 8,     // 交换门
    CUSTOM = 9    // 自定义门
}

/**
 * 量子门操作模式
 * 用于确定门操作的模式,以便于识别可融合的模式
 */
quantum_enum QuantumGatePattern {
    IDENTICAL_CONSECUTIVE = 1,     // 连续相同的门 (例如 XX -> I)
    INVERSE_CONSECUTIVE = 2,       // 连续互逆的门 (例如 HH -> I)
    ROTATION_MERGING = 3,          // 旋转门合并 (例如 RzRz -> Rz(θ1+θ2))
    COMMUTATIVE_REORDERING = 4,    // 可交换门重排序
    CONTROL_MERGING = 5            // 控制门合并
}

/**
 * @class QuantumGateFusion
 * @brief 量子门融合优化器
 * 
 * 该优化器识别并融合等效的量子门序列,减少所需的量子操作数量,
 * 同时保持计算结果的正确性。
 */
export quantum_class QuantumGateFusion {
    private {
        logger: Logger;
        
        // 保存门之间的融合规则
        fusionRules: Map<String, Function>;
        
        // 统计信息
        optimizationStats: {
            totalGatesRemoved: UInteger,
            totalPatternsFused: UInteger,
            fusionsByType: Map<QuantumGatePattern, UInteger>
        };
    }
    
    /**
     * @brief 构造函数
     * @param logger 日志记录器
     */
    constructor(logger: Logger) {
        this.logger = logger;
        this.fusionRules = new Map<String, Function>();
        this.optimizationStats = {
            totalGatesRemoved: 0,
            totalPatternsFused: 0,
            fusionsByType: new Map<QuantumGatePattern, UInteger>()
        };
        
        // 初始化融合规则
        this.initFusionRules();
    }
    
    /**
     * @brief 初始化量子门融合规则
     */
    private function initFusionRules(): void {
        // 自消除规则: XX = I, YY = I, ZZ = I
        this.fusionRules.set("X+X", (gates) => this.cancelIdenticalGates(gates, QuantumGateType.X));
        this.fusionRules.set("Y+Y", (gates) => this.cancelIdenticalGates(gates, QuantumGateType.Y));
        this.fusionRules.set("Z+Z", (gates) => this.cancelIdenticalGates(gates, QuantumGateType.Z));
        
        // 阿达马自消除规则: HH = I
        this.fusionRules.set("H+H", (gates) => this.cancelIdenticalGates(gates, QuantumGateType.H));
        
        // 旋转合并规则
        this.fusionRules.set("Rz+Rz", (gates, params) => this.mergeRotationGates(gates, params, "Rz"));
        this.fusionRules.set("Rx+Rx", (gates, params) => this.mergeRotationGates(gates, params, "Rx"));
        this.fusionRules.set("Ry+Ry", (gates, params) => this.mergeRotationGates(gates, params, "Ry"));
        
        // CNOT相关规则
        this.fusionRules.set("CNOT+CNOT", (gates) => this.cancelControlledGates(gates, QuantumGateType.CNOT));
        
        // 特殊规则: HZH = X
        this.fusionRules.set("H+Z+H", (gates) => this.transformHZH(gates));
        
        // 特殊规则: HXH = Z
        this.fusionRules.set("H+X+H", (gates) => this.transformHXH(gates));
    }
    
    /**
     * @brief 优化IR模块中的量子门操作
     * @param irModule IR模块
     * @return 优化后的IR模块
     */
    public function optimize(irModule: IRModule): IRModule {
        this.logger.log(LogLevel.INFO, "开始量子门融合优化...");
        
        // 重置统计信息
        this.resetOptimizationStats();
        
        // 处理每个函数块中的指令
        let functions = irModule.getFunctions();
        for (let i = 0; i < functions.length; i++) {
            let function = functions[i];
            let blocks = function.getBlocks();
            
            for (let j = 0; j < blocks.length; j++) {
                let block = blocks[j];
                this.optimizeBlock(block);
            }
        }
        
        // 记录优化统计信息
        this.logOptimizationStats();
        
        return irModule;
    }
    
    /**
     * @brief 优化基本块中的量子门序列
     * @param block IR基本块
     */
    private function optimizeBlock(block: IRBasicBlock): void {
        let instructions = block.getInstructions();
        let optimizedInstructions = new Array<IRInstruction>();
        let i = 0;
        
        while (i < instructions.length) {
            // 查找量子门指令序列
            let gateSequence = this.identifyGateSequence(instructions, i);
            
            if (gateSequence.length > 1) {
                // 尝试融合门序列
                let fusedGates = this.fuseGateSequence(gateSequence);
                
                // 添加融合后的门
                for (let j = 0; j < fusedGates.length; j++) {
                    optimizedInstructions.push(fusedGates[j]);
                }
                
                // 更新统计信息
                this.optimizationStats.totalGatesRemoved += 
                    gateSequence.length - fusedGates.length;
                
                // 跳过已处理的指令
                i += gateSequence.length;
            } else {
                // 不是可融合的门序列,保留原指令
                optimizedInstructions.push(instructions[i]);
                i++;
            }
        }
        
        // 更新基本块的指令
        block.setInstructions(optimizedInstructions);
    }
    
    /**
     * @brief 识别连续的量子门序列
     * @param instructions 指令数组
     * @param startIndex 起始索引
     * @return 门序列
     */
    private function identifyGateSequence(
        instructions: Array<IRInstruction>,
        startIndex: UInteger
    ): Array<IRInstruction> {
        let sequence = [];
        let currentIndex = startIndex;
        
        // 检查起始指令是否为量子门操作
        if (!this.isQuantumGateInstruction(instructions[currentIndex])) {
            return [instructions[currentIndex]];
        }
        
        // 添加第一个门
        sequence.push(instructions[currentIndex]);
        currentIndex++;
        
        // 收集连续的量子门指令
        while (currentIndex < instructions.length && 
               this.isQuantumGateInstruction(instructions[currentIndex]) &&
               this.canAddToSequence(sequence, instructions[currentIndex])) {
            
            sequence.push(instructions[currentIndex]);
            currentIndex++;
            
            // 检查是否找到了匹配的模式
            if (this.isKnownPattern(sequence)) {
                break;
            }
        }
        
        return sequence;
    }
    
    /**
     * @brief 检查指令是否为量子门操作
     * @param instruction IR指令
     * @return 是否为量子门操作
     */
    private function isQuantumGateInstruction(instruction: IRInstruction): Boolean {
        let opcode = instruction.getOpcode();
        
        return opcode.startsWith("q.") && 
               (opcode.includes(".gate.") || opcode == "q.h" || 
                opcode == "q.x" || opcode == "q.y" || opcode == "q.z" ||
                opcode == "q.cnot" || opcode == "q.swap");
    }
    
    /**
     * @brief 检查指令是否可添加到序列中
     * @param sequence 当前序列
     * @param instruction 要添加的指令
     * @return 是否可以添加
     */
    private function canAddToSequence(
        sequence: Array<IRInstruction>,
        instruction: IRInstruction
    ): Boolean {
        // 检查门操作的量子位是否匹配
        // 只有操作相同量子位或相关量子位的门才能融合
        if (sequence.length == 0) {
            return true;
        }
        
        let lastInst = sequence[sequence.length - 1];
        let lastQubits = this.getTargetQubits(lastInst);
        let currentQubits = this.getTargetQubits(instruction);
        
        // 检查是否有重叠的量子位
        return this.hasOverlappingQubits(lastQubits, currentQubits);
    }
    
    /**
     * @brief 获取指令操作的目标量子位
     * @param instruction IR指令
     * @return 量子位数组
     */
    private function getTargetQubits(instruction: IRInstruction): Array<IROperand> {
        let operands = instruction.getOperands();
        let qubits = [];
        
        // 根据指令类型提取量子位
        let opcode = instruction.getOpcode();
        
        if (opcode == "q.h" || opcode == "q.x" || opcode == "q.y" || opcode == "q.z") {
            // 单量子位门,只有一个量子位操作数
            qubits.push(operands[0]);
        } else if (opcode == "q.cnot") {
            // 控制非门,有控制位和目标位
            qubits.push(operands[0]); // 控制位
            qubits.push(operands[1]); // 目标位
        } else if (opcode == "q.swap") {
            // 交换门,有两个量子位
            qubits.push(operands[0]);
            qubits.push(operands[1]);
        } else if (opcode.startsWith("q.gate.r")) {
            // 旋转门,第一个操作数是量子位,第二个是角度
            qubits.push(operands[0]);
        }
        
        return qubits;
    }
    
    /**
     * @brief 检查两组量子位是否有重叠
     * @param qubits1 第一组量子位
     * @param qubits2 第二组量子位
     * @return 是否有重叠
     */
    private function hasOverlappingQubits(
        qubits1: Array<IROperand>,
        qubits2: Array<IROperand>
    ): Boolean {
        for (let i = 0; i < qubits1.length; i++) {
            let qubit1 = qubits1[i];
            
            for (let j = 0; j < qubits2.length; j++) {
                let qubit2 = qubits2[j];
                
                if (qubit1.equals(qubit2)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    /**
     * @brief 检查序列是否匹配已知模式
     * @param sequence 门序列
     * @return 是否匹配已知模式
     */
    private function isKnownPattern(sequence: Array<IRInstruction>): Boolean {
        let pattern = this.getSequencePattern(sequence);
        return pattern != "";
    }
    
    /**
     * @brief 获取序列的模式字符串
     * @param sequence 门序列
     * @return 模式字符串
     */
    private function getSequencePattern(sequence: Array<IRInstruction>): String {
        if (sequence.length < 2) {
            return "";
        }
        
        let pattern = "";
        
        for (let i = 0; i < sequence.length; i++) {
            let inst = sequence[i];
            let opcode = inst.getOpcode();
            
            if (opcode == "q.h") {
                pattern += "H";
            } else if (opcode == "q.x") {
                pattern += "X";
            } else if (opcode == "q.y") {
                pattern += "Y";
            } else if (opcode == "q.z") {
                pattern += "Z";
            } else if (opcode == "q.cnot") {
                pattern += "CNOT";
            } else if (opcode == "q.gate.rz") {
                pattern += "Rz";
            } else if (opcode == "q.gate.rx") {
                pattern += "Rx";
            } else if (opcode == "q.gate.ry") {
                pattern += "Ry";
            }
            
            if (i < sequence.length - 1) {
                pattern += "+";
            }
        }
        
        return pattern;
    }
    
    /**
     * @brief 融合量子门序列
     * @param sequence 门序列
     * @return 融合后的门序列
     */
    private function fuseGateSequence(sequence: Array<IRInstruction>): Array<IRInstruction> {
        let pattern = this.getSequencePattern(sequence);
        
        if (pattern == "") {
            return sequence;
        }
        
        // 检查是否有匹配的融合规则
        if (this.fusionRules.has(pattern)) {
            let fusionFunc = this.fusionRules.get(pattern);
            let params = this.extractGateParameters(sequence);
            let result = fusionFunc(sequence, params);
            
            if (result.length < sequence.length) {
                // 记录优化成功的模式类型
                this.recordFusionPattern(this.identifyPatternType(pattern));
                this.optimizationStats.totalPatternsFused++;
            }
            
            return result;
        }
        
        return sequence;
    }
    
    /**
     * @brief 提取门参数
     * @param sequence 门序列
     * @return 参数数组
     */
    private function extractGateParameters(sequence: Array<IRInstruction>): Array<Number> {
        let params = [];
        
        for (let i = 0; i < sequence.length; i++) {
            let inst = sequence[i];
            let opcode = inst.getOpcode();
            
            if (opcode.startsWith("q.gate.r")) {
                // 旋转门,参数是第二个操作数
                let operands = inst.getOperands();
                if (operands.length > 1) {
                    params.push(operands[1].getValue());
                }
            }
        }
        
        return params;
    }
    
    /**
     * @brief 消除相同的门
     * @param gates 门序列
     * @param gateType 门类型
     * @return 优化后的序列
     */
    private function cancelIdenticalGates(
        gates: Array<IRInstruction>,
        gateType: QuantumGateType
    ): Array<IRInstruction> {
        // 如果有偶数个相同的门,它们相互抵消
        if (gates.length % 2 == 0) {
            return []; // 返回空数组,表示完全消除
        } else {
            // 奇数个门,保留一个
            return [gates[0]];
        }
    }
    
    /**
     * @brief 合并旋转门
     * @param gates 门序列
     * @param params 参数数组
     * @param gatePrefix 门前缀
     * @return 优化后的序列
     */
    private function mergeRotationGates(
        gates: Array<IRInstruction>,
        params: Array<Number>,
        gatePrefix: String
    ): Array<IRInstruction> {
        // 计算总旋转角度
        let totalAngle = 0;
        for (let i = 0; i < params.length; i++) {
            totalAngle += params[i];
        }
        
        // 角度为0或2π的倍数时,不需要旋转
        if (Math.abs(totalAngle) < 0.0001 || 
            Math.abs(totalAngle - 2 * Math.PI) < 0.0001) {
            return [];
        }
        
        // 创建合并后的旋转门
        let firstGate = gates[0];
        let operands = firstGate.getOperands();
        let qubitOperand = operands[0];
        
        // 创建新的角度操作数
        let angleOperand = new IROperand("imm", totalAngle);
        
        let mergedGate = new IRInstruction(
            "q.gate." + gatePrefix.toLowerCase(),
            [qubitOperand, angleOperand]
        );
        
        return [mergedGate];
    }
    
    /**
     * @brief 消除控制门
     * @param gates 门序列
     * @param gateType 门类型
     * @return 优化后的序列
     */
    private function cancelControlledGates(
        gates: Array<IRInstruction>,
        gateType: QuantumGateType
    ): Array<IRInstruction> {
        // 例如,两个相同控制位和目标位的CNOT门会相互抵消
        if (gates.length >= 2) {
            let firstGate = gates[0];
            let secondGate = gates[1];
            
            let firstOperands = firstGate.getOperands();
            let secondOperands = secondGate.getOperands();
            
            // 检查两个门是否作用于相同的量子位
            if (firstOperands[0].equals(secondOperands[0]) && 
                firstOperands[1].equals(secondOperands[1])) {
                
                // 如果有更多门,继续处理剩余部分
                if (gates.length > 2) {
                    let remaining = [];
                    for (let i = 2; i < gates.length; i++) {
                        remaining.push(gates[i]);
                    }
                    return this.cancelControlledGates(remaining, gateType);
                } else {
                    // 两个门相互抵消
                    return [];
                }
            }
        }
        
        // 无法优化的情况
        return gates;
    }
    
    /**
     * @brief HZH转换为X
     * @param gates 门序列
     * @return 优化后的序列
     */
    private function transformHZH(gates: Array<IRInstruction>): Array<IRInstruction> {
        if (gates.length < 3) {
            return gates;
        }
        
        // 检查是否为 H-Z-H 序列
        let isHZH = 
            gates[0].getOpcode() == "q.h" && 
            gates[1].getOpcode() == "q.z" && 
            gates[2].getOpcode() == "q.h";
        
        if (!isHZH) {
            return gates;
        }
        
        // 检查所有门是否操作相同的量子位
        let qubit1 = gates[0].getOperands()[0];
        let qubit2 = gates[1].getOperands()[0];
        let qubit3 = gates[2].getOperands()[0];
        
        if (!qubit1.equals(qubit2) || !qubit2.equals(qubit3)) {
            return gates;
        }
        
        // 创建等效的X门
        let xGate = new IRInstruction("q.x", [qubit1]);
        return [xGate];
    }
    
    /**
     * @brief HXH转换为Z
     * @param gates 门序列
     * @return 优化后的序列
     */
    private function transformHXH(gates: Array<IRInstruction>): Array<IRInstruction> {
        if (gates.length < 3) {
            return gates;
        }
        
        // 检查是否为 H-X-H 序列
        let isHXH = 
            gates[0].getOpcode() == "q.h" && 
            gates[1].getOpcode() == "q.x" && 
            gates[2].getOpcode() == "q.h";
        
        if (!isHXH) {
            return gates;
        }
        
        // 检查所有门是否操作相同的量子位
        let qubit1 = gates[0].getOperands()[0];
        let qubit2 = gates[1].getOperands()[0];
        let qubit3 = gates[2].getOperands()[0];
        
        if (!qubit1.equals(qubit2) || !qubit2.equals(qubit3)) {
            return gates;
        }
        
        // 创建等效的Z门
        let zGate = new IRInstruction("q.z", [qubit1]);
        return [zGate];
    }
    
    /**
     * @brief 识别模式类型
     * @param pattern 模式字符串
     * @return 模式类型
     */
    private function identifyPatternType(pattern: String): QuantumGatePattern {
        if (pattern == "X+X" || pattern == "Y+Y" || pattern == "Z+Z" || pattern == "H+H") {
            return QuantumGatePattern.IDENTICAL_CONSECUTIVE;
        } else if (pattern == "Rz+Rz" || pattern == "Rx+Rx" || pattern == "Ry+Ry") {
            return QuantumGatePattern.ROTATION_MERGING;
        } else if (pattern == "H+Z+H" || pattern == "H+X+H") {
            return QuantumGatePattern.INVERSE_CONSECUTIVE;
        } else if (pattern == "CNOT+CNOT") {
            return QuantumGatePattern.CONTROL_MERGING;
        }
        
        return QuantumGatePattern.COMMUTATIVE_REORDERING;
    }
    
    /**
     * @brief 记录融合模式
     * @param patternType 模式类型
     */
    private function recordFusionPattern(patternType: QuantumGatePattern): void {
        if (this.optimizationStats.fusionsByType.has(patternType)) {
            let count = this.optimizationStats.fusionsByType.get(patternType);
            this.optimizationStats.fusionsByType.set(patternType, count + 1);
        } else {
            this.optimizationStats.fusionsByType.set(patternType, 1);
        }
    }
    
    /**
     * @brief 重置优化统计信息
     */
    private function resetOptimizationStats(): void {
        this.optimizationStats.totalGatesRemoved = 0;
        this.optimizationStats.totalPatternsFused = 0;
        this.optimizationStats.fusionsByType.clear();
    }
    
    /**
     * @brief 记录优化统计信息
     */
    private function logOptimizationStats(): void {
        this.logger.log(LogLevel.INFO, 
            `量子门融合优化完成: 消除了 ${this.optimizationStats.totalGatesRemoved} 个门, ` +
            `融合了 ${this.optimizationStats.totalPatternsFused} 个模式`);
        
        // 记录每种模式类型的优化次数
        this.optimizationStats.fusionsByType.forEach((type, count) => {
            let patternName = "";
            
            switch (type) {
                case QuantumGatePattern.IDENTICAL_CONSECUTIVE:
                    patternName = "相同连续门";
                    break;
                case QuantumGatePattern.INVERSE_CONSECUTIVE:
                    patternName = "互逆连续门";
                    break;
                case QuantumGatePattern.ROTATION_MERGING:
                    patternName = "旋转门合并";
                    break;
                case QuantumGatePattern.COMMUTATIVE_REORDERING:
                    patternName = "可交换门重排序";
                    break;
                case QuantumGatePattern.CONTROL_MERGING:
                    patternName = "控制门合并";
                    break;
            }
            
            this.logger.log(LogLevel.DEBUG, `  模式类型: ${patternName}, 优化次数: ${count}`);
        });
    }
}

/**
 * @class QuantumGateFusionBuilder
 * @brief 量子门融合优化器建造者
 */
export quantum_class QuantumGateFusionBuilder {
    /**
     * @brief 创建量子门融合优化器实例
     * @param logger 日志记录器
     * @return 优化器实例
     */
    public static function create(logger: Logger): QuantumGateFusion {
        return new QuantumGateFusion(logger);
    }
} 