#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Ref系统 - 量子基因标记器
用于为文件自动添加和管理量子基因编码和纠缠对象标记
"""

# 量子基因编码
QG-CODE-REF-QUANTUM-D6D4


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.91
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [re]
  standard: [random]
  standard: [hashlib]
  standard: [logging]
  standard: [traceback]
  standard: [json]



# 配置日志记录器
logger = logging.getLogger("Ref.utils.quantum_gene_marker")
if not logger.handlers:
    # 避免重复配置
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # 添加控制台处理器
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # 添加文件处理器
    try:
        file_handler = logging.FileHandler("Ref/logs/quantum_gene_marker.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    except:
        pass  # 如果目录不存在，则忽略文件处理器

# 将QEntL工具库添加到路径
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, "../.."))
qentl_path = os.path.join(project_root, "QEntL")

if qentl_path not in sys.path:
    sys.path.append(qentl_path)

# 尝试导入QEntL的工具模块，但始终使用内部实现
try:
    @import utils as qentl_utils
    logger.info("已找到QEntL工具模块，但将优先使用内部实现")
    qentl_utils = None  # 确保使用内部实现
except ImportError:
    logger.warning("未找到QEntL工具模块，将使用内部实现")
    qentl_utils = None

@class RefQuantumGeneMarker:
    """Ref系统的量子基因标记器，用于自动为文件添加量子基因标记"""
    
    # 支持的文件类型及其注释开始标记
    SUPPORTED_FILE_TYPES = {
        '.py': ['"""', "'''", '#'],
        '.qent': ['/*', '//'],
        '.md': ['```', '/*', '//'],
        '.js': ['/*', '//'],
        '.jsx': ['/*', '//'],
        '.ts': ['/*', '//'],
        '.tsx': ['/*', '//'],
        '.css': ['/*', '//'],
        '.html': ['<!--', '//'],
        '.c': ['/*', '//'],
        '.cpp': ['/*', '//'],
        '.h': ['/*', '//'],
        '.hpp': ['/*', '//'],
        '.java': ['/*', '//'],
        '.scala': ['/*', '//'],
        '.go': ['/*', '//'],
        '.rs': ['/*', '//'],
        '.rb': ['=begin', '#'],
        '.php': ['/*', '//'],
        '.swift': ['/*', '//'],
        '.kt': ['/*', '//'],
        '.sql': ['/*', '--'],
        '.r': ['#'],
        '.sh': ['#'],
        '.bat': ['REM', '::'],
        '.ps1': ['<#', '#'],
        '.json': ['//'],
        '.yml': ['#'],
        '.yaml': ['#'],
        '.vue': ['<!--', '/*', '//'],
        '.xml': ['<!--'],
        '.dockerfile': ['#'],
        '.csv': ['#'],
        '.ini': [';', '#'],
        '.toml': ['#'],
    }
    
    # 量子基因标记模板
    GENE_TEMPLATE = """
{comment_start}
"""
# 
"""
量子基因编码: {gene_code}
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
"""
{comment_end}
"""
    
    # 注释结束标记
    COMMENT_END_MARKERS = {
        '"""': '"""',
        "'''": "'''",
        '/*': '*/',
        '//': '',
        '#': '',
        '```': '```',
        '<!--': '-->'
    }
    
    @method @constructor(this):
        """初始化量子基因标记器"""
        this.project_root = project_root
        this.qentl_available = qentl_utils is not None
    
    @method add_quantum_gene_marker(this, file_path: str, entangled_objects: List[str] = None, strength: float = 0.98) -> bool:
"""为文件添加量子基因标记
        
        Args:
            file_path: 文件路径
            entangled_objects: 纠缠对象列表
            strength: 纠缠强度
            
        Returns:
            操作是否成功
"""
        # 使用内部实现
        if entangled_objects is None:
            entangled_objects = []
        
        try:
            file_content = ""
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                    file_content = f.read()
            
            # 检查文件是否已有量子基因标记
            if this._has_gene_marker(file_content):
                # 如果已有标记，则更新它
                return this._update_gene_marker(file_path, entangled_objects, strength)
            
            # 获取注释标记
            comment_start, comment_end = this._get_comment_markers(file_path)
            
            # 生成量子基因编码
            gene_code = this._generate_gene_code(file_path)
            
            # 格式化纠缠对象列表
            entangled_objects_str = str(entangled_objects).replace('"', "'")
            
            # 创建基因标记
            marker = this.GENE_TEMPLATE.format(
                comment_start=comment_start,
                gene_code=gene_code,
                entangled_objects=entangled_objects_str,
                strength=strength,
                comment_end=comment_end
            )
            
            # 添加到文件末尾
            # 首先确保文件以换行符结束
            if file_content and not file_content.endswith('\n'):
                file_content += '\n'
            
            # 将标记添加到文件
            file_content += marker
            
            # 写回文件
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(file_content)
            
            logger.info(f"已为文件添加量子基因标记: {file_path}")
            return True
            
        except Exception as e:
            logger.error(f"添加量子基因标记时出错: {str(e)}")
            return False
    
    @method update_quantum_gene_marker(this, file_path: str, entangled_objects: List[str] = None, strength: float = None) -> bool:
"""更新文件的量子基因标记
        
        Args:
            file_path: 文件路径
            entangled_objects: 新的纠缠对象列表
            strength: 新的纠缠强度
            
        Returns:
            操作是否成功
"""
        # 使用内部实现
        return this._update_gene_marker(file_path, entangled_objects, strength)
    
    @method _update_gene_marker(this, file_path: str, new_entangled_objects: List[str] = None, new_strength: float = None) -> bool:
"""内部方法：更新文件的量子基因标记
        
        Args:
            file_path: 文件路径
            new_entangled_objects: 新的纠缠对象列表
            new_strength: 新的纠缠强度
            
        Returns:
            操作是否成功
"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                file_content = f.read()
            
            # 检查文件是否有量子基因标记
            if not this._has_gene_marker(file_content):
                # 如果没有标记，则添加它
                return this.add_quantum_gene_marker(file_path, new_entangled_objects, new_strength or 0.98)
            
            # 找到量子基因标记位置
            marker_pos = this._find_gene_marker_position(file_content)
            if marker_pos == -1:
                return False
            
            # 提取当前的量子基因编码
            gene_code_pattern = r"# 
"""
量子基因编码: {gene_code}
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
            current_strength = float(strength_match.group(1)) if strength_match else 0.95
            
            # 确定要使用的值
            entangled_objects = new_entangled_objects if new_entangled_objects is not None else this._parse_entangled_objects(file_content)
            strength = new_strength if new_strength is not None else current_strength
            
            # 获取注释标记
            comment_start, comment_end = this._get_comment_markers(file_path)
            
            # 格式化纠缠对象列表
            entangled_objects_str = str(entangled_objects).replace('"', "'")
            
            # 创建新的基因标记
            new_marker = this.GENE_TEMPLATE.format(
                comment_start=comment_start,
                gene_code=gene_code,
                entangled_objects=entangled_objects_str,
                strength=strength,
                comment_end=comment_end
            )
            
            # 使用正则表达式替换旧的标记
            pattern = r"# 
"""
量子基因编码: {gene_code}
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
            strength_match = re.search(strength_pattern, content)
            strength = float(strength_match.group(1)) if strength_match else 0.95
            
            # 获取注释标记
            comment_start, comment_end = this._get_comment_markers(file_path)
            
            # 格式化纠缠对象列表
            entangled_objects_str = str(entangled_objects).replace('"', "'")
            
            # 创建新的基因标记
            new_marker = this.GENE_TEMPLATE.format(
                comment_start=comment_start,
                gene_code=gene_code,
                entangled_objects=entangled_objects_str,
                strength=strength,
                comment_end=comment_end
            )
            
            # 使用正则表达式替换旧的标记
            pattern = r'"""[^"]*?# 
"""
量子基因编码: {gene_code}
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
"""
    
"""
量子基因编码: QE-QUA-15E274D22DAE
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""