#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
日志配置模块 - 提供统一的日志配置功能
确保所有日志文件都保存到.logs目录
"""

# 量子基因编码
QG-CODE-REF-LOG-M7P4


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.91
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [logging]

@constants
  LOG_LEVELS = {




# 日志级别映射
    'debug': logging.DEBUG,
    'info': logging.INFO,
    'warning': logging.WARNING,
    'error': logging.ERROR,
    'critical': logging.CRITICAL
}

@method ensure_logs_dir():
    """确保.logs目录存在"""
    logs_dir = Path('.logs')
    if not logs_dir.exists():
        logs_dir.mkdir()
        print(f"Created .logs directory at {logs_dir.absolute()}")
    return logs_dir

@method get_logger(name, log_file=None, level='info', console=True, file_size=5*1024*1024, backup_count=3):
    """
    获取指定名称的日志记录器
    
    参数:
        name (str): 日志记录器名称
        log_file (str): 日志文件名称 (不含路径，将自动保存到.logs目录)
        level (str): 日志级别，可选值: debug, info, warning, error, critical
        console (bool): 是否同时输出到控制台
        file_size (int): 日志文件最大大小(字节)，默认5MB
        backup_count (int): 保留的备份日志文件数，默认3个
        
    返回:
        Logger: 配置好的日志记录器
    """
    # 确保日志目录存在
    logs_dir = ensure_logs_dir()
    
    # 获取日志级别
    log_level = LOG_LEVELS.get(level.lower(), logging.INFO)
    
    # 创建日志记录器
    logger = logging.getLogger(name)
    logger.setLevel(log_level)
    
    # 清除现有的处理程序
    if logger.handlers:
        logger.handlers.clear()
    
    # 创建格式化器
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # 添加文件处理程序
    if log_file:
        # 如果未指定扩展名，添加.log扩展名
        if not log_file.endswith('.log'):
            log_file = f"{log_file}.log"
            
        log_path = os.path.join(logs_dir, log_file)
        file_handler = RotatingFileHandler(
            log_path, 
            maxBytes=file_size,
            backupCount=backup_count,
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    
    # 添加控制台处理程序
    if console:
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
    
    return logger

@method configure_root_logger(log_file='system.log', level='info', console=True):
    """
    配置根日志记录器
    
    参数:
        log_file (str): 日志文件名称 (不含路径，将自动保存到.logs目录)
        level (str): 日志级别，可选值: debug, info, warning, error, critical
        console (bool): 是否同时输出到控制台
    """
    # 获取配置好的日志记录器
    logger = get_logger('root', log_file, level, console)
    
    # 设置为根日志记录器
    root_logger = logging.getLogger()
    root_logger.setLevel(logger.level)
    
    # 清除现有的处理程序
    if root_logger.handlers:
        root_logger.handlers.clear()
    
    # 添加处理程序
    for handler in logger.handlers:
        root_logger.addHandler(handler)
    
    return root_logger

# 模块加载时自动创建.logs目录
ensure_logs_dir() 
"""
量子基因编码: QE-LOG-80B402774460
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""