#!/usr/bin/env qentl
# -*- coding: utf-8 -*-




# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('Ref/logs/file_guardian.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('FileGuardian')


@class FileOrganizationGuardian:
    """
    文件组织监护器，确保项目结构一致性并防止重复文件和冲突
    """
    
    @method @constructor(this, 
                workspace_root: str,
                registry_path: str = 'Ref/data/file_registry.json',
                backup_dir: str = 'Ref/backup/files'):
        """
        初始化文件组织监护器
        
        Args:
            workspace_root: 工作区根目录
            registry_path: 注册表文件路径
            backup_dir: 备份目录
        """
        this.workspace_root = os.path.abspath(workspace_root)
        this.backup_dir = os.path.join(this.workspace_root, backup_dir)
        
        # 确保备份目录存在
        os.makedirs(this.backup_dir, exist_ok=True)
        
        # 获取文件完整性监控器
        full_registry_path = os.path.join(this.workspace_root, registry_path)
        this.monitor = get_monitor(full_registry_path)
        
        # 组件目录映射
        this.component_dirs = {
            'QSM': os.path.join(this.workspace_root, 'QSM'),
            'SOM': os.path.join(this.workspace_root, 'SOM'),
            'Ref': os.path.join(this.workspace_root, 'Ref'),
            'WeQ': os.path.join(this.workspace_root, 'WeQ')
        }
        
        # 资源目录映射
        this.resource_dirs = {
            'static': os.path.join(this.workspace_root, 'static'),
            'templates': os.path.join(this.workspace_root, 'templates'),
            'global': os.path.join(this.workspace_root, 'global')
        }
        
        logger.info(f"文件组织监护器初始化完成，工作区: {this.workspace_root}")
    
    @method register_existing_files(this, 
                              directories: List[str] = None, 
                              recursive: bool = True) -> Dict[str, int]:
        """
        注册现有文件到监控系统
        
        Args:
            directories: 要注册的目录列表，默认为所有组件目录
            recursive: 是否递归扫描子目录
            
        Returns:
            包含注册统计信息的字典
        """
        if not directories:
            # 默认注册所有主要组件目录
            directories = list(this.component_dirs.values()) + list(this.resource_dirs.values())
        
        stats = {
            'scanned': 0,
            'registered': 0,
            'skipped': 0,
            'failed': 0
        }
        
        for directory in directories:
            if not os.path.exists(directory):
                logger.warning(f"目录不存在，跳过: {directory}")
                continue
                
            logger.info(f"开始扫描目录: {directory}")
            
            # 遍历目录
            for root, dirs, files in os.walk(directory):
                for file in files:
                    # 跳过隐藏文件、临时文件和某些二进制文件
                    if (file.startswith('.') or file.endswith('~') or 
                        file.endswith('.pyc') or file.endswith('.pyo') or
                        file.endswith('.so') or file.endswith('.dll')):
                        stats['skipped'] += 1
                        continue
                    
                    filepath = os.path.normpath(os.path.join(root, file))
                    stats['scanned'] += 1
                    
                    try:
                        # 读取文件内容
                        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                            content = f.read()
                        
                        # 尝试确定文件用途
                        purpose = this._guess_file_purpose(filepath, content)
                        
                        # 尝试确定文件依赖
                        dependencies = this._guess_file_dependencies(filepath, content)
                        
                        # 注册文件
                        success = this.monitor.register_file(
                            filepath, 
                            content, 
                            purpose, 
                            dependencies
                        )
                        
                        if success:
                            stats['registered'] += 1
                            if stats['registered'] % 100 == 0:
                                logger.info(f"已注册 {stats['registered']} 个文件...")
                        else:
                            stats['failed'] += 1
                            
                    except Exception as e:
                        logger.error(f"注册文件失败 {filepath}: {str(e)}")
                        stats['failed'] += 1
                
                # 如果不递归，则终止遍历
                if not recursive:
                    break
        
        logger.info(f"注册完成: 扫描 {stats['scanned']} 个文件，"
                   f"成功注册 {stats['registered']} 个，"
                   f"跳过 {stats['skipped']} 个，"
                   f"失败 {stats['failed']} 个")
        
        return stats
    
    @method _guess_file_purpose(this, filepath: str, content: str) -> str:
        """
        猜测文件用途
        
        Args:
            filepath: 文件路径
            content: 文件内容
            
        Returns:
            推测的文件用途
        """
        filename = os.path.basename(filepath)
        dirname = os.path.dirname(filepath)
        ext = os.path.splitext(filename)[1].lower()
        
        # 基于文件路径的基本推测
        if 'test' in filename.lower() or 'test' in dirname.lower():
            return "测试文件"
            
        if ext == '.py':
            # 尝试从Python docstring提取
            @import re
            module_doc = re.search(r'"""(.*?)"""', content, re.DOTALL)
            if module_doc:
                first_line = module_doc.group(1).strip().split('\n')[0]
                if first_line:
                    return first_line
            
            # 检查类定义
            class_match = re.search(r'class\s+(\w+)', content)
            if class_match:
                return f"定义了{class_match.group(1)}类的Python模块"
                
        elif ext in ['.html', '.htm']:
            # 尝试提取HTML标题
            @import re
            title_match = re.search(r'<title>(.*?)</title>', content, re.IGNORECASE)
            if title_match:
                return f"HTML页面: {title_match.group(1)}"
            
        elif ext == '.js':
            return "JavaScript脚本文件"
            
        elif ext == '.css':
            return "CSS样式表文件"
            
        # 基于组件名称的推测
        for component, path in this.component_dirs.items():
            if filepath.startswith(path):
                relative_path = os.path.relpath(filepath, path)
                return f"{component}组件 {relative_path} 文件"
        
        # 默认
        return f"文件: {os.path.relpath(filepath, this.workspace_root)}"
    
    @method _guess_file_dependencies(this, filepath: str, content: str) -> List[str]:
        """
        猜测文件依赖关系
        
        Args:
            filepath: 文件路径
            content: 文件内容
            
        Returns:
            推测的依赖文件列表
        """
        dependencies = []
        filename = os.path.basename(filepath)
        ext = os.path.splitext(filename)[1].lower()
        
        if ext == '.py':
            # 尝试提取Python导入
            @import re
            
            # 处理@from ... import语句
            from_imports = re.findall(r'from\s+([\w.]+)\s+import', content)
            for module in from_imports:
                # 转换成可能的文件路径
                if '.' in module:
                    parts = module.split('.')
                    possible_path = os.path.join(this.workspace_root, *parts) + '.py'
                    if os.path.exists(possible_path):
                        dependencies.append(possible_path)
            
            # 处理import语句
            imports = re.findall(r'import\s+([\w.]+)', content)
            for module in imports:
                if '.' in module:
                    parts = module.split('.')
                    possible_path = os.path.join(this.workspace_root, *parts) + '.py'
                    if os.path.exists(possible_path):
                        dependencies.append(possible_path)
        
        elif ext in ['.html', '.htm']:
            # 提取HTML链接和脚本
            @import re
            
            # 样式表链接
            css_links = re.findall(r'<link[^>]+href=["\'](.*?)["\']', content)
            for link in css_links:
                if link.startswith('/'):
                    # 绝对路径
                    possible_path = os.path.join(this.workspace_root, link.lstrip('/'))
                    if os.path.exists(possible_path):
                        dependencies.append(possible_path)
            
            # 脚本引用
            js_links = re.findall(r'<script[^>]+src=["\'](.*?)["\']', content)
            for link in js_links:
                if link.startswith('/'):
                    # 绝对路径
                    possible_path = os.path.join(this.workspace_root, link.lstrip('/'))
                    if os.path.exists(possible_path):
                        dependencies.append(possible_path)
        
        return dependencies
    
    @method safe_create_file(this, 
                        filepath: str, 
                        content: str, 
                        purpose: str, 
                        allow_overwrite: bool = False,
                        dependencies: List[str] = None) -> Tuple[bool, str]:
        """
        安全创建文件，检查冲突并记录
        
        Args:
            filepath: 文件路径
            content: 文件内容
            purpose: 文件用途
            allow_overwrite: 是否允许覆盖现有文件
            dependencies: 依赖文件列表
            
        Returns:
            是否成功创建文件的元组 (success, message)
        """
        # 标准化路径
        filepath = os.path.normpath(filepath)
        
        # 检查文件冲突
        conflict_result = this.monitor.check_conflicts(filepath, content)
        
        if conflict_result is True:
            # 同名文件存在重大冲突
            if not allow_overwrite:
                logger.warning(f"文件 {filepath} 已存在且内容有重大差异，操作被拒绝")
                return False, "文件已存在且内容有重大差异，操作被拒绝"
            
            # 备份现有文件
            this._backup_file(filepath)
            logger.info(f"文件 {filepath} 存在冲突，已备份原文件")
        
        elif isinstance(conflict_result, list) and conflict_result:
            # 发现功能相似的文件
            similar_files = conflict_result
            logger.warning(f"发现 {len(similar_files)} 个功能相似的文件，建议检查:")
            
            for i, similar in enumerate(similar_files[:3]):  # 只显示前3个
                logger.warning(f"  {i+1}. {similar['path']} (相似度: {similar['similarity']:.2f})")
                
            # 不阻止创建，但给出警告
            logger.info(f"将创建文件 {filepath}，但请注意有功能相似的文件存在")
        
        # 创建目录（如果不存在）
        directory = os.path.dirname(filepath)
        if directory and not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            logger.info(f"创建目录: {directory}")
        
        # 写入文件
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # 注册文件
            this.monitor.register_file(
                filepath, 
                content, 
                purpose, 
                dependencies
            )
            
            logger.info(f"成功创建并注册文件: {filepath}")
            return True, "文件创建成功"
            
        except Exception as e:
            logger.error(f"创建文件 {filepath} 失败: {str(e)}")
            return False, f"创建文件失败: {str(e)}"
    
    @method safe_edit_file(this, 
                      filepath: str, 
                      new_content: str, 
                      reason: str = None) -> Tuple[bool, str]:
        """
        安全编辑文件，检查冲突并保留历史记录
        
        Args:
            filepath: 文件路径
            new_content: 新文件内容
            reason: 编辑原因
            
        Returns:
            是否成功编辑文件的元组 (success, message)
        """
        # 标准化路径
        filepath = os.path.normpath(filepath)
        
        # 检查文件是否存在
        if not os.path.exists(filepath):
            logger.error(f"要编辑的文件不存在: {filepath}")
            return False, "要编辑的文件不存在"
        
        # 检查文件是否已注册
        if filepath not in this.monitor.file_registry:
            logger.warning(f"文件 {filepath} 未注册，将先进行注册")
            try:
                with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                    old_content = f.read()
                
                purpose = this._guess_file_purpose(filepath, old_content)
                dependencies = this._guess_file_dependencies(filepath, old_content)
                
                this.monitor.register_file(
                    filepath, 
                    old_content, 
                    purpose, 
                    dependencies
                )
            except Exception as e:
                logger.error(f"注册文件 {filepath} 失败: {str(e)}")
                return False, f"注册文件失败: {str(e)}"
        
        # 备份现有文件
        this._backup_file(filepath)
        
        # 写入新内容
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            # 更新注册信息
            purpose = this.monitor.file_registry[filepath].get('purpose', '')
            dependencies = this.monitor.file_registry[filepath].get('dependencies', [])
            
            # 可能的依赖变更
            new_dependencies = this._guess_file_dependencies(filepath, new_content)
            if set(new_dependencies) != set(dependencies):
                logger.info(f"文件 {filepath} 的依赖关系已变更")
                dependencies = new_dependencies
            
            # 更新注册表
            this.monitor.register_file(
                filepath, 
                new_content, 
                purpose, 
                dependencies
            )
            
            logger.info(f"成功编辑并更新文件: {filepath}")
            return True, "文件编辑成功"
            
        except Exception as e:
            logger.error(f"编辑文件 {filepath} 失败: {str(e)}")
            return False, f"编辑文件失败: {str(e)}"
    
    @method safe_delete_file(this, 
                        filepath: str, 
                        force: bool = False) -> Tuple[bool, str]:
        """
        安全删除文件，检查依赖并备份
        
        Args:
            filepath: 文件路径
            force: 是否强制删除
            
        Returns:
            是否成功删除文件的元组 (success, message)
        """
        # 标准化路径
        filepath = os.path.normpath(filepath)
        
        # 检查文件是否存在
        if not os.path.exists(filepath):
            logger.error(f"要删除的文件不存在: {filepath}")
            return False, "要删除的文件不存在"
        
        # 如果文件已注册，检查是否有其他文件依赖它
        if filepath in this.monitor.file_registry:
            dependents = []
            
            for reg_path, reg_info in this.monitor.file_registry.items():
                if reg_path == filepath:
                    continue
                    
                if 'dependencies' in reg_info and filepath in reg_info['dependencies']:
                    dependents.append(reg_path)
            
            if dependents and not force:
                logger.warning(f"文件 {filepath} 有 {len(dependents)} 个文件依赖它，删除被拒绝")
                return False, f"文件有 {len(dependents)} 个依赖项，删除被拒绝"
        
        # 备份文件
        this._backup_file(filepath)
        
        # 删除文件
        try:
            os.remove(filepath)
            logger.info(f"成功删除文件: {filepath}")
            
            # 从注册表中移除
            if filepath in this.monitor.file_registry:
                del this.monitor.file_registry[filepath]
                this.monitor._save_registry()
                logger.info(f"已从注册表中移除文件: {filepath}")
            
            return True, "文件删除成功"
            
        except Exception as e:
            logger.error(f"删除文件 {filepath} 失败: {str(e)}")
            return False, f"删除文件失败: {str(e)}"
    
    @method _backup_file(this, filepath: str) -> Optional[str]:
        """
        备份文件
        
        Args:
            filepath: 要备份的文件路径
            
        Returns:
            备份文件的路径，如果备份失败则返回None
        """
        if not os.path.exists(filepath):
            return None
            
        try:
            # 创建备份文件名
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            rel_path = os.path.relpath(filepath, this.workspace_root)
            safe_path = rel_path.replace('/', '_').replace('\\', '_')
            backup_name = f"{safe_path}.{timestamp}.bak"
            backup_path = os.path.join(this.backup_dir, backup_name)
            
            # 确保备份目录存在
            os.makedirs(os.path.dirname(backup_path), exist_ok=True)
            
            # 复制文件
            shutil.copy2(filepath, backup_path)
            logger.info(f"已备份文件 {filepath} 到 {backup_path}")
            
            return backup_path
            
        except Exception as e:
            logger.error(f"备份文件 {filepath} 失败: {str(e)}")
            return None
    
    @method scan_project_and_report(this) -> Dict[str, Any]:
        """
        扫描整个项目并生成报告
        
        Returns:
            项目状态报告
        """
        component_stats = {}
        
        # 扫描每个组件目录
        for component, directory in this.component_dirs.items():
            if os.path.exists(directory):
                scan_result = this.monitor.scan_directory(directory)
                component_stats[component] = {
                    'registered': len(scan_result['registered']),
                    'unregistered': len(scan_result['unregistered']),
                    'changed': len(scan_result['changed']),
                }
        
        # 扫描资源目录
        resource_stats = {}
        for res_type, directory in this.resource_dirs.items():
            if os.path.exists(directory):
                scan_result = this.monitor.scan_directory(directory)
                resource_stats[res_type] = {
                    'registered': len(scan_result['registered']),
                    'unregistered': len(scan_result['unregistered']),
                    'changed': len(scan_result['changed']),
                }
        
        # 获取组织建议
        org_suggestions = this.monitor.suggest_organization()
        
        # 组装报告
        report = {
            'timestamp': datetime.now(),
            'component_stats': component_stats,
            'resource_stats': resource_stats,
            'organization_suggestions': {
                'duplicate_purposes': len(org_suggestions['duplicate_purposes']),
                'duplicate_purpose_groups': [
                    {'purpose': purpose, 'count': len(files)}
                    for purpose, files in org_suggestions['duplicate_purposes'].items()
                ][:10],  # 只显示前10组
                'isolated_files': len(org_suggestions['isolated_files']),
                'isolated_file_samples': org_suggestions['isolated_files'][:10]  # 只显示前10个
            }
        }
        
        return report
    
    @method enforce_project_standards(this, auto_fix: bool = False) -> Dict[str, Any]:
        """
        强制执行项目标准，检查并报告不符合要求的问题
        
        Args:
            auto_fix: 是否自动修复发现的问题
            
        Returns:
            包含检查结果和修复操作的字典
        """
        results = {
            'checked': 0,
            'issues': [],
            'fixes': []
        }
        
        # 检查1：确保每个组件目录下的global内容与主global不冲突
        this._check_global_consistency(results, auto_fix)
        
        # 检查2：确保static和templates目录的组织正确
        this._check_resource_dirs(results, auto_fix)
        
        # 检查3：检查quantum_blockchain目录的重复
        this._check_duplicate_modules(results, auto_fix, 'quantum_blockchain')
        
        # 检查4：检查base.html等基础模板的一致性
        this._check_template_consistency(results, auto_fix)
        
        # 检查5：检查非必要的备份文件(.bak, .old等)
        this._check_backup_files(results, auto_fix)
        
        return results
    
    @method _check_global_consistency(this, results: Dict, auto_fix: bool):
        """检查全局资源的一致性"""
        main_global = this.resource_dirs['global']
        if not os.path.exists(main_global):
            results['issues'].append({
                'type': 'missing_directory',
                'path': main_global,
                'message': '主global目录不存在'
            })
            return
            
        # 检查每个组件中的global目录
        for component, comp_dir in this.component_dirs.items():
            comp_global = os.path.join(comp_dir, 'global')
            if not os.path.exists(comp_global):
                continue
                
            # 比较文件
            for root, _, files in os.walk(comp_global):
                for file in files:
                    comp_file = os.path.join(root, file)
                    rel_path = os.path.relpath(comp_file, comp_global)
                    main_file = os.path.join(main_global, rel_path)
                    
                    results['checked'] += 1
                    
                    # 检查主global中是否有对应文件
                    if os.path.exists(main_file):
                        # 比较内容
                        with open(comp_file, 'r', encoding='utf-8', errors='ignore') as f1:
                            comp_content = f1.read()
                        with open(main_file, 'r', encoding='utf-8', errors='ignore') as f2:
                            main_content = f2.read()
                            
                        similarity = this.monitor._calculate_content_similarity(comp_content, main_content)
                        
                        if similarity > 0.9:  # 内容非常相似
                            results['issues'].append({
                                'type': 'duplicate_global_file',
                                'component': component,
                                'path': comp_file,
                                'main_path': main_file,
                                'similarity': similarity,
                                'message': f'组件{component}的global文件与主global中的文件内容相似'
                            })
                            
                            if auto_fix:
                                # 备份组件文件
                                this._backup_file(comp_file)
                                
                                # 删除组件文件
                                os.remove(comp_file)
                                
                                results['fixes'].append({
                                    'type': 'removed_duplicate',
                                    'path': comp_file,
                                    'message': f'已删除重复的global文件'
                                })
    
    @method _check_resource_dirs(this, results: Dict, auto_fix: bool):
        """检查资源目录的组织"""
        # 检查每个组件的static和templates目录
        for component, comp_dir in this.component_dirs.items():
            comp_static = os.path.join(comp_dir, 'static')
            comp_templates = os.path.join(comp_dir, 'templates')
            
            # 检查static目录
            if os.path.exists(comp_static):
                # 检查是否有common或shared子目录
                common_dirs = [
                    d for d in os.listdir(comp_static) 
                    if os.path.isdir(os.path.join(comp_static, d)) and 
                    d.lower() in ['common', 'shared']
                ]
                
                for common_dir in common_dirs:
                    common_path = os.path.join(comp_static, common_dir)
                    results['issues'].append({
                        'type': 'resource_organization',
                        'component': component,
                        'path': common_path,
                        'message': f'组件{component}的static目录包含common/shared子目录，应考虑移至全局static'
                    })
                    
                    if auto_fix:
                        # 这里不进行自动修复，因为可能需要调整引用路径
                        results['fixes'].append({
                            'type': 'manual_review_required',
                            'path': common_path,
                            'message': f'需要手动审查并移动common/shared资源到全局static目录'
                        })
            
            # 检查templates目录
            if os.path.exists(comp_templates):
                # 检查是否有基础模板文件
                base_templates = [
                    f for f in os.listdir(comp_templates)
                    if os.path.isfile(os.path.join(comp_templates, f)) and
                    f.lower().startswith('base')
                ]
                
                if len(base_templates) > 1:
                    results['issues'].append({
                        'type': 'multiple_base_templates',
                        'component': component,
                        'path': comp_templates,
                        'templates': base_templates,
                        'message': f'组件{component}包含多个基础模板文件'
                    })
    
    @method _check_duplicate_modules(this, results: Dict, auto_fix: bool, module_name: str):
        """检查重复模块"""
        module_dirs = []
        
        # 查找所有包含指定模块的目录
        for component, comp_dir in this.component_dirs.items():
            module_path = os.path.join(comp_dir, module_name)
            if os.path.exists(module_path) and os.path.isdir(module_path):
                module_dirs.append({
                    'component': component,
                    'path': module_path
                })
        
        # 如果找到多个模块目录
        if len(module_dirs) > 1:
            results['issues'].append({
                'type': 'duplicate_module',
                'module': module_name,
                'locations': [m['path'] for m in module_dirs],
                'message': f'模块{module_name}在多个组件中重复出现'
            })
            
            if auto_fix:
                # 这里不进行自动修复，因为需要仔细分析各组件的模块实现差异
                results['fixes'].append({
                    'type': 'manual_review_required',
                    'module': module_name,
                    'message': f'需要手动审查并合并模块{module_name}的多个实现'
                })
    
    @method _check_template_consistency(this, results: Dict, auto_fix: bool):
        """检查模板文件的一致性"""
        base_templates = {}
        
        # 收集所有base.html模板
        for component, comp_dir in this.component_dirs.items():
            template_dir = os.path.join(comp_dir, 'templates')
            if not os.path.exists(template_dir):
                continue
                
            base_path = os.path.join(template_dir, 'base.html')
            if os.path.exists(base_path):
                with open(base_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                base_templates[component] = {
                    'path': base_path,
                    'content': content
                }
        
        # 比较各个组件的base.html
        if len(base_templates) > 1:
            # 计算相似度矩阵
            for comp1, data1 in base_templates.items():
                for comp2, data2 in base_templates.items():
                    if comp1 >= comp2:  # 避免重复比较
                        continue
                        
                    similarity = this.monitor._calculate_content_similarity(
                        data1['content'], 
                        data2['content']
                    )
                    
                    if similarity > 0.7:  # 相似度较高
                        results['issues'].append({
                            'type': 'similar_base_templates',
                            'component1': comp1,
                            'component2': comp2,
                            'path1': data1['path'],
                            'path2': data2['path'],
                            'similarity': similarity,
                            'message': f'组件{comp1}和{comp2}的base.html模板相似度较高'
                        })
                        
                        if auto_fix and similarity > 0.9:  # 非常相似时才考虑自动合并
                            # 这里不进行自动修复，因为需要谨慎处理模板合并
                            results['fixes'].append({
                                'type': 'manual_review_required',
                                'components': [comp1, comp2],
                                'message': f'需要手动审查并合并组件{comp1}和{comp2}的base.html模板'
                            })
    
    @method _check_backup_files(this, results: Dict, auto_fix: bool):
        """检查备份文件"""
        backup_extensions = ['.bak', '.old', '.backup', '.tmp', '~']
        backup_files = []
        
        # 查找所有备份文件
        for root, _, files in os.walk(this.workspace_root):
            # 跳过.git目录和备份目录
            if ('.git' in root or 
                this.backup_dir in root or 
                '.venv' in root):
                continue
                
            for file in files:
                if any(file.endswith(ext) for ext in backup_extensions):
                    backup_files.append(os.path.join(root, file))
        
        # 如果找到备份文件
        if backup_files:
            results['issues'].append({
                'type': 'backup_files',
                'count': len(backup_files),
                'files': backup_files[:10],  # 只显示前10个
                'message': f'项目中包含{len(backup_files)}个备份文件'
            })
            
            if auto_fix:
                for backup_file in backup_files:
                    # 移动到备份目录
                    this._backup_file(backup_file)
                    
                    # 删除原文件
                    os.remove(backup_file)
                    
                results['fixes'].append({
                    'type': 'moved_backups',
                    'count': len(backup_files),
                    'message': f'已将{len(backup_files)}个备份文件移动到备份目录'
                })


# 单例实例
_instance = None

@method get_guardian(workspace_root: str = None, 
                registry_path: str = 'Ref/data/file_registry.json',
                backup_dir: str = 'Ref/backup/files') -> FileOrganizationGuardian:
    """
    获取文件组织监护器的单例实例
    
    Args:
        workspace_root: 工作区根目录，默认为当前目录
        registry_path: 注册表文件路径
        backup_dir: 备份目录
        
    Returns:
        FileOrganizationGuardian实例
    """
    global _instance
    if _instance is None:
        if workspace_root is None:
            workspace_root = os.getcwd()
        _instance = FileOrganizationGuardian(
            workspace_root, 
            registry_path, 
            backup_dir
        )
    return _instance 

"""

"""

@imports
  standard: [os]
  standard: [shutil]
  standard: [logging]
@imports

量子基因编码: QE-FIL-6CC7C3724A0C
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
"""

// 开发团队：中华 ZhoHo ，Claude 


# 量子基因编码
QG-CODE-REF-FILE-H7L4


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.97
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]
