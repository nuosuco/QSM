#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Ref系统 - 量子基因标记器
用于为文件自动添加和管理量子基因编码和纠缠对象标记
"""

import os
import sys
import re
import random
import hashlib
import logging
import traceback
import json
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple, Union

# 配置日志记录器
logger = logging.getLogger("Ref.utils.quantum_gene_marker")
if not logger.handlers:
    # 避免重复配置
    logger.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # 添加控制台处理器
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # 添加文件处理器
    try:
        file_handler = logging.FileHandler("Ref/logs/quantum_gene_marker.log")
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    except:
        pass  # 如果目录不存在，则忽略文件处理器

# 将QEntL工具库添加到路径
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, "../.."))
qentl_path = os.path.join(project_root, "QEntL")

if qentl_path not in sys.path:
    sys.path.append(qentl_path)

# 尝试导入QEntL的工具模块，但始终使用内部实现
try:
    import utils as qentl_utils
    logger.info("已找到QEntL工具模块，但将优先使用内部实现")
    qentl_utils = None  # 确保使用内部实现
except ImportError:
    logger.warning("未找到QEntL工具模块，将使用内部实现")
    qentl_utils = None

class RefQuantumGeneMarker:
    """Ref系统的量子基因标记器，用于自动为文件添加量子基因标记"""

    # 支持的文件类型及其注释开始标记
    SUPPORTED_FILE_TYPES = {
        '.py': ['"""', "'''", '#'],
        '.qent': ['/*', '//'],
        '.md': ['```', '/*', '//'],
        '.js': ['/*', '//'],
        '.jsx': ['/*', '//'],
        '.ts': ['/*', '//'],
        '.tsx': ['/*', '//'],
        '.css': ['/*', '//'],
        '.html': ['<!--', '//'],
        '.c': ['/*', '//'],
        '.cpp': ['/*', '//'],
        '.h': ['/*', '//'],
        '.hpp': ['/*', '//'],
        '.java': ['/*', '//'],
        '.scala': ['/*', '//'],
        '.go': ['/*', '//'],
        '.rs': ['/*', '//'],
        '.rb': ['=begin', '#'],
        '.php': ['/*', '//'],
        '.swift': ['/*', '//'],
        '.kt': ['/*', '//'],
        '.sql': ['/*', '--'],
        '.r': ['#'],
        '.sh': ['#'],
        '.bat': ['REM', '::'],
        '.ps1': ['<#', '#'],
        '.json': ['//'],
        '.yml': ['#'],
        '.yaml': ['#'],
        '.vue': ['<!--', '/*', '//'],
        '.xml': ['<!--'],
        '.dockerfile': ['#'],
        '.csv': ['#'],
        '.ini': [';', '#'],
        '.toml': ['#'],
    }

    # 量子基因标记模板
    GENE_TEMPLATE = """
    {comment_start}
    # 量子基因编码: {gene_code}
    # 纠缠状态: 活跃
    # 纠缠对象: {entangled_objects}
    # 纠缠强度: {strength}
    {comment_end}
    """

    # 注释结束标记
    COMMENT_END_MARKERS = {
        '"""': '"""',
        "'''": "'''",
        '/*': '*/',
        '//': '',
        '#': '',
        '```': '```',
        '<!--': '-->'
    }

    def __init__(self):
        """初始化量子基因标记器"""
        self.project_root = project_root
        self.qentl_available = qentl_utils is not None

    def add_quantum_gene_marker(
            self,
            file_path: str,
            entangled_objects: List[str] = None,
            strength: float = 0.98) -> bool:
        """为文件添加量子基因标记

        Args:
        file_path: 文件路径
        entangled_objects: 纠缠对象列表
        strength: 纠缠强度

        Returns:
        操作是否成功
        """
        if entangled_objects is None:
            entangled_objects = []

        try:
                file_content = ""
        try:
            file_content = ""
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                    file_content = f.read()
            if self._has_gene_marker(file_content):
                # 如果已有标记，则更新它
                return self._update_gene_marker(
                    file_path, entangled_objects, strength)

            # 获取注释标记
            comment_start, comment_end = self._get_comment_markers(file_path)

            # 生成量子基因编码
            gene_code = self._generate_gene_code(file_path)

            # 格式化纠缠对象列表
            entangled_objects_str = str(entangled_objects).replace('"', "'")

            # 创建基因标记
            marker = self.GENE_TEMPLATE.format(
                comment_start=comment_start,
                gene_code=gene_code,
                entangled_objects=entangled_objects_str,
                strength=strength,
                comment_end=comment_end
            )

            # 添加到文件末尾
            # 首先确保文件以换行符结束
            if file_content and not file_content.endswith('\n'):
                file_content += '\n'

            # 将标记添加到文件
            file_content += marker

            # 写回文件
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(file_content)

            logger.info(f"已为文件添加量子基因标记: {file_path}")
            return True

        except Exception as e:
            logger.error(f"添加量子基因标记时出错: {str(e)}")
            return False

    def update_quantum_gene_marker(
            self,
            file_path: str,
            entangled_objects: List[str] = None,
            strength: float = None) -> bool:
        """更新文件的量子基因标记

        Args:
        file_path: 文件路径
        entangled_objects: 新的纠缠对象列表
        strength: 新的纠缠强度

        Returns:
        操作是否成功
        """
        # 使用内部实现
        return self._update_gene_marker(file_path, entangled_objects, strength)

    def _update_gene_marker(
            self,
            file_path: str,
            new_entangled_objects: List[str] = None,
            new_strength: float = None) -> bool:
        """内部方法：更新文件的量子基因标记

        Args:
        file_path: 文件路径
        new_entangled_objects: 新的纠缠对象列表
        new_strength: 新的纠缠强度

        Returns:
        操作是否成功
        """
        try:
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                file_content = f.read()

            # 检查文件是否有量子基因标记
            if not self._has_gene_marker(file_content):
                # 如果没有标记，则添加它
                return self.add_quantum_gene_marker(
                    file_path, new_entangled_objects, new_strength or 0.98)

            # 找到量子基因标记位置
            marker_pos = self._find_gene_marker_position(file_content)
            if marker_pos == -1:
                return False

            # 提取当前的量子基因编码
            gene_code_pattern = r"# 量子基因编码: (QE-[A-Z0-9-]+)"
            gene_match = re.search(gene_code_pattern, file_content)
            if not gene_match:
                return False

            gene_code = gene_match.group(1)
            strength_match = re.search(r"# 纠缠强度: ([0-9.]+)", file_content)
            current_strength = float(
                strength_match.group(1)) if strength_match else 0.95

            # 确定要使用的值
            entangled_objects = new_entangled_objects if new_entangled_objects is not None else self._parse_entangled_objects(
                file_content)
            strength = new_strength if new_strength is not None else current_strength

            # 获取注释标记
            comment_start, comment_end = self._get_comment_markers(file_path)

            # 格式化纠缠对象列表
            entangled_objects_str = str(entangled_objects).replace('"', "'")

            # 创建新的基因标记
            new_marker = self.GENE_TEMPLATE.format(
                comment_start=comment_start,
                gene_code=gene_code,
                entangled_objects=entangled_objects_str,
                strength=strength,
                comment_end=comment_end
            )

            # 使用正则表达式替换旧的标记
            pattern = r"# 量子基因编码: " + re.escape(gene_code) + r"[^\"]*?"
            new_content = re.sub(
                pattern,
                new_marker,
                file_content,
                flags=re.DOTALL)

            # 写回文件
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(new_content)

            return True

        except Exception as e:
            logger.error(f"更新量子基因标记时出错: {str(e)}")
            logger.debug(traceback.format_exc())
            return False

    def scan_directory(self,
                       directory: str,
                       patterns: List[str] = None,
                       recursive: bool = True) -> Dict[str,
                                                       Any]:
        """扫描目录并为文件添加量子基因标记

        Args:
        directory: 要扫描的目录
        patterns: 文件匹配模式列表
        recursive: 是否递归扫描子目录

        Returns:
        包含扫描结果的字典
        """
        # 使用内部实现
        results = {
            'total_files': 0,
            'marked_files': 0,
            'errors': 0,
            'files': [],
            'details': []
        }

        if patterns is None:
            # 默认匹配所有支持的文件类型
            patterns = []
            for ext in self.SUPPORTED_FILE_TYPES.keys():
                patterns.append(f"*{ext}")

        # 使用Path.glob或Path.rglob扫描文件
        try:
            path = Path(directory)
            if not path.exists():
                raise FileNotFoundError(f"目录不存在: {directory}")

            # 创建文件列表
            files = []

            def should_skip_dir(dir_path):
                """检查是否应该跳过此目录（以点开头）"""
                # 获取目录名（不含路径）
                dir_name = os.path.basename(os.path.normpath(dir_path))
                # 如果目录名以点开头，且不是当前目录 (.) 或上级目录 (..)，则跳过
                return dir_name.startswith('.') and dir_name not in ['.', '..']

                if recursive:
                # 手动递归遍历目录，跳过以点开头的目录
                for root, dirs, found_files in os.walk(path):
                    # 修改dirs列表，移除以点开头的目录，防止进一步遍历
                    dirs[:] = [d for d in dirs if not should_skip_dir(d)]

                    for file in found_files:
                        if any(file.endswith(ext)
                               for ext in self.SUPPORTED_FILE_TYPES.keys()):
                            file_path = os.path.join(root, file)
                            files.append(Path(file_path))
                else:
                # 非递归模式，只检查当前目录
                for pattern in patterns:
                    for file_path in path.glob(pattern):
                        if file_path.is_file():
                            files.append(file_path)

                # 处理文件
                for file_path in files:
                file_str = str(file_path)
                results['total_files'] += 1

                try:
                    # 添加量子基因标记
                    if self.add_quantum_gene_marker(file_str):
                        results['marked_files'] += 1
                        results['files'].append(file_str)
                        results['details'].append({
                            'path': file_str,
                            'status': 'marked'
                        })
                    else:
                        results['details'].append({
                            'path': file_str,
                            'status': 'skipped'
                        })
                except Exception as e:
                    results['errors'] += 1
                    results['details'].append({
                        'path': file_str,
                        'status': 'error',
                        'error': str(e)
                    })

                return results
        except Exception as e:
                logger.error(f"扫描目录时出错: {str(e)}")
                logger.debug(traceback.format_exc())
                results['errors'] += 1
                results['details'].append({
                'error': str(e)
                })
                return results

    def _generate_gene_code(self, file_path: str, prefix: str = "QE") -> str:
        """为给定文件生成量子基因编码

        Args:
        file_path: 文件路径
        prefix: 基因前缀

        Returns:
        生成的量子基因编码
        """
        # 获取文件名和路径信息
        path_obj = Path(file_path)
        file_name = path_obj.name
        file_stem = path_obj.stem.upper()

        # 创建基础哈希
        file_content_hash = ""
        try:
            if os.path.exists(file_path):
                    with open(file_path, 'rb') as f:
                    content = f.read()
                file_content_hash = hashlib.md5(
                        content).hexdigest().upper()[:12]
            else:
                # 对于新文件，使用时间戳
                timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
                file_content_hash = hashlib.md5(
                    timestamp.encode()).hexdigest().upper()[:12]
        except Exception as e:
            # 如果读取失败，使用随机值
            file_content_hash = ''.join(
                random.choice('0123456789ABCDEF') for _ in range(12))

        # 将哈希分成多个部分
        hash_parts = [file_content_hash[i:i + 4]
                      for i in range(0, len(file_content_hash), 4)]

        # 从文件名中提取模块标识符（最多3个字符）
        if len(file_stem) > 0:
            module_id = ''.join([c for c in file_stem if c.isalpha()])[:3]
        else:
            module_id = ''.join(
                random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(3))

        # 构建基因代码
        gene_code = f"{prefix}-{module_id}-{''.join(hash_parts)}"

        return gene_code

    def _get_comment_markers(self, file_path: str) -> tuple:
        """获取文件的注释开始和结束标记

        Args:
        file_path: 文件路径

        Returns:
        注释开始和结束标记的元组 (start, end)
        """
        ext = Path(file_path).suffix

        if ext in self.SUPPORTED_FILE_TYPES:
            # 对于支持的文件类型，使用首选注释标记
            comment_start = self.SUPPORTED_FILE_TYPES[ext][0]
            comment_end = self.COMMENT_END_MARKERS[comment_start]
            return comment_start, comment_end

        # 默认使用多行注释
        return '"""', '"""'

    def _has_gene_marker(self, content: str) -> bool:
        """检查内容是否已有量子基因标记

        Args:
        content: 文件内容

        Returns:
        是否已有标记
        """
        # 使用正则表达式检查是否存在量子基因标记
        pattern = r"# 量子基因编码: QE-[A-Z0-9-]+"
        return bool(re.search(pattern, content))

    def _find_gene_marker_position(self, content: str) -> int:
        """查找量子基因标记在内容中的位置

        Args:
        content: 文件内容

        Returns:
        标记位置的索引，如果未找到则返回-1
        """
        pattern = r"# 量子基因编码: (QE-[A-Z0-9-]+)"
        match = re.search(pattern, content)
        if match:
            return match.start()
        return -1

    def _parse_entangled_objects(self, content: str) -> List[str]:
        """从文件内容中提取纠缠对象列表

        Args:
            content: 文件内容

        Returns:
            纠缠对象列表
        """
        pattern = r"# 纠缠对象: \[(.*?)\]"
        match = re.search(pattern, content, re.DOTALL)
        if not match:
            return []

        # 提取并解析纠缠对象
        objects_str = match.group(1).strip()
        if not objects_str:
            return []

        # 尝试解析为Python列表
        try:
            # 替换单引号为双引号以符合JSON格式
            objects_str = objects_str.replace("'", '"')
            return json.loads(f"[{objects_str}]")
        except BaseException:
            # 如果解析失败，尝试通过分割来解析
            return [obj.strip().strip("'\"")
                    for obj in objects_str.split(',') if obj.strip()]


# 创建单例实例
_marker_instance = None


def get_gene_marker() -> RefQuantumGeneMarker:
    """获取量子基因标记器单例实例

        Returns:
        量子基因标记器实例
    """
        global _marker_instance
        if _marker_instance is None:
        _marker_instance = RefQuantumGeneMarker()
        return _marker_instance

# 导出公共函数，这些函数会在模块顶层被导入时使用


def add_quantum_gene_marker(
        file_path: str,
        entangled_objects: List[str] = None,
        strength: float = 0.98) -> bool:
    """为文件添加量子基因标记的便捷函数

        Args:
        file_path: 文件路径
        entangled_objects: 纠缠对象列表
        strength: 纠缠强度

        Returns:
        如果成功添加则返回True，否则返回False
    """
        marker = get_gene_marker()
        return marker.add_quantum_gene_marker(
        file_path, entangled_objects, strength)


def update_quantum_gene_marker(
        file_path: str,
        entangled_objects: List[str] = None,
        strength: float = None) -> bool:
    """更新文件的量子基因标记的便捷函数

        Args:
        file_path: 文件路径
        entangled_objects: 新的纠缠对象列表
        strength: 新的纠缠强度

        Returns:
        如果成功更新则返回True，否则返回False
    """
        marker = get_gene_marker()
        return marker.update_quantum_gene_marker(
        file_path, entangled_objects, strength)


def scan_and_mark_directory(directory: str,
                            patterns: List[str] = None,
                            recursive: bool = True) -> Dict[str,
                                                            Any]:
    """扫描目录并为文件添加量子基因标记

        Args:
        directory: 要扫描的目录
        patterns: 文件匹配模式
        recursive: 是否递归扫描子目录

        Returns:
        扫描结果
    """
        marker = get_gene_marker()
        return marker.scan_directory(directory, patterns, recursive)


# 设置要导出的模块级函数
__all__ = [
        'RefQuantumGeneMarker',
        'get_gene_marker',
        'add_quantum_gene_marker',
        'update_quantum_gene_marker',
        'scan_and_mark_directory'
]

# 当作为命令行工具运行时的入口点
if __name__ == "__main__":
        import argparse

        # 创建命令行解析器
        parser = argparse.ArgumentParser(description="量子基因标记工具")
        subparsers = parser.add_subparsers(dest="action", help="可用命令")

        # 添加mark命令
        mark_parser = subparsers.add_parser("mark", help="标记单个文件")
        mark_parser.add_argument("--file", "-f", help="要标记的文件路径")
        mark_parser.add_argument("--entangled", "-e", nargs="+", help="纠缠对象列表")
        mark_parser.add_argument(
        "--strength",
        "-s",
        type=float,
        default=0.98,
        help="纠缠强度")

        # 添加update命令
        update_parser = subparsers.add_parser("update", help="更新标记")
        update_parser.add_argument("--file", "-f", help="要更新的文件路径")
        update_parser.add_argument("--entangled", "-e", nargs="+", help="新的纠缠对象列表")
        update_parser.add_argument("--strength", "-s", type=float, help="新的纠缠强度")

        # 添加scan命令
        scan_parser = subparsers.add_parser("scan", help="扫描目录")
        scan_parser.add_argument("--path", "-p", required=True, help="要扫描的目录路径")
        scan_parser.add_argument(
        "--recursive",
        "-r",
        action="store_true",
        help="是否递归扫描子目录")
        scan_parser.add_argument("--entangled", "-e", nargs="+", help="默认纠缠对象列表")
        scan_parser.add_argument(
        "--strength",
        "-s",
        type=float,
        default=0.98,
        help="默认纠缠强度")
        scan_parser.add_argument("--patterns", "-pat", nargs="+", help="文件匹配模式")

        # 添加全局monitor参数，使脚本可以作为监视器运行
        parser.add_argument(
        "--monitor",
        "-m",
        action="store_true",
        help="作为监视器运行，监控项目文件变化")

        # 解析命令行参数
        args = parser.parse_args()

        # 设置日志
        logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )

        # 判断执行模式
        if args.monitor:
        # 启动监视器
        try:
    if args.monitor:
        # 启动监视器
        try:
            print("正在启动量子基因标记监视器...")
        directory = os.path.dirname(
            os.path.dirname(
                os.path.dirname(
                    os.path.abspath(__file__))))
        print(f"扫描目录: {directory}")

        # 使用内部scan_directory方法而不是依赖qentl_utils
        results = marker.scan_directory(directory)

        print(f"扫描完成，找到 {results.get('total_files', 0)} 个文件")
        print(f"已添加标记: {results.get('marked_files', 0)} 个文件")

        # 等待用户中断
        while True:
            import time
            time.sleep(1)

        except KeyboardInterrupt:
        print("\n量子基因标记监视器已停止")

        # 否则，执行指定的命令
        elif args.action == \"mark\" and args.file:
        add_quantum_gene_marker(args.file, args.entangled, args.strength)

        elif args.action == \"update\" and args.file:
        update_quantum_gene_marker(args.file, args.entangled, args.strength)

        elif args.action == \"scan\" and args.path:
        results = scan_and_mark_directory(args.path, args.patterns, args.recursive)
        print(f"扫描完成，处理了 {len(results.get('files', []))} 个文件")

        else:
        parser.print_help()
