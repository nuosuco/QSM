#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Quantum File Event Monitoring System

This module provides a file monitoring system that detects file movements
and updates the quantum gene markers to maintain entanglement relationships.
"""

import os
import time
import logging
import threading
import sys
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler, FileMovedEvent

# 添加项目根目录到系统路径
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, "..", ".."))
if project_root not in sys.path:
    sys.path.append(project_root)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(os.path.dirname(current_dir), "logs", "file_monitor.log"), mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("QuantumFileMonitor")

# Import quantum gene marker functionality
quantum_gene_marker = None
try:
    from Ref.utils.quantum_gene_marker import RefQuantumGeneMarker
    quantum_gene_marker = RefQuantumGeneMarker()
    logger.info("Successfully imported RefQuantumGeneMarker from Ref.utils")
except ImportError as e:
    logger.warning(f"Could not import from Ref.utils.quantum_gene_marker: {e}")
    # Try direct import
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        parent_dir = os.path.dirname(current_dir)
        sys.path.insert(0, parent_dir)
        from quantum_gene_marker import RefQuantumGeneMarker
        quantum_gene_marker = RefQuantumGeneMarker()
        logger.info("Successfully imported RefQuantumGeneMarker from parent directory")
    except ImportError as e:
        logger.error(f"Could not import RefQuantumGeneMarker: {e}")
        
        # Create a minimal implementation for standalone operation
        class MinimalRefQuantumGeneMarker:
            def __init__(self):
                self.logger = logging.getLogger("MinimalRefQuantumGeneMarker")
                self.logger.warning("Using minimal implementation of RefQuantumGeneMarker")
                
            def get_project_root(self):
                return project_root
                
            def has_quantum_gene_marker(self, file_path):
                return False
                
            def update_file_path(self, file_path, old_path):
                self.logger.info(f"Mock update file path: {old_path} -> {file_path}")
                return True
                
            def has_reference_to_file(self, file_path, ref_path):
                return False
                
            def update_reference_path(self, file_path, old_ref, new_ref):
                self.logger.info(f"Mock update reference in {file_path}: {old_ref} -> {new_ref}")
                return True
        
        quantum_gene_marker = MinimalRefQuantumGeneMarker()
        logger.warning("Using minimal implementation for standalone operation")

# Import supported file types
SUPPORTED_FILE_TYPES = {}
try:
    from Ref.utils.quantum_gene_marker import SUPPORTED_FILE_TYPES
    logger.info(f"Imported SUPPORTED_FILE_TYPES with {len(SUPPORTED_FILE_TYPES)} entries")
except ImportError:
    # Fallback supported file types
    SUPPORTED_FILE_TYPES = {
        '.py': 'Python',
        '.js': 'JavaScript',
        '.java': 'Java',
        '.cpp': 'C++',
        '.c': 'C',
        '.h': 'C Header',
        '.cs': 'C#',
        '.go': 'Go',
        '.rb': 'Ruby',
        '.php': 'PHP',
        '.ts': 'TypeScript',
        '.scala': 'Scala',
        '.rs': 'Rust',
        '.swift': 'Swift',
        '.kt': 'Kotlin',
        '.m': 'Objective-C',
        '.sql': 'SQL',
        '.r': 'R',
        '.sh': 'Shell',
        '.bat': 'Batch',
        '.ps1': 'PowerShell',
        '.html': 'HTML',
        '.css': 'CSS',
        '.json': 'JSON',
        '.xml': 'XML',
        '.yml': 'YAML',
        '.yaml': 'YAML',
        '.ini': 'INI',
        '.toml': 'TOML',
        '.md': 'Markdown',
        '.txt': 'Text',
    }
    logger.warning(f"Using fallback SUPPORTED_FILE_TYPES with {len(SUPPORTED_FILE_TYPES)} entries")

# Create a global instance to be used by all handlers
quantum_gene_marker = RefQuantumGeneMarker()

class QuantumFileEventHandler(FileSystemEventHandler):
    """
    Handler for file system events that involve quantum entangled objects.
    Focuses primarily on file movement events to update quantum gene markers.
    """
    
    def __init__(self):
        super().__init__()
        self.processing_lock = threading.Lock()
        self.logger = logging.getLogger("QuantumFileEventHandler")
    
    def _on_moved(self, event):
        """
        Handle file movement events, updating quantum gene markers accordingly.
        
        Args:
            event (FileMovedEvent): The file movement event
        """
        if not isinstance(event, FileMovedEvent):
            return
        
        # 获取文件扩展名
        from Ref.utils.quantum_gene_marker import SUPPORTED_FILE_TYPES
        
        # 标准化路径以消除不同的路径分隔符表示
        src_path = os.path.normpath(event.src_path)
        dest_path = os.path.normpath(event.dest_path)
        
        # 提取文件扩展名
        _, src_ext = os.path.splitext(src_path)
        _, dest_ext = os.path.splitext(dest_path)
        
        # 检查是否是支持的文件类型
        if src_ext.lower() not in SUPPORTED_FILE_TYPES and dest_ext.lower() not in SUPPORTED_FILE_TYPES:
            return
            
        self.logger.info(f"File moved: {src_path} -> {dest_path}")
        
        # Use a lock to prevent concurrent processing of the same file
        with self.processing_lock:
            try:
                self._process_moved_file(src_path, dest_path)
            except Exception as e:
                self.logger.error(f"Error processing moved file: {str(e)}")
    
    def _process_moved_file(self, src_path, dest_path):
        """
        Process a moved file by updating its quantum gene marker and 
        all references to it in other files.
        
        Args:
            src_path (str): The original file path
            dest_path (str): The new file path
        """
        self.logger.info(f"Processing moved file: {src_path} -> {dest_path}")
        
        # 检查是否应该跳过（如果是点开头的目录）
        def should_skip_path(path):
            parts = os.path.normpath(path).split(os.path.sep)
            for part in parts:
                if part.startswith('.') and part not in ['.', '..']:
                    return True
            return False
        
        # 如果源路径或目标路径在忽略的目录中，则跳过处理
        if should_skip_path(src_path) or should_skip_path(dest_path):
            self.logger.info(f"Skipping file in dot directory: {src_path} -> {dest_path}")
            return
        
        # 1. Update the moved file's quantum gene marker
        try:
            # First check if the file had quantum gene markers
            if quantum_gene_marker.has_quantum_gene_marker(dest_path):
                quantum_gene_marker.update_file_path(dest_path, src_path)
                self.logger.info(f"Updated quantum gene marker in moved file: {dest_path}")
        except Exception as e:
            self.logger.error(f"Error updating quantum gene marker in moved file: {str(e)}")
        
        # 2. Update all files that reference the moved file
        try:
            # Normalize paths for comparison
            norm_src_path = os.path.normpath(src_path)
            norm_dest_path = os.path.normpath(dest_path)
            
            # Get project root from quantum gene marker
            try:
                project_root = quantum_gene_marker.get_project_root()
            except Exception as e:
                self.logger.warning(f"Failed to get project_root from quantum_gene_marker: {str(e)}")
                # Fallback to the current directory's parent
                current_dir = os.path.dirname(os.path.abspath(__file__))
                project_root = os.path.dirname(os.path.dirname(current_dir))
                self.logger.info(f"Using fallback project_root: {project_root}")
            
            self.logger.info(f"Searching for references to {norm_src_path} in {project_root}")
            
            # Find all supported files in the project
            for root, dirs, files in os.walk(project_root):
                # 跳过以点开头的目录
                dirs[:] = [d for d in dirs if not (d.startswith('.') and d not in ['.', '..'])]
                
                for file in files:
                    _, ext = os.path.splitext(file)
                    if ext.lower() in SUPPORTED_FILE_TYPES:
                        file_path = os.path.join(root, file)
                        norm_file_path = os.path.normpath(file_path)
                        
                        # Skip the moved file itself
                        if norm_file_path == norm_dest_path:
                            continue
                        
                        # Check if this file references the moved file
                        try:
                            # 使用两种方式检查引用
                            # 1. 直接使用路径字符串比较
                            if quantum_gene_marker.has_reference_to_file(file_path, norm_src_path):
                                # Update the reference
                                self.logger.info(f"Found reference to {norm_src_path} in {file_path}")
                                result = quantum_gene_marker.update_reference_path(file_path, norm_src_path, dest_path)
                                if result:
                                    self.logger.info(f"Updated reference in file: {file_path}")
                                else:
                                    self.logger.warning(f"Failed to update reference in file: {file_path}")
                            
                            # 2. 检查不同格式的路径表示
                            # 尝试将反斜杠转换为正斜杠
                            alt_src_path = norm_src_path.replace('\\', '/')
                            if alt_src_path != norm_src_path and quantum_gene_marker.has_reference_to_file(file_path, alt_src_path):
                                self.logger.info(f"Found reference with alternative path format to {alt_src_path} in {file_path}")
                                alt_dest_path = norm_dest_path.replace('\\', '/')
                                result = quantum_gene_marker.update_reference_path(file_path, alt_src_path, alt_dest_path)
                                if result:
                                    self.logger.info(f"Updated alternative path reference in file: {file_path}")
                                else:
                                    self.logger.warning(f"Failed to update alternative path reference in file: {file_path}")
                                
                        except Exception as e:
                            self.logger.error(f"Error checking/updating reference in {file_path}: {str(e)}")
        except Exception as e:
            self.logger.error(f"Error updating references to moved file: {str(e)}")

class QuantumFileMonitor:
    """
    Monitor for file system events related to quantum entangled objects.
    Watches project directories for file movements and updates markers accordingly.
    """
    
    def __init__(self, paths_to_watch=None):
        """
        Initialize the quantum file monitor.
        
        Args:
        paths_to_watch (list): List of paths to watch for file changes
        """
        self.logger = logging.getLogger("QuantumFileMonitor")
        self.observer = None
        self.event_handler = QuantumFileEventHandler()
        self.running = False
        self.watch_thread = None
        
        # If no paths provided, watch the project root
        if not paths_to_watch:
            try:
                # Try to get project root from quantum gene marker
                project_root = quantum_gene_marker.get_project_root()
                self.paths_to_watch = [project_root]
            except Exception as e:
                self.logger.warning(f"Error getting project root from quantum_gene_marker: {str(e)}")
                # Fallback to current directory's parent (project root)
                current_dir = os.path.dirname(os.path.abspath(__file__))
                fallback_root = os.path.dirname(os.path.dirname(current_dir))
                self.paths_to_watch = [fallback_root]
                self.logger.info(f"Using fallback project root: {fallback_root}")
        else:
            self.paths_to_watch = paths_to_watch
            
        self.logger.info(f"Initialized QuantumFileMonitor with paths: {self.paths_to_watch}")
    
    def start(self, paths_to_watch=None):
        """Start monitoring file system events."""
        if self.running:
            self.logger.warning("File monitor is already running")
            return
            
        self.running = True
        self.observer = Observer()
        
        # Use provided paths or default to self.paths_to_watch
        monitor_paths = paths_to_watch if paths_to_watch else self.paths_to_watch
        
        for path in monitor_paths:
            if os.path.exists(path):
                self.observer.schedule(self.event_handler, path, recursive=True)
                self.logger.info(f"Monitoring path: {path}")
            else:
                self.logger.warning(f"Path does not exist, skipping: {path}")
        
        self.observer.start()
        self.logger.info("Quantum file monitoring started")
        
        # Start the watch thread to keep the observer running
        self.watch_thread = threading.Thread(target=self._watch_loop)
        self.watch_thread.daemon = True
        self.watch_thread.start()
    
    def _watch_loop(self):
        """Background thread to keep the observer running."""
        try:
            while self.running:
                time.sleep(1)
        except Exception as e:
            self.logger.error(f"Error in watch loop: {str(e)}")
        finally:
            self.running = False
    
    def stop(self):
        """Stop monitoring file system events."""
        if not self.running:
            return
            
        self.running = False
        
        if self.observer:
            self.observer.stop()
            self.observer.join()
            self.observer = None
            
        self.logger.info("Quantum file monitoring stopped")

def get_file_monitor():
    """
    Get a singleton instance of the quantum file monitor.
    
    Returns:
    QuantumFileMonitor: The file monitor instance
    """
    if not hasattr(get_file_monitor, "_instance"):
        get_file_monitor._instance = QuantumFileMonitor()
    return get_file_monitor._instance

# 检查是否允许作为独立程序运行
if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Quantum File Monitor - Tracks file movements and updates quantum gene markers")
    parser.add_argument("--standalone", action="store_true", help="Run in standalone mode")
    parser.add_argument("--paths", nargs="*", help="Paths to monitor (can specify multiple)")
    
    args = parser.parse_args()
    
    # Get the file monitor
    file_monitor = get_file_monitor()
    
    try:
        # If specific paths were provided, use them
        if args.paths and len(args.paths) > 0:
            valid_paths = []
            for path in args.paths:
                if os.path.exists(path):
                    valid_paths.append(path)
                    file_monitor.logger.info(f"Will monitor path: {path}")
                else:
                    file_monitor.logger.warning(f"Path does not exist, skipping: {path}")
            
            if valid_paths:
                file_monitor.start(valid_paths)
            else:
                file_monitor.logger.error("No valid paths provided, using default")
                file_monitor.start()
        else:
            # Otherwise start with default paths
            file_monitor.start()
        
        if args.standalone:
            file_monitor.logger.info("Running in standalone mode. Press Ctrl+C to exit.")
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                file_monitor.logger.info("User interrupted. Stopping file monitor...")
            finally:
                file_monitor.stop()
                file_monitor.logger.info("File monitor stopped.")
    
    except KeyboardInterrupt:
        file_monitor.logger.info("User interrupted. Stopping file monitor...")
    except Exception as e:
        file_monitor.logger.error(f"Error in file monitor: {e}")
    finally:
        file_monitor.stop()
        file_monitor.logger.info("File monitor stopped.")

# 量子基因标记
# <QEntL:quantum_gene:af47d9c6a2e0437b8b7a19b38e5d117c:v1.0>
# </QEntL:quantum_gene>

# 量子纠缠状态
# <QEntL:entangled>
# paths: []
# related_files: []
# </QEntL:entangled>

"""

    """
    # 量子基因编码: QE-FIL-FC0A530E4083
    # 纠缠状态: 活跃
    # 纠缠对象: []
    # 纠缠强度: 0.98
