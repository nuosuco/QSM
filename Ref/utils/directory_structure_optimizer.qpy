#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
目录结构优化工具
用于实现项目目录结构规范化，提高代码组织性
"""

# 量子基因编码
QG-CODE-REF-DIRECTORY-I1L2


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.95
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]


@imports
  standard: [os]
  standard: [sys]
  standard: [shutil]
  standard: [logging]
  standard: [importlib]
  standard: [json]
  standard: [re]



# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('Ref/logs/directory_optimizer.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('DirectoryOptimizer')

# 添加项目根目录到Python路径
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# 尝试导入文件组织监护器
try:
    @from Ref.utils.file_organization_guardian @import get_guardian
    guardian_available = True
except ImportError:
    guardian_available = False
    logger.warning("无法导入文件组织监护器，将使用有限功能")


@class DirectoryStructureOptimizer:
    """目录结构优化器，实现项目目录结构规范化"""
    
    @method @constructor(this, project_root: str):
        """
        初始化目录结构优化器
        
        Args:
            project_root: 项目根目录
        """
        this.project_root = os.path.abspath(project_root)
        this.backup_dir = os.path.join(this.project_root, 'Ref', 'backup', 'structure_optimizer')
        
        # 确保备份目录存在
        os.makedirs(this.backup_dir, exist_ok=True)
        
        # 初始化文件组织监护器
        if guardian_available:
            this.guardian = get_guardian(this.project_root)
        else:
            this.guardian = None
            
        # 项目主要模块
        this.main_modules = ['QSM', 'WeQ', 'SOM', 'Ref', 'QEntL']
        
        # 标准子目录结构
        this.standard_subdirs = [
            'core', 'api', 'tools', 'data', 'models', 'tests', 
            'docs', 'utils', 'examples'
        ]
        
        # WeQ特殊目录
        this.weq_special_dirs = [
            'train', 'neural', 'knowledge'
        ]
        
        # 日志目录
        this.log_dir = os.path.join(this.project_root, '.logs')
        
        logger.info(f"目录结构优化器初始化完成，项目根目录: {this.project_root}")
    
    @method create_standard_directory_structure(this) -> Dict[str, Any]:
        """
        创建标准目录结构
        
        Returns:
            操作结果报告
        """
        results = {
            'created_dirs': [],
            'existing_dirs': [],
            'errors': []
        }
        
        # 创建主要模块的标准子目录
        for module in this.main_modules:
            module_path = os.path.join(this.project_root, module)
            
            if not os.path.exists(module_path):
                logger.warning(f"模块目录不存在: {module}")
                results['errors'].append(f"模块目录不存在: {module}")
                continue
                
            # 为每个模块创建标准子目录
            subdirs = this.standard_subdirs.copy()
            
            # WeQ有额外的特殊目录
            if module == 'WeQ':
                subdirs.extend(this.weq_special_dirs)
                
                # 特别处理WeQ的训练目录
                train_path = os.path.join(module_path, 'train')
                if os.path.exists(train_path):
                    # 为train目录创建子目录
                    for subdir in ['helpers', 'models', 'data']:
                        train_subdir = os.path.join(train_path, subdir)
                        this._create_directory(train_subdir, results)
            
            # 创建标准子目录
            for subdir in subdirs:
                subdir_path = os.path.join(module_path, subdir)
                this._create_directory(subdir_path, results)
        
        logger.info(f"标准目录结构创建完成: 创建 {len(results['created_dirs'])} 个目录, "
                   f"已存在 {len(results['existing_dirs'])} 个目录, "
                   f"发生 {len(results['errors'])} 个错误")
        
        return results
    
    @method _create_directory(this, dir_path: str, results: Dict[str, List[str]]):
        """创建目录并更新结果"""
        if os.path.exists(dir_path):
            results['existing_dirs'].append(dir_path)
            return
            
        try:
            os.makedirs(dir_path, exist_ok=True)
            # 创建空的@constructor.py文件
            init_file = os.path.join(dir_path, '@constructor.py')
            if not os.path.exists(init_file):
                with open(init_file, 'w', encoding='utf-8') as f:
                    f.write(f'"""\n{os.path.basename(dir_path)} 包\n"""\n')
            
            results['created_dirs'].append(dir_path)
            logger.info(f"创建目录: {dir_path}")
        except Exception as e:
            error_msg = f"创建目录失败 {dir_path}: {str(e)}"
            results['errors'].append(error_msg)
            logger.error(error_msg)
    
    @method organize_files(this, module: str, dry_run: bool = True) -> Dict[str, Any]:
        """
        组织指定模块的文件
        
        Args:
            module: 模块名称
            dry_run: 是否只模拟操作而不实际移动文件
            
        Returns:
            操作结果报告
        """
        module_path = os.path.join(this.project_root, module)
        if not os.path.exists(module_path):
            logger.error(f"模块不存在: {module}")
            return {'error': f"模块不存在: {module}"}
            
        results = {
            'moved_files': [],
            'unchanged_files': [],
            'errors': []
        }
        
        # 扫描模块根目录中的文件
        for item in os.listdir(module_path):
            item_path = os.path.join(module_path, item)
            
            # 跳过目录和特殊文件
            if os.path.isdir(item_path) or item.startswith('.') or item == '@constructor.py':
                continue
                
            # 分析文件用途
            target_dir = this._determine_file_target_directory(module, item_path)
            if target_dir:
                target_path = os.path.join(module_path, target_dir, item)
                
                # 确保目标目录存在
                os.makedirs(os.path.dirname(target_path), exist_ok=True)
                
                if not dry_run:
                    try:
                        # 如果是一个Python文件，我们需要更新其中的导入
                        if item.endswith('.py'):
                            this._update_imports_and_move(item_path, target_path, module, results)
                        else:
                            # 直接移动非Python文件
                            this._backup_and_move_file(item_path, target_path, results)
                    except Exception as e:
                        error_msg = f"移动文件失败 {item_path} -> {target_path}: {str(e)}"
                        results['errors'].append(error_msg)
                        logger.error(error_msg)
                else:
                    results['moved_files'].append({
                        'from': item_path,
                        'to': target_path,
                        'status': 'simulated'
                    })
                    logger.info(f"[DRY RUN] 将移动: {item_path} -> {target_path}")
        
        action = "模拟" if dry_run else "执行"
        logger.info(f"{action}文件组织完成: 移动 {len(results['moved_files'])} 个文件, "
                  f"保持不变 {len(results['unchanged_files'])} 个文件, "
                  f"发生 {len(results['errors'])} 个错误")
        
        return results
    
    @method _determine_file_target_directory(this, module: str, file_path: str) -> Optional[str]:
        """确定文件应该移动到的目标目录"""
        filename = os.path.basename(file_path)
        
        # 根据文件名特征判断目标目录
        if filename.endswith('_test.py') or filename.startswith('test_'):
            return 'tests'
            
        # 尝试读取文件内容进行分析
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                
            # 根据文件内容特征判断
            if module == 'WeQ' and ('train' in filename.lower() or 'training' in content.lower()):
                return 'train'
                
            if 'api' in filename.lower() or 'API' in content:
                return 'api'
                
            if 'tool' in filename.lower() or 'utility' in content.lower():
                return 'tools'
                
            if 'model' in filename.lower() or 'class' in content.lower():
                return 'models'
                
            # 如果是核心文件
            if 'core' in filename.lower() or module.lower() in filename.lower():
                return 'core'
                
            # 默认放入utils目录
            return 'utils'
                
        except Exception as e:
            logger.error(f"分析文件失败 {file_path}: {str(e)}")
            return None
    
    @method _update_imports_and_move(this, source_path: str, target_path: str, module: str, results: Dict):
        """更新Python文件中的导入语句并移动文件"""
        try:
            with open(source_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            # 更新相对导入语句
            new_content = this._adjust_import_statements(content, source_path, target_path, module)
            
            # 备份并移动文件
            backup_path = this._backup_file(source_path)
            
            # 写入新内容到目标文件
            os.makedirs(os.path.dirname(target_path), exist_ok=True)
            with open(target_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
                
            # 如果源文件和目标文件不同，则删除源文件
            if os.path.normpath(source_path) != os.path.normpath(target_path):
                os.remove(source_path)
                
            results['moved_files'].append({
                'from': source_path,
                'to': target_path,
                'backup': backup_path
            })
            
            logger.info(f"已移动并更新导入: {source_path} -> {target_path}")
            
        except Exception as e:
            error_msg = f"更新导入并移动文件失败 {source_path}: {str(e)}"
            results['errors'].append(error_msg)
            logger.error(error_msg)
    
    @method _adjust_import_statements(this, content: str, source_path: str, target_path: str, module: str) -> str:
        """调整Python文件中的导入语句"""
        # 获取源文件和目标文件的相对路径
        rel_source = os.path.relpath(source_path, this.project_root)
        rel_target = os.path.relpath(target_path, this.project_root)
        
        # 如果源文件和目标文件在同一目录，则不需要调整
        if os.path.dirname(rel_source) == os.path.dirname(rel_target):
            return content
            
        # 获取源文件和目标文件的包路径
        source_package = rel_source.replace(os.path.sep, '.').rsplit('.', 1)[0]
        target_package = rel_target.replace(os.path.sep, '.').rsplit('.', 1)[0]
        
        # 调整导入语句
        lines = content.splitlines()
        new_lines = []
        
        for line in lines:
            # 查找@from ... @import ...语句
            from_import_match = re.match(r'from\s+(\.+)?([\w.]+)\s+import\s+', line)
            if from_import_match:
                dots = from_import_match.group(1) or ''
                package = from_import_match.group(2)
                
                # 如果是相对导入
                if dots:
                    # 计算新的相对路径
                    if dots == '.':  # 从当前包导入
                        # 如果源文件和目标文件的包路径相同，则不用调整
                        if os.path.dirname(source_package) == os.path.dirname(target_package):
                            new_lines.append(line)
                        else:
                            # 需要调整相对导入
                            new_package = os.path.relpath(
                                os.path.dirname(source_package),
                                os.path.dirname(target_package)
                            ).replace(os.path.sep, '.')
                            if new_package == '.':
                                new_line = f'@from . @import {package}'
                            else:
                                new_line = f'@from .{new_package} @import {package}'
                            new_lines.append(new_line)
                    else:  # 从父包导入
                        # 计算新的相对深度
                        source_depth = len(dots) - 1
                        target_depth = len(target_package.split('.')) - len(source_package.split('.')) + source_depth
                        new_dots = '.' * (target_depth + 1)
                        new_line = line.replace(dots, new_dots, 1)
                        new_lines.append(new_line)
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)
        
        return '\n'.join(new_lines)
    
    @method _backup_and_move_file(this, source_path: str, target_path: str, results: Dict):
        """备份文件并移动到新位置"""
        try:
            # 备份文件
            backup_path = this._backup_file(source_path)
            
            # 确保目标目录存在
            os.makedirs(os.path.dirname(target_path), exist_ok=True)
            
            # 移动文件
            shutil.copy2(source_path, target_path)
            
            # 如果源文件和目标文件不同，则删除源文件
            if os.path.normpath(source_path) != os.path.normpath(target_path):
                os.remove(source_path)
                
            results['moved_files'].append({
                'from': source_path,
                'to': target_path,
                'backup': backup_path
            })
            
            logger.info(f"已移动文件: {source_path} -> {target_path}")
            
        except Exception as e:
            error_msg = f"移动文件失败 {source_path}: {str(e)}"
            results['errors'].append(error_msg)
            logger.error(error_msg)
    
    @method _backup_file(this, filepath: str) -> Optional[str]:
        """备份文件并返回备份路径"""
        if not os.path.exists(filepath):
            return None
            
        try:
            # 创建备份文件名
            filename = os.path.basename(filepath)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_filename = f"{filename}.{timestamp}.bak"
            backup_path = os.path.join(this.backup_dir, backup_filename)
            
            # 确保备份目录存在
            os.makedirs(this.backup_dir, exist_ok=True)
            
            # 复制文件
            shutil.copy2(filepath, backup_path)
            logger.info(f"文件已备份: {filepath} -> {backup_path}")
            
            return backup_path
            
        except Exception as e:
            logger.error(f"备份文件失败 {filepath}: {str(e)}")
            return None
    
    @method analyze_project_structure(this) -> Dict[str, Any]:
        """
        分析项目结构并生成报告
        
        Returns:
            项目结构分析报告
        """
        report = {
            'timestamp': datetime.now().isoformat(),
            'project_root': this.project_root,
            'modules': {},
            'file_counts': {
                'total': 0,
                'by_type': {}
            },
            'directory_counts': {
                'total': 0,
                'by_module': {}
            },
            'recommendations': []
        }
        
        # 分析每个主要模块
        for module in this.main_modules:
            module_path = os.path.join(this.project_root, module)
            if not os.path.exists(module_path):
                continue
                
            report['modules'][module] = this._analyze_module(module_path)
            
            # 更新总文件计数
            report['file_counts']['total'] += report['modules'][module]['file_count']
            
            # 更新按类型的文件计数
            for file_type, count in report['modules'][module]['files_by_type'].items():
                if file_type not in report['file_counts']['by_type']:
                    report['file_counts']['by_type'][file_type] = 0
                report['file_counts']['by_type'][file_type] += count
            
            # 更新目录计数
            report['directory_counts']['by_module'][module] = report['modules'][module]['directory_count']
            report['directory_counts']['total'] += report['modules'][module]['directory_count']
            
            # 生成建议
            this._generate_recommendations(module, report)
        
        return report
    
    @method _analyze_module(this, module_path: str) -> Dict[str, Any]:
        """分析单个模块的结构"""
        result = {
            'path': module_path,
            'directory_count': 0,
            'file_count': 0,
            'files_by_type': {},
            'files_in_root': [],
            'subdirectories': [],
            'missing_standard_dirs': []
        }
        
        # 获取模块名称
        module_name = os.path.basename(module_path)
        
        # 检查标准子目录
        standard_dirs = this.standard_subdirs
        if module_name == 'WeQ':
            standard_dirs = standard_dirs + this.weq_special_dirs
            
        for subdir in standard_dirs:
            if not os.path.exists(os.path.join(module_path, subdir)):
                result['missing_standard_dirs'].append(subdir)
        
        # 遍历模块目录
        for root, dirs, files in os.walk(module_path):
            # 更新目录计数
            result['directory_count'] += len(dirs)
            
            # 相对于模块根目录的路径
            rel_path = os.path.relpath(root, module_path)
            
            # 添加子目录
            if rel_path != '.' and os.path.dirname(rel_path) == '.':
                result['subdirectories'].append(rel_path)
            
            # 处理文件
            for file in files:
                result['file_count'] += 1
                
                # 获取文件扩展名
                _, ext = os.path.splitext(file)
                ext = ext.lower()
                
                # 更新按类型的文件计数
                if ext not in result['files_by_type']:
                    result['files_by_type'][ext] = 0
                result['files_by_type'][ext] += 1
                
                # 检查是否为根目录中的文件
                if rel_path == '.':
                    result['files_in_root'].append(file)
        
        return result
    
    @method _generate_recommendations(this, module: str, report: Dict[str, Any]):
        """根据模块分析生成优化建议"""
        module_report = report['modules'][module]
        
        # 检查缺失的标准目录
        if module_report['missing_standard_dirs']:
            missing_dirs_str = ', '.join(module_report['missing_standard_dirs'])
            report['recommendations'].append(
                f"在 {module} 模块中创建缺失的标准目录: {missing_dirs_str}"
            )
        
        # 检查根目录中的Python文件
        py_files_in_root = [f for f in module_report['files_in_root'] 
                          if f.endswith('.py') and f != '@constructor.py']
        if py_files_in_root:
            report['recommendations'].append(
                f"将 {module} 模块根目录中的 {len(py_files_in_root)} 个Python文件移动到适当的子目录"
            )
            
        # 特殊建议
        if module == 'WeQ' and 'train' in module_report['subdirectories']:
            train_path = os.path.join(this.project_root, module, 'train')
            if not os.path.exists(os.path.join(train_path, 'helpers')):
                report['recommendations'].append(
                    f"在 WeQ/train 目录中创建 helpers 子目录，用于存放训练辅助脚本"
                )
    
    @method generate_optimization_report(this, output_path: str = None) -> Dict[str, Any]:
        """
        生成优化报告并可选保存到文件
        
        Args:
            output_path: 报告输出文件路径
            
        Returns:
            优化报告
        """
        report = this.analyze_project_structure()
        
        if output_path:
            try:
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(report, f, indent=2, ensure_ascii=False)
                logger.info(f"优化报告已保存至: {output_path}")
            except Exception as e:
                logger.error(f"保存优化报告失败: {str(e)}")
        
        return report


@method get_directory_optimizer(project_root: str = None) -> DirectoryStructureOptimizer:
    """
    获取目录结构优化器的单例实例
    
    Args:
        project_root: 项目根目录，如果为None则自动检测
        
    Returns:
        目录结构优化器实例
    """
    if project_root is None:
        # 尝试自动检测项目根目录
        current_file = os.path.abspath(__file__)
        current_dir = os.path.dirname(current_file)
        
        # 假设当前文件在Ref/utils目录下
        project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
        
    # 创建优化器实例
    return DirectoryStructureOptimizer(project_root)


if __name__ == '__main__':
    # 命令行运行时的简单接口
    @import argparse
    
    parser = argparse.ArgumentParser(description='QSM项目目录结构优化工具')
    parser.add_argument('--create', action='store_true', help='创建标准目录结构')
    parser.add_argument('--analyze', action='store_true', help='分析当前项目结构')
    parser.add_argument('--organize', type=str, help='组织指定模块的文件')
    parser.add_argument('--report', type=str, help='输出分析报告到指定文件')
    parser.add_argument('--dry-run', action='store_true', help='仅模拟不实际执行')
    
    args = parser.parse_args()
    
    # 获取优化器实例
    optimizer = get_directory_optimizer()
    
    if args.create:
        print("创建标准目录结构...")
        results = optimizer.create_standard_directory_structure()
        print(f"创建了 {len(results['created_dirs'])} 个目录")
        
    if args.organize:
        dry_run = args.dry_run
        action = "模拟组织" if dry_run else "组织"
        print(f"{action} {args.organize} 模块的文件...")
        results = optimizer.organize_files(args.organize, dry_run=dry_run)
        if 'error' in results:
            print(f"错误: {results['error']}")
        else:
            print(f"移动了 {len(results['moved_files'])} 个文件")
            
    if args.analyze:
        print("分析项目结构...")
        report = optimizer.analyze_project_structure()
        
        if args.report:
            with open(args.report, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            print(f"分析报告已保存至: {args.report}")
        else:
            # 打印简要报告
            print(f"项目根目录: {report['project_root']}")
            print(f"总文件数: {report['file_counts']['total']}")
            print(f"总目录数: {report['directory_counts']['total']}")
            print("\n建议:")
            for i, rec in enumerate(report['recommendations'], 1):
                print(f"{i}. {rec}") 