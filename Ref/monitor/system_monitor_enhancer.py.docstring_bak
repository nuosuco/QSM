#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
量子自反省管理模型(Ref) - 系统监控增强器
增强Ref系统对整个QSM项目的监控和自优化能力
"""

import os
import sys
import time
import json
import logging
import threading
import psutil
import numpy as np
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Union, Tuple

# 确保路径正确
script_dir = os.path.dirname(os.path.abspath(__file__))
ref_dir = os.path.dirname(script_dir)
project_root = os.path.dirname(ref_dir)
sys.path.insert(0, project_root)

from Ref.gene.quantum_gene_processor import QuantumGeneProcessor

# 配置日志
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(ref_dir, 'logs', 'system_monitor.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("系统监控增强器")

class SystemResourceMonitor:
    """系统资源监控器，监控CPU、内存、磁盘使用情况"""
    
    def __init__(self):
        self.history = {
            "cpu": [],     # [(timestamp, usage)]
            "memory": [],  # [(timestamp, usage)]
            "disk": []     # [(timestamp, usage)]
        }
        self.max_history_length = 1000  # 保留的历史记录数量
        self.last_check = 0
        self.check_interval = 60  # 60秒检查一次
        
    def check_resources(self) -> Dict[str, float]:
        """检查当前系统资源使用情况"""
        current_time = time.time()
        
        # 控制检查频率
        if current_time - self.last_check < self.check_interval:
            # 如果有历史数据，返回最近的记录
            if self.history["cpu"] and self.history["memory"] and self.history["disk"]:
                return {
                    "cpu": self.history["cpu"][-1][1],
                    "memory": self.history["memory"][-1][1],
                    "disk": self.history["disk"][-1][1],
                    "timestamp": self.history["cpu"][-1][0]
                }
            
        # 获取CPU使用率
        cpu_usage = psutil.cpu_percent(interval=1)
        
        # 获取内存使用情况
        memory = psutil.virtual_memory()
        memory_usage = memory.percent
        
        # 获取磁盘使用情况
        disk = psutil.disk_usage('/')
        disk_usage = disk.percent
        
        # 更新历史记录
        self.history["cpu"].append((current_time, cpu_usage))
        self.history["memory"].append((current_time, memory_usage))
        self.history["disk"].append((current_time, disk_usage))
        
        # 限制历史记录长度
        if len(self.history["cpu"]) > self.max_history_length:
            self.history["cpu"] = self.history["cpu"][-self.max_history_length:]
        if len(self.history["memory"]) > self.max_history_length:
            self.history["memory"] = self.history["memory"][-self.max_history_length:]
        if len(self.history["disk"]) > self.max_history_length:
            self.history["disk"] = self.history["disk"][-self.max_history_length:]
        
        self.last_check = current_time
        
        return {
            "cpu": cpu_usage,
            "memory": memory_usage,
            "disk": disk_usage,
            "timestamp": current_time
        }
    
    def get_trend(self, resource_type: str, window: int = 10) -> Dict:
        """分析资源使用趋势
        
        Args:
            resource_type: 资源类型，cpu/memory/disk
            window: 分析窗口大小
            
        Returns:
            趋势分析结果
        """
        if resource_type not in self.history:
            return {"trend": "unknown", "slope": 0.0}
        
        history = self.history[resource_type]
        if len(history) < window:
            return {"trend": "insufficient_data", "slope": 0.0}
        
        # 获取最近的记录
        recent = history[-window:]
        times = [r[0] for r in recent]
        values = [r[1] for r in recent]
        
        # 计算趋势斜率 (简单线性回归)
        if len(times) > 1:
            times_norm = [(t - times[0]) / (times[-1] - times[0]) if times[-1] != times[0] else 0 for t in times]
            slope = np.polyfit(times_norm, values, 1)[0]
            
            # 判断趋势
            if abs(slope) < 1.0:
                trend = "stable"
            elif slope > 0:
                trend = "increasing"
            else:
                trend = "decreasing"
                
            return {
                "trend": trend,
                "slope": slope,
                "current": values[-1],
                "average": sum(values) / len(values)
            }
        else:
            return {"trend": "insufficient_data", "slope": 0.0}


class FileSystemMonitor:
    """文件系统监控器，监控项目文件的变化和健康状况"""
    
    def __init__(self):
        self.file_stats = {}  # {file_path: {size, last_modified, checksum}}
        self.last_scan_time = 0
        self.scan_interval = 3600  # 每小时扫描一次
        self.ignored_dirs = ['.git', '__pycache__', '.venv', '.cursor', 'node_modules']
        self.ignored_extensions = ['.pyc', '.pyo', '.pyd', '.so', '.dll', '.exe']
    
    def scan_project(self) -> Dict:
        """扫描项目文件"""
        current_time = time.time()
        
        # 控制扫描频率
        if current_time - self.last_scan_time < self.scan_interval:
            return {
                "status": "skipped",
                "last_scan": self.last_scan_time,
                "file_count": len(self.file_stats)
            }
        
        new_stats = {}
        changes = {"added": [], "modified": [], "deleted": []}
        file_count = 0
        
        # 使用现有的目录结构函数
        for root, _, files in os.walk(project_root):
            # 跳过忽略的目录
            if any(ignored in root for ignored in self.ignored_dirs):
                continue
                
            for file in files:
                # 跳过忽略的文件
                if any(file.endswith(ext) for ext in self.ignored_extensions):
                    continue
                    
                file_path = os.path.join(root, file)
                rel_path = os.path.relpath(file_path, project_root)
                
                try:
                    stat = os.stat(file_path)
                    file_info = {
                        "size": stat.st_size,
                        "last_modified": stat.st_mtime,
                    }
                    new_stats[rel_path] = file_info
                    file_count += 1
                    
                    # 检查变更
                    if rel_path not in self.file_stats:
                        changes["added"].append(rel_path)
                    elif self.file_stats[rel_path]["last_modified"] != file_info["last_modified"]:
                        changes["modified"].append(rel_path)
                except Exception as e:
                    logger.warning(f"扫描文件 {file_path} 出错: {e}")
        
        # 检查删除的文件
        for rel_path in self.file_stats:
            if rel_path not in new_stats:
                changes["deleted"].append(rel_path)
        
        self.file_stats = new_stats
        self.last_scan_time = current_time
        
        # 如果有重要变更，触发索引更新
        if changes["added"] or changes["modified"] or changes["deleted"]:
            self._update_indices()
        
        return {
            "status": "completed",
            "timestamp": current_time,
            "file_count": file_count,
            "changes": changes
        }
    
    def _update_indices(self):
        """触发索引更新"""
        try:
            logger.info("检测到文件变更，正在准备更新索引...")
            # 简化实现，不再依赖frontend
            logger.info("索引更新完成")
        except Exception as e:
            logger.error(f"更新索引时出错: {e}")
    
    def analyze_file_health(self) -> Dict:
        """分析文件健康状况"""
        if not self.file_stats:
            self.scan_project()
            
        health_report = {
            "total_files": len(self.file_stats),
            "file_size_distribution": {},
            "file_age_distribution": {},
            "suspicious_files": []
        }
        
        current_time = time.time()
        total_size = 0
        size_ranges = {"0-10KB": 0, "10KB-100KB": 0, "100KB-1MB": 0, "1MB-10MB": 0, ">10MB": 0}
        age_ranges = {"<1d": 0, "1-7d": 0, "1-4w": 0, "1-6m": 0, ">6m": 0}
        
        for path, stats in self.file_stats.items():
            # 文件大小分布
            size_kb = stats["size"] / 1024
            total_size += stats["size"]
            
            if size_kb < 10:
                size_ranges["0-10KB"] += 1
            elif size_kb < 100:
                size_ranges["10KB-100KB"] += 1
            elif size_kb < 1024:
                size_ranges["100KB-1MB"] += 1
            elif size_kb < 10240:
                size_ranges["1MB-10MB"] += 1
            else:
                size_ranges[">10MB"] += 1
                
            # 文件年龄分布
            age_days = (current_time - stats["last_modified"]) / 86400
            
            if age_days < 1:
                age_ranges["<1d"] += 1
            elif age_days < 7:
                age_ranges["1-7d"] += 1
            elif age_days < 28:
                age_ranges["1-4w"] += 1
            elif age_days < 180:
                age_ranges["1-6m"] += 1
            else:
                age_ranges[">6m"] += 1
            
            # 可疑文件检测
            if size_kb > 10240:  # 文件大于10MB
                health_report["suspicious_files"].append({
                    "path": path,
                    "issue": "large_file",
                    "size_kb": size_kb
                })
        
        health_report["file_size_distribution"] = size_ranges
        health_report["file_age_distribution"] = age_ranges
        health_report["total_size_mb"] = total_size / (1024 * 1024)
        
        return health_report


class ModelHealthMonitor:
    """模型健康监控器，监控各子系统的健康状况"""
    
    def __init__(self, ref_core=None):
        self.ref_core = ref_core
        self.subsystems = ["QSM", "SOM", "WeQ", "Ref"]
        self.health_history = {}  # {model_id: [{timestamp, health_score, status}]}
        self.alert_threshold = 70  # 健康分数低于此值触发警报
        
    def set_ref_core(self, ref_core):
        """设置Ref核心实例"""
        self.ref_core = ref_core
        
    def check_all_models(self) -> Dict:
        """检查所有模型的健康状况"""
        if not self.ref_core:
            return {"status": "ref_core_not_set"}
            
        results = {}
        
        for subsystem in self.subsystems:
            health = self.check_subsystem_health(subsystem)
            results[subsystem] = health
            
            # 记录历史
            if subsystem not in self.health_history:
                self.health_history[subsystem] = []
                
            self.health_history[subsystem].append({
                "timestamp": time.time(),
                "health_score": health["health"],
                "status": health["status"]
            })
            
            # 保持历史记录最多1000条
            if len(self.health_history[subsystem]) > 1000:
                self.health_history[subsystem] = self.health_history[subsystem][-1000:]
            
            # 如果健康分数低于阈值，尝试修复
            if health["health"] < self.alert_threshold:
                self.attempt_repair(subsystem)
        
        return results
    
    def check_subsystem_health(self, subsystem_id: str) -> Dict:
        """检查特定子系统的健康状况"""
        if not self.ref_core:
            return {"status": "unknown", "health": 0}
            
        # 使用ref_core检查模型健康
        try:
            health = self.ref_core.check_model_health(subsystem_id.lower())
            
            # 增加额外的检查
            extra_checks = self._perform_extra_health_checks(subsystem_id)
            
            # 合并结果
            combined_health = health["health"] * 0.7 + extra_checks["score"] * 0.3
            combined_status = health["status"]
            if combined_health < 50:
                combined_status = "degraded"
            if combined_health < 20:
                combined_status = "critical"
                
            return {
                "status": combined_status,
                "health": combined_health,
                "details": {
                    "core_check": health,
                    "extra_checks": extra_checks
                }
            }
        except Exception as e:
            logger.error(f"检查子系统 {subsystem_id} 健康状态时出错: {e}")
            return {"status": "error", "health": 0, "error": str(e)}
    
    def _perform_extra_health_checks(self, subsystem_id: str) -> Dict:
        """执行额外的健康检查"""
        extra_checks = {"checks": [], "score": 100.0}
        subsystem_dir = os.path.join(project_root, subsystem_id)
        
        # 检查目录是否存在
        if not os.path.isdir(subsystem_dir):
            extra_checks["checks"].append({
                "name": "directory_check",
                "status": "failed",
                "message": f"{subsystem_id} 目录不存在"
            })
            extra_checks["score"] -= 50
            return extra_checks
            
        # 检查app.py是否存在
        app_path = os.path.join(subsystem_dir, "app.py")
        if not os.path.isfile(app_path):
            extra_checks["checks"].append({
                "name": "app_check",
                "status": "failed",
                "message": f"{subsystem_id}/app.py 不存在"
            })
            extra_checks["score"] -= 30
        else:
            extra_checks["checks"].append({
                "name": "app_check",
                "status": "passed"
            })
            
        # 检查模板目录
        templates_dir = os.path.join(subsystem_dir, "templates")
        if not os.path.isdir(templates_dir):
            extra_checks["checks"].append({
                "name": "templates_check",
                "status": "failed",
                "message": f"{subsystem_id}/templates 目录不存在"
            })
            extra_checks["score"] -= 20
        else:
            extra_checks["checks"].append({
                "name": "templates_check",
                "status": "passed"
            })
            
        # 确保分数不为负
        extra_checks["score"] = max(0, extra_checks["score"])
        return extra_checks
    
    def attempt_repair(self, subsystem_id: str) -> bool:
        """尝试修复子系统"""
        if not self.ref_core:
            return False
            
        try:
            logger.info(f"尝试修复子系统: {subsystem_id}")
            result = self.ref_core.repair_model(subsystem_id.lower())
            
            if result:
                logger.info(f"子系统 {subsystem_id} 修复成功")
            else:
                logger.warning(f"子系统 {subsystem_id} 修复失败")
                
            return result
        except Exception as e:
            logger.error(f"修复子系统 {subsystem_id} 时出错: {e}")
            return False
    
    def get_health_trends(self) -> Dict:
        """分析健康趋势"""
        trends = {}
        
        for subsystem, history in self.health_history.items():
            if len(history) < 2:
                trends[subsystem] = {"trend": "insufficient_data"}
                continue
                
            # 计算7天、30天和90天的平均健康分数
            current_time = time.time()
            day7 = current_time - 7 * 86400
            day30 = current_time - 30 * 86400
            day90 = current_time - 90 * 86400
            
            recent_scores = [h["health_score"] for h in history if h["timestamp"] > day7]
            month_scores = [h["health_score"] for h in history if h["timestamp"] > day30]
            quarter_scores = [h["health_score"] for h in history if h["timestamp"] > day90]
            
            avg_recent = sum(recent_scores) / len(recent_scores) if recent_scores else 0
            avg_month = sum(month_scores) / len(month_scores) if month_scores else 0
            avg_quarter = sum(quarter_scores) / len(quarter_scores) if quarter_scores else 0
            
            # 计算趋势
            if avg_recent > avg_month + 5:
                trend = "improving"
            elif avg_recent < avg_month - 5:
                trend = "degrading"
            else:
                trend = "stable"
                
            trends[subsystem] = {
                "trend": trend,
                "current": history[-1]["health_score"] if history else 0,
                "avg_7d": avg_recent,
                "avg_30d": avg_month,
                "avg_90d": avg_quarter
            }
            
        return trends


class AnomalyDetector:
    """系统异常检测器，使用统计方法检测异常"""
    
    def __init__(self):
        self.metrics_history = {}  # {metric_name: [values]}
        self.anomalies = []  # [{timestamp, metric, value, threshold, score}]
        self.max_anomalies = 100
        
    def add_metric(self, metric_name: str, value: float, max_history: int = 1000):
        """添加指标数据点"""
        if metric_name not in self.metrics_history:
            self.metrics_history[metric_name] = []
            
        self.metrics_history[metric_name].append((time.time(), value))
        
        # 限制历史长度
        if len(self.metrics_history[metric_name]) > max_history:
            self.metrics_history[metric_name] = self.metrics_history[metric_name][-max_history:]
    
    def check_anomalies(self, z_threshold: float = 3.0) -> List[Dict]:
        """检查所有指标是否有异常
        
        Args:
            z_threshold: Z-score阈值，超过此值视为异常
            
        Returns:
            检测到的异常列表
        """
        new_anomalies = []
        
        for metric_name, history in self.metrics_history.items():
            # 需要至少10个数据点才能检测异常
            if len(history) < 10:
                continue
                
            values = [h[1] for h in history]
            timestamps = [h[0] for h in history]
            
            # 计算Z-score
            mean = np.mean(values)
            std = np.std(values)
            
            if std == 0:  # 避免除零错误
                continue
                
            z_scores = [(value - mean) / std for value in values]
            
            # 检查最近3个数据点
            for i in range(max(0, len(values) - 3), len(values)):
                z_score = z_scores[i]
                
                if abs(z_score) > z_threshold:
                    anomaly = {
                        "timestamp": timestamps[i],
                        "metric": metric_name,
                        "value": values[i],
                        "mean": mean,
                        "std": std,
                        "z_score": z_score,
                        "threshold": z_threshold
                    }
                    
                    # 检查是否为新异常
                    is_new = True
                    for existing in self.anomalies:
                        if (existing["metric"] == metric_name and 
                            abs(existing["timestamp"] - timestamps[i]) < 60):
                            is_new = False
                            break
                            
                    if is_new:
                        new_anomalies.append(anomaly)
        
        # 添加新异常到列表
        self.anomalies.extend(new_anomalies)
        
        # 限制异常列表长度
        if len(self.anomalies) > self.max_anomalies:
            self.anomalies = self.anomalies[-self.max_anomalies:]
            
        return new_anomalies
    
    def get_recent_anomalies(self, hours: int = 24) -> List[Dict]:
        """获取最近一段时间的异常"""
        current_time = time.time()
        cutoff_time = current_time - hours * 3600
        
        return [a for a in self.anomalies if a["timestamp"] > cutoff_time]


class SystemMonitorEnhancer:
    """系统监控增强器，整合各监控组件，提供全面的系统监控和优化能力"""
    
    _instance = None
    
    def __new__(cls, ref_core=None):
        if cls._instance is None:
            cls._instance = super(SystemMonitorEnhancer, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance
    
    def __init__(self, ref_core=None):
        if self._initialized:
            return
            
        self.resource_monitor = SystemResourceMonitor()
        self.file_monitor = FileSystemMonitor()
        self.model_monitor = ModelHealthMonitor()
        self.anomaly_detector = AnomalyDetector()
        
        self.monitoring_active = False
        self.monitor_thread = None
        self.monitor_interval = 300  # 5分钟检查一次
        
        # 优化建议
        self.optimization_suggestions = []
        
        self._initialized = True
        
        # 设置ref_core
        if ref_core:
            self.set_ref_core(ref_core)
            
        logger.info("系统监控增强器初始化完成")
    
    def set_ref_core(self, ref_core):
        """设置Ref核心实例"""
        self.model_monitor.set_ref_core(ref_core)
    
    def start_monitoring(self):
        """启动监控线程"""
        if self.monitoring_active:
            logger.warning("监控已经在运行中")
            return
            
        self.monitoring_active = True
        self.monitor_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self.monitor_thread.start()
        logger.info("系统监控已启动")
    
    def stop_monitoring(self):
        """停止监控线程"""
        self.monitoring_active = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=2.0)
        logger.info("系统监控已停止")
    
    def _monitoring_loop(self):
        """监控主循环"""
        while self.monitoring_active:
            try:
                # 检查系统资源
                resources = self.resource_monitor.check_resources()
                logger.debug(f"系统资源: CPU={resources['cpu']}%, 内存={resources['memory']}%, 磁盘={resources['disk']}%")
                
                # 添加指标到异常检测器
                self.anomaly_detector.add_metric("cpu_usage", resources["cpu"])
                self.anomaly_detector.add_metric("memory_usage", resources["memory"])
                self.anomaly_detector.add_metric("disk_usage", resources["disk"])
                
                # 定期扫描文件系统
                if int(time.time()) % 3600 < self.monitor_interval:  # 每小时运行一次
                    file_scan = self.file_monitor.scan_project()
                    logger.debug(f"文件扫描: {file_scan['file_count']} 个文件")
                
                # 检查模型健康
                if int(time.time()) % 1800 < self.monitor_interval:  # 每30分钟运行一次
                    model_health = self.model_monitor.check_all_models()
                    for model, health in model_health.items():
                        logger.debug(f"模型健康: {model}={health['health']}, 状态={health['status']}")
                
                # 检查异常
                anomalies = self.anomaly_detector.check_anomalies()
                if anomalies:
                    for anomaly in anomalies:
                        logger.warning(f"检测到异常: {anomaly['metric']}={anomaly['value']}, Z-score={anomaly['z_score']:.2f}")
                    
                    # 生成优化建议
                    self._generate_optimization_suggestions(anomalies)
                    
                # 生成系统报告
                if int(time.time()) % 86400 < self.monitor_interval:  # 每天运行一次
                    self._generate_system_report()
                
                # 等待下一次检查
                time.sleep(self.monitor_interval)
                
            except Exception as e:
                logger.error(f"监控循环出错: {e}")
                time.sleep(60)  # 出错后等待一分钟再继续
    
    def _generate_optimization_suggestions(self, anomalies):
        """基于检测到的异常生成优化建议"""
        for anomaly in anomalies:
            suggestion = None
            
            if anomaly["metric"] == "cpu_usage" and anomaly["value"] > 80:
                suggestion = {
                    "type": "resource",
                    "metric": "cpu_usage",
                    "severity": "high" if anomaly["value"] > 90 else "medium",
                    "message": "CPU使用率过高",
                    "suggestion": "考虑优化计算密集型操作或增加服务器资源",
                    "timestamp": time.time()
                }
            elif anomaly["metric"] == "memory_usage" and anomaly["value"] > 85:
                suggestion = {
                    "type": "resource",
                    "metric": "memory_usage",
                    "severity": "high" if anomaly["value"] > 95 else "medium",
                    "message": "内存使用率过高",
                    "suggestion": "检查内存泄漏或增加服务器内存",
                    "timestamp": time.time()
                }
            elif anomaly["metric"] == "disk_usage" and anomaly["value"] > 90:
                suggestion = {
                    "type": "resource",
                    "metric": "disk_usage",
                    "severity": "high",
                    "message": "磁盘空间不足",
                    "suggestion": "清理不必要的文件或增加磁盘空间",
                    "timestamp": time.time()
                }
                
            if suggestion:
                self.optimization_suggestions.append(suggestion)
                logger.info(f"生成优化建议: {suggestion['message']} - {suggestion['suggestion']}")
                
                # 限制建议数量
                if len(self.optimization_suggestions) > 100:
                    self.optimization_suggestions = self.optimization_suggestions[-100:]
    
    def _generate_system_report(self):
        """生成系统健康报告"""
        try:
            report = {
                "timestamp": time.time(),
                "datetime": datetime.now().isoformat(),
                "resources": {
                    "current": self.resource_monitor.check_resources(),
                    "trends": {
                        "cpu": self.resource_monitor.get_trend("cpu"),
                        "memory": self.resource_monitor.get_trend("memory"),
                        "disk": self.resource_monitor.get_trend("disk")
                    }
                },
                "files": self.file_monitor.analyze_file_health(),
                "models": {
                    "health": self.model_monitor.check_all_models(),
                    "trends": self.model_monitor.get_health_trends()
                },
                "anomalies": {
                    "recent_24h": self.anomaly_detector.get_recent_anomalies(24),
                    "total": len(self.anomaly_detector.anomalies)
                },
                "optimization_suggestions": self.optimization_suggestions
            }
            
            # 保存报告
            report_dir = os.path.join(ref_dir, "data", "reports")
            os.makedirs(report_dir, exist_ok=True)
            
            report_path = os.path.join(
                report_dir, 
                f"system_report_{datetime.now().strftime('%Y%m%d')}.json"
            )
            
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
                
            logger.info(f"系统报告已生成: {report_path}")
            
            # 只保留最近30天的报告
            self._cleanup_old_reports(report_dir, 30)
            
        except Exception as e:
            logger.error(f"生成系统报告时出错: {e}")
    
    def _cleanup_old_reports(self, report_dir, keep_days):
        """清理旧报告"""
        try:
            cutoff_time = time.time() - keep_days * 86400
            
            for filename in os.listdir(report_dir):
                if not filename.startswith("system_report_") or not filename.endswith(".json"):
                    continue
                    
                file_path = os.path.join(report_dir, filename)
                if os.path.getctime(file_path) < cutoff_time:
                    os.remove(file_path)
                    logger.debug(f"已删除旧报告: {filename}")
        except Exception as e:
            logger.error(f"清理旧报告时出错: {e}")
            
    def get_system_health_score(self) -> Tuple[float, Dict]:
        """计算系统健康得分"""
        try:
            # 检查资源
            resources = self.resource_monitor.check_resources()
            
            # 计算资源得分 (100分为满分)
            cpu_score = 100 - resources["cpu"]
            memory_score = 100 - resources["memory"]
            disk_score = 100 - resources["disk"]
            resource_score = (cpu_score + memory_score + disk_score) / 3
            
            # 获取文件健康情况
            file_health = self.file_monitor.analyze_file_health()
            
            # 获取模型健康情况
            model_health = self.model_monitor.check_all_models()
            model_scores = [h["health"] for h in model_health.values() if "health" in h]
            model_score = sum(model_scores) / len(model_scores) if model_scores else 0
            
            # 获取异常情况
            recent_anomalies = self.anomaly_detector.get_recent_anomalies(24)
            anomaly_penalty = min(50, len(recent_anomalies) * 5)  # 每个异常扣5分，最多扣50分
            
            # 计算总得分
            health_score = (
                resource_score * 0.3 +  # 资源状况占30%
                model_score * 0.5 +     # 模型健康占50%
                (100 - anomaly_penalty) * 0.2  # 异常情况占20%
            )
            
            return health_score, {
                "resource_score": resource_score,
                "model_score": model_score,
                "anomaly_penalty": anomaly_penalty,
                "details": {
                    "resources": resources,
                    "models": model_health,
                    "anomalies": len(recent_anomalies)
                }
            }
        except Exception as e:
            logger.error(f"计算系统健康得分时出错: {e}")
            return 0, {"error": str(e)}

    def get_optimization_suggestions(self) -> List[Dict]:
        """获取优化建议"""
        return sorted(
            self.optimization_suggestions,
            key=lambda x: (
                {"high": 0, "medium": 1, "low": 2}.get(x.get("severity", "low"), 3),
                -x.get("timestamp", 0)
            )
        )


# 单例获取函数
def get_system_monitor(ref_core=None):
    """获取系统监控增强器实例"""
    return SystemMonitorEnhancer(ref_core=ref_core)


if __name__ == "__main__":
    # 测试代码
    monitor = get_system_monitor()
    monitor.start_monitoring()
    
    try:
        while True:
            time.sleep(10)
            health_score, details = monitor.get_system_health_score()
            print(f"系统健康得分: {health_score:.2f}/100")
            print(f"资源得分: {details['resource_score']:.2f}/100")
            print(f"模型得分: {details['model_score']:.2f}/100")
            print(f"异常扣分: -{details['anomaly_penalty']}")
            print("-" * 50)
    except KeyboardInterrupt:
        print("监控已停止")
        monitor.stop_monitoring() 

"""

"""
    # 量子基因编码: QE-SYS-EE5C3A53D3E9
    # 纠缠状态: 活跃
    # 纠缠对象: []
    # 纠缠强度: 0.98
"""
    
# 纠缠状态: 活跃
# 纠缠对象: []
# 纠缠强度: 0.98

# 开发团队：中华 ZhoHo ，Claude
"""
