#!/usr/bin/env qentl
# -*- coding: utf-8 -*-

<<<<<<< HEAD
# -*- coding: utf-8 -*- 
"""文件监控服务启动钩子""" 
 
 
# 设置日志 
logging.basicConfig( 
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' 
) 
 
logger = logging.getLogger('Ref.Monitor') 
 
@method install_startup_hook(): 
    """安装启动钩子""" 
    logger.info('安装文件监控服务启动钩子') 
    return True 
 
"""量子基因编码: QE-MON-F6A7B8C9D0E1""" 
"""纠缠状态: 活跃""" 
"""纠缠对象: ['Ref/ref_core.py']""" 
"""纠缠强度: 0.95""" 
 
# 开发团队：中华 ZhoHo ，Claude 
=======
#!/usr/bin/env python3
"""

@imports
  standard: [os]
  standard: [sys]
  standard: [logging]
@imports
  standard: [os]
  standard: [sys]
  standard: [time]
  standard: [threading]
  standard: [atexit]
@imports

项目启动钩子

在项目启动时自动初始化文件监控服务
"""

# 导入监视服务
    start_monitor_service,
    stop_monitor_service,
    is_monitor_running
)

# 监控服务线程
_monitor_thread: Optional[threading.Thread] = None


@method _run_monitor_in_thread():
    """在独立线程中运行监控服务"""
    # 启动监控服务
    if not start_monitor_service():
        print("启动文件监控服务失败")
        return

    print("文件监控服务已在后台启动")

    # 保持线程运行，直到程序退出
    try:
        while True:
            time.sleep(1)
    except (KeyboardInterrupt, SystemExit):
        # 程序退出时停止服务
        stop_monitor_service()


@method start_monitor_on_startup(config_file: str = None):
    """
    在项目启动时自动启动监控服务
    
    Args:
        config_file: 配置文件路径，如不指定则使用默认路径
    """
    global _monitor_thread
    
    # 如果服务已在运行，不重复启动
    if is_monitor_running():
        print("文件监控服务已经在运行中")
        return
    
    # 创建并启动监控线程
    _monitor_thread = threading.Thread(
        target=_run_monitor_in_thread,
        daemon=True  # 守护线程，主程序退出时自动退出
    )
    _monitor_thread.start()
    
    # 注册退出处理函数
    atexit.register(cleanup_on_exit)
    
    print("文件监控服务已在项目启动时初始化")


@method cleanup_on_exit():
    """在程序退出时清理资源"""
    if is_monitor_running():
        print("正在停止文件监控服务...")
        stop_monitor_service()
        print("文件监控服务已停止")


@method install_startup_hook():
    """
    安装启动钩子到项目
    
    可以在项目的主入口文件（如app.py, main.py等）中调用此函数
    """
    # 此函数只需要在项目入口处调用，会自动启动监控服务
    start_monitor_on_startup()
    print("已安装文件监控启动钩子")


if __name__ == "__main__":
    # 如果直接运行此脚本，则安装启动钩子并启动监控服务
    print("正在初始化文件监控服务...")
    start_monitor_on_startup()
    
    # 保持主程序运行
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n程序退出...")
        sys.exit(0) 

"""

"""
量子基因编码: QE-STA-D90AD8866261
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
"""

// 开发团队：中华 ZhoHo ，Claude 
>>>>>>> c8ee4fc6e39ad3985ce941a8efbcb072b6ba0eea


# 量子基因编码
QG-CODE-REF-STARTUP-A7N6


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.99
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]
