#!/usr/bin/env qentl
# -*- coding: utf-8 -*-

"""
量子纠缠信道统计工具 - 计算项目中的量子纠缠信道数量和统计信息
"""

# 量子基因编码
QG-CODE-REF-COUNT-J5P6


# 量子纠缠信道
@quantum_entangle
  channel_id: QE-CODE-REF-20250413
  state: ACTIVE
  strength: 0.98
  objects: [
    "QSM/api/qsm_api.qpy"
    "world/templates/base.qentl"
  ]



@imports
  standard: [json]
  standard: [os]
  standard: [collections]



@method count_channels():
    # 读取量子纠缠注册表
    registry_path = "Ref/data/quantum_entanglement_registry.json"
    if not os.path.exists(registry_path):
        print("量子纠缠注册表不存在")
        return
    
    with open(registry_path, 'r', encoding='utf-8') as f:
        try:
            data = json.load(f)
        except json.JSONDecodeError as e:
            print(f"解析JSON失败: {e}")
            return
    
    channels = data.get("channels", {})
    channel_count = len(channels)
    
    # 统计信道类型
    channel_types = collections.Counter()
    for channel_id, channel_info in channels.items():
        channel_type = channel_info.get("channel_type", "未知")
        channel_types[channel_type] += 1
    
    # 统计基因来源
    gene_sources = set()
    gene_targets = set()
    for channel_id, channel_info in channels.items():
        gene_sources.add(channel_info.get("source_gene", ""))
        gene_targets.add(channel_info.get("target_gene", ""))
    
    unique_genes = gene_sources.union(gene_targets)
    
    # 打印统计结果
    print("\n==== 量子纠缠信道统计 ====")
    print(f"总信道数: {channel_count}个")
    print("\n信道类型分布:")
    for channel_type, count in channel_types.items():
        print(f"  - {channel_type}: {count}个")
    
    print(f"\n参与纠缠的不同量子基因: {len(unique_genes)}个")
    
    # 计算网络密度
    if len(unique_genes) > 1:
        max_possible_channels = len(unique_genes) * (len(unique_genes) - 1) / 2
        network_density = channel_count / max_possible_channels
        print(f"\n网络密度: {network_density:.4f} (实际信道数/理论最大信道数)")
    
    # 检查网络连通性
    print(f"\n网络状态: {'已激活' if channel_count > 0 else '未激活'}")
    
    # 读取网络日志
    log_path = "Ref/logs/quantum_network_log.json"
    if os.path.exists(log_path):
        with open(log_path, 'r', encoding='utf-8') as f:
            try:
                log_data = json.load(f)
                build_time = log_data.get("network_build_time", "")
                if build_time:
                    print(f"\n网络构建时间: {build_time}")
                key_files_count = log_data.get("key_files_count", 0)
                print(f"关键文件数量: {key_files_count}个")
            except json.JSONDecodeError:
                pass
    
    print("\n==========================")

if __name__ == "__main__":
    count_channels() 

"""

"""
量子基因编码: QE-COU-0CF5C75C6B12
纠缠状态: 活跃
纠缠对象: ['Ref/ref_core.py']
纠缠强度: 0.98
"""
"""

// 开发团队：中华 ZhoHo ，Claude 
