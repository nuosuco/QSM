/*
 * QSM启动脚本
 * 启动量子叠加态模型系统
 * 版本: 1.0.0
 * 作者: 中华 ZhoHo, Claude
 * 日期: 2025-05-30
 */

// 量子基因编码
// QG-STARTER-QSM-A1D2

// 量子纠缠信道
/*
信道标识: QE-STARTER-QSM-20250530
纠缠态: 活跃
纠缠对象: [
  "QSM/config/qsm_config.qent"
]
纠缠强度: 0.95
*/

import { QSMConfig } from './config/qsm_config.qent';
import { QuantumState } from './models/quantum_state.qent';
import { EntanglementNetwork } from './models/entanglement_network.qent';

/**
 * QSM系统控制器
 */
class QSMController {
  // 系统状态
  private isRunning: boolean;
  private startTime: number;
  private config: typeof QSMConfig;
  private mainNetwork: EntanglementNetwork;
  
  /**
   * 构造函数
   */
  constructor() {
    this.isRunning = false;
    this.startTime = 0;
    this.config = QSMConfig;
    this.mainNetwork = null;
    
    // 绑定方法
    this.start = this.start.bind(this);
    this.stop = this.stop.bind(this);
    this.getStatus = this.getStatus.bind(this);
  }
  
  /**
   * 启动QSM系统
   */
  public start(): void {
    if (this.isRunning) {
      console.log("QSM系统已经在运行中");
      return;
    }
    
    console.log("正在启动QSM系统...");
    
    try {
      // 初始化系统
      this.initialize();
      
      // 标记系统为运行状态
      this.isRunning = true;
      this.startTime = Date.now();
      
      console.log(`QSM系统启动成功，版本: ${this.config.core.version}`);
      console.log(`量子比特数: ${this.config.core.defaultQuantumBits}`);
      console.log(`运行模式: ${this.config.core.debugMode ? '调试' : '生产'}`);
      
      // 显示启用的模块
      this.logEnabledModules();
      
    } catch (error) {
      console.error("QSM系统启动失败:", error);
      this.isRunning = false;
    }
  }
  
  /**
   * 停止QSM系统
   */
  public stop(): void {
    if (!this.isRunning) {
      console.log("QSM系统未在运行");
      return;
    }
    
    console.log("正在停止QSM系统...");
    
    try {
      // 执行清理操作
      this.cleanup();
      
      // 标记系统为停止状态
      this.isRunning = false;
      
      console.log("QSM系统已停止");
      
    } catch (error) {
      console.error("QSM系统停止失败:", error);
    }
  }
  
  /**
   * 获取系统状态
   */
  public getStatus(): object {
    const uptime = this.isRunning ? (Date.now() - this.startTime) : 0;
    
    return {
      isRunning: this.isRunning,
      version: this.config.core.version,
      startTime: this.startTime,
      uptime: uptime,
      quantumBits: this.config.core.defaultQuantumBits,
      debugMode: this.config.core.debugMode,
      enabledModules: {
        fiveSkandhas: this.config.fiveSkandhas.enabled,
        learning: this.config.learning.enabled,
        quantumBlockchain: this.config.quantumBlockchain.enabled,
        integration: {
          som: this.config.integration.som.enabled,
          weq: this.config.integration.weq.enabled,
          ref: this.config.integration.ref.enabled
        }
      }
    };
  }
  
  /**
   * 初始化系统
   * @private
   */
  private initialize(): void {
    console.log("正在初始化QSM系统...");
    
    // 创建主量子纠缠网络
    this.mainNetwork = new EntanglementNetwork("QSM-MAIN-NETWORK");
    
    // 创建初始量子状态
    this.createInitialQuantumStates();
    
    // 初始化五阴模块
    if (this.config.fiveSkandhas.enabled) {
      this.initializeFiveSkandhas();
    }
    
    // 初始化学习系统
    if (this.config.learning.enabled) {
      this.initializeLearningSystem();
    }
    
    // 初始化量子区块链
    if (this.config.quantumBlockchain.enabled) {
      this.initializeQuantumBlockchain();
    }
    
    // 初始化模型集成
    this.initializeModelIntegration();
    
    console.log("QSM系统初始化完成");
  }
  
  /**
   * 创建初始量子状态
   * @private
   */
  private createInitialQuantumStates(): void {
    console.log("正在创建初始量子状态...");
    
    // 创建系统核心状态
    const coreState = new QuantumState("qsm-core-state", "system");
    coreState.addSuperposition("active", new ComplexNumber(1, 0));
    coreState.attachQuantumGene("QG-SYS-CORE");
    
    // 将核心状态添加到网络
    this.mainNetwork.addQuantumState(coreState, { 
      role: "core", 
      criticality: "essential" 
    });
    
    console.log("初始量子状态创建完成");
  }
  
  /**
   * 初始化五阴模块
   * @private
   */
  private initializeFiveSkandhas(): void {
    console.log("正在初始化五阴模块...");
    
    // 在真实实现中，这里会加载和初始化五个五阴模块的代码
    console.log("五阴模块初始化完成");
  }
  
  /**
   * 初始化学习系统
   * @private
   */
  private initializeLearningSystem(): void {
    console.log("正在初始化学习系统...");
    
    // 在真实实现中，这里会初始化学习系统
    console.log("学习系统初始化完成");
  }
  
  /**
   * 初始化量子区块链
   * @private
   */
  private initializeQuantumBlockchain(): void {
    console.log("正在初始化量子区块链...");
    
    // 在真实实现中，这里会初始化量子区块链
    console.log("量子区块链初始化完成");
  }
  
  /**
   * 初始化模型集成
   * @private
   */
  private initializeModelIntegration(): void {
    console.log("正在初始化模型集成...");
    
    // 初始化SOM集成
    if (this.config.integration.som.enabled) {
      console.log("SOM模型集成已启用");
    }
    
    // 初始化WeQ集成
    if (this.config.integration.weq.enabled) {
      console.log("WeQ模型集成已启用");
    }
    
    // 初始化Ref集成
    if (this.config.integration.ref.enabled) {
      console.log("Ref模型集成已启用");
    }
    
    console.log("模型集成初始化完成");
  }
  
  /**
   * 系统清理
   * @private
   */
  private cleanup(): void {
    console.log("正在清理系统资源...");
    
    // 保存状态
    this.saveSystemState();
    
    // 关闭连接
    this.closeConnections();
    
    console.log("系统资源清理完成");
  }
  
  /**
   * 保存系统状态
   * @private
   */
  private saveSystemState(): void {
    console.log("正在保存系统状态...");
    
    // 在真实实现中，这里会保存系统状态到持久化存储
    
    console.log("系统状态已保存");
  }
  
  /**
   * 关闭连接
   * @private
   */
  private closeConnections(): void {
    console.log("正在关闭连接...");
    
    // 在真实实现中，这里会关闭各种网络连接和资源
    
    console.log("连接已关闭");
  }
  
  /**
   * 记录启用的模块
   * @private
   */
  private logEnabledModules(): void {
    console.log("\n已启用的模块:");
    console.log("---------------------------");
    
    if (this.config.fiveSkandhas.enabled) {
      console.log("✓ 五阴模块");
    } else {
      console.log("✗ 五阴模块 (未启用)");
    }
    
    if (this.config.learning.enabled) {
      console.log("✓ 学习系统");
      
      const enabledModes = this.config.learning.enabledModes;
      if (enabledModes.claudeTeaching) console.log("  - Claude教学模式");
      if (enabledModes.webCrawler) console.log("  - 网络爬虫学习模式");
      if (enabledModes.qsmKnowledge) console.log("  - QSM知识学习模式");
      if (enabledModes.domainKnowledge) console.log("  - 专业领域知识学习模式");
    } else {
      console.log("✗ 学习系统 (未启用)");
    }
    
    if (this.config.quantumBlockchain.enabled) {
      console.log("✓ 量子区块链");
    } else {
      console.log("✗ 量子区块链 (未启用)");
    }
    
    console.log("\n模型集成状态:");
    console.log("---------------------------");
    
    if (this.config.integration.som.enabled) {
      console.log("✓ SOM模型集成");
    } else {
      console.log("✗ SOM模型集成 (未启用)");
    }
    
    if (this.config.integration.weq.enabled) {
      console.log("✓ WeQ模型集成");
    } else {
      console.log("✗ WeQ模型集成 (未启用)");
    }
    
    if (this.config.integration.ref.enabled) {
      console.log("✓ Ref模型集成");
    } else {
      console.log("✗ Ref模型集成 (未启用)");
    }
    
    console.log("---------------------------\n");
  }
}

// 创建QSM控制器实例
const controller = new QSMController();

// 导出控制器，使其可以从其他模块访问
export { controller as QSMController };

// 如果直接运行此脚本，启动QSM系统
if (typeof require !== 'undefined' && require.main === module) {
  controller.start();
  
  // 注册进程退出事件处理器
  process.on('SIGINT', () => {
    console.log("\n接收到终止信号，正在关闭QSM系统...");
    controller.stop();
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.log("\n接收到终止信号，正在关闭QSM系统...");
    controller.stop();
    process.exit(0);
  });
  
  console.log("\nQSM系统正在运行中。按 Ctrl+C 停止。");
} 